{"version":3,"file":"background.js","mappings":"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AU,QAAS,OAAQ,MAEzD,GAAAC,gBAA4B,CAAC,UAAW,eAAgB,UAExD,GAAAC,yBAAqC,IAChDL,GAAkBI,gBACrB,mBAGc,GAAAE,2BAAuC,CACrD,SACA,OACA,SACA,QACA,QACA,UAGc,GAAAC,sBAAkC,CAChD,QACA,cACGP,GAAkBM,4BAGP,GAAAE,qBAAiC,CAC/C,cACGR,GAAkBO,uBAIlB,MAAME,IACK,GAAAC,eAA2B,CACzC,mBACA,cACA,WACA,SACA,YACA,cACA,aACA,YACA,gBAGc,GAAAC,uBAAmC,IAC9CF,GAA4BC,eAC/B,eAGc,GAAAE,qBAAiC,CAC/C,UACA,YACA,kBACA,aACA,OACA,OAGc,GAAAC,0BAAsC,CACpD,UACA,YACA,kBACA,aACA,UAGc,GAAAC,qBAAiC,CAC/C,YACA,SACA,cACA,WACA,SACA,KACA,QACA,UACA,cACA,eACA,QACA,eACA,YACA,SACA,YAGc,GAAAC,0BAAsC,CACpD,YACA,SACA,cACA,WACA,QACA,UACA,eACA,YACA,UAGc,GAAAC,qBAAiC,CAC/C,SACA,WACA,gBACA,kBACA,QACA,UACA,cACA,cACA,WACA,aACA,SACA,QACA,UACA,QACA,UACA,kBACA,0BACA,mBAGc,GAAAC,0BAAsC,CACpD,QACA,UACA,QACA,UACA,kBACA,2BAGc,GAAAC,sBAAkC,CAChD,YACA,eACA,WACA,aACA,QACA,UACA,SACA,cACA,YACA,wBACA,mBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,eACA,YACA,eACA,YACA,oBACA,iBACA,oBACA,iBACA,gBACA,kBACA,aACA,eACA,0BACA,wBACA,qBACA,UACA,cACA,cACA,eACA,UAGc,GAAAC,qBAAiC,CAC/C,WACA,cACA,UACA,YACA,QACA,UACA,SACA,cACA,YACA,uBACA,kBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,UACA,YACA,gBACA,cACA,cACA,YACA,cACA,YACA,mBACA,iBACA,mBACA,iBACA,cACA,gBACA,iBACA,mBACA,yBACA,uBACA,cA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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/create fake namespace object","webpack:///../../libs/common/src/auth/enums/authentication-type.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/token-two-factor.request.ts","webpack:///../../libs/common/src/platform/misc/utils.ts","webpack:///../../libs/common/src/auth/services/webauthn-login/request/webauthn-login-response.request.ts","webpack:///../../libs/common/src/auth/services/webauthn-login/request/webauthn-login-assertion-response.request.ts","webpack:///../../libs/common/src/platform/enums/encryption-type.enum.ts","webpack:///../../libs/common/src/platform/enums/file-upload-type.enum.ts","webpack:///../../libs/common/src/platform/enums/hash-purpose.enum.ts","webpack:///../../libs/common/src/platform/enums/html-storage-location.enum.ts","webpack:///../../libs/common/src/platform/enums/kdf-type.enum.ts","webpack:///../../libs/common/src/auth/models/domain/kdf-config.ts","webpack:///../../libs/common/src/platform/misc/range-with-default.ts","webpack:///../../libs/common/src/platform/enums/key-suffix-options.enum.ts","webpack:///../../libs/common/src/platform/enums/log-level-type.enum.ts","webpack:///../../libs/common/src/platform/enums/storage-location.enum.ts","webpack:///../../libs/common/src/platform/enums/theme-type.enum.ts","webpack:///../../libs/common/src/platform/models/domain/symmetric-crypto-key.ts","webpack:///../../libs/auth/src/common/models/domain/login-credentials.ts","webpack:///../../libs/auth/src/common/models/domain/user-decryption-options.ts","webpack:///../../libs/common/src/platform/models/domain/enc-string.ts","webpack:///../../libs/auth/src/common/services/pin-crypto/pin-crypto.service.implementation.ts","webpack:///../../libs/common/src/auth/models/request/passwordless-auth.request.ts","webpack:///../../libs/common/src/models/request/prelogin.request.ts","webpack:///../../libs/common/src/models/response/base.response.ts","webpack:///../../libs/common/src/models/response/error.response.ts","webpack:///../../libs/common/src/auth/enums/two-factor-provider-type.ts","webpack:///../../libs/common/src/auth/models/domain/force-set-password-reason.ts","webpack:///../../libs/common/src/enums/client-type.enum.ts","webpack:///../../libs/common/src/enums/device-type.enum.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/device.request.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/token.request.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/password-token.request.ts","webpack:///../../libs/common/src/auth/models/domain/auth-result.ts","webpack:///../../libs/common/src/auth/models/response/identity-captcha.response.ts","webpack:///../../libs/common/src/auth/models/response/master-password-policy.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/key-connector-user-decryption-option.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/trusted-device-user-decryption-option.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/webauthn-prf-decryption-option.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/user-decryption-options.response.ts","webpack:///../../libs/common/src/auth/models/response/identity-token.response.ts","webpack:///../../libs/common/src/auth/models/response/identity-two-factor.response.ts","webpack:///../../libs/common/src/enums/event-system-user.enum.ts","webpack:///../../libs/common/src/enums/event-type.enum.ts","webpack:///../../libs/common/src/enums/http-status-code.enum.ts","webpack:///../../libs/common/src/enums/native-messaging-version.enum.ts","webpack:///../../libs/common/src/enums/notification-type.enum.ts","webpack:///../../libs/common/src/enums/product-type.enum.ts","webpack:///../../libs/common/src/platform/services/cryptography/initializer-key.ts","webpack:///../../libs/common/src/vault/enums/cipher-reprompt-type.ts","webpack:///../../libs/common/src/vault/enums/cipher-type.ts","webpack:///../../libs/common/src/vault/enums/field-type.enum.ts","webpack:///../../libs/common/src/vault/enums/linked-id-type.enum.ts","webpack:///../../libs/common/src/vault/enums/secure-note-type.enum.ts","webpack:///../../libs/common/src/models/request/keys.request.ts","webpack:///../../libs/common/src/auth/models/domain/admin-auth-req-storable.ts","webpack:///../../libs/common/src/vault/models/view/attachment.view.ts","webpack:///../../libs/common/src/vault/linked-field-option.decorator.ts","webpack:///../../libs/common/src/vault/models/view/item.view.ts","webpack:///../../libs/common/src/vault/models/view/card.view.ts","webpack:///../../libs/common/src/vault/models/view/field.view.ts","webpack:///../../libs/common/src/vault/models/view/identity.view.ts","webpack:///../../libs/common/src/vault/models/view/fido2-credential.view.ts","webpack:///../../libs/common/src/models/domain/domain-service.ts","webpack:///../../libs/common/src/platform/misc/safe-urls.ts","webpack:///../../libs/common/src/vault/models/view/login-uri.view.ts","webpack:///../../libs/common/src/vault/models/view/login.view.ts","webpack:///../../libs/common/src/vault/models/view/password-history.view.ts","webpack:///../../libs/common/src/vault/models/view/secure-note.view.ts","webpack:///../../libs/common/src/vault/models/view/cipher.view.ts","webpack:///../../libs/common/src/platform/models/data/server-config.data.ts","webpack:///../../libs/common/src/platform/models/domain/account.ts","webpack:///../../libs/auth/src/common/login-strategies/login.strategy.ts","webpack:///../../libs/auth/src/common/login-strategies/auth-request-login.strategy.ts","webpack:///../../libs/common/src/platform/models/domain/domain-base.ts","webpack:///../../libs/common/src/admin-console/models/domain/master-password-policy-options.ts","webpack:///../../libs/auth/src/common/login-strategies/password-login.strategy.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/sso-token.request.ts","webpack:///../../libs/auth/src/common/login-strategies/sso-login.strategy.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/user-api-token.request.ts","webpack:///../../libs/auth/src/common/login-strategies/user-api-login.strategy.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/webauthn-login-token.request.ts","webpack:///../../libs/auth/src/common/login-strategies/webauthn-login.strategy.ts","webpack:///../../libs/common/src/platform/state/derive-definition.ts","webpack:///../../libs/common/src/platform/state/state.provider.ts","webpack:///../../libs/common/src/platform/state/deserialization-helpers.ts","webpack:///../../libs/common/src/platform/state/key-definition.ts","webpack:///../../libs/common/src/platform/state/user-key-definition.ts","webpack:///../../libs/common/src/platform/state/state-definition.ts","webpack:///../../libs/common/src/platform/state/state-definitions.ts","webpack:///../../libs/common/src/platform/state/state-event-registrar.service.ts","webpack:///../../libs/common/src/platform/state/state-event-runner.service.ts","webpack:///../../libs/auth/src/common/services/login-strategies/login-strategy.state.ts","webpack:///../../libs/auth/src/common/services/login-strategies/login-strategy.service.ts","webpack:///../../libs/auth/src/common/services/user-decryption-options/user-decryption-options.service.ts","webpack:///../../libs/common/src/admin-console/enums/organization-api-key-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/organization-connection-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/organization-user-status-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/organization-user-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/policy-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/provider-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/provider-user-status-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/provider-user-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/scim-provider-type.enum.ts","webpack:///../../libs/auth/src/common/services/auth-request/auth-request.service.ts","webpack:///../../libs/common/src/admin-console/models/data/organization.data.ts","webpack:///../../libs/common/src/admin-console/models/domain/organization.ts","webpack:///../../libs/common/src/admin-console/services/organization/organization.service.ts","webpack:///../../libs/common/src/models/response/list.response.ts","webpack:///../../libs/common/src/admin-console/models/data/policy.data.ts","webpack:///../../libs/common/src/admin-console/models/domain/policy.ts","webpack:///../../libs/common/src/admin-console/models/response/policy.response.ts","webpack:///../../libs/common/src/admin-console/services/policy/policy-api.service.ts","webpack:///../../libs/common/src/admin-console/models/domain/reset-password-policy-options.ts","webpack:///../../libs/common/src/admin-console/services/policy/policy.service.ts","webpack:///../../libs/common/src/admin-console/models/domain/provider.ts","webpack:///../../libs/common/src/admin-console/services/provider.service.ts","webpack:///../../libs/common/src/auth/enums/authentication-status.ts","webpack:///../../libs/common/src/auth/abstractions/account.service.ts","webpack:///../../libs/common/src/auth/services/account.service.ts","webpack:///../../libs/common/src/auth/services/auth.service.ts","webpack:///../../libs/common/src/models/request/update-avatar.request.ts","webpack:///../../libs/common/src/auth/services/avatar.service.ts","webpack:///../../libs/common/src/auth/models/request/secret-verification.request.ts","webpack:///../../libs/common/src/auth/models/request/update-devices-trust.request.ts","webpack:///../../libs/common/src/auth/services/device-trust-crypto.service.implementation.ts","webpack:///../../libs/common/src/auth/abstractions/devices/views/device.view.ts","webpack:///../../libs/common/src/auth/services/devices/devices.service.implementation.ts","webpack:///../../libs/common/src/auth/abstractions/devices/responses/device.response.ts","webpack:///../../libs/common/src/auth/models/response/protected-device.response.ts","webpack:///../../libs/common/src/auth/services/devices/requests/trusted-device-keys.request.ts","webpack:///../../libs/common/src/auth/services/devices-api.service.implementation.ts","webpack:///../../libs/common/src/auth/models/request/key-connector-user-key.request.ts","webpack:///../../libs/common/src/auth/models/request/set-key-connector-key.request.ts","webpack:///../../libs/common/src/auth/services/key-connector.service.ts","webpack:///../../libs/common/src/auth/services/sso-login.service.ts","webpack:///../../libs/common/src/enums/vault-timeout-action.enum.ts","webpack:///../../libs/common/src/auth/services/token.state.ts","webpack:///../../libs/common/src/auth/services/token.service.ts","webpack:///../../libs/auth/src/common/utilities/decode-jwt-token-to-json.utility.ts","webpack:///../../libs/common/src/auth/services/two-factor.service.ts","webpack:///../../libs/common/src/auth/enums/verification-type.ts","webpack:///../../libs/common/src/auth/services/user-verification/user-verification-api.service.ts","webpack:///../../libs/common/src/auth/models/request/verify-otp.request.ts","webpack:///../../libs/common/src/auth/services/user-verification/user-verification.service.ts","webpack:///../../libs/common/src/auth/types/verification.ts","webpack:///../../libs/common/src/autofill/constants/index.ts","webpack:///../../libs/common/src/autofill/services/autofill-settings.service.ts","webpack:///../../libs/common/src/autofill/services/badge-settings.service.ts","webpack:///../../libs/common/src/autofill/services/domain-settings.service.ts","webpack:///../../libs/common/src/autofill/services/user-notification-settings.service.ts","webpack:///../../libs/common/src/billing/services/account/billing-account-profile-state.service.ts","webpack:///../../libs/common/src/platform/abstractions/messaging.service.ts","webpack:///../../libs/common/src/platform/biometrics/biometric.state.ts","webpack:///../../libs/common/src/platform/biometrics/biometric-state.service.ts","webpack:///../../libs/common/src/platform/factories/account-factory.ts","webpack:///../../libs/common/src/platform/factories/global-state-factory.ts","webpack:///../../libs/common/src/platform/factories/state-factory.ts","webpack:///../../libs/common/src/platform/models/domain/global-state.ts","webpack:///../../libs/common/src/platform/services/app-id.service.ts","webpack:///../../libs/common/src/platform/models/response/server-config.response.ts","webpack:///../../libs/common/src/platform/services/config/config-api.service.ts","webpack:///../../libs/common/src/platform/services/console-log.service.ts","webpack:///../../libs/common/src/platform/services/container.service.ts","webpack:///../../libs/common/src/platform/models/domain/enc-array-buffer.ts","webpack:///../../libs/common/src/platform/models/domain/encrypted-object.ts","webpack:///../../libs/common/src/platform/services/cryptography/encrypt.service.implementation.ts","webpack:///../../libs/common/src/vault/models/data/attachment.data.ts","webpack:///../../libs/common/src/vault/models/data/card.data.ts","webpack:///../../libs/common/src/vault/models/data/field.data.ts","webpack:///../../libs/common/src/vault/models/data/identity.data.ts","webpack:///../../libs/common/src/vault/models/data/fido2-credential.data.ts","webpack:///../../libs/common/src/vault/models/data/login-uri.data.ts","webpack:///../../libs/common/src/vault/models/data/login.data.ts","webpack:///../../libs/common/src/vault/models/data/password-history.data.ts","webpack:///../../libs/common/src/vault/models/data/secure-note.data.ts","webpack:///../../libs/common/src/vault/models/data/cipher.data.ts","webpack:///../../libs/common/src/vault/models/domain/attachment.ts","webpack:///../../libs/common/src/vault/models/domain/card.ts","webpack:///../../libs/common/src/vault/models/domain/field.ts","webpack:///../../libs/common/src/vault/models/domain/identity.ts","webpack:///../../libs/common/src/vault/models/domain/fido2-credential.ts","webpack:///../../libs/common/src/vault/models/domain/login-uri.ts","webpack:///../../libs/common/src/vault/models/domain/login.ts","webpack:///../../libs/common/src/vault/models/domain/password.ts","webpack:///../../libs/common/src/vault/models/domain/secure-note.ts","webpack:///../../libs/common/src/vault/models/domain/cipher.ts","webpack:///../../libs/common/src/platform/services/cryptography/get-class-initializer.ts","webpack:///../../libs/common/src/platform/services/cryptography/multithread-encrypt.service.implementation.ts","webpack:///../../libs/common/src/platform/services/file-upload/azure-file-upload.service.ts","webpack:///../../libs/common/src/platform/services/file-upload/bitwarden-file-upload.service.ts","webpack:///../../libs/common/src/platform/services/file-upload/file-upload.service.ts","webpack:///../../libs/common/src/platform/services/key-generation.service.ts","webpack:///../../libs/common/src/platform/abstractions/storage.service.ts","webpack:///../../libs/common/src/platform/services/memory-storage.service.ts","webpack:///../../libs/common/src/state-migrations/migration-builder.ts","webpack:///../../libs/common/src/state-migrations/migrator.ts","webpack:///../../libs/common/src/state-migrations/migrations/10-move-ever-had-user-key-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/11-move-org-keys-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/12-move-environment-state-to-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/13-move-provider-keys-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/14-move-biometric-client-key-half-state-to-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/15-move-folder-state-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/16-move-last-sync-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/17-move-enable-passkeys-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/18-move-autofill-settings-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/19-migrate-require-password-on-start.ts","webpack:///../../libs/common/src/state-migrations/migrations/20-move-private-key-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/21-move-collections-state-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/22-move-collapsed-groupings-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/23-move-biometric-prompts-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/24-move-sm-onboarding-key-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/25-move-clear-clipboard-to-autofill-settings-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/26-revert-move-last-sync-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/27-move-badge-settings-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/28-move-biometric-unlock-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/29-move-user-notification-settings-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/30-move-policy-state-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/31-move-enable-context-menu-to-autofill-settings-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/32-move-preferred-language.ts","webpack:///../../libs/common/src/state-migrations/migrations/33-move-app-id-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/34-move-domain-settings-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/35-move-theme-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/36-move-show-card-and-identity-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/37-move-avatar-color-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/38-migrate-token-svc-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/39-move-billing-account-profile-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/4-remove-ever-been-unlocked.ts","webpack:///../../libs/common/src/state-migrations/migrations/40-move-organization-state-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/41-move-event-collection-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/42-move-enable-favicon-to-domain-settings-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/43-move-auto-confirm-finger-prints-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/44-move-user-decryption-options-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/45-merge-environment-state.ts","webpack:///../../libs/common/src/state-migrations/migrations/46-delete-orphaned-biometric-prompt-data.ts","webpack:///../../libs/common/src/state-migrations/migrations/47-move-desktop-settings.ts","webpack:///../../libs/common/src/state-migrations/migrations/48-move-ddg-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/5-add-key-type-to-org-keys.ts","webpack:///../../libs/common/src/state-migrations/migrations/6-remove-legacy-etm-key.ts","webpack:///../../libs/common/src/state-migrations/migrations/7-move-biometric-auto-prompt-to-account.ts","webpack:///../../libs/common/src/state-migrations/migrations/8-move-state-version.ts","webpack:///../../libs/common/src/state-migrations/migrations/9-move-browser-settings-to-global.ts","webpack:///../../libs/common/src/state-migrations/migrations/min-version.ts","webpack:///../../libs/common/src/state-migrations/migrate.ts","webpack:///../../libs/common/src/platform/services/migration-builder.service.ts","webpack:///../../libs/common/src/state-migrations/migration-helper.ts","webpack:///../../libs/common/src/platform/services/migration-runner.ts","webpack:///../../libs/common/src/platform/services/storage-service.provider.ts","webpack:///../../libs/common/src/platform/services/system.service.ts","webpack:///../../libs/common/src/platform/models/domain/decrypt-parameters.ts","webpack:///../../libs/common/src/platform/services/web-crypto-function.service.ts","webpack:///../../libs/common/src/platform/state/user-state.ts","webpack:///../../libs/common/src/platform/state/implementations/default-active-user-state.ts","webpack:///../../libs/common/src/platform/state/implementations/default-active-user-state.provider.ts","webpack:///../../libs/common/src/platform/state/state-update-options.ts","webpack:///../../libs/common/src/platform/state/implementations/util.ts","webpack:///../../libs/common/src/platform/state/implementations/state-base.ts","webpack:///../../libs/common/src/platform/state/implementations/default-global-state.ts","webpack:///../../libs/common/src/platform/state/implementations/default-global-state.provider.ts","webpack:///../../libs/common/src/platform/state/implementations/default-single-user-state.ts","webpack:///../../libs/common/src/platform/state/implementations/default-single-user-state.provider.ts","webpack:///../../libs/common/src/platform/state/implementations/default-state.provider.ts","webpack:///../../libs/common/src/platform/theming/theme-state.service.ts","webpack:///../../libs/common/src/admin-console/models/response/organization-connection.response.ts","webpack:///../../libs/common/src/vault/models/api/card.api.ts","webpack:///../../libs/common/src/vault/models/api/field.api.ts","webpack:///../../libs/common/src/vault/models/api/identity.api.ts","webpack:///../../libs/common/src/vault/models/api/fido2-credential.api.ts","webpack:///../../libs/common/src/vault/models/api/login-uri.api.ts","webpack:///../../libs/common/src/vault/models/api/login.api.ts","webpack:///../../libs/common/src/vault/models/api/secure-note.api.ts","webpack:///../../libs/common/src/vault/models/response/attachment.response.ts","webpack:///../../libs/common/src/vault/models/response/password-history.response.ts","webpack:///../../libs/common/src/vault/models/response/cipher.response.ts","webpack:///../../libs/common/src/admin-console/models/response/selection-read-only.response.ts","webpack:///../../libs/common/src/vault/models/response/collection.response.ts","webpack:///../../libs/common/src/admin-console/models/response/organization-export.response.ts","webpack:///../../libs/common/src/admin-console/models/response/organization-sponsorship-sync-status.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-organization.response.ts","webpack:///../../libs/common/src/admin-console/abstractions/organization-user/responses/organization-user-bulk-public-key.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-user-bulk-public-key.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-user-bulk.response.ts","webpack:///../../libs/common/src/admin-console/models/api/permissions.api.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-user.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider.response.ts","webpack:///../../libs/common/src/auth/models/response/api-key.response.ts","webpack:///../../libs/common/src/auth/models/response/auth-request.response.ts","webpack:///../../libs/common/src/auth/models/response/device-verification.response.ts","webpack:///../../libs/common/src/auth/models/response/key-connector-user-key.response.ts","webpack:///../../libs/common/src/auth/models/response/prelogin.response.ts","webpack:///../../libs/common/src/auth/models/response/register.response.ts","webpack:///../../libs/common/src/auth/models/response/sso-pre-validate.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-authenticator.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-duo.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-email.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-provider.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-recover.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-web-authn.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-yubi-key.response.ts","webpack:///../../libs/common/src/billing/models/response/billing.response.ts","webpack:///../../libs/common/src/billing/models/response/billing-history.response.ts","webpack:///../../libs/common/src/billing/models/response/billing-payment.response.ts","webpack:///../../libs/common/src/admin-console/models/response/profile-organization.response.ts","webpack:///../../libs/common/src/admin-console/models/response/profile-provider-organization.response.ts","webpack:///../../libs/common/src/admin-console/models/response/profile-provider.response.ts","webpack:///../../libs/common/src/models/response/profile.response.ts","webpack:///../../libs/common/src/billing/models/response/payment.response.ts","webpack:///../../libs/common/src/billing/models/response/plan.response.ts","webpack:///../../libs/common/src/billing/models/response/subscription.response.ts","webpack:///../../libs/common/src/billing/models/response/tax-info.response.ts","webpack:///../../libs/common/src/billing/models/response/tax-rate.response.ts","webpack:///../../libs/common/src/models/request/collection-bulk-delete.request.ts","webpack:///../../libs/common/src/models/response/breach-account.response.ts","webpack:///../../libs/common/src/models/response/global-domain.response.ts","webpack:///../../libs/common/src/models/response/domains.response.ts","webpack:///../../libs/common/src/models/response/event.response.ts","webpack:///../../libs/common/src/models/response/user-key.response.ts","webpack:///../../libs/common/src/vault/models/response/attachment-upload-data.response.ts","webpack:///../../libs/common/src/tools/send/models/api/send-file.api.ts","webpack:///../../libs/common/src/tools/send/models/api/send-text.api.ts","webpack:///../../libs/common/src/tools/send/models/response/send.response.ts","webpack:///../../libs/common/src/vault/models/response/folder.response.ts","webpack:///../../libs/common/src/vault/models/response/sync.response.ts","webpack:///../../libs/common/src/services/api.service.ts","webpack:///../../libs/common/src/services/audit.service.ts","webpack:///../../libs/common/src/platform/misc/throttle.ts","webpack:///../../libs/common/src/models/data/event.data.ts","webpack:///../../libs/common/src/services/event/key-definitions.ts","webpack:///../../libs/common/src/services/event/event-collection.service.ts","webpack:///../../libs/common/src/models/request/event.request.ts","webpack:///../../libs/common/src/services/event/event-upload.service.ts","webpack:///../../libs/common/src/models/response/notification.response.ts","webpack:///../../libs/common/src/services/notifications.service.ts","webpack:///../../libs/common/src/services/search.service.ts","webpack:///../../libs/common/src/services/vault-timeout/vault-timeout-settings.service.ts","webpack:///../../libs/common/src/tools/generator/password/password-generator-options-evaluator.ts","webpack:///../../libs/common/src/tools/generator/password/password-generation-options.ts","webpack:///../../libs/common/src/tools/generator/key-definitions.ts","webpack:///../../libs/common/src/tools/generator/password/password-generator-policy.ts","webpack:///../../libs/common/src/admin-console/models/domain/password-generator-policy-options.ts","webpack:///../../libs/common/src/platform/misc/wordlist.ts","webpack:///../../libs/common/src/tools/generator/passphrase/passphrase-generation-options.ts","webpack:///../../libs/common/src/tools/generator/passphrase/passphrase-generator-options-evaluator.ts","webpack:///../../libs/common/src/tools/generator/password/generated-password-history.ts","webpack:///../../libs/common/src/tools/generator/password/password-generation.service.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/anon-addy-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/duck-duck-go-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/fastmail-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/firefox-relay-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/forwarder-options.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/simple-login-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/email-forwarders/forward-email-forwarder.ts","webpack:///../../libs/common/src/tools/generator/username/username-generation.service.ts","webpack:///../../libs/common/src/tools/send/enums/send-type.ts","webpack:///../../libs/common/src/tools/password-strength/password-strength.service.ts","webpack:///../../libs/common/src/tools/send/models/data/send-file.data.ts","webpack:///../../libs/common/src/tools/send/models/data/send-text.data.ts","webpack:///../../libs/common/src/tools/send/models/data/send.data.ts","webpack:///../../libs/common/src/tools/send/models/request/send.request.ts","webpack:///../../libs/common/src/tools/send/models/response/send-access.response.ts","webpack:///../../libs/common/src/tools/send/models/response/send-file-download-data.response.ts","webpack:///../../libs/common/src/tools/send/models/response/send-file-upload-data.response.ts","webpack:///../../libs/common/src/tools/send/services/send-api.service.ts","webpack:///../../libs/common/src/platform/misc/flags.ts","webpack:///../../libs/common/src/platform/misc/sequentialize.ts","webpack:///../../libs/common/src/vault/models/domain/sorted-ciphers-cache.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-delete.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-move.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-restore.request.ts","webpack:///../../libs/common/src/vault/models/request/attachment.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-with-id.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-share.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-update-collections.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-collections.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-create.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-partial.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-share.request.ts","webpack:///../../libs/common/src/vault/services/cipher.service.ts","webpack:///../../libs/common/src/vault/models/data/collection.data.ts","webpack:///../../libs/common/src/vault/models/view/collection.view.ts","webpack:///../../libs/common/src/vault/models/domain/collection.ts","webpack:///../../libs/common/src/vault/models/domain/tree-node.ts","webpack:///../../libs/common/src/vault/service-utils.ts","webpack:///../../libs/common/src/vault/services/collection.service.ts","webpack:///../../libs/common/src/vault/abstractions/fido2/fido2-authenticator.service.abstraction.ts","webpack:///../../libs/common/src/vault/services/fido2/cbor.ts","webpack:///../../libs/common/src/vault/services/fido2/ecdsa-utils.ts","webpack:///../../libs/common/src/vault/services/fido2/fido2-utils.ts","webpack:///../../libs/common/src/vault/services/fido2/guid-utils.ts","webpack:///../../libs/common/src/vault/services/fido2/fido2-authenticator.service.ts","webpack:///../../libs/common/src/vault/abstractions/fido2/fido2-client.service.abstraction.ts","webpack:///../../libs/common/src/vault/services/fido2/domain-utils.ts","webpack:///../../libs/common/src/vault/services/fido2/fido2-client.service.ts","webpack:///../../libs/common/src/vault/services/file-upload/cipher-file-upload.service.ts","webpack:///../../libs/common/src/vault/models/data/folder.data.ts","webpack:///../../libs/common/src/vault/models/request/folder.request.ts","webpack:///../../libs/common/src/vault/services/folder/folder-api.service.ts","webpack:///../../libs/common/src/vault/models/view/folder.view.ts","webpack:///../../libs/common/src/vault/models/domain/folder.ts","webpack:///../../libs/common/src/vault/services/key-state/folder.state.ts","webpack:///../../libs/common/src/vault/services/folder/folder.service.ts","webpack:///../../libs/common/src/vault/services/sync/sync-notifier.service.ts","webpack:///../../libs/common/src/admin-console/models/data/provider.data.ts","webpack:///../../libs/common/src/vault/services/sync/sync.service.ts","webpack:///../../libs/common/src/vault/services/totp.service.ts","webpack:///../../libs/common/src/vault/services/key-state/vault-settings.state.ts","webpack:///../../libs/common/src/vault/services/vault-settings/vault-settings.service.ts","webpack:///../../libs/importer/src/services/import-api.service.ts","webpack:///../../libs/common/src/models/request/import-ciphers.request.ts","webpack:///../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack:///../../libs/common/src/models/request/kvp.request.ts","webpack:///../../libs/common/src/vault/models/request/collection.request.ts","webpack:///../../libs/common/src/vault/models/request/collection-with-id.request.ts","webpack:///../../libs/common/src/vault/models/request/folder-with-id.request.ts","webpack:///../../libs/importer/src/models/import-result.ts","webpack:///../../libs/importer/src/importers/base-importer.ts","webpack:///../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack:///../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack:///../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack:///../../libs/importer/src/importers/avira-csv-importer.ts","webpack:///../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack:///../../libs/importer/src/importers/chrome-csv-importer.ts","webpack:///../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack:///../../libs/common/src/models/export/card.export.ts","webpack:///../../libs/common/src/models/export/field.export.ts","webpack:///../../libs/common/src/models/export/identity.export.ts","webpack:///../../libs/common/src/models/export/fido2-credential.export.ts","webpack:///../../libs/common/src/models/export/login-uri.export.ts","webpack:///../../libs/common/src/models/export/login.export.ts","webpack:///../../libs/common/src/models/export/password-history.export.ts","webpack:///../../libs/common/src/models/export/secure-note.export.ts","webpack:///../../libs/common/src/models/export/cipher.export.ts","webpack:///../../libs/common/src/models/export/cipher-with-ids.export.ts","webpack:///../../libs/common/src/models/export/collection.export.ts","webpack:///../../libs/common/src/models/export/collection-with-id.export.ts","webpack:///../../libs/common/src/models/export/folder.export.ts","webpack:///../../libs/common/src/models/export/folder-with-id.export.ts","webpack:///../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack:///../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack:///../../libs/importer/src/importers/blur-csv-importer.ts","webpack:///../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack:///../../libs/importer/src/importers/clipperz-html-importer.ts","webpack:///../../libs/importer/src/importers/codebook-csv-importer.ts","webpack:///../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack:///../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack:///../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack:///../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack:///../../libs/importer/src/importers/firefox-csv-importer.ts","webpack:///../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack:///../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack:///../../libs/importer/src/importers/gnome-json-importer.ts","webpack:///../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack:///../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack:///../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack:///../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack:///../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack:///../../libs/importer/src/importers/meldium-csv-importer.ts","webpack:///../../libs/importer/src/importers/msecure-csv-importer.ts","webpack:///../../libs/importer/src/importers/myki-csv-importer.ts","webpack:///../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack:///../../libs/importer/src/importers/padlock-csv-importer.ts","webpack:///../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack:///../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack:///../../libs/importer/src/importers/passman-json-importer.ts","webpack:///../../libs/importer/src/importers/passpack-csv-importer.ts","webpack:///../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack:///../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack:///../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack:///../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack:///../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack:///../../libs/importer/src/importers/protonpass/types/protonpass-json-type.ts","webpack:///../../libs/importer/src/importers/protonpass/protonpass-json-importer.ts","webpack:///../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack:///../../libs/importer/src/importers/remembear-csv-importer.ts","webpack:///../../libs/importer/src/importers/roboform-csv-importer.ts","webpack:///../../libs/importer/src/importers/safari-csv-importer.ts","webpack:///../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack:///../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack:///../../libs/importer/src/importers/splashid-csv-importer.ts","webpack:///../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack:///../../libs/importer/src/importers/truekey-csv-importer.ts","webpack:///../../libs/importer/src/importers/upm-csv-importer.ts","webpack:///../../libs/importer/src/importers/yoti-csv-importer.ts","webpack:///../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack:///../../libs/importer/src/models/import-options.ts","webpack:///../../libs/importer/src/services/import.service.ts","webpack:///../../libs/tools/export/vault-export/vault-export-core/src/services/export-helper.ts","webpack:///../../libs/tools/export/vault-export/vault-export-core/src/services/vault-export.service.ts","webpack:///../../libs/tools/export/vault-export/vault-export-core/src/services/base-vault-export.service.ts","webpack:///../../libs/tools/export/vault-export/vault-export-core/src/services/org-vault-export.service.ts","webpack:///../../libs/tools/export/vault-export/vault-export-core/src/services/individual-vault-export.service.ts","webpack:///./src/browser/safariApp.ts","webpack:///./src/platform/services/browser-clipboard.service.ts","webpack:///./src/platform/services/platform-utils/browser-platform-utils.service.ts","webpack:///./src/platform/browser/browser-api.ts","webpack:///./src/autofill/background/context-menus.background.ts","webpack:///./src/platform/popup/browser-popup-utils.ts","webpack:///./src/auth/popup/utils/auth-popout-window.ts","webpack:///./src/vault/popup/utils/vault-popout-window.ts","webpack:///./src/autofill/enums/notification-queue-message-type.enum.ts","webpack:///./src/autofill/background/notification.background.ts","webpack:///../../libs/common/src/vault/icon/build-cipher-icon.ts","webpack:///./src/autofill/utils/autofill-overlay.enum.ts","webpack:///./src/autofill/background/overlay.background.ts","webpack:///./src/autofill/background/tabs.background.ts","webpack:///./src/autofill/background/web-request.background.ts","webpack:///./src/platform/background/service-factories/factory-options.ts","webpack:///./src/platform/background/service-factories/log-service.factory.ts","webpack:///./src/platform/background/service-factories/crypto-function-service.factory.ts","webpack:///./src/platform/background/service-factories/encrypt-service.factory.ts","webpack:///./src/platform/services/abstractions/abstract-chrome-storage-api.service.ts","webpack:///./src/platform/browser/from-chrome-event.ts","webpack:///./src/platform/services/browser-local-storage.service.ts","webpack:///./src/platform/flags.ts","webpack:///./src/platform/services/browser-memory-storage.service.ts","webpack:///./src/platform/services/local-backed-session-storage.service.ts","webpack:///./src/platform/decorators/dev-flag.decorator.ts","webpack:///../../libs/common/src/platform/state/storage/memory-storage.service.ts","webpack:///./src/platform/storage/background-memory-storage.service.ts","webpack:///./src/platform/storage/port-name.ts","webpack:///./src/platform/background/service-factories/key-generation-service.factory.ts","webpack:///./src/platform/background/service-factories/storage-service.factory.ts","webpack:///./src/platform/background/service-factories/storage-service-provider.factory.ts","webpack:///./src/platform/background/service-factories/global-state-provider.factory.ts","webpack:///./src/platform/services/platform-utils/background-platform-utils.service.ts","webpack:///./src/platform/services/browser-messaging.service.ts","webpack:///./src/platform/background/service-factories/messaging-service.factory.ts","webpack:///./src/platform/background/service-factories/platform-utils-service.factory.ts","webpack:///./src/platform/background/service-factories/single-user-state-provider.factory.ts","webpack:///./src/platform/background/service-factories/state-event-registrar-service.factory.ts","webpack:///./src/auth/background/service-factories/token-service.factory.ts","webpack:///../../libs/common/src/platform/abstractions/environment.service.ts","webpack:///./src/auth/background/service-factories/account-service.factory.ts","webpack:///../../libs/common/src/platform/services/default-environment.service.ts","webpack:///./src/platform/services/browser-environment.service.ts","webpack:///../../libs/common/src/platform/state/implementations/default-derived-state.ts","webpack:///../../libs/common/src/platform/state/implementations/default-derived-state.provider.ts","webpack:///./src/platform/state/background-derived-state.ts","webpack:///./src/platform/state/background-derived-state.provider.ts","webpack:///./src/platform/background/service-factories/state-provider.factory.ts","webpack:///./src/platform/background/service-factories/active-user-state-provider.factory.ts","webpack:///./src/platform/background/service-factories/derived-state-provider.factory.ts","webpack:///./src/platform/background/service-factories/environment-service.factory.ts","webpack:///../../libs/common/src/platform/abstractions/log.service.ts","webpack:///../../libs/common/src/tools/send/models/view/send-file.view.ts","webpack:///../../libs/common/src/tools/send/models/view/send-text.view.ts","webpack:///../../libs/common/src/tools/send/models/view/send.view.ts","webpack:///../../libs/common/src/platform/models/domain/state.ts","webpack:///../../libs/common/src/platform/services/state.service.ts","webpack:///./src/models/browserComponentState.ts","webpack:///./src/models/browserGroupingsComponentState.ts","webpack:///./src/models/browserSendComponentState.ts","webpack:///./src/models/account.ts","webpack:///./src/platform/decorators/session-sync-observable/sync-item-metadata.ts","webpack:///./src/platform/decorators/session-sync-observable/session-syncer.ts","webpack:///./src/platform/decorators/session-sync-observable/browser-session.decorator.ts","webpack:///./src/platform/decorators/session-sync-observable/session-sync.decorator.ts","webpack:///./src/platform/services/browser-state.service.ts","webpack:///../../libs/common/src/auth/abstractions/token.service.ts","webpack:///./src/platform/background/service-factories/state-service.factory.ts","webpack:///./src/platform/background/service-factories/migration-runner.factory.ts","webpack:///./src/platform/background/service-factories/api-service.factory.ts","webpack:///./src/platform/background/service-factories/app-id-service.factory.ts","webpack:///../../libs/common/src/admin-console/models/domain/encrypted-organization-key.ts","webpack:///../../libs/common/src/platform/services/key-state/org-keys.state.ts","webpack:///../../libs/common/src/platform/services/key-state/provider-keys.state.ts","webpack:///../../libs/common/src/platform/services/key-state/user-key.state.ts","webpack:///../../libs/common/src/platform/services/crypto.service.ts","webpack:///./src/platform/services/browser-crypto.service.ts","webpack:///./src/platform/background/service-factories/biometric-state-service.factory.ts","webpack:///./src/platform/background/service-factories/crypto-service.factory.ts","webpack:///./src/auth/background/service-factories/auth-service.factory.ts","webpack:///./src/admin-console/background/service-factories/organization-service.factory.ts","webpack:///./src/admin-console/background/service-factories/policy-service.factory.ts","webpack:///./src/autofill/background/service_factories/autofill-settings-service.factory.ts","webpack:///./src/autofill/background/service_factories/domain-settings-service.factory.ts","webpack:///./src/background/service-factories/cipher-file-upload-service.factory.ts","webpack:///./src/platform/background/service-factories/file-upload-service.factory.ts","webpack:///../../libs/common/src/platform/services/translation.service.ts","webpack:///../../libs/common/src/platform/services/i18n.service.ts","webpack:///./src/platform/services/i18n.service.ts","webpack:///./src/platform/background/service-factories/i18n-service.factory.ts","webpack:///../../libs/common/src/platform/abstractions/config/server-config.ts","webpack:///../../libs/common/src/platform/services/config/config.service.ts","webpack:///./src/platform/background/service-factories/config-service.factory.ts","webpack:///./src/platform/background/service-factories/config-api.service.factory.ts","webpack:///./src/vault/background/service_factories/cipher-service.factory.ts","webpack:///./src/background/service-factories/search-service.factory.ts","webpack:///./src/platform/background/service-factories/billing-account-profile-state-service.factory.ts","webpack:///./src/autofill/browser/main-context-menu-handler.ts","webpack:///./src/autofill/browser/cipher-context-menu-handler.ts","webpack:///./src/auth/background/service-factories/user-decryption-options-service.factory.ts","webpack:///./src/background/service-factories/vault-timeout-settings-service.factory.ts","webpack:///./src/auth/background/service-factories/user-verification-service.factory.ts","webpack:///./src/auth/background/service-factories/user-verification-api-service.factory.ts","webpack:///./src/auth/background/service-factories/pin-crypto-service.factory.ts","webpack:///./src/background/service-factories/event-collection-service.factory.ts","webpack:///./src/background/service-factories/event-upload-service.factory.ts","webpack:///./src/tools/background/service_factories/password-generation-service.factory.ts","webpack:///./src/vault/background/service_factories/totp-service.factory.ts","webpack:///./src/autofill/enums/autofill-port.enums.ts","webpack:///./src/autofill/models/autofill-script.ts","webpack:///./src/autofill/services/autofill-constants.ts","webpack:///./src/autofill/services/autofill.service.ts","webpack:///./src/autofill/background/service_factories/autofill-service.factory.ts","webpack:///./src/autofill/clipboard/clear-clipboard.ts","webpack:///./src/autofill/clipboard/copy-to-clipboard-command.ts","webpack:///./src/platform/alarms/alarm-state.ts","webpack:///./src/autofill/clipboard/generate-password-to-clipboard-command.ts","webpack:///./src/autofill/commands/autofill-tab-command.ts","webpack:///./src/autofill/browser/context-menu-clicked-handler.ts","webpack:///./src/platform/listeners/update-badge.ts","webpack:///./src/autofill/background/service_factories/badge-settings-service.factory.ts","webpack:///./src/platform/services/browser-config.service.ts","webpack:///../../libs/common/src/platform/abstractions/state.service.ts","webpack:///../../libs/common/src/platform/abstractions/config/config-api.service.abstraction.ts","webpack:///../../libs/common/src/auth/abstractions/auth.service.ts","webpack:///./src/platform/services/browser-messaging-private-mode-background.service.ts","webpack:///../../libs/common/src/tools/send/models/domain/send-file.ts","webpack:///../../libs/common/src/tools/send/models/domain/send-text.ts","webpack:///../../libs/common/src/tools/send/models/domain/send.ts","webpack:///../../libs/common/src/tools/send/models/request/send-with-id.request.ts","webpack:///../../libs/common/src/tools/send/services/send.service.ts","webpack:///../../libs/common/src/tools/send/send-kdf.ts","webpack:///./src/services/browser-send.service.ts","webpack:///../../libs/common/src/services/vault-timeout/vault-timeout.service.ts","webpack:///../../libs/common/src/enums/feature-flag.enum.ts","webpack:///./src/services/vault-timeout/vault-timeout.service.ts","webpack:///./src/tools/config/fileless-importer-injected-scripts.ts","webpack:///./src/tools/enums/fileless-import.enums.ts","webpack:///./src/tools/background/fileless-importer.background.ts","webpack:///./src/vault/fido2/browser-fido2-user-interface.service.ts","webpack:///./src/vault/services/fido2.service.ts","webpack:///../../libs/angular/src/vault/vault-filter/models/vault-filter.model.ts","webpack:///../../libs/common/src/admin-console/abstractions/organization/organization.service.abstraction.ts","webpack:///../../libs/angular/src/vault/vault-filter/models/dynamic-tree-node.model.ts","webpack:///../../libs/common/src/vault/services/key-state/collapsed-groupings.state.ts","webpack:///../../libs/common/src/vault/abstractions/folder/folder.service.abstraction.ts","webpack:///../../libs/common/src/vault/abstractions/cipher.service.ts","webpack:///../../libs/common/src/vault/abstractions/collection.service.ts","webpack:///../../libs/common/src/admin-console/abstractions/policy/policy.service.abstraction.ts","webpack:///../../libs/angular/src/vault/vault-filter/services/vault-filter.service.ts","webpack:///./src/vault/services/vault-filter.service.ts","webpack:///./src/background/commands.background.ts","webpack:///./src/background/idle.background.ts","webpack:///./src/background/nativeMessaging.background.ts","webpack:///./src/vault/background/abort-manager.ts","webpack:///./src/background/runtime.background.ts","webpack:///./src/background/main.background.ts","webpack:///./src/platform/alarms/on-alarm-listener.ts","webpack:///./src/platform/listeners/combine.ts","webpack:///./src/platform/listeners/on-command-listener.ts","webpack:///./src/platform/listeners/index.ts","webpack:///./src/platform/background.ts","webpack:///./src/platform/listeners/on-install-listener.ts","webpack:///./src/platform/alarms/register-alarms.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/node module decorator","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","export enum AuthenticationType {\n  Password = 0,\n  Sso = 1,\n  UserApiKey = 2,\n  AuthRequest = 3,\n  WebAuthn = 4,\n}\n","import { TwoFactorProviderType } from \"../../../enums/two-factor-provider-type\";\n\nexport class TokenTwoFactorRequest {\n  constructor(\n    public provider: TwoFactorProviderType = null,\n    public token: string = null,\n    public remember: boolean = false,\n  ) {}\n}\n","/* eslint-disable no-useless-escape */\nimport * as path from \"path\";\n\nimport { Buffer as BufferLib } from \"buffer/\";\nimport { Observable, of, switchMap } from \"rxjs\";\nimport { getHostname, parse } from \"tldts\";\nimport { Merge } from \"type-fest\";\n\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\n\nconst nodeURL = typeof window === \"undefined\" ? require(\"url\") : null;\n\ndeclare global {\n  /* eslint-disable-next-line no-var */\n  var bitwardenContainerService: BitwardenContainerService;\n}\n\ninterface BitwardenContainerService {\n  getCryptoService: () => CryptoService;\n  getEncryptService: () => EncryptService;\n}\n\nexport class Utils {\n  static inited = false;\n  static isNode = false;\n  static isBrowser = true;\n  static isMobileBrowser = false;\n  static isAppleMobileBrowser = false;\n  static global: typeof global = null;\n  // Transpiled version of /\\p{Emoji_Presentation}/gu using https://mothereff.in/regexpu. Used for compatability in older browsers.\n  static regexpEmojiPresentation =\n    /(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])/g;\n  static readonly validHosts: string[] = [\"localhost\"];\n  static readonly originalMinimumPasswordLength = 8;\n  static readonly minimumPasswordLength = 12;\n  static readonly DomainMatchBlacklist = new Map<string, Set<string>>([\n    [\"google.com\", new Set([\"script.google.com\"])],\n  ]);\n\n  static init() {\n    if (Utils.inited) {\n      return;\n    }\n\n    Utils.inited = true;\n    Utils.isNode =\n      typeof process !== \"undefined\" &&\n      (process as any).release != null &&\n      (process as any).release.name === \"node\";\n    Utils.isBrowser = typeof window !== \"undefined\";\n\n    Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);\n    Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);\n\n    if (Utils.isNode) {\n      Utils.global = global;\n    } else if (Utils.isBrowser) {\n      Utils.global = window;\n    } else {\n      // If it's not browser or node then it must be a service worker\n      Utils.global = self;\n    }\n  }\n\n  static fromB64ToArray(str: string): Uint8Array {\n    if (str == null) {\n      return null;\n    }\n\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"base64\"));\n    } else {\n      const binaryString = Utils.global.atob(str);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUrlB64ToArray(str: string): Uint8Array {\n    return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));\n  }\n\n  static fromHexToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"hex\"));\n    } else {\n      const bytes = new Uint8Array(str.length / 2);\n      for (let i = 0; i < str.length; i += 2) {\n        bytes[i / 2] = parseInt(str.substr(i, 2), 16);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUtf8ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"utf8\"));\n    } else {\n      const strUtf8 = unescape(encodeURIComponent(str));\n      const arr = new Uint8Array(strUtf8.length);\n      for (let i = 0; i < strUtf8.length; i++) {\n        arr[i] = strUtf8.charCodeAt(i);\n      }\n      return arr;\n    }\n  }\n\n  static fromByteStringToArray(str: string): Uint8Array {\n    if (str == null) {\n      return null;\n    }\n    const arr = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n  }\n\n  static fromBufferToB64(buffer: ArrayBuffer): string {\n    if (buffer == null) {\n      return null;\n    }\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"base64\");\n    } else {\n      let binary = \"\";\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return Utils.global.btoa(binary);\n    }\n  }\n\n  static fromBufferToUrlB64(buffer: ArrayBuffer): string {\n    return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));\n  }\n\n  static fromB64toUrlB64(b64Str: string) {\n    return b64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  static fromBufferToUtf8(buffer: ArrayBuffer): string {\n    return BufferLib.from(buffer).toString(\"utf8\");\n  }\n\n  static fromBufferToByteString(buffer: ArrayBuffer): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n\n  // ref: https://stackoverflow.com/a/40031979/1090359\n  static fromBufferToHex(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"hex\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      return Array.prototype.map\n        .call(bytes, (x: number) => (\"00\" + x.toString(16)).slice(-2))\n        .join(\"\");\n    }\n  }\n\n  /**\n   * Converts a hex string to an ArrayBuffer.\n   * Note: this doesn't need any Node specific code as parseInt() / ArrayBuffer / Uint8Array\n   * work the same in Node and the browser.\n   * @param {string} hexString - A string of hexadecimal characters.\n   * @returns {ArrayBuffer} The ArrayBuffer representation of the hex string.\n   */\n  static hexStringToArrayBuffer(hexString: string): ArrayBuffer {\n    // Check if the hexString has an even length, as each hex digit represents half a byte (4 bits),\n    // and it takes two hex digits to represent a full byte (8 bits).\n    if (hexString.length % 2 !== 0) {\n      throw \"HexString has to be an even length\";\n    }\n\n    // Create an ArrayBuffer with a length that is half the length of the hex string,\n    // because each pair of hex digits will become a single byte.\n    const arrayBuffer = new ArrayBuffer(hexString.length / 2);\n\n    // Create a Uint8Array view on top of the ArrayBuffer (each position represents a byte)\n    // as ArrayBuffers cannot be edited directly.\n    const uint8Array = new Uint8Array(arrayBuffer);\n\n    // Loop through the bytes\n    for (let i = 0; i < uint8Array.length; i++) {\n      // Extract two hex characters (1 byte)\n      const hexByte = hexString.substr(i * 2, 2);\n\n      // Convert hexByte into a decimal value from base 16. (ex: ff --> 255)\n      const byteValue = parseInt(hexByte, 16);\n\n      // Place the byte value into the uint8Array\n      uint8Array[i] = byteValue;\n    }\n\n    return arrayBuffer;\n  }\n\n  static fromUrlB64ToB64(urlB64Str: string): string {\n    let output = urlB64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += \"==\";\n        break;\n      case 3:\n        output += \"=\";\n        break;\n      default:\n        throw new Error(\"Illegal base64url string!\");\n    }\n\n    return output;\n  }\n\n  static fromUrlB64ToUtf8(urlB64Str: string): string {\n    return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));\n  }\n\n  static fromUtf8ToB64(utfStr: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(utfStr, \"utf8\").toString(\"base64\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.btoa(utfStr)));\n    }\n  }\n\n  static fromUtf8ToUrlB64(utfStr: string): string {\n    return Utils.fromBufferToUrlB64(Utils.fromUtf8ToArray(utfStr));\n  }\n\n  static fromB64ToUtf8(b64Str: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(b64Str, \"base64\").toString(\"utf8\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.atob(b64Str)));\n    }\n  }\n\n  // ref: http://stackoverflow.com/a/2117523/1090359\n  static newGuid(): string {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  static guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n\n  static isGuid(id: string) {\n    return RegExp(Utils.guidRegex, \"i\").test(id);\n  }\n\n  static getHostname(uriString: string): string {\n    if (Utils.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"about:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"file:\")) {\n      return null;\n    }\n\n    // Does uriString contain invalid characters\n    // TODO Needs to possibly be extended, although '!' is a reserved character\n    if (uriString.indexOf(\"!\") > 0) {\n      return null;\n    }\n\n    try {\n      const hostname = getHostname(uriString, { validHosts: this.validHosts });\n      if (hostname != null) {\n        return hostname;\n      }\n    } catch {\n      return null;\n    }\n    return null;\n  }\n\n  static getHost(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.host !== \"\" ? url.host : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getDomain(uriString: string): string {\n    if (Utils.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"about:\")) {\n      return null;\n    }\n\n    try {\n      const parseResult = parse(uriString, {\n        validHosts: this.validHosts,\n        allowPrivateDomains: true,\n      });\n      if (parseResult != null && parseResult.hostname != null) {\n        if (parseResult.hostname === \"localhost\" || parseResult.isIp) {\n          return parseResult.hostname;\n        }\n\n        if (parseResult.domain != null) {\n          return parseResult.domain;\n        }\n        return null;\n      }\n    } catch {\n      return null;\n    }\n    return null;\n  }\n\n  static getQueryParams(uriString: string): Map<string, string> {\n    const url = Utils.getUrl(uriString);\n    if (url == null || url.search == null || url.search === \"\") {\n      return null;\n    }\n    const map = new Map<string, string>();\n    const pairs = (url.search[0] === \"?\" ? url.search.substr(1) : url.search).split(\"&\");\n    pairs.forEach((pair) => {\n      const parts = pair.split(\"=\");\n      if (parts.length < 1) {\n        return;\n      }\n      map.set(\n        decodeURIComponent(parts[0]).toLowerCase(),\n        parts[1] == null ? \"\" : decodeURIComponent(parts[1]),\n      );\n    });\n    return map;\n  }\n\n  static getSortFunction<T>(\n    i18nService: I18nService,\n    prop: { [K in keyof T]: T[K] extends string ? K : never }[keyof T],\n  ): (a: T, b: T) => number {\n    return (a, b) => {\n      if (a[prop] == null && b[prop] != null) {\n        return -1;\n      }\n      if (a[prop] != null && b[prop] == null) {\n        return 1;\n      }\n      if (a[prop] == null && b[prop] == null) {\n        return 0;\n      }\n\n      // The `as unknown as string` here is unfortunate because typescript doesn't property understand that the return of T[prop] will be a string\n      return i18nService.collator\n        ? i18nService.collator.compare(a[prop] as unknown as string, b[prop] as unknown as string)\n        : (a[prop] as unknown as string).localeCompare(b[prop] as unknown as string);\n    };\n  }\n\n  static isNullOrWhitespace(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str.trim() === \"\";\n  }\n\n  static isNullOrEmpty(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str == \"\";\n  }\n\n  static isPromise(obj: any): obj is Promise<unknown> {\n    return (\n      obj != undefined && typeof obj[\"then\"] === \"function\" && typeof obj[\"catch\"] === \"function\"\n    );\n  }\n\n  static nameOf<T>(name: string & keyof T) {\n    return name;\n  }\n\n  static assign<T>(target: T, source: Partial<T>): T {\n    return Object.assign(target, source);\n  }\n\n  static iterateEnum<O extends object, K extends keyof O = keyof O>(obj: O) {\n    return (Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[]).map((k) => obj[k]);\n  }\n\n  static getUrl(uriString: string): URL {\n    if (this.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    return Utils.getUrlObject(uriString);\n  }\n\n  static camelToPascalCase(s: string) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  /**\n   * There are a few ways to calculate text color for contrast, this one seems to fit accessibility guidelines best.\n   * https://stackoverflow.com/a/3943023/6869691\n   *\n   * @param {string} bgColor\n   * @param {number} [threshold] see stackoverflow link above\n   * @param {boolean} [svgTextFill]\n   * Indicates if this method is performed on an SVG <text> 'fill' attribute (e.g. <text fill=\"black\"></text>).\n   * This check is necessary because the '!important' tag cannot be used in a 'fill' attribute.\n   */\n  static pickTextColorBasedOnBgColor(bgColor: string, threshold = 186, svgTextFill = false) {\n    const bgColorHexNums = bgColor.charAt(0) === \"#\" ? bgColor.substring(1, 7) : bgColor;\n    const r = parseInt(bgColorHexNums.substring(0, 2), 16); // hexToR\n    const g = parseInt(bgColorHexNums.substring(2, 4), 16); // hexToG\n    const b = parseInt(bgColorHexNums.substring(4, 6), 16); // hexToB\n    const blackColor = svgTextFill ? \"black\" : \"black !important\";\n    const whiteColor = svgTextFill ? \"white\" : \"white !important\";\n    return r * 0.299 + g * 0.587 + b * 0.114 > threshold ? blackColor : whiteColor;\n  }\n\n  static stringToColor(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += (\"00\" + value.toString(16)).substr(-2);\n    }\n    return color;\n  }\n\n  /**\n   * @throws Will throw an error if the ContainerService has not been attached to the window object\n   */\n  static getContainerService(): BitwardenContainerService {\n    if (this.global.bitwardenContainerService == null) {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n    return this.global.bitwardenContainerService;\n  }\n\n  static validateHexColor(color: string) {\n    return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(color);\n  }\n\n  /**\n   * Converts map to a Record<string, V> with the same data. Inverse of recordToMap\n   * Useful in toJSON methods, since Maps are not serializable\n   * @param map\n   * @returns\n   */\n  static mapToRecord<K extends string | number, V>(map: Map<K, V>): Record<string, V> {\n    if (map == null) {\n      return null;\n    }\n    if (!(map instanceof Map)) {\n      return map;\n    }\n    return Object.fromEntries(map);\n  }\n\n  /**\n   * Converts record to a Map<string, V> with the same data. Inverse of mapToRecord\n   * Useful in fromJSON methods, since Maps are not serializable\n   *\n   * Warning: If the record has string keys that are numbers, they will be converted to numbers in the map\n   * @param record\n   * @returns\n   */\n  static recordToMap<K extends string | number, V>(record: Record<K, V>): Map<K, V> {\n    if (record == null) {\n      return null;\n    } else if (record instanceof Map) {\n      return record;\n    }\n\n    const entries = Object.entries(record);\n    if (entries.length === 0) {\n      return new Map();\n    }\n\n    if (isNaN(Number(entries[0][0]))) {\n      return new Map(entries) as Map<K, V>;\n    } else {\n      return new Map(entries.map((e) => [Number(e[0]), e[1]])) as Map<K, V>;\n    }\n  }\n\n  /** Applies Object.assign, but converts the type nicely using Type-Fest Merge<Destination, Source> */\n  static merge<Destination, Source>(\n    destination: Destination,\n    source: Source,\n  ): Merge<Destination, Source> {\n    return Object.assign(destination, source) as unknown as Merge<Destination, Source>;\n  }\n\n  /**\n   * encodeURIComponent escapes all characters except the following:\n   * alphabetic, decimal digits, - _ . ! ~ * ' ( )\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#encoding_for_rfc3986\n   */\n  static encodeRFC3986URIComponent(str: string): string {\n    return encodeURIComponent(str).replace(\n      /[!'()*]/g,\n      (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n    );\n  }\n\n  /**\n   * Normalizes a path for defense against attacks like traversals\n   * @param denormalizedPath\n   * @returns\n   */\n  static normalizePath(denormalizedPath: string): string {\n    return path.normalize(decodeURIComponent(denormalizedPath)).replace(/^(\\.\\.(\\/|\\\\|$))+/, \"\");\n  }\n\n  private static isMobile(win: Window) {\n    let mobile = false;\n    ((a) => {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n          a,\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n          a.substr(0, 4),\n        )\n      ) {\n        mobile = true;\n      }\n    })(win.navigator.userAgent || win.navigator.vendor || (win as any).opera);\n    return mobile || win.navigator.userAgent.match(/iPad/i) != null;\n  }\n\n  static delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Generate an observable from a function that returns a promise.\n   * Similar to the rxjs function {@link from} with one big exception:\n   * {@link from} will not re-execute the function when observers resubscribe.\n   * {@link Util.asyncToObservable} will execute `generator` for every\n   * subscribe, making it ideal if the value ever needs to be refreshed.\n   * */\n  static asyncToObservable<T>(generator: () => Promise<T>): Observable<T> {\n    return of(undefined).pipe(switchMap(() => generator()));\n  }\n\n  /**\n   * Return the number of days remaining before a target date arrives.\n   * Returns 0 if the day has already passed.\n   */\n  static daysRemaining(targetDate: Date): number {\n    const diffTime = targetDate.getTime() - Date.now();\n    const msPerDay = 86400000;\n    return Math.max(0, Math.floor(diffTime / msPerDay));\n  }\n\n  private static isAppleMobile(win: Window) {\n    return (\n      win.navigator.userAgent.match(/iPhone/i) != null ||\n      win.navigator.userAgent.match(/iPad/i) != null\n    );\n  }\n\n  private static getUrlObject(uriString: string): URL {\n    // All the methods below require a protocol to properly parse a URL string\n    // Assume http if no other protocol is present\n    const hasProtocol = uriString.indexOf(\"://\") > -1;\n    if (!hasProtocol && uriString.indexOf(\".\") > -1) {\n      uriString = \"http://\" + uriString;\n    } else if (!hasProtocol) {\n      return null;\n    }\n\n    try {\n      if (nodeURL != null) {\n        return new nodeURL.URL(uriString);\n      }\n\n      return new URL(uriString);\n    } catch (e) {\n      // Ignore error\n    }\n\n    return null;\n  }\n}\n\nUtils.init();\n","import { Utils } from \"../../../../platform/misc/utils\";\n\nexport abstract class WebAuthnLoginResponseRequest {\n  id: string;\n  rawId: string;\n  type: string;\n  extensions: Record<string, unknown>;\n\n  constructor(credential: PublicKeyCredential) {\n    this.id = credential.id;\n    this.rawId = Utils.fromBufferToUrlB64(credential.rawId);\n    this.type = credential.type;\n\n    // WARNING: do not add PRF information here by mapping\n    // credential.getClientExtensionResults() into the extensions property,\n    // as it will be sent to the server (leaking credentials).\n    this.extensions = {}; // Extensions are handled client-side\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../../platform/misc/utils\";\n\nimport { WebAuthnLoginResponseRequest } from \"./webauthn-login-response.request\";\n\n// base 64 strings\nexport interface WebAuthnLoginAssertionResponseData {\n  authenticatorData: string;\n  signature: string;\n  clientDataJSON: string;\n  userHandle: string;\n}\n\nexport class WebAuthnLoginAssertionResponseRequest extends WebAuthnLoginResponseRequest {\n  response: WebAuthnLoginAssertionResponseData;\n\n  constructor(credential: PublicKeyCredential) {\n    super(credential);\n\n    if (!(credential.response instanceof AuthenticatorAssertionResponse)) {\n      throw new Error(\"Invalid authenticator response\");\n    }\n\n    this.response = {\n      authenticatorData: Utils.fromBufferToUrlB64(credential.response.authenticatorData),\n      signature: Utils.fromBufferToUrlB64(credential.response.signature),\n      clientDataJSON: Utils.fromBufferToUrlB64(credential.response.clientDataJSON),\n      userHandle: Utils.fromBufferToUrlB64(credential.response.userHandle),\n    };\n  }\n\n  static fromJSON(json: Jsonify<WebAuthnLoginAssertionResponseRequest>) {\n    return Object.assign(Object.create(WebAuthnLoginAssertionResponseRequest.prototype), json);\n  }\n}\n","export enum EncryptionType {\n  AesCbc256_B64 = 0,\n  AesCbc128_HmacSha256_B64 = 1,\n  AesCbc256_HmacSha256_B64 = 2,\n  Rsa2048_OaepSha256_B64 = 3,\n  Rsa2048_OaepSha1_B64 = 4,\n  Rsa2048_OaepSha256_HmacSha256_B64 = 5,\n  Rsa2048_OaepSha1_HmacSha256_B64 = 6,\n}\n\n/** The expected number of parts to a serialized EncString of the given encryption type.\n * For example, an EncString of type AesCbc256_B64 will have 2 parts, and an EncString of type\n * AesCbc128_HmacSha256_B64 will have 3 parts.\n *\n * Example of annotated serialized EncStrings:\n * 0.iv|data\n * 1.iv|data|mac\n * 2.iv|data|mac\n * 3.data\n * 4.data\n *\n * @see EncString\n * @see EncryptionType\n * @see EncString.parseEncryptedString\n */\nexport const EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE = {\n  [EncryptionType.AesCbc256_B64]: 2,\n  [EncryptionType.AesCbc128_HmacSha256_B64]: 3,\n  [EncryptionType.AesCbc256_HmacSha256_B64]: 3,\n  [EncryptionType.Rsa2048_OaepSha256_B64]: 1,\n  [EncryptionType.Rsa2048_OaepSha1_B64]: 1,\n  [EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64]: 2,\n  [EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64]: 2,\n};\n","export enum FileUploadType {\n  Direct = 0,\n  Azure = 1,\n}\n","export enum HashPurpose {\n  ServerAuthorization = 1,\n  LocalAuthorization = 2,\n}\n","export enum HtmlStorageLocation {\n  Local = \"local\",\n  Memory = \"memory\",\n  Session = \"session\",\n}\n","import { KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport { RangeWithDefault } from \"../misc/range-with-default\";\n\nexport enum KdfType {\n  PBKDF2_SHA256 = 0,\n  Argon2id = 1,\n}\n\nexport const ARGON2_MEMORY = new RangeWithDefault(16, 1024, 64);\nexport const ARGON2_PARALLELISM = new RangeWithDefault(1, 16, 4);\nexport const ARGON2_ITERATIONS = new RangeWithDefault(2, 10, 3);\n\nexport const DEFAULT_KDF_TYPE = KdfType.PBKDF2_SHA256;\nexport const PBKDF2_ITERATIONS = new RangeWithDefault(600_000, 2_000_000, 600_000);\nexport const DEFAULT_KDF_CONFIG = new KdfConfig(PBKDF2_ITERATIONS.defaultValue);\n","export class KdfConfig {\n  iterations: number;\n  memory?: number;\n  parallelism?: number;\n\n  constructor(iterations: number, memory?: number, parallelism?: number) {\n    this.iterations = iterations;\n    this.memory = memory;\n    this.parallelism = parallelism;\n  }\n}\n","/**\n * A range with a default value.\n *\n * Enforces constraints to ensure min > default > max.\n */\nexport class RangeWithDefault {\n  constructor(\n    readonly min: number,\n    readonly max: number,\n    readonly defaultValue: number,\n  ) {\n    if (min > max) {\n      throw new Error(`${min} is greater than ${max}.`);\n    }\n\n    if (this.inRange(defaultValue) === false) {\n      throw new Error(\"Default value is not in range.\");\n    }\n  }\n\n  inRange(value: number): boolean {\n    return value >= this.min && value <= this.max;\n  }\n}\n","export enum KeySuffixOptions {\n  Auto = \"auto\",\n  Biometric = \"biometric\",\n  Pin = \"pin\",\n}\n","export enum LogLevelType {\n  Debug,\n  Info,\n  Warning,\n  Error,\n}\n","export enum StorageLocation {\n  Both = \"both\",\n  Disk = \"disk\",\n  Memory = \"memory\",\n}\n","export enum ThemeType {\n  System = \"system\",\n  Light = \"light\",\n  Dark = \"dark\",\n  Nord = \"nord\",\n  SolarizedDark = \"solarizedDark\",\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncryptionType } from \"../../enums\";\n\nexport class SymmetricCryptoKey {\n  key: Uint8Array;\n  encKey?: Uint8Array;\n  macKey?: Uint8Array;\n  encType: EncryptionType;\n\n  keyB64: string;\n  encKeyB64: string;\n  macKeyB64: string;\n\n  meta: any;\n\n  constructor(key: Uint8Array, encType?: EncryptionType) {\n    if (key == null) {\n      throw new Error(\"Must provide key\");\n    }\n\n    if (encType == null) {\n      if (key.byteLength === 32) {\n        encType = EncryptionType.AesCbc256_B64;\n      } else if (key.byteLength === 64) {\n        encType = EncryptionType.AesCbc256_HmacSha256_B64;\n      } else {\n        throw new Error(\"Unable to determine encType.\");\n      }\n    }\n\n    this.key = key;\n    this.encType = encType;\n\n    if (encType === EncryptionType.AesCbc256_B64 && key.byteLength === 32) {\n      this.encKey = key;\n      this.macKey = null;\n    } else if (encType === EncryptionType.AesCbc128_HmacSha256_B64 && key.byteLength === 32) {\n      this.encKey = key.slice(0, 16);\n      this.macKey = key.slice(16, 32);\n    } else if (encType === EncryptionType.AesCbc256_HmacSha256_B64 && key.byteLength === 64) {\n      this.encKey = key.slice(0, 32);\n      this.macKey = key.slice(32, 64);\n    } else {\n      throw new Error(\"Unsupported encType/key length.\");\n    }\n\n    if (this.key != null) {\n      this.keyB64 = Utils.fromBufferToB64(this.key);\n    }\n    if (this.encKey != null) {\n      this.encKeyB64 = Utils.fromBufferToB64(this.encKey);\n    }\n    if (this.macKey != null) {\n      this.macKeyB64 = Utils.fromBufferToB64(this.macKey);\n    }\n  }\n\n  toJSON() {\n    // The whole object is constructed from the initial key, so just store the B64 key\n    return { keyB64: this.keyB64 };\n  }\n\n  static fromString(s: string): SymmetricCryptoKey {\n    if (s == null) {\n      return null;\n    }\n\n    const arrayBuffer = Utils.fromB64ToArray(s);\n    return new SymmetricCryptoKey(arrayBuffer);\n  }\n\n  static fromJSON(obj: Jsonify<SymmetricCryptoKey>): SymmetricCryptoKey {\n    return SymmetricCryptoKey.fromString(obj?.keyB64);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { AuthenticationType } from \"@bitwarden/common/auth/enums/authentication-type\";\nimport { TokenTwoFactorRequest } from \"@bitwarden/common/auth/models/request/identity-token/token-two-factor.request\";\nimport { WebAuthnLoginAssertionResponseRequest } from \"@bitwarden/common/auth/services/webauthn-login/request/webauthn-login-assertion-response.request\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { UserKey, MasterKey } from \"@bitwarden/common/types/key\";\n\nexport class PasswordLoginCredentials {\n  readonly type = AuthenticationType.Password;\n\n  constructor(\n    public email: string,\n    public masterPassword: string,\n    public captchaToken?: string,\n    public twoFactor?: TokenTwoFactorRequest,\n  ) {}\n}\n\nexport class SsoLoginCredentials {\n  readonly type = AuthenticationType.Sso;\n\n  constructor(\n    public code: string,\n    public codeVerifier: string,\n    public redirectUrl: string,\n    public orgId: string,\n    /**\n     * Optional email address for SSO login.\n     * Used for looking up 2FA token on clients that support remembering 2FA token.\n     */\n    public email?: string,\n    public twoFactor?: TokenTwoFactorRequest,\n  ) {}\n}\n\nexport class UserApiLoginCredentials {\n  readonly type = AuthenticationType.UserApiKey;\n\n  constructor(\n    public clientId: string,\n    public clientSecret: string,\n  ) {}\n}\n\nexport class AuthRequestLoginCredentials {\n  readonly type = AuthenticationType.AuthRequest;\n\n  constructor(\n    public email: string,\n    public accessCode: string,\n    public authRequestId: string,\n    public decryptedUserKey: UserKey,\n    public decryptedMasterKey: MasterKey,\n    public decryptedMasterKeyHash: string,\n    public twoFactor?: TokenTwoFactorRequest,\n  ) {}\n\n  static fromJSON(json: Jsonify<AuthRequestLoginCredentials>) {\n    return Object.assign(\n      new AuthRequestLoginCredentials(\n        json.email,\n        json.accessCode,\n        json.authRequestId,\n        null,\n        null,\n        json.decryptedMasterKeyHash,\n        json.twoFactor\n          ? new TokenTwoFactorRequest(\n              json.twoFactor.provider,\n              json.twoFactor.token,\n              json.twoFactor.remember,\n            )\n          : json.twoFactor,\n      ),\n      {\n        decryptedUserKey: SymmetricCryptoKey.fromJSON(json.decryptedUserKey) as UserKey,\n        decryptedMasterKey: SymmetricCryptoKey.fromJSON(json.decryptedMasterKey) as MasterKey,\n      },\n    );\n  }\n}\n\nexport class WebAuthnLoginCredentials {\n  readonly type = AuthenticationType.WebAuthn;\n\n  constructor(\n    public token: string,\n    public deviceResponse: WebAuthnLoginAssertionResponseRequest,\n    public prfKey?: SymmetricCryptoKey,\n  ) {}\n\n  static fromJSON(json: Jsonify<WebAuthnLoginCredentials>) {\n    return new WebAuthnLoginCredentials(\n      json.token,\n      Object.assign(\n        Object.create(WebAuthnLoginAssertionResponseRequest.prototype),\n        json.deviceResponse,\n      ),\n      SymmetricCryptoKey.fromJSON(json.prfKey),\n    );\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { KeyConnectorUserDecryptionOptionResponse } from \"@bitwarden/common/auth/models/response/user-decryption-options/key-connector-user-decryption-option.response\";\nimport { TrustedDeviceUserDecryptionOptionResponse } from \"@bitwarden/common/auth/models/response/user-decryption-options/trusted-device-user-decryption-option.response\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/src/auth/models/response/identity-token.response\";\n\n/**\n * Key Connector decryption options. Intended to be sent to the client for use after authentication.\n * @see {@link UserDecryptionOptions}\n */\nexport class KeyConnectorUserDecryptionOption {\n  /** The URL of the key connector configured for this user. */\n  keyConnectorUrl: string;\n\n  /**\n   * Initializes a new instance of the KeyConnectorUserDecryptionOption from a response object.\n   * @param response The key connector user decryption option response object.\n   * @returns A new instance of the KeyConnectorUserDecryptionOption or undefined if `response` is nullish.\n   */\n  static fromResponse(\n    response: KeyConnectorUserDecryptionOptionResponse,\n  ): KeyConnectorUserDecryptionOption | undefined {\n    if (response == null) {\n      return undefined;\n    }\n    const options = new KeyConnectorUserDecryptionOption();\n    options.keyConnectorUrl = response?.keyConnectorUrl ?? null;\n    return options;\n  }\n\n  /**\n   * Initializes a new instance of a KeyConnectorUserDecryptionOption from a JSON object.\n   * @param obj JSON object to deserialize.\n   * @returns A new instance of the KeyConnectorUserDecryptionOption or undefined if `obj` is nullish.\n   */\n  static fromJSON(\n    obj: Jsonify<KeyConnectorUserDecryptionOption>,\n  ): KeyConnectorUserDecryptionOption | undefined {\n    if (obj == null) {\n      return undefined;\n    }\n    return Object.assign(new KeyConnectorUserDecryptionOption(), obj);\n  }\n}\n\n/**\n * Trusted device decryption options. Intended to be sent to the client for use after authentication.\n * @see {@link UserDecryptionOptions}\n */\nexport class TrustedDeviceUserDecryptionOption {\n  /** True if an admin has approved an admin auth request previously made from this device. */\n  hasAdminApproval: boolean;\n  /** True if the user has a device capable of approving an auth request. */\n  hasLoginApprovingDevice: boolean;\n  /** True if the user has manage reset password permission, as these users must be forced to have a master password. */\n  hasManageResetPasswordPermission: boolean;\n\n  /**\n   * Initializes a new instance of the TrustedDeviceUserDecryptionOption from a response object.\n   * @param response The trusted device user decryption option response object.\n   * @returns A new instance of the TrustedDeviceUserDecryptionOption or undefined if `response` is nullish.\n   */\n  static fromResponse(\n    response: TrustedDeviceUserDecryptionOptionResponse,\n  ): TrustedDeviceUserDecryptionOption | undefined {\n    if (response == null) {\n      return undefined;\n    }\n    const options = new TrustedDeviceUserDecryptionOption();\n    options.hasAdminApproval = response?.hasAdminApproval ?? false;\n    options.hasLoginApprovingDevice = response?.hasLoginApprovingDevice ?? false;\n    options.hasManageResetPasswordPermission = response?.hasManageResetPasswordPermission ?? false;\n    return options;\n  }\n\n  /**\n   * Initializes a new instance of the TrustedDeviceUserDecryptionOption from a JSON object.\n   * @param obj JSON object to deserialize.\n   * @returns A new instance of the TrustedDeviceUserDecryptionOption or undefined if `obj` is nullish.\n   */\n  static fromJSON(\n    obj: Jsonify<TrustedDeviceUserDecryptionOption>,\n  ): TrustedDeviceUserDecryptionOption | undefined {\n    if (obj == null) {\n      return undefined;\n    }\n    return Object.assign(new TrustedDeviceUserDecryptionOption(), obj);\n  }\n}\n\n/**\n * Represents the decryption options the user has configured on the server. This is intended to be sent\n * to the client on authentication, and can be used to determine how to decrypt the user's vault.\n */\nexport class UserDecryptionOptions {\n  /** True if the user has a master password configured on the server. */\n  hasMasterPassword: boolean;\n  /** {@link TrustedDeviceUserDecryptionOption} */\n  trustedDeviceOption?: TrustedDeviceUserDecryptionOption;\n  /** {@link KeyConnectorUserDecryptionOption} */\n  keyConnectorOption?: KeyConnectorUserDecryptionOption;\n\n  /**\n   * Initializes a new instance of the UserDecryptionOptions from a response object.\n   * @param response user decryption options response object\n   * @returns A new instance of the UserDecryptionOptions.\n   * @throws If the response is nullish, this method will throw an error. User decryption options\n   * are required for client initialization.\n   */\n  // TODO: Change response type to `UserDecryptionOptionsResponse` after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n  static fromResponse(response: IdentityTokenResponse): UserDecryptionOptions {\n    if (response == null) {\n      throw new Error(\"User Decryption Options are required for client initialization.\");\n    }\n\n    const decryptionOptions = new UserDecryptionOptions();\n\n    if (response.userDecryptionOptions) {\n      // If the response has userDecryptionOptions, this means it's on a post-TDE server version and can interrogate\n      // the new decryption options.\n      const responseOptions = response.userDecryptionOptions;\n      decryptionOptions.hasMasterPassword = responseOptions.hasMasterPassword;\n\n      decryptionOptions.trustedDeviceOption = TrustedDeviceUserDecryptionOption.fromResponse(\n        responseOptions.trustedDeviceOption,\n      );\n\n      decryptionOptions.keyConnectorOption = KeyConnectorUserDecryptionOption.fromResponse(\n        responseOptions.keyConnectorOption,\n      );\n    } else {\n      // If the response does not have userDecryptionOptions, this means it's on a pre-TDE server version and so\n      // we must base our decryption options on the presence of the keyConnectorUrl.\n      // Note that the presence of keyConnectorUrl implies that the user does not have a master password, as in pre-TDE\n      // server versions, a master password short-circuited the addition of the keyConnectorUrl to the response.\n      // TODO: remove this check after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n      const usingKeyConnector = response.keyConnectorUrl != null;\n      decryptionOptions.hasMasterPassword = !usingKeyConnector;\n      if (usingKeyConnector) {\n        decryptionOptions.keyConnectorOption = new KeyConnectorUserDecryptionOption();\n        decryptionOptions.keyConnectorOption.keyConnectorUrl = response.keyConnectorUrl;\n      }\n    }\n    return decryptionOptions;\n  }\n\n  /**\n   * Initializes a new instance of the UserDecryptionOptions from a JSON object.\n   * @param obj JSON object to deserialize.\n   * @returns A new instance of the UserDecryptionOptions. Will initialize even if the JSON object is nullish.\n   */\n  static fromJSON(obj: Jsonify<UserDecryptionOptions>): UserDecryptionOptions {\n    const decryptionOptions = Object.assign(new UserDecryptionOptions(), obj);\n\n    decryptionOptions.trustedDeviceOption = TrustedDeviceUserDecryptionOption.fromJSON(\n      obj?.trustedDeviceOption,\n    );\n\n    decryptionOptions.keyConnectorOption = KeyConnectorUserDecryptionOption.fromJSON(\n      obj?.keyConnectorOption,\n    );\n\n    return decryptionOptions;\n  }\n}\n","import { Jsonify, Opaque } from \"type-fest\";\n\nimport { EncryptionType, EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE } from \"../../enums\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { SymmetricCryptoKey } from \"./symmetric-crypto-key\";\n\nexport class EncString implements Encrypted {\n  encryptedString?: EncryptedString;\n  encryptionType?: EncryptionType;\n  decryptedValue?: string;\n  data?: string;\n  iv?: string;\n  mac?: string;\n\n  constructor(\n    encryptedStringOrType: string | EncryptionType,\n    data?: string,\n    iv?: string,\n    mac?: string,\n  ) {\n    if (data != null) {\n      this.initFromData(encryptedStringOrType as EncryptionType, data, iv, mac);\n    } else {\n      this.initFromEncryptedString(encryptedStringOrType as string);\n    }\n  }\n\n  get ivBytes(): Uint8Array {\n    return this.iv == null ? null : Utils.fromB64ToArray(this.iv);\n  }\n\n  get macBytes(): Uint8Array {\n    return this.mac == null ? null : Utils.fromB64ToArray(this.mac);\n  }\n\n  get dataBytes(): Uint8Array {\n    return this.data == null ? null : Utils.fromB64ToArray(this.data);\n  }\n\n  toJSON() {\n    return this.encryptedString as string;\n  }\n\n  static fromJSON(obj: Jsonify<EncString>): EncString {\n    if (obj == null) {\n      return null;\n    }\n\n    return new EncString(obj);\n  }\n\n  private initFromData(encType: EncryptionType, data: string, iv: string, mac: string) {\n    if (iv != null) {\n      this.encryptedString = (encType + \".\" + iv + \"|\" + data) as EncryptedString;\n    } else {\n      this.encryptedString = (encType + \".\" + data) as EncryptedString;\n    }\n\n    // mac\n    if (mac != null) {\n      this.encryptedString = (this.encryptedString + \"|\" + mac) as EncryptedString;\n    }\n\n    this.encryptionType = encType;\n    this.data = data;\n    this.iv = iv;\n    this.mac = mac;\n  }\n\n  private initFromEncryptedString(encryptedString: string) {\n    this.encryptedString = encryptedString as EncryptedString;\n    if (!this.encryptedString) {\n      return;\n    }\n\n    const { encType, encPieces } = EncString.parseEncryptedString(this.encryptedString);\n    this.encryptionType = encType;\n\n    if (encPieces.length !== EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE[encType]) {\n      return;\n    }\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        this.mac = encPieces[2];\n        break;\n      case EncryptionType.AesCbc256_B64:\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n        this.data = encPieces[0];\n        break;\n      default:\n        return;\n    }\n  }\n\n  private static parseEncryptedString(encryptedString: string): {\n    encType: EncryptionType;\n    encPieces: string[];\n  } {\n    const headerPieces = encryptedString.split(\".\");\n    let encType: EncryptionType;\n    let encPieces: string[] = null;\n\n    if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        return;\n      }\n    } else {\n      encPieces = encryptedString.split(\"|\");\n      encType =\n        encPieces.length === 3\n          ? EncryptionType.AesCbc128_HmacSha256_B64\n          : EncryptionType.AesCbc256_B64;\n    }\n\n    return {\n      encType,\n      encPieces,\n    };\n  }\n\n  static isSerializedEncString(s: string): boolean {\n    const { encType, encPieces } = this.parseEncryptedString(s);\n\n    return EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE[encType] === encPieces.length;\n  }\n\n  async decrypt(orgId: string, key: SymmetricCryptoKey = null): Promise<string> {\n    if (this.decryptedValue != null) {\n      return this.decryptedValue;\n    }\n\n    try {\n      if (key == null) {\n        key = await this.getKeyForDecryption(orgId);\n      }\n      if (key == null) {\n        throw new Error(\"No key to decrypt EncString with orgId \" + orgId);\n      }\n\n      const encryptService = Utils.getContainerService().getEncryptService();\n      this.decryptedValue = await encryptService.decryptToUtf8(this, key);\n    } catch (e) {\n      this.decryptedValue = \"[error: cannot decrypt]\";\n    }\n    return this.decryptedValue;\n  }\n\n  private async getKeyForDecryption(orgId: string) {\n    const cryptoService = Utils.getContainerService().getCryptoService();\n    return orgId != null\n      ? await cryptoService.getOrgKey(orgId)\n      : await cryptoService.getUserKeyWithLegacySupport();\n  }\n}\n\nexport type EncryptedString = Opaque<string, \"EncString\">;\n","import { VaultTimeoutSettingsService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { KdfType } from \"@bitwarden/common/platform/enums\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { PinLockType } from \"@bitwarden/common/services/vault-timeout/vault-timeout-settings.service\";\nimport { UserKey } from \"@bitwarden/common/types/key\";\n\nimport { PinCryptoServiceAbstraction } from \"../../abstractions/pin-crypto.service.abstraction\";\n\nexport class PinCryptoService implements PinCryptoServiceAbstraction {\n  constructor(\n    private stateService: StateService,\n    private cryptoService: CryptoService,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsService,\n    private logService: LogService,\n  ) {}\n  async decryptUserKeyWithPin(pin: string): Promise<UserKey | null> {\n    try {\n      const pinLockType: PinLockType = await this.vaultTimeoutSettingsService.isPinLockSet();\n\n      const { pinKeyEncryptedUserKey, oldPinKeyEncryptedMasterKey } =\n        await this.getPinKeyEncryptedKeys(pinLockType);\n\n      const kdf: KdfType = await this.stateService.getKdfType();\n      const kdfConfig: KdfConfig = await this.stateService.getKdfConfig();\n      let userKey: UserKey;\n      const email = await this.stateService.getEmail();\n      if (oldPinKeyEncryptedMasterKey) {\n        userKey = await this.cryptoService.decryptAndMigrateOldPinKey(\n          pinLockType === \"TRANSIENT\",\n          pin,\n          email,\n          kdf,\n          kdfConfig,\n          oldPinKeyEncryptedMasterKey,\n        );\n      } else {\n        userKey = await this.cryptoService.decryptUserKeyWithPin(\n          pin,\n          email,\n          kdf,\n          kdfConfig,\n          pinKeyEncryptedUserKey,\n        );\n      }\n\n      if (!userKey) {\n        this.logService.warning(`User key null after pin key decryption.`);\n        return null;\n      }\n\n      if (!(await this.validatePin(userKey, pin))) {\n        this.logService.warning(`Pin key decryption successful but pin validation failed.`);\n        return null;\n      }\n\n      return userKey;\n    } catch (error) {\n      this.logService.error(`Error decrypting user key with pin: ${error}`);\n      return null;\n    }\n  }\n\n  // Note: oldPinKeyEncryptedMasterKey is only used for migrating old pin keys\n  // and will be null for all migrated accounts\n  private async getPinKeyEncryptedKeys(\n    pinLockType: PinLockType,\n  ): Promise<{ pinKeyEncryptedUserKey: EncString; oldPinKeyEncryptedMasterKey?: EncString }> {\n    switch (pinLockType) {\n      case \"PERSISTANT\": {\n        const pinKeyEncryptedUserKey = await this.stateService.getPinKeyEncryptedUserKey();\n        const oldPinKeyEncryptedMasterKey = await this.stateService.getEncryptedPinProtected();\n        return {\n          pinKeyEncryptedUserKey,\n          oldPinKeyEncryptedMasterKey: oldPinKeyEncryptedMasterKey\n            ? new EncString(oldPinKeyEncryptedMasterKey)\n            : undefined,\n        };\n      }\n      case \"TRANSIENT\": {\n        const pinKeyEncryptedUserKey = await this.stateService.getPinKeyEncryptedUserKeyEphemeral();\n        const oldPinKeyEncryptedMasterKey = await this.stateService.getDecryptedPinProtected();\n        return { pinKeyEncryptedUserKey, oldPinKeyEncryptedMasterKey };\n      }\n      case \"DISABLED\":\n        throw new Error(\"Pin is disabled\");\n      default: {\n        // Compile-time check for exhaustive switch\n        const _exhaustiveCheck: never = pinLockType;\n        return _exhaustiveCheck;\n      }\n    }\n  }\n\n  private async validatePin(userKey: UserKey, pin: string): Promise<boolean> {\n    const protectedPin = await this.stateService.getProtectedPin();\n    const decryptedPin = await this.cryptoService.decryptToUtf8(\n      new EncString(protectedPin),\n      userKey,\n    );\n    return decryptedPin === pin;\n  }\n}\n","export class PasswordlessAuthRequest {\n  constructor(\n    readonly key: string,\n    readonly masterPasswordHash: string,\n    readonly deviceIdentifier: string,\n    readonly requestApproved: boolean,\n  ) {}\n}\n","export class PreloginRequest {\n  email: string;\n\n  constructor(email: string) {\n    this.email = email;\n  }\n}\n","export abstract class BaseResponse {\n  private response: any;\n\n  constructor(response: any) {\n    this.response = response;\n  }\n\n  protected getResponseProperty(\n    propertyName: string,\n    response: any = null,\n    exactName = false,\n  ): any {\n    if (propertyName == null || propertyName === \"\") {\n      throw new Error(\"propertyName must not be null/empty.\");\n    }\n    if (response == null && this.response != null) {\n      response = this.response;\n    }\n    if (response == null) {\n      return null;\n    }\n    if (!exactName && response[propertyName] === undefined) {\n      let otherCasePropertyName: string = null;\n      if (propertyName.charAt(0) === propertyName.charAt(0).toUpperCase()) {\n        otherCasePropertyName = propertyName.charAt(0).toLowerCase();\n      } else {\n        otherCasePropertyName = propertyName.charAt(0).toUpperCase();\n      }\n      if (propertyName.length > 1) {\n        otherCasePropertyName += propertyName.slice(1);\n      }\n\n      propertyName = otherCasePropertyName;\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toLowerCase();\n      }\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toUpperCase();\n      }\n    }\n    return response[propertyName];\n  }\n}\n","import { Utils } from \"../../platform/misc/utils\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class ErrorResponse extends BaseResponse {\n  message: string;\n  validationErrors: { [key: string]: string[] };\n  statusCode: number;\n  captchaRequired: boolean;\n  captchaSiteKey: string;\n\n  constructor(response: any, status: number, identityResponse?: boolean) {\n    super(response);\n    let errorModel = null;\n    if (response != null) {\n      const responseErrorModel = this.getResponseProperty(\"ErrorModel\");\n      if (responseErrorModel && identityResponse) {\n        errorModel = responseErrorModel;\n      } else {\n        errorModel = response;\n      }\n    }\n\n    if (status === 429) {\n      this.message = \"Rate limit exceeded. Try again later.\";\n    } else if (errorModel) {\n      this.message = this.getResponseProperty(\"Message\", errorModel);\n      this.validationErrors = this.getResponseProperty(\"ValidationErrors\", errorModel);\n      this.captchaSiteKey = this.validationErrors?.HCaptcha_SiteKey?.[0];\n      this.captchaRequired = !Utils.isNullOrWhitespace(this.captchaSiteKey);\n    }\n    this.statusCode = status;\n  }\n\n  getSingleMessage(): string {\n    if (this.validationErrors == null) {\n      return this.message;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      if (this.validationErrors[key].length) {\n        return this.validationErrors[key][0];\n      }\n    }\n    return this.message;\n  }\n\n  getAllMessages(): string[] {\n    const messages: string[] = [];\n    if (this.validationErrors == null) {\n      return messages;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      this.validationErrors[key].forEach((item: string) => {\n        let prefix = \"\";\n        if (key.indexOf(\"[\") > -1 && key.indexOf(\"]\") > -1) {\n          const lastSep = key.lastIndexOf(\".\");\n          prefix = key.substr(0, lastSep > -1 ? lastSep : key.length) + \": \";\n        }\n        messages.push(prefix + item);\n      });\n    }\n    return messages;\n  }\n}\n","export enum TwoFactorProviderType {\n  Authenticator = 0,\n  Email = 1,\n  Duo = 2,\n  Yubikey = 3,\n  U2f = 4,\n  Remember = 5,\n  OrganizationDuo = 6,\n  WebAuthn = 7,\n}\n","/*\n * This enum is used to determine if a user should be forced to initially set or reset their password\n * on login (server flag) or unlock via MP (client evaluation).\n */\nexport enum ForceSetPasswordReason {\n  /**\n   * A password reset should not be forced.\n   */\n  None,\n\n  /**\n   * Occurs when an organization admin forces a user to reset their password.\n   * Communicated via server flag.\n   */\n  AdminForcePasswordReset,\n\n  /**\n   * Occurs when a user logs in / unlocks their vault with a master password that does not meet an organization's\n   * master password policy that is enforced on login/unlock.\n   * Only set client side b/c server can't evaluate MP.\n   */\n  WeakMasterPassword,\n\n  /**\n   * Occurs when a TDE user without a password obtains the password reset permission.\n   * Set post login & decryption client side and by server in sync (to catch logged in users).\n   */\n  TdeUserWithoutPasswordHasPasswordResetPermission,\n}\n","export enum ClientType {\n  Web = \"web\",\n  Browser = \"browser\",\n  Desktop = \"desktop\",\n  // Mobile = \"mobile\",\n  Cli = \"cli\",\n  // DirectoryConnector = \"connector\",\n}\n","export enum DeviceType {\n  Android = 0,\n  iOS = 1,\n  ChromeExtension = 2,\n  FirefoxExtension = 3,\n  OperaExtension = 4,\n  EdgeExtension = 5,\n  WindowsDesktop = 6,\n  MacOsDesktop = 7,\n  LinuxDesktop = 8,\n  ChromeBrowser = 9,\n  FirefoxBrowser = 10,\n  OperaBrowser = 11,\n  EdgeBrowser = 12,\n  IEBrowser = 13,\n  UnknownBrowser = 14,\n  AndroidAmazon = 15,\n  UWP = 16,\n  SafariBrowser = 17,\n  VivaldiBrowser = 18,\n  VivaldiExtension = 19,\n  SafariExtension = 20,\n  SDK = 21,\n  Server = 22,\n  WindowsCLI = 23,\n  MacOsCLI = 24,\n  LinuxCLI = 25,\n}\n\nexport const MobileDeviceTypes: Set<DeviceType> = new Set([\n  DeviceType.Android,\n  DeviceType.iOS,\n  DeviceType.AndroidAmazon,\n]);\n\nexport const DesktopDeviceTypes: Set<DeviceType> = new Set([\n  DeviceType.WindowsDesktop,\n  DeviceType.MacOsDesktop,\n  DeviceType.LinuxDesktop,\n  DeviceType.UWP,\n  DeviceType.WindowsCLI,\n  DeviceType.MacOsCLI,\n  DeviceType.LinuxCLI,\n]);\n","import { Jsonify } from \"type-fest\";\n\nimport { DeviceType } from \"../../../../enums\";\nimport { PlatformUtilsService } from \"../../../../platform/abstractions/platform-utils.service\";\n\nexport class DeviceRequest {\n  type: DeviceType;\n  name: string;\n  identifier: string;\n  pushToken?: string;\n\n  constructor(appId: string, platformUtilsService: PlatformUtilsService) {\n    this.type = platformUtilsService.getDevice();\n    this.name = platformUtilsService.getDeviceString();\n    this.identifier = appId;\n    this.pushToken = null;\n  }\n\n  static fromJSON(json: Jsonify<DeviceRequest>) {\n    return Object.assign(Object.create(DeviceRequest.prototype), json);\n  }\n}\n","import { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\n\nexport abstract class TokenRequest {\n  protected device?: DeviceRequest;\n  protected authRequest: string;\n\n  constructor(\n    protected twoFactor?: TokenTwoFactorRequest,\n    device?: DeviceRequest,\n  ) {\n    this.device = device != null ? device : null;\n  }\n\n  // eslint-disable-next-line\n  alterIdentityTokenHeaders(headers: Headers) {\n    // Implemented in subclass if required\n  }\n\n  setTwoFactor(twoFactor: TokenTwoFactorRequest | undefined) {\n    this.twoFactor = twoFactor;\n  }\n\n  setAuthRequestAccessCode(accessCode: string) {\n    this.authRequest = accessCode;\n  }\n\n  protected toIdentityToken(clientId: string) {\n    const obj: any = {\n      scope: \"api offline_access\",\n      client_id: clientId,\n    };\n\n    if (this.device) {\n      obj.deviceType = this.device.type;\n      obj.deviceIdentifier = this.device.identifier;\n      obj.deviceName = this.device.name;\n      // no push tokens for browser apps yet\n      // obj.devicePushToken = this.device.pushToken;\n    }\n\n    //passswordless login\n    if (this.authRequest) {\n      obj.authRequest = this.authRequest;\n    }\n\n    if (this.twoFactor) {\n      if (this.twoFactor.token && this.twoFactor.provider != null) {\n        obj.twoFactorToken = this.twoFactor.token;\n        obj.twoFactorProvider = this.twoFactor.provider;\n        obj.twoFactorRemember = this.twoFactor.remember ? \"1\" : \"0\";\n      }\n    }\n\n    return obj;\n  }\n}\n","import { ClientType } from \"../../../../enums\";\nimport { Utils } from \"../../../../platform/misc/utils\";\nimport { CaptchaProtectedRequest } from \"../captcha-protected.request\";\n\nimport { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class PasswordTokenRequest extends TokenRequest implements CaptchaProtectedRequest {\n  constructor(\n    public email: string,\n    public masterPasswordHash: string,\n    public captchaResponse: string,\n    protected twoFactor: TokenTwoFactorRequest,\n    device?: DeviceRequest,\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: ClientType) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"password\";\n    obj.username = this.email;\n    obj.password = this.masterPasswordHash;\n\n    if (this.captchaResponse != null) {\n      obj.captchaResponse = this.captchaResponse;\n    }\n\n    return obj;\n  }\n\n  alterIdentityTokenHeaders(headers: Headers) {\n    headers.set(\"Auth-Email\", Utils.fromUtf8ToUrlB64(this.email));\n  }\n\n  static fromJSON(json: any) {\n    return Object.assign(Object.create(PasswordTokenRequest.prototype), json, {\n      device: json.device ? DeviceRequest.fromJSON(json.device) : undefined,\n      twoFactor: json.twoFactor\n        ? Object.assign(new TokenTwoFactorRequest(), json.twoFactor)\n        : undefined,\n    });\n  }\n}\n","import { Utils } from \"../../../platform/misc/utils\";\nimport { TwoFactorProviderType } from \"../../enums/two-factor-provider-type\";\n\nimport { ForceSetPasswordReason } from \"./force-set-password-reason\";\n\nexport class AuthResult {\n  captchaSiteKey = \"\";\n  // TODO: PM-3287 - Remove this after 3 releases of backwards compatibility. - Target release 2023.12 for removal\n  /**\n   * @deprecated\n   * Replace with using UserDecryptionOptions to determine if the user does\n   * not have a master password and is not using Key Connector.\n   * */\n  resetMasterPassword = false;\n\n  forcePasswordReset: ForceSetPasswordReason = ForceSetPasswordReason.None;\n  twoFactorProviders: Map<TwoFactorProviderType, { [key: string]: string }> = null;\n  ssoEmail2FaSessionToken?: string;\n  email: string;\n  requiresEncryptionKeyMigration: boolean;\n\n  get requiresCaptcha() {\n    return !Utils.isNullOrWhitespace(this.captchaSiteKey);\n  }\n\n  get requiresTwoFactor() {\n    return this.twoFactorProviders != null;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class IdentityCaptchaResponse extends BaseResponse {\n  siteKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.siteKey = this.getResponseProperty(\"HCaptcha_SiteKey\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class MasterPasswordPolicyResponse extends BaseResponse {\n  minComplexity: number;\n  minLength: number;\n  requireUpper: boolean;\n  requireLower: boolean;\n  requireNumbers: boolean;\n  requireSpecial: boolean;\n\n  /**\n   * Flag to indicate if the policy should be enforced on login.\n   * If true, and the user's password does not meet the policy requirements,\n   * the user will be forced to update their password.\n   */\n  enforceOnLogin: boolean;\n\n  constructor(response: any) {\n    super(response);\n\n    this.minComplexity = this.getResponseProperty(\"MinComplexity\");\n    this.minLength = this.getResponseProperty(\"MinLength\");\n    this.requireUpper = this.getResponseProperty(\"RequireUpper\");\n    this.requireLower = this.getResponseProperty(\"RequireLower\");\n    this.requireNumbers = this.getResponseProperty(\"RequireNumbers\");\n    this.requireSpecial = this.getResponseProperty(\"RequireSpecial\");\n    this.enforceOnLogin = this.getResponseProperty(\"EnforceOnLogin\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport interface IKeyConnectorUserDecryptionOptionServerResponse {\n  KeyConnectorUrl: string;\n}\n\nexport class KeyConnectorUserDecryptionOptionResponse extends BaseResponse {\n  keyConnectorUrl: string;\n\n  constructor(response: IKeyConnectorUserDecryptionOptionServerResponse) {\n    super(response);\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\n\nexport interface ITrustedDeviceUserDecryptionOptionServerResponse {\n  HasAdminApproval: boolean;\n  HasLoginApprovingDevice: boolean;\n  HasManageResetPasswordPermission: boolean;\n  EncryptedPrivateKey?: string;\n  EncryptedUserKey?: string;\n}\n\nexport class TrustedDeviceUserDecryptionOptionResponse extends BaseResponse {\n  hasAdminApproval: boolean;\n  hasLoginApprovingDevice: boolean;\n  hasManageResetPasswordPermission: boolean;\n  encryptedPrivateKey: EncString;\n  encryptedUserKey: EncString;\n\n  constructor(response: any) {\n    super(response);\n    this.hasAdminApproval = this.getResponseProperty(\"HasAdminApproval\");\n\n    this.hasLoginApprovingDevice = this.getResponseProperty(\"HasLoginApprovingDevice\");\n    this.hasManageResetPasswordPermission = this.getResponseProperty(\n      \"HasManageResetPasswordPermission\",\n    );\n\n    if (response.EncryptedPrivateKey) {\n      this.encryptedPrivateKey = new EncString(this.getResponseProperty(\"EncryptedPrivateKey\"));\n    }\n    if (response.EncryptedUserKey) {\n      this.encryptedUserKey = new EncString(this.getResponseProperty(\"EncryptedUserKey\"));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\n\nexport interface IWebAuthnPrfDecryptionOptionServerResponse {\n  EncryptedPrivateKey: string;\n  EncryptedUserKey: string;\n}\n\nexport class WebAuthnPrfDecryptionOptionResponse extends BaseResponse {\n  encryptedPrivateKey: EncString;\n  encryptedUserKey: EncString;\n\n  constructor(response: IWebAuthnPrfDecryptionOptionServerResponse) {\n    super(response);\n    if (response.EncryptedPrivateKey) {\n      this.encryptedPrivateKey = new EncString(this.getResponseProperty(\"EncryptedPrivateKey\"));\n    }\n    if (response.EncryptedUserKey) {\n      this.encryptedUserKey = new EncString(this.getResponseProperty(\"EncryptedUserKey\"));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nimport {\n  IKeyConnectorUserDecryptionOptionServerResponse,\n  KeyConnectorUserDecryptionOptionResponse,\n} from \"./key-connector-user-decryption-option.response\";\nimport {\n  ITrustedDeviceUserDecryptionOptionServerResponse,\n  TrustedDeviceUserDecryptionOptionResponse,\n} from \"./trusted-device-user-decryption-option.response\";\nimport {\n  IWebAuthnPrfDecryptionOptionServerResponse,\n  WebAuthnPrfDecryptionOptionResponse,\n} from \"./webauthn-prf-decryption-option.response\";\n\nexport interface IUserDecryptionOptionsServerResponse {\n  HasMasterPassword: boolean;\n  TrustedDeviceOption?: ITrustedDeviceUserDecryptionOptionServerResponse;\n  KeyConnectorOption?: IKeyConnectorUserDecryptionOptionServerResponse;\n  WebAuthnPrfOption?: IWebAuthnPrfDecryptionOptionServerResponse;\n}\n\nexport class UserDecryptionOptionsResponse extends BaseResponse {\n  hasMasterPassword: boolean;\n  trustedDeviceOption?: TrustedDeviceUserDecryptionOptionResponse;\n  keyConnectorOption?: KeyConnectorUserDecryptionOptionResponse;\n  webAuthnPrfOption?: WebAuthnPrfDecryptionOptionResponse;\n\n  constructor(response: IUserDecryptionOptionsServerResponse) {\n    super(response);\n\n    this.hasMasterPassword = this.getResponseProperty(\"HasMasterPassword\");\n\n    if (response.TrustedDeviceOption) {\n      this.trustedDeviceOption = new TrustedDeviceUserDecryptionOptionResponse(\n        this.getResponseProperty(\"TrustedDeviceOption\"),\n      );\n    }\n    if (response.KeyConnectorOption) {\n      this.keyConnectorOption = new KeyConnectorUserDecryptionOptionResponse(\n        this.getResponseProperty(\"KeyConnectorOption\"),\n      );\n    }\n    if (response.WebAuthnPrfOption) {\n      this.webAuthnPrfOption = new WebAuthnPrfDecryptionOptionResponse(\n        this.getResponseProperty(\"WebAuthnPrfOption\"),\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { KdfType } from \"../../../platform/enums\";\n\nimport { MasterPasswordPolicyResponse } from \"./master-password-policy.response\";\nimport { UserDecryptionOptionsResponse } from \"./user-decryption-options/user-decryption-options.response\";\n\nexport class IdentityTokenResponse extends BaseResponse {\n  accessToken: string;\n  expiresIn: number;\n  refreshToken: string;\n  tokenType: string;\n\n  resetMasterPassword: boolean;\n  privateKey: string;\n  key: string;\n  twoFactorToken: string;\n  kdf: KdfType;\n  kdfIterations: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n  forcePasswordReset: boolean;\n  masterPasswordPolicy: MasterPasswordPolicyResponse;\n  apiUseKeyConnector: boolean;\n  keyConnectorUrl: string;\n\n  userDecryptionOptions: UserDecryptionOptionsResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.accessToken = response.access_token;\n    this.expiresIn = response.expires_in;\n    this.refreshToken = response.refresh_token;\n    this.tokenType = response.token_type;\n\n    this.resetMasterPassword = this.getResponseProperty(\"ResetMasterPassword\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.twoFactorToken = this.getResponseProperty(\"TwoFactorToken\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.kdfMemory = this.getResponseProperty(\"KdfMemory\");\n    this.kdfParallelism = this.getResponseProperty(\"KdfParallelism\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\");\n    this.apiUseKeyConnector = this.getResponseProperty(\"ApiUseKeyConnector\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    this.masterPasswordPolicy = new MasterPasswordPolicyResponse(\n      this.getResponseProperty(\"MasterPasswordPolicy\"),\n    );\n\n    if (response.UserDecryptionOptions) {\n      this.userDecryptionOptions = new UserDecryptionOptionsResponse(\n        this.getResponseProperty(\"UserDecryptionOptions\"),\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { TwoFactorProviderType } from \"../../enums/two-factor-provider-type\";\n\nimport { MasterPasswordPolicyResponse } from \"./master-password-policy.response\";\n\nexport class IdentityTwoFactorResponse extends BaseResponse {\n  twoFactorProviders: TwoFactorProviderType[];\n  twoFactorProviders2 = new Map<TwoFactorProviderType, { [key: string]: string }>();\n  captchaToken: string;\n  ssoEmail2faSessionToken: string;\n  email?: string;\n  masterPasswordPolicy?: MasterPasswordPolicyResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaToken = this.getResponseProperty(\"CaptchaBypassToken\");\n    this.twoFactorProviders = this.getResponseProperty(\"TwoFactorProviders\");\n    const twoFactorProviders2 = this.getResponseProperty(\"TwoFactorProviders2\");\n    if (twoFactorProviders2 != null) {\n      for (const prop in twoFactorProviders2) {\n        // eslint-disable-next-line\n        if (twoFactorProviders2.hasOwnProperty(prop)) {\n          this.twoFactorProviders2.set(parseInt(prop, null), twoFactorProviders2[prop]);\n        }\n      }\n    }\n    this.masterPasswordPolicy = new MasterPasswordPolicyResponse(\n      this.getResponseProperty(\"MasterPasswordPolicy\"),\n    );\n\n    this.ssoEmail2faSessionToken = this.getResponseProperty(\"SsoEmail2faSessionToken\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","// Note: the enum key is used to describe the EventSystemUser in the UI. Be careful about changing it.\nexport enum EventSystemUser {\n  SCIM = 1,\n  DomainVerification = 2,\n}\n","// Increment by 100 for each new set of events\nexport enum EventType {\n  User_LoggedIn = 1000,\n  User_ChangedPassword = 1001,\n  User_Updated2fa = 1002,\n  User_Disabled2fa = 1003,\n  User_Recovered2fa = 1004,\n  User_FailedLogIn = 1005,\n  User_FailedLogIn2fa = 1006,\n  User_ClientExportedVault = 1007,\n  User_UpdatedTempPassword = 1008,\n  User_MigratedKeyToKeyConnector = 1009,\n  User_RequestedDeviceApproval = 1010,\n\n  Cipher_Created = 1100,\n  Cipher_Updated = 1101,\n  Cipher_Deleted = 1102,\n  Cipher_AttachmentCreated = 1103,\n  Cipher_AttachmentDeleted = 1104,\n  Cipher_Shared = 1105,\n  Cipher_UpdatedCollections = 1106,\n  Cipher_ClientViewed = 1107,\n  Cipher_ClientToggledPasswordVisible = 1108,\n  Cipher_ClientToggledHiddenFieldVisible = 1109,\n  Cipher_ClientToggledCardCodeVisible = 1110,\n  Cipher_ClientCopiedPassword = 1111,\n  Cipher_ClientCopiedHiddenField = 1112,\n  Cipher_ClientCopiedCardCode = 1113,\n  Cipher_ClientAutofilled = 1114,\n  Cipher_SoftDeleted = 1115,\n  Cipher_Restored = 1116,\n  Cipher_ClientToggledCardNumberVisible = 1117,\n  Cipher_ClientToggledTOTPSeedVisible = 1118,\n\n  Collection_Created = 1300,\n  Collection_Updated = 1301,\n  Collection_Deleted = 1302,\n\n  Group_Created = 1400,\n  Group_Updated = 1401,\n  Group_Deleted = 1402,\n\n  OrganizationUser_Invited = 1500,\n  OrganizationUser_Confirmed = 1501,\n  OrganizationUser_Updated = 1502,\n  OrganizationUser_Removed = 1503,\n  OrganizationUser_UpdatedGroups = 1504,\n  OrganizationUser_UnlinkedSso = 1505,\n  OrganizationUser_ResetPassword_Enroll = 1506,\n  OrganizationUser_ResetPassword_Withdraw = 1507,\n  OrganizationUser_AdminResetPassword = 1508,\n  OrganizationUser_ResetSsoLink = 1509,\n  OrganizationUser_FirstSsoLogin = 1510,\n  OrganizationUser_Revoked = 1511,\n  OrganizationUser_Restored = 1512,\n  OrganizationUser_ApprovedAuthRequest = 1513,\n  OrganizationUser_RejectedAuthRequest = 1514,\n\n  Organization_Updated = 1600,\n  Organization_PurgedVault = 1601,\n  Organization_ClientExportedVault = 1602,\n  Organization_VaultAccessed = 1603,\n  Organization_EnabledSso = 1604,\n  Organization_DisabledSso = 1605,\n  Organization_EnabledKeyConnector = 1606,\n  Organization_DisabledKeyConnector = 1607,\n  Organization_SponsorshipsSynced = 1608,\n  Organization_CollectionManagementUpdated = 1609,\n\n  Policy_Updated = 1700,\n\n  ProviderUser_Invited = 1800,\n  ProviderUser_Confirmed = 1801,\n  ProviderUser_Updated = 1802,\n  ProviderUser_Removed = 1803,\n\n  ProviderOrganization_Created = 1900,\n  ProviderOrganization_Added = 1901,\n  ProviderOrganization_Removed = 1902,\n  ProviderOrganization_VaultAccessed = 1903,\n\n  OrganizationDomain_Added = 2000,\n  OrganizationDomain_Removed = 2001,\n  OrganizationDomain_Verified = 2002,\n  OrganizationDomain_NotVerified = 2003,\n\n  Secret_Retrieved = 2100,\n}\n","/**\n * Hypertext Transfer Protocol (HTTP) response status codes.\n *\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\n * src: https://gist.github.com/RWOverdijk/6cef816cfdf5722228e01cc05fd4b094\n */\nexport enum HttpStatusCode {\n  /**\n   * The server has received the request headers and the client should proceed to send the request body\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\n   */\n  Continue = 100,\n\n  /**\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\n   */\n  SwitchingProtocols = 101,\n\n  /**\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\n   * This prevents the client from timing out and assuming the request was lost.\n   */\n  Processing = 102,\n\n  // **********************************************************************************************************\n  // 200s - SUCCESS\n  // **********************************************************************************************************\n\n  /**\n   * Standard response for successful HTTP requests.\n   * The actual response will depend on the request method used.\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\n   */\n  Ok = 200,\n\n  /**\n   * The request has been fulfilled, resulting in the creation of a new resource.\n   */\n  Created = 201,\n\n  /**\n   * The request has been accepted for processing, but the processing has not been completed.\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n   */\n  Accepted = 202,\n\n  /**\n   * SINCE HTTP/1.1\n   * The server is a transforming proxy that received a 200 OK from its origin,\n   * but is returning a modified version of the origin's response.\n   */\n  NonAuthoritativeInformation = 203,\n\n  /**\n   * The server successfully processed the request and is not returning any content.\n   */\n  NoContent = 204,\n\n  /**\n   * The server successfully processed the request, but is not returning any content.\n   * Unlike a 204 response, this response requires that the requester reset the document view.\n   */\n  ResetContent = 205,\n\n  /**\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\n   * or split a download into multiple simultaneous streams.\n   */\n  PartialContent = 206,\n\n  /**\n   * The message body that follows is an XML message and can contain a number of separate response codes,\n   * depending on how many sub-requests were made.\n   */\n  MultiStatus = 207,\n\n  /**\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\n   * and are not being included again.\n   */\n  AlreadyReported = 208,\n\n  /**\n   * The server has fulfilled a request for the resource,\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n   */\n  ImUsed = 226,\n\n  // **********************************************************************************************************\n  // 300s - Redirections\n  // **********************************************************************************************************\n\n  /**\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n   * For example, this code could be used to present multiple video format options,\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\n   */\n  MultipleChoices = 300,\n\n  /**\n   * This and all future requests should be directed to the given URI.\n   */\n  MovedPermanently = 301,\n\n  /**\n   * This is an example of industry practice contradicting the standard.\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\n   * use the 302 status code as if it were the 303.\n   */\n  Found = 302,\n\n  /**\n   * SINCE HTTP/1.1\n   * The response to the request can be found under another URI using a GET method.\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\n   * the server has received the data and should issue a redirect with a separate GET message.\n   */\n  SeeOther = 303,\n\n  /**\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\n   */\n  NotModified = 304,\n\n  /**\n   * SINCE HTTP/1.1\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\n   */\n  UseProxy = 305,\n\n  /**\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\n   */\n  SwitchProxy = 306,\n\n  /**\n   * SINCE HTTP/1.1\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\n   * For example, a POST request should be repeated using another POST request.\n   */\n  TemporaryRedirect = 307,\n\n  /**\n   * The request and all future requests should be repeated using another URI.\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\n   */\n  PermanentRedirect = 308,\n\n  // **********************************************************************************************************\n  // 400s - Client / User messed up\n  // **********************************************************************************************************\n\n  /**\n   * The server cannot or will not process the request due to an apparent client error\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n   */\n  BadRequest = 400,\n\n  /**\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n   */\n  Unauthorized = 401,\n\n  /**\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\n   */\n  PaymentRequired = 402,\n\n  /**\n   * The request was valid, but the server is refusing action.\n   * The user might not have the necessary permissions for a resource.\n   */\n  Forbidden = 403,\n\n  /**\n   * The requested resource could not be found but may be available in the future.\n   * Subsequent requests by the client are permissible.\n   */\n  NotFound = 404,\n\n  /**\n   * A request method is not supported for the requested resource;\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\n   */\n  MethodNotAllowed = 405,\n\n  /**\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n   */\n  NotAcceptable = 406,\n\n  /**\n   * The client must first authenticate itself with the proxy.\n   */\n  ProxyAuthenticationRequired = 407,\n\n  /**\n   * The server timed out waiting for the request.\n   * According to HTTP specifications:\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\n   */\n  RequestTimeout = 408,\n\n  /**\n   * Indicates that the request could not be processed because of conflict in the request,\n   * such as an edit conflict between multiple simultaneous updates.\n   */\n  Conflict = 409,\n\n  /**\n   * Indicates that the resource requested is no longer available and will not be available again.\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\n   * Clients such as search engines should remove the resource from their indices.\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\n   */\n  Gone = 410,\n\n  /**\n   * The request did not specify the length of its content, which is required by the requested resource.\n   */\n  LengthRequired = 411,\n\n  /**\n   * The server does not meet one of the preconditions that the requester put on the request.\n   */\n  PreconditionFailed = 412,\n\n  /**\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\n   */\n  PayloadTooLarge = 413,\n\n  /**\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\n   * in which case it should be converted to a POST request.\n   * Called \"Request-URI Too Long\" previously.\n   */\n  UriTooLong = 414,\n\n  /**\n   * The request entity has a media type which the server or resource does not support.\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n   */\n  UnsupportedMediaType = 415,\n\n  /**\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\n   * Called \"Requested Range Not Satisfiable\" previously.\n   */\n  RangeNotSatisfiable = 416,\n\n  /**\n   * The server cannot meet the requirements of the Expect request-header field.\n   */\n  ExpectationFailed = 417,\n\n  /**\n   * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\n   * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\n   * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\n   */\n  IAmATeapot = 418,\n\n  /**\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\n   */\n  MisdirectedRequest = 421,\n\n  /**\n   * The request was well-formed but was unable to be followed due to semantic errors.\n   */\n  UnprocessableEntity = 422,\n\n  /**\n   * The resource that is being accessed is locked.\n   */\n  Locked = 423,\n\n  /**\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\n   */\n  FailedDependency = 424,\n\n  /**\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n   */\n  UpgradeRequired = 426,\n\n  /**\n   * The origin server requires the request to be conditional.\n   * Intended to prevent \"the 'lost update' problem, where a client\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\n   */\n  PreconditionRequired = 428,\n\n  /**\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\n   */\n  TooManyRequests = 429,\n\n  /**\n   * The server is unwilling to process the request because either an individual header field,\n   * or all the header fields collectively, are too large.\n   */\n  RequestHeaderFieldsTooLarge = 431,\n\n  /**\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\n   */\n  UnavailableForLegalReasons = 451,\n\n  // **********************************************************************************************************\n  // 500s - Server messed up\n  // **********************************************************************************************************\n\n  /**\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n   */\n  InternalServerError = 500,\n\n  /**\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\n   */\n  NotImplemented = 501,\n\n  /**\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n   */\n  BadGateway = 502,\n\n  /**\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\n   * Generally, this is a temporary state.\n   */\n  ServiceUnavailable = 503,\n\n  /**\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n   */\n  GatewayTimeout = 504,\n\n  /**\n   * The server does not support the HTTP protocol version used in the request\n   */\n  HttpVersionNotSupported = 505,\n\n  /**\n   * Transparent content negotiation for the request results in a circular reference.\n   */\n  VariantAlsoNegotiates = 506,\n\n  /**\n   * The server is unable to store the representation needed to complete the request.\n   */\n  InsufficientStorage = 507,\n\n  /**\n   * The server detected an infinite loop while processing the request.\n   */\n  LoopDetected = 508,\n\n  /**\n   * Further extensions to the request are required for the server to fulfill it.\n   */\n  NotExtended = 510,\n\n  /**\n   * The client needs to authenticate to gain network access.\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\n   */\n  NetworkAuthenticationRequired = 511,\n}\n","export enum NativeMessagingVersion {\n  One = 1, // Original implementation\n  Latest = One,\n}\n","export enum NotificationType {\n  SyncCipherUpdate = 0,\n  SyncCipherCreate = 1,\n  SyncLoginDelete = 2,\n  SyncFolderDelete = 3,\n  SyncCiphers = 4,\n\n  SyncVault = 5,\n  SyncOrgKeys = 6,\n  SyncFolderCreate = 7,\n  SyncFolderUpdate = 8,\n  SyncCipherDelete = 9,\n  SyncSettings = 10,\n\n  LogOut = 11,\n\n  SyncSendCreate = 12,\n  SyncSendUpdate = 13,\n  SyncSendDelete = 14,\n\n  AuthRequest = 15,\n  AuthRequestResponse = 16,\n\n  SyncOrganizations = 17,\n}\n","export enum ProductType {\n  Free = 0,\n  Families = 1,\n  Teams = 2,\n  Enterprise = 3,\n  TeamsStarter = 4,\n}\n","export enum InitializerKey {\n  Cipher = 0,\n  CipherView = 1,\n}\n","export enum CipherRepromptType {\n  None = 0,\n  Password = 1,\n}\n","export enum CipherType {\n  Login = 1,\n  SecureNote = 2,\n  Card = 3,\n  Identity = 4,\n}\n","export enum FieldType {\n  Text = 0,\n  Hidden = 1,\n  Boolean = 2,\n  Linked = 3,\n}\n","export type LinkedIdType = LoginLinkedId | CardLinkedId | IdentityLinkedId;\n\n// LoginView\nexport enum LoginLinkedId {\n  Username = 100,\n  Password = 101,\n}\n\n// CardView\nexport enum CardLinkedId {\n  CardholderName = 300,\n  ExpMonth = 301,\n  ExpYear = 302,\n  Code = 303,\n  Brand = 304,\n  Number = 305,\n}\n\n// IdentityView\nexport enum IdentityLinkedId {\n  Title = 400,\n  MiddleName = 401,\n  Address1 = 402,\n  Address2 = 403,\n  Address3 = 404,\n  City = 405,\n  State = 406,\n  PostalCode = 407,\n  Country = 408,\n  Company = 409,\n  Email = 410,\n  Phone = 411,\n  Ssn = 412,\n  Username = 413,\n  PassportNumber = 414,\n  LicenseNumber = 415,\n  FirstName = 416,\n  LastName = 417,\n  FullName = 418,\n}\n","export enum SecureNoteType {\n  Generic = 0,\n}\n","export class KeysRequest {\n  publicKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(publicKey: string, encryptedPrivateKey: string) {\n    this.publicKey = publicKey;\n    this.encryptedPrivateKey = encryptedPrivateKey;\n  }\n}\n","import { Utils } from \"../../../platform/misc/utils\";\n\n// TODO: Tech Debt: potentially create a type Storage shape vs using a class here in the future\n// type StorageShape {\n//   id: string;\n//   privateKey: string;\n// }\n// so we can get rid of the any type passed into fromJSON and coming out of ToJSON\nexport class AdminAuthRequestStorable {\n  id: string;\n  privateKey: Uint8Array;\n\n  constructor(init?: Partial<AdminAuthRequestStorable>) {\n    if (init) {\n      Object.assign(this, init);\n    }\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      privateKey: Utils.fromBufferToByteString(this.privateKey),\n    };\n  }\n\n  static fromJSON(obj: any): AdminAuthRequestStorable {\n    if (obj == null) {\n      return null;\n    }\n\n    let privateKeyBuffer = null;\n    if (obj.privateKey) {\n      privateKeyBuffer = Utils.fromByteStringToArray(obj.privateKey);\n    }\n\n    return new AdminAuthRequestStorable({\n      id: obj.id,\n      privateKey: privateKeyBuffer,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { Attachment } from \"../domain/attachment\";\n\nexport class AttachmentView implements View {\n  id: string = null;\n  url: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n  key: SymmetricCryptoKey = null;\n\n  constructor(a?: Attachment) {\n    if (!a) {\n      return;\n    }\n\n    this.id = a.id;\n    this.url = a.url;\n    this.size = a.size;\n    this.sizeName = a.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<AttachmentView>>): AttachmentView {\n    const key = obj.key == null ? null : SymmetricCryptoKey.fromJSON(obj.key);\n    return Object.assign(new AttachmentView(), obj, { key: key });\n  }\n}\n","import { LinkedIdType } from \"./enums\";\nimport { ItemView } from \"./models/view/item.view\";\n\nexport class LinkedMetadata {\n  constructor(\n    readonly propertyKey: string,\n    private readonly _i18nKey?: string,\n  ) {}\n\n  get i18nKey() {\n    return this._i18nKey ?? this.propertyKey;\n  }\n}\n\n/**\n * A decorator used to set metadata used by Linked custom fields. Apply it to a class property or getter to make it\n *    available as a Linked custom field option.\n * @param id - A unique value that is saved in the Field model. It is used to look up the decorated class property.\n * @param i18nKey - The i18n key used to describe the decorated class property in the UI. If it is null, then the name\n *    of the class property will be used as the i18n key.\n */\nexport function linkedFieldOption(id: LinkedIdType, i18nKey?: string) {\n  return (prototype: ItemView, propertyKey: string) => {\n    if (prototype.linkedFieldOptions == null) {\n      prototype.linkedFieldOptions = new Map<LinkedIdType, LinkedMetadata>();\n    }\n\n    prototype.linkedFieldOptions.set(id, new LinkedMetadata(propertyKey, i18nKey));\n  };\n}\n","import { View } from \"../../../models/view/view\";\nimport { LinkedMetadata } from \"../../linked-field-option.decorator\";\n\nexport abstract class ItemView implements View {\n  linkedFieldOptions: Map<number, LinkedMetadata>;\n  abstract get subTitle(): string;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CardLinkedId as LinkedId } from \"../../enums\";\nimport { linkedFieldOption } from \"../../linked-field-option.decorator\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class CardView extends ItemView {\n  @linkedFieldOption(LinkedId.CardholderName)\n  cardholderName: string = null;\n  @linkedFieldOption(LinkedId.ExpMonth, \"expirationMonth\")\n  expMonth: string = null;\n  @linkedFieldOption(LinkedId.ExpYear, \"expirationYear\")\n  expYear: string = null;\n  @linkedFieldOption(LinkedId.Code, \"securityCode\")\n  code: string = null;\n\n  private _brand: string = null;\n  private _number: string = null;\n  private _subTitle: string = null;\n\n  get maskedCode(): string {\n    return this.code != null ? \"•\".repeat(this.code.length) : null;\n  }\n\n  get maskedNumber(): string {\n    return this.number != null ? \"•\".repeat(this.number.length) : null;\n  }\n\n  @linkedFieldOption(LinkedId.Brand)\n  get brand(): string {\n    return this._brand;\n  }\n  set brand(value: string) {\n    this._brand = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.Number)\n  get number(): string {\n    return this._number;\n  }\n  set number(value: string) {\n    this._number = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null) {\n      this._subTitle = this.brand;\n      if (this.number != null && this.number.length >= 4) {\n        if (this._subTitle != null && this._subTitle !== \"\") {\n          this._subTitle += \", \";\n        } else {\n          this._subTitle = \"\";\n        }\n\n        // Show last 5 on amex, last 4 for all others\n        const count =\n          this.number.length >= 5 && this.number.match(new RegExp(\"^3[47]\")) != null ? 5 : 4;\n        this._subTitle += \"*\" + this.number.substr(this.number.length - count);\n      }\n    }\n    return this._subTitle;\n  }\n\n  get expiration(): string {\n    if (!this.expMonth && !this.expYear) {\n      return null;\n    }\n\n    let exp = this.expMonth != null ? (\"0\" + this.expMonth).slice(-2) : \"__\";\n    exp += \" / \" + (this.expYear != null ? this.formatYear(this.expYear) : \"____\");\n    return exp;\n  }\n\n  private formatYear(year: string): string {\n    return year.length === 2 ? \"20\" + year : year;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<CardView>>): CardView {\n    return Object.assign(new CardView(), obj);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  static getCardBrandByPatterns(cardNum: string): string {\n    if (cardNum == null || typeof cardNum !== \"string\" || cardNum.trim() === \"\") {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum,\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\",\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { FieldType, LinkedIdType } from \"../../enums\";\nimport { Field } from \"../domain/field\";\n\nexport class FieldView implements View {\n  name: string = null;\n  value: string = null;\n  type: FieldType = null;\n  newField = false; // Marks if the field is new and hasn't been saved\n  showValue = false;\n  showCount = false;\n  linkedId: LinkedIdType = null;\n\n  constructor(f?: Field) {\n    if (!f) {\n      return;\n    }\n\n    this.type = f.type;\n    this.linkedId = f.linkedId;\n  }\n\n  get maskedValue(): string {\n    return this.value != null ? \"••••••••\" : null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<FieldView>>): FieldView {\n    return Object.assign(new FieldView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { IdentityLinkedId as LinkedId } from \"../../enums\";\nimport { linkedFieldOption } from \"../../linked-field-option.decorator\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class IdentityView extends ItemView {\n  @linkedFieldOption(LinkedId.Title)\n  title: string = null;\n  @linkedFieldOption(LinkedId.MiddleName)\n  middleName: string = null;\n  @linkedFieldOption(LinkedId.Address1)\n  address1: string = null;\n  @linkedFieldOption(LinkedId.Address2)\n  address2: string = null;\n  @linkedFieldOption(LinkedId.Address3)\n  address3: string = null;\n  @linkedFieldOption(LinkedId.City, \"cityTown\")\n  city: string = null;\n  @linkedFieldOption(LinkedId.State, \"stateProvince\")\n  state: string = null;\n  @linkedFieldOption(LinkedId.PostalCode, \"zipPostalCode\")\n  postalCode: string = null;\n  @linkedFieldOption(LinkedId.Country)\n  country: string = null;\n  @linkedFieldOption(LinkedId.Company)\n  company: string = null;\n  @linkedFieldOption(LinkedId.Email)\n  email: string = null;\n  @linkedFieldOption(LinkedId.Phone)\n  phone: string = null;\n  @linkedFieldOption(LinkedId.Ssn)\n  ssn: string = null;\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.PassportNumber)\n  passportNumber: string = null;\n  @linkedFieldOption(LinkedId.LicenseNumber)\n  licenseNumber: string = null;\n\n  private _firstName: string = null;\n  private _lastName: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  @linkedFieldOption(LinkedId.FirstName)\n  get firstName(): string {\n    return this._firstName;\n  }\n  set firstName(value: string) {\n    this._firstName = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.LastName)\n  get lastName(): string {\n    return this._lastName;\n  }\n  set lastName(value: string) {\n    this._lastName = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {\n      this._subTitle = \"\";\n      if (this.firstName != null) {\n        this._subTitle = this.firstName;\n      }\n      if (this.lastName != null) {\n        if (this._subTitle !== \"\") {\n          this._subTitle += \" \";\n        }\n        this._subTitle += this.lastName;\n      }\n    }\n\n    return this._subTitle;\n  }\n\n  @linkedFieldOption(LinkedId.FullName)\n  get fullName(): string {\n    if (\n      this.title != null ||\n      this.firstName != null ||\n      this.middleName != null ||\n      this.lastName != null\n    ) {\n      let name = \"\";\n      if (this.title != null) {\n        name += this.title + \" \";\n      }\n      if (this.firstName != null) {\n        name += this.firstName + \" \";\n      }\n      if (this.middleName != null) {\n        name += this.middleName + \" \";\n      }\n      if (this.lastName != null) {\n        name += this.lastName;\n      }\n      return name.trim();\n    }\n\n    return null;\n  }\n\n  get fullAddress(): string {\n    let address = this.address1;\n    if (!Utils.isNullOrWhitespace(this.address2)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address2;\n    }\n    if (!Utils.isNullOrWhitespace(this.address3)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address3;\n    }\n    return address;\n  }\n\n  get fullAddressPart2(): string {\n    if (this.city == null && this.state == null && this.postalCode == null) {\n      return null;\n    }\n    const city = this.city || \"-\";\n    const state = this.state;\n    const postalCode = this.postalCode || \"-\";\n    let addressPart2 = city;\n    if (!Utils.isNullOrWhitespace(state)) {\n      addressPart2 += \", \" + state;\n    }\n    addressPart2 += \", \" + postalCode;\n    return addressPart2;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<IdentityView>>): IdentityView {\n    return Object.assign(new IdentityView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class Fido2CredentialView extends ItemView {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  userName: string;\n  counter: number;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: boolean;\n  creationDate: Date = null;\n\n  get subTitle(): string {\n    return this.userDisplayName;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Fido2CredentialView>>): Fido2CredentialView {\n    const creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n    return Object.assign(new Fido2CredentialView(), obj, {\n      creationDate,\n    });\n  }\n}\n","/*\n  See full documentation at:\n    https://bitwarden.com/help/uri-match-detection/#match-detection-options\n\n  Domain: \"the top-level domain and second-level domain of the URI match the detected resource\",\n  Host: \"the hostname and (if specified) port of the URI matches the detected resource\",\n  StartsWith: \"the detected resource starts with the URI, regardless of what follows it\",\n  Exact: \"the URI matches the detected resource exactly\",\n  RegularExpression: \"the detected resource matches a specified regular expression\",\n  Never: \"never offer auto-fill for the item\",\n*/\nexport const UriMatchStrategy = {\n  Domain: 0,\n  Host: 1,\n  StartsWith: 2,\n  Exact: 3,\n  RegularExpression: 4,\n  Never: 5,\n} as const;\n\nexport type UriMatchStrategySetting = (typeof UriMatchStrategy)[keyof typeof UriMatchStrategy];\n\nexport type NeverDomains = { [id: string]: unknown };\nexport type EquivalentDomains = string[][];\n","import { Utils } from \"./utils\";\n\nconst CanLaunchWhitelist = [\n  \"https://\",\n  \"http://\",\n  \"ssh://\",\n  \"ftp://\",\n  \"sftp://\",\n  \"irc://\",\n  \"vnc://\",\n  // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri\n  \"rdp://\", // Legacy RDP URI scheme\n  \"ms-rd:\", // Preferred RDP URI scheme\n  \"chrome://\",\n  \"iosapp://\",\n  \"androidapp://\",\n];\n\nexport class SafeUrls {\n  static canLaunch(uri: string): boolean {\n    if (Utils.isNullOrWhitespace(uri)) {\n      return false;\n    }\n\n    for (let i = 0; i < CanLaunchWhitelist.length; i++) {\n      if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UriMatchStrategy, UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { View } from \"../../../models/view/view\";\nimport { SafeUrls } from \"../../../platform/misc/safe-urls\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { LoginUri } from \"../domain/login-uri\";\n\nexport class LoginUriView implements View {\n  match: UriMatchStrategySetting = null;\n\n  private _uri: string = null;\n  private _domain: string = null;\n  private _hostname: string = null;\n  private _host: string = null;\n  private _canLaunch: boolean = null;\n\n  constructor(u?: LoginUri) {\n    if (!u) {\n      return;\n    }\n\n    this.match = u.match;\n  }\n\n  get uri(): string {\n    return this._uri;\n  }\n  set uri(value: string) {\n    this._uri = value;\n    this._domain = null;\n    this._canLaunch = null;\n  }\n\n  get domain(): string {\n    if (this._domain == null && this.uri != null) {\n      this._domain = Utils.getDomain(this.uri);\n      if (this._domain === \"\") {\n        this._domain = null;\n      }\n    }\n\n    return this._domain;\n  }\n\n  get hostname(): string {\n    if (this.match === UriMatchStrategy.RegularExpression) {\n      return null;\n    }\n    if (this._hostname == null && this.uri != null) {\n      this._hostname = Utils.getHostname(this.uri);\n      if (this._hostname === \"\") {\n        this._hostname = null;\n      }\n    }\n\n    return this._hostname;\n  }\n\n  get host(): string {\n    if (this.match === UriMatchStrategy.RegularExpression) {\n      return null;\n    }\n    if (this._host == null && this.uri != null) {\n      this._host = Utils.getHost(this.uri);\n      if (this._host === \"\") {\n        this._host = null;\n      }\n    }\n\n    return this._host;\n  }\n\n  get hostnameOrUri(): string {\n    return this.hostname != null ? this.hostname : this.uri;\n  }\n\n  get hostOrUri(): string {\n    return this.host != null ? this.host : this.uri;\n  }\n\n  get isWebsite(): boolean {\n    return (\n      this.uri != null &&\n      (this.uri.indexOf(\"http://\") === 0 ||\n        this.uri.indexOf(\"https://\") === 0 ||\n        (this.uri.indexOf(\"://\") < 0 && !Utils.isNullOrWhitespace(Utils.getDomain(this.uri))))\n    );\n  }\n\n  get canLaunch(): boolean {\n    if (this._canLaunch != null) {\n      return this._canLaunch;\n    }\n    if (this.uri != null && this.match !== UriMatchStrategy.RegularExpression) {\n      this._canLaunch = SafeUrls.canLaunch(this.launchUri);\n    } else {\n      this._canLaunch = false;\n    }\n    return this._canLaunch;\n  }\n\n  get launchUri(): string {\n    return this.uri.indexOf(\"://\") < 0 && !Utils.isNullOrWhitespace(Utils.getDomain(this.uri))\n      ? \"http://\" + this.uri\n      : this.uri;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<LoginUriView>>): LoginUriView {\n    return Object.assign(new LoginUriView(), obj);\n  }\n\n  matchesUri(\n    targetUri: string,\n    equivalentDomains: Set<string>,\n    defaultUriMatch: UriMatchStrategySetting = null,\n  ): boolean {\n    if (!this.uri || !targetUri) {\n      return false;\n    }\n\n    let matchType = this.match ?? defaultUriMatch;\n    matchType ??= UriMatchStrategy.Domain;\n\n    const targetDomain = Utils.getDomain(targetUri);\n    const matchDomains = equivalentDomains.add(targetDomain);\n\n    switch (matchType) {\n      case UriMatchStrategy.Domain:\n        return this.matchesDomain(targetUri, matchDomains);\n      case UriMatchStrategy.Host: {\n        const urlHost = Utils.getHost(targetUri);\n        return urlHost != null && urlHost === Utils.getHost(this.uri);\n      }\n      case UriMatchStrategy.Exact:\n        return targetUri === this.uri;\n      case UriMatchStrategy.StartsWith:\n        return targetUri.startsWith(this.uri);\n      case UriMatchStrategy.RegularExpression:\n        try {\n          const regex = new RegExp(this.uri, \"i\");\n          return regex.test(targetUri);\n        } catch (e) {\n          // Invalid regex\n          return false;\n        }\n      case UriMatchStrategy.Never:\n        return false;\n      default:\n        break;\n    }\n\n    return false;\n  }\n\n  private matchesDomain(targetUri: string, matchDomains: Set<string>) {\n    if (targetUri == null || this.domain == null || !matchDomains.has(this.domain)) {\n      return false;\n    }\n\n    if (Utils.DomainMatchBlacklist.has(this.domain)) {\n      const domainUrlHost = Utils.getHost(targetUri);\n      return !Utils.DomainMatchBlacklist.get(this.domain).has(domainUrlHost);\n    }\n\n    return true;\n  }\n}\n","import { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { DeepJsonify } from \"../../../types/deep-jsonify\";\nimport { LoginLinkedId as LinkedId } from \"../../enums\";\nimport { linkedFieldOption } from \"../../linked-field-option.decorator\";\nimport { Login } from \"../domain/login\";\n\nimport { Fido2CredentialView } from \"./fido2-credential.view\";\nimport { ItemView } from \"./item.view\";\nimport { LoginUriView } from \"./login-uri.view\";\n\nexport class LoginView extends ItemView {\n  @linkedFieldOption(LinkedId.Username)\n  username: string = null;\n  @linkedFieldOption(LinkedId.Password)\n  password: string = null;\n\n  passwordRevisionDate?: Date = null;\n  totp: string = null;\n  uris: LoginUriView[] = [];\n  autofillOnPageLoad: boolean = null;\n  fido2Credentials: Fido2CredentialView[] = null;\n\n  constructor(l?: Login) {\n    super();\n    if (!l) {\n      return;\n    }\n\n    this.passwordRevisionDate = l.passwordRevisionDate;\n    this.autofillOnPageLoad = l.autofillOnPageLoad;\n  }\n\n  get uri(): string {\n    return this.hasUris ? this.uris[0].uri : null;\n  }\n\n  get maskedPassword(): string {\n    return this.password != null ? \"••••••••\" : null;\n  }\n\n  get subTitle(): string {\n    return this.username;\n  }\n\n  get canLaunch(): boolean {\n    return this.hasUris && this.uris.some((u) => u.canLaunch);\n  }\n\n  get hasTotp(): boolean {\n    return !Utils.isNullOrWhitespace(this.totp);\n  }\n\n  get launchUri(): string {\n    if (this.hasUris) {\n      const uri = this.uris.find((u) => u.canLaunch);\n      if (uri != null) {\n        return uri.launchUri;\n      }\n    }\n    return null;\n  }\n\n  get hasUris(): boolean {\n    return this.uris != null && this.uris.length > 0;\n  }\n\n  get hasFido2Credentials(): boolean {\n    return this.fido2Credentials != null && this.fido2Credentials.length > 0;\n  }\n\n  matchesUri(\n    targetUri: string,\n    equivalentDomains: Set<string>,\n    defaultUriMatch: UriMatchStrategySetting = null,\n  ): boolean {\n    if (this.uris == null) {\n      return false;\n    }\n\n    return this.uris.some((uri) => uri.matchesUri(targetUri, equivalentDomains, defaultUriMatch));\n  }\n\n  static fromJSON(obj: Partial<DeepJsonify<LoginView>>): LoginView {\n    const passwordRevisionDate =\n      obj.passwordRevisionDate == null ? null : new Date(obj.passwordRevisionDate);\n    const uris = obj.uris.map((uri) => LoginUriView.fromJSON(uri));\n    const fido2Credentials = obj.fido2Credentials?.map((key) => Fido2CredentialView.fromJSON(key));\n\n    return Object.assign(new LoginView(), obj, {\n      passwordRevisionDate,\n      uris,\n      fido2Credentials,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { Password } from \"../domain/password\";\n\nexport class PasswordHistoryView implements View {\n  password: string = null;\n  lastUsedDate: Date = null;\n\n  constructor(ph?: Password) {\n    if (!ph) {\n      return;\n    }\n\n    this.lastUsedDate = ph.lastUsedDate;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<PasswordHistoryView>>): PasswordHistoryView {\n    const lastUsedDate = obj.lastUsedDate == null ? null : new Date(obj.lastUsedDate);\n\n    return Object.assign(new PasswordHistoryView(), obj, {\n      lastUsedDate: lastUsedDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { SecureNoteType } from \"../../enums\";\nimport { SecureNote } from \"../domain/secure-note\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class SecureNoteView extends ItemView {\n  type: SecureNoteType = null;\n\n  constructor(n?: SecureNote) {\n    super();\n    if (!n) {\n      return;\n    }\n\n    this.type = n.type;\n  }\n\n  get subTitle(): string {\n    return null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<SecureNoteView>>): SecureNoteView {\n    return Object.assign(new SecureNoteView(), obj);\n  }\n}\n","import { View } from \"../../../models/view/view\";\nimport { InitializerMetadata } from \"../../../platform/interfaces/initializer-metadata.interface\";\nimport { InitializerKey } from \"../../../platform/services/cryptography/initializer-key\";\nimport { DeepJsonify } from \"../../../types/deep-jsonify\";\nimport { LinkedIdType } from \"../../enums\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { LocalData } from \"../data/local.data\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentView } from \"./attachment.view\";\nimport { CardView } from \"./card.view\";\nimport { FieldView } from \"./field.view\";\nimport { IdentityView } from \"./identity.view\";\nimport { LoginView } from \"./login.view\";\nimport { PasswordHistoryView } from \"./password-history.view\";\nimport { SecureNoteView } from \"./secure-note.view\";\n\nexport class CipherView implements View, InitializerMetadata {\n  readonly initializerKey = InitializerKey.CipherView;\n\n  id: string = null;\n  organizationId: string = null;\n  folderId: string = null;\n  name: string = null;\n  notes: string = null;\n  type: CipherType = null;\n  favorite = false;\n  organizationUseTotp = false;\n  edit = false;\n  viewPassword = true;\n  localData: LocalData;\n  login = new LoginView();\n  identity = new IdentityView();\n  card = new CardView();\n  secureNote = new SecureNoteView();\n  attachments: AttachmentView[] = null;\n  fields: FieldView[] = null;\n  passwordHistory: PasswordHistoryView[] = null;\n  collectionIds: string[] = null;\n  revisionDate: Date = null;\n  creationDate: Date = null;\n  deletedDate: Date = null;\n  reprompt: CipherRepromptType = CipherRepromptType.None;\n\n  constructor(c?: Cipher) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.folderId = c.folderId;\n    this.favorite = c.favorite;\n    this.organizationUseTotp = c.organizationUseTotp;\n    this.edit = c.edit;\n    this.viewPassword = c.viewPassword;\n    this.type = c.type;\n    this.localData = c.localData;\n    this.collectionIds = c.collectionIds;\n    this.revisionDate = c.revisionDate;\n    this.creationDate = c.creationDate;\n    this.deletedDate = c.deletedDate;\n    // Old locally stored ciphers might have reprompt == null. If so set it to None.\n    this.reprompt = c.reprompt ?? CipherRepromptType.None;\n  }\n\n  private get item() {\n    switch (this.type) {\n      case CipherType.Login:\n        return this.login;\n      case CipherType.SecureNote:\n        return this.secureNote;\n      case CipherType.Card:\n        return this.card;\n      case CipherType.Identity:\n        return this.identity;\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  get subTitle(): string {\n    return this.item?.subTitle;\n  }\n\n  get hasPasswordHistory(): boolean {\n    return this.passwordHistory && this.passwordHistory.length > 0;\n  }\n\n  get hasAttachments(): boolean {\n    return this.attachments && this.attachments.length > 0;\n  }\n\n  get hasOldAttachments(): boolean {\n    if (this.hasAttachments) {\n      for (let i = 0; i < this.attachments.length; i++) {\n        if (this.attachments[i].key == null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  get hasFields(): boolean {\n    return this.fields && this.fields.length > 0;\n  }\n\n  get passwordRevisionDisplayDate(): Date {\n    if (this.type !== CipherType.Login || this.login == null) {\n      return null;\n    } else if (this.login.password == null || this.login.password === \"\") {\n      return null;\n    }\n    return this.login.passwordRevisionDate;\n  }\n\n  get isDeleted(): boolean {\n    return this.deletedDate != null;\n  }\n\n  get linkedFieldOptions() {\n    return this.item?.linkedFieldOptions;\n  }\n\n  linkedFieldValue(id: LinkedIdType) {\n    const linkedFieldOption = this.linkedFieldOptions?.get(id);\n    if (linkedFieldOption == null) {\n      return null;\n    }\n\n    const item = this.item;\n    return this.item[linkedFieldOption.propertyKey as keyof typeof item];\n  }\n\n  linkedFieldI18nKey(id: LinkedIdType): string {\n    return this.linkedFieldOptions.get(id)?.i18nKey;\n  }\n\n  // This is used as a marker to indicate that the cipher view object still has its prototype\n  toJSON() {\n    return this;\n  }\n\n  static fromJSON(obj: Partial<DeepJsonify<CipherView>>): CipherView {\n    if (obj == null) {\n      return null;\n    }\n\n    const view = new CipherView();\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const deletedDate = obj.deletedDate == null ? null : new Date(obj.deletedDate);\n    const attachments = obj.attachments?.map((a: any) => AttachmentView.fromJSON(a));\n    const fields = obj.fields?.map((f: any) => FieldView.fromJSON(f));\n    const passwordHistory = obj.passwordHistory?.map((ph: any) => PasswordHistoryView.fromJSON(ph));\n\n    Object.assign(view, obj, {\n      revisionDate: revisionDate,\n      deletedDate: deletedDate,\n      attachments: attachments,\n      fields: fields,\n      passwordHistory: passwordHistory,\n    });\n\n    switch (obj.type) {\n      case CipherType.Card:\n        view.card = CardView.fromJSON(obj.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityView.fromJSON(obj.identity);\n        break;\n      case CipherType.Login:\n        view.login = LoginView.fromJSON(obj.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteView.fromJSON(obj.secureNote);\n        break;\n      default:\n        break;\n    }\n\n    return view;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Region } from \"../../abstractions/environment.service\";\nimport {\n  ServerConfigResponse,\n  ThirdPartyServerConfigResponse,\n  EnvironmentServerConfigResponse,\n} from \"../response/server-config.response\";\n\nexport class ServerConfigData {\n  version: string;\n  gitHash: string;\n  server?: ThirdPartyServerConfigData;\n  environment?: EnvironmentServerConfigData;\n  utcDate: string;\n  featureStates: { [key: string]: string } = {};\n\n  constructor(serverConfigResponse: Partial<ServerConfigResponse>) {\n    this.version = serverConfigResponse?.version;\n    this.gitHash = serverConfigResponse?.gitHash;\n    this.server = serverConfigResponse?.server\n      ? new ThirdPartyServerConfigData(serverConfigResponse.server)\n      : null;\n    this.utcDate = new Date().toISOString();\n    this.environment = serverConfigResponse?.environment\n      ? new EnvironmentServerConfigData(serverConfigResponse.environment)\n      : null;\n    this.featureStates = serverConfigResponse?.featureStates;\n  }\n\n  static fromJSON(obj: Jsonify<ServerConfigData>): ServerConfigData {\n    return Object.assign(new ServerConfigData({}), obj, {\n      server: obj?.server ? ThirdPartyServerConfigData.fromJSON(obj.server) : null,\n      environment: obj?.environment ? EnvironmentServerConfigData.fromJSON(obj.environment) : null,\n    });\n  }\n}\n\nexport class ThirdPartyServerConfigData {\n  name: string;\n  url: string;\n\n  constructor(response: Partial<ThirdPartyServerConfigResponse>) {\n    this.name = response.name;\n    this.url = response.url;\n  }\n\n  static fromJSON(obj: Jsonify<ThirdPartyServerConfigData>): ThirdPartyServerConfigData {\n    return Object.assign(new ThirdPartyServerConfigData({}), obj);\n  }\n}\n\nexport class EnvironmentServerConfigData {\n  cloudRegion: Region;\n  vault: string;\n  api: string;\n  identity: string;\n  notifications: string;\n  sso: string;\n\n  constructor(response: Partial<EnvironmentServerConfigResponse>) {\n    this.cloudRegion = response.cloudRegion;\n    this.vault = response.vault;\n    this.api = response.api;\n    this.identity = response.identity;\n    this.notifications = response.notifications;\n    this.sso = response.sso;\n  }\n\n  static fromJSON(obj: Jsonify<EnvironmentServerConfigData>): EnvironmentServerConfigData {\n    return Object.assign(new EnvironmentServerConfigData({}), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { AdminAuthRequestStorable } from \"../../../auth/models/domain/admin-auth-req-storable\";\nimport { ForceSetPasswordReason } from \"../../../auth/models/domain/force-set-password-reason\";\nimport { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { GeneratorOptions } from \"../../../tools/generator/generator-options\";\nimport {\n  GeneratedPasswordHistory,\n  PasswordGeneratorOptions,\n} from \"../../../tools/generator/password\";\nimport { UsernameGeneratorOptions } from \"../../../tools/generator/username/username-generation-options\";\nimport { SendData } from \"../../../tools/send/models/data/send.data\";\nimport { SendView } from \"../../../tools/send/models/view/send.view\";\nimport { DeepJsonify } from \"../../../types/deep-jsonify\";\nimport { MasterKey } from \"../../../types/key\";\nimport { CipherData } from \"../../../vault/models/data/cipher.data\";\nimport { CipherView } from \"../../../vault/models/view/cipher.view\";\nimport { AddEditCipherInfo } from \"../../../vault/types/add-edit-cipher-info\";\nimport { KdfType } from \"../../enums\";\nimport { Utils } from \"../../misc/utils\";\nimport { ServerConfigData } from \"../../models/data/server-config.data\";\n\nimport { EncryptedString, EncString } from \"./enc-string\";\nimport { SymmetricCryptoKey } from \"./symmetric-crypto-key\";\n\nexport class EncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: TEncrypted;\n  decrypted?: TDecrypted;\n\n  toJSON() {\n    return {\n      encrypted: this.encrypted,\n      decrypted:\n        this.decrypted instanceof ArrayBuffer\n          ? Utils.fromBufferToByteString(this.decrypted)\n          : this.decrypted,\n    };\n  }\n\n  static fromJSON<TEncrypted, TDecrypted>(\n    obj: { encrypted?: Jsonify<TEncrypted>; decrypted?: string | Jsonify<TDecrypted> },\n    decryptedFromJson?: (decObj: Jsonify<TDecrypted> | string) => TDecrypted,\n    encryptedFromJson?: (encObj: Jsonify<TEncrypted>) => TEncrypted,\n  ) {\n    if (obj == null) {\n      return null;\n    }\n\n    const pair = new EncryptionPair<TEncrypted, TDecrypted>();\n    if (obj?.encrypted != null) {\n      pair.encrypted = encryptedFromJson\n        ? encryptedFromJson(obj.encrypted)\n        : (obj.encrypted as TEncrypted);\n    }\n    if (obj?.decrypted != null) {\n      pair.decrypted = decryptedFromJson\n        ? decryptedFromJson(obj.decrypted)\n        : (obj.decrypted as TDecrypted);\n    }\n    return pair;\n  }\n}\n\nexport class DataEncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: Record<string, TEncrypted>;\n  decrypted?: TDecrypted[];\n}\n\n// This is a temporary structure to handle migrated `DataEncryptionPair` to\n//  avoid needing a data migration at this stage. It should be replaced with\n//  proper data migrations when `DataEncryptionPair` is deprecated.\nexport class TemporaryDataEncryption<TEncrypted> {\n  encrypted?: { [id: string]: TEncrypted };\n}\n\nexport class AccountData {\n  ciphers?: DataEncryptionPair<CipherData, CipherView> = new DataEncryptionPair<\n    CipherData,\n    CipherView\n  >();\n  localData?: any;\n  sends?: DataEncryptionPair<SendData, SendView> = new DataEncryptionPair<SendData, SendView>();\n  passwordGenerationHistory?: EncryptionPair<\n    GeneratedPasswordHistory[],\n    GeneratedPasswordHistory[]\n  > = new EncryptionPair<GeneratedPasswordHistory[], GeneratedPasswordHistory[]>();\n  addEditCipherInfo?: AddEditCipherInfo;\n\n  static fromJSON(obj: DeepJsonify<AccountData>): AccountData {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountData(), obj, {\n      addEditCipherInfo: {\n        cipher: CipherView.fromJSON(obj?.addEditCipherInfo?.cipher),\n        collectionIds: obj?.addEditCipherInfo?.collectionIds,\n      },\n    });\n  }\n}\n\nexport class AccountKeys {\n  masterKey?: MasterKey;\n  masterKeyEncryptedUserKey?: string;\n  deviceKey?: ReturnType<SymmetricCryptoKey[\"toJSON\"]>;\n  publicKey?: Uint8Array;\n\n  /** @deprecated July 2023, left for migration purposes*/\n  cryptoMasterKey?: SymmetricCryptoKey;\n  /** @deprecated July 2023, left for migration purposes*/\n  cryptoMasterKeyAuto?: string;\n  /** @deprecated July 2023, left for migration purposes*/\n  cryptoMasterKeyBiometric?: string;\n  /** @deprecated July 2023, left for migration purposes*/\n  cryptoSymmetricKey?: EncryptionPair<string, SymmetricCryptoKey> = new EncryptionPair<\n    string,\n    SymmetricCryptoKey\n  >();\n\n  toJSON() {\n    // If you pass undefined into fromBufferToByteString, you will get an empty string back\n    // which will cause all sorts of headaches down the line when you try to getPublicKey\n    // and expect a Uint8Array and get an empty string instead.\n    return Utils.merge(this, {\n      publicKey: this.publicKey ? Utils.fromBufferToByteString(this.publicKey) : undefined,\n    });\n  }\n\n  static fromJSON(obj: DeepJsonify<AccountKeys>): AccountKeys {\n    if (obj == null) {\n      return null;\n    }\n    return Object.assign(new AccountKeys(), obj, {\n      masterKey: SymmetricCryptoKey.fromJSON(obj?.masterKey),\n      deviceKey: obj?.deviceKey,\n      cryptoMasterKey: SymmetricCryptoKey.fromJSON(obj?.cryptoMasterKey),\n      cryptoSymmetricKey: EncryptionPair.fromJSON(\n        obj?.cryptoSymmetricKey,\n        SymmetricCryptoKey.fromJSON,\n      ),\n      publicKey: Utils.fromByteStringToArray(obj?.publicKey),\n    });\n  }\n\n  static initRecordEncryptionPairsFromJSON(obj: any) {\n    return EncryptionPair.fromJSON(obj, (decObj: any) => {\n      if (obj == null) {\n        return null;\n      }\n\n      const record: Record<string, SymmetricCryptoKey> = {};\n      for (const id in decObj) {\n        record[id] = SymmetricCryptoKey.fromJSON(decObj[id]);\n      }\n      return record;\n    });\n  }\n}\n\nexport class AccountProfile {\n  convertAccountToKeyConnector?: boolean;\n  name?: string;\n  email?: string;\n  emailVerified?: boolean;\n  everBeenUnlocked?: boolean;\n  forceSetPasswordReason?: ForceSetPasswordReason;\n  lastSync?: string;\n  userId?: string;\n  usesKeyConnector?: boolean;\n  keyHash?: string;\n  kdfIterations?: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n  kdfType?: KdfType;\n\n  static fromJSON(obj: Jsonify<AccountProfile>): AccountProfile {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountProfile(), obj);\n  }\n}\n\nexport class AccountSettings {\n  defaultUriMatch?: UriMatchStrategySetting;\n  disableGa?: boolean;\n  enableBiometric?: boolean;\n  minimizeOnCopyToClipboard?: boolean;\n  passwordGenerationOptions?: PasswordGeneratorOptions;\n  usernameGenerationOptions?: UsernameGeneratorOptions;\n  generatorOptions?: GeneratorOptions;\n  pinKeyEncryptedUserKey?: EncryptedString;\n  pinKeyEncryptedUserKeyEphemeral?: EncryptedString;\n  protectedPin?: string;\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string = \"lock\";\n  serverConfig?: ServerConfigData;\n  approveLoginRequests?: boolean;\n  avatarColor?: string;\n  trustDeviceChoiceForDecryption?: boolean;\n\n  /** @deprecated July 2023, left for migration purposes*/\n  pinProtected?: EncryptionPair<string, EncString> = new EncryptionPair<string, EncString>();\n\n  static fromJSON(obj: Jsonify<AccountSettings>): AccountSettings {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountSettings(), obj, {\n      pinProtected: EncryptionPair.fromJSON<string, EncString>(\n        obj?.pinProtected,\n        EncString.fromJSON,\n      ),\n      serverConfig: ServerConfigData.fromJSON(obj?.serverConfig),\n    });\n  }\n}\n\nexport class AccountTokens {\n  securityStamp?: string;\n\n  static fromJSON(obj: Jsonify<AccountTokens>): AccountTokens {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountTokens(), obj);\n  }\n}\n\nexport class Account {\n  data?: AccountData = new AccountData();\n  keys?: AccountKeys = new AccountKeys();\n  profile?: AccountProfile = new AccountProfile();\n  settings?: AccountSettings = new AccountSettings();\n  tokens?: AccountTokens = new AccountTokens();\n  adminAuthRequest?: Jsonify<AdminAuthRequestStorable> = null;\n\n  constructor(init: Partial<Account>) {\n    Object.assign(this, {\n      data: {\n        ...new AccountData(),\n        ...init?.data,\n      },\n      keys: {\n        ...new AccountKeys(),\n        ...init?.keys,\n      },\n      profile: {\n        ...new AccountProfile(),\n        ...init?.profile,\n      },\n      settings: {\n        ...new AccountSettings(),\n        ...init?.settings,\n      },\n      tokens: {\n        ...new AccountTokens(),\n        ...init?.tokens,\n      },\n      adminAuthRequest: init?.adminAuthRequest,\n    });\n  }\n\n  static fromJSON(json: Jsonify<Account>): Account {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new Account({}), json, {\n      keys: AccountKeys.fromJSON(json?.keys),\n      data: AccountData.fromJSON(json?.data),\n      profile: AccountProfile.fromJSON(json?.profile),\n      settings: AccountSettings.fromJSON(json?.settings),\n      tokens: AccountTokens.fromJSON(json?.tokens),\n      adminAuthRequest: AdminAuthRequestStorable.fromJSON(json?.adminAuthRequest),\n    });\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { TokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TwoFactorService } from \"@bitwarden/common/auth/abstractions/two-factor.service\";\nimport { TwoFactorProviderType } from \"@bitwarden/common/auth/enums/two-factor-provider-type\";\nimport { AuthResult } from \"@bitwarden/common/auth/models/domain/auth-result\";\nimport { ForceSetPasswordReason } from \"@bitwarden/common/auth/models/domain/force-set-password-reason\";\nimport { DeviceRequest } from \"@bitwarden/common/auth/models/request/identity-token/device.request\";\nimport { PasswordTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/password-token.request\";\nimport { SsoTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/sso-token.request\";\nimport { TokenTwoFactorRequest } from \"@bitwarden/common/auth/models/request/identity-token/token-two-factor.request\";\nimport { UserApiTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/user-api-token.request\";\nimport { WebAuthnLoginTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/webauthn-login-token.request\";\nimport { IdentityCaptchaResponse } from \"@bitwarden/common/auth/models/response/identity-captcha.response\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { IdentityTwoFactorResponse } from \"@bitwarden/common/auth/models/response/identity-two-factor.response\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { ClientType } from \"@bitwarden/common/enums\";\nimport { VaultTimeoutAction } from \"@bitwarden/common/enums/vault-timeout-action.enum\";\nimport { KeysRequest } from \"@bitwarden/common/models/request/keys.request\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport {\n  AccountKeys,\n  Account,\n  AccountProfile,\n  AccountTokens,\n} from \"@bitwarden/common/platform/models/domain/account\";\n\nimport { InternalUserDecryptionOptionsServiceAbstraction } from \"../abstractions/user-decryption-options.service.abstraction\";\nimport {\n  UserApiLoginCredentials,\n  PasswordLoginCredentials,\n  SsoLoginCredentials,\n  AuthRequestLoginCredentials,\n  WebAuthnLoginCredentials,\n} from \"../models/domain/login-credentials\";\nimport { UserDecryptionOptions } from \"../models/domain/user-decryption-options\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\ntype IdentityResponse = IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse;\n\nexport abstract class LoginStrategyData {\n  tokenRequest:\n    | UserApiTokenRequest\n    | PasswordTokenRequest\n    | SsoTokenRequest\n    | WebAuthnLoginTokenRequest;\n  captchaBypassToken?: string;\n\n  /** User's entered email obtained pre-login. */\n  abstract userEnteredEmail?: string;\n}\n\nexport abstract class LoginStrategy {\n  protected abstract cache: BehaviorSubject<LoginStrategyData>;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService,\n    protected userDecryptionOptionsService: InternalUserDecryptionOptionsServiceAbstraction,\n    protected billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {}\n\n  abstract exportCache(): CacheData;\n\n  abstract logIn(\n    credentials:\n      | UserApiLoginCredentials\n      | PasswordLoginCredentials\n      | SsoLoginCredentials\n      | AuthRequestLoginCredentials\n      | WebAuthnLoginCredentials,\n  ): Promise<AuthResult>;\n\n  async logInTwoFactor(\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string = null,\n  ): Promise<AuthResult> {\n    const data = this.cache.value;\n    data.tokenRequest.setTwoFactor(twoFactor);\n    this.cache.next(data);\n    const [authResult] = await this.startLogIn();\n    return authResult;\n  }\n\n  protected async startLogIn(): Promise<[AuthResult, IdentityResponse]> {\n    this.twoFactorService.clearSelectedProvider();\n\n    const tokenRequest = this.cache.value.tokenRequest;\n    const response = await this.apiService.postIdentityToken(tokenRequest);\n\n    if (response instanceof IdentityTwoFactorResponse) {\n      return [await this.processTwoFactorResponse(response), response];\n    } else if (response instanceof IdentityCaptchaResponse) {\n      return [await this.processCaptchaResponse(response), response];\n    } else if (response instanceof IdentityTokenResponse) {\n      return [await this.processTokenResponse(response), response];\n    }\n\n    throw new Error(\"Invalid response object.\");\n  }\n\n  protected async buildDeviceRequest() {\n    const appId = await this.appIdService.getAppId();\n    return new DeviceRequest(appId, this.platformUtilsService);\n  }\n\n  /**\n   * Builds the TokenTwoFactorRequest to be used within other login strategies token requests\n   * to the server.\n   * If the user provided a 2FA token in an already created TokenTwoFactorRequest, it will be used.\n   * If not, and the user has previously remembered a 2FA token, it will be used.\n   * If neither of these are true, an empty TokenTwoFactorRequest will be returned.\n   * @param userProvidedTwoFactor - optional - The 2FA token request provided by the caller\n   * @param email - optional - ensure that email is provided for any login strategies that support remember 2FA functionality\n   * @returns a promise which resolves to a TokenTwoFactorRequest to be sent to the server\n   */\n  protected async buildTwoFactor(\n    userProvidedTwoFactor?: TokenTwoFactorRequest,\n    email?: string,\n  ): Promise<TokenTwoFactorRequest> {\n    if (userProvidedTwoFactor != null) {\n      return userProvidedTwoFactor;\n    }\n\n    if (email) {\n      const storedTwoFactorToken = await this.tokenService.getTwoFactorToken(email);\n      if (storedTwoFactorToken != null) {\n        return new TokenTwoFactorRequest(\n          TwoFactorProviderType.Remember,\n          storedTwoFactorToken,\n          false,\n        );\n      }\n    }\n\n    return new TokenTwoFactorRequest();\n  }\n\n  /**\n   * Initializes the account with information from the IdTokenResponse after successful login.\n   * It also sets the access token and refresh token in the token service.\n   *\n   * @param {IdentityTokenResponse} tokenResponse - The response from the server containing the identity token.\n   * @returns {Promise<void>} - A promise that resolves when the account information has been successfully saved.\n   */\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse): Promise<void> {\n    const accountInformation = await this.tokenService.decodeAccessToken(tokenResponse.accessToken);\n\n    // Must persist existing device key if it exists for trusted device decryption to work\n    // However, we must provide a user id so that the device key can be retrieved\n    // as the state service won't have an active account at this point in time\n    // even though the data exists in local storage.\n    const userId = accountInformation.sub;\n\n    const deviceKey = await this.stateService.getDeviceKey({ userId });\n    const accountKeys = new AccountKeys();\n    if (deviceKey) {\n      accountKeys.deviceKey = deviceKey;\n    }\n\n    // If you don't persist existing admin auth requests on login, they will get deleted.\n    const adminAuthRequest = await this.stateService.getAdminAuthRequest({ userId });\n\n    const vaultTimeoutAction = await this.stateService.getVaultTimeoutAction();\n    const vaultTimeout = await this.stateService.getVaultTimeout();\n\n    // set access token and refresh token before account initialization so authN status can be accurate\n    // User id will be derived from the access token.\n    await this.tokenService.setTokens(\n      tokenResponse.accessToken,\n      vaultTimeoutAction as VaultTimeoutAction,\n      vaultTimeout,\n      tokenResponse.refreshToken, // Note: CLI login via API key sends undefined for refresh token.\n    );\n\n    await this.stateService.addAccount(\n      new Account({\n        profile: {\n          ...new AccountProfile(),\n          ...{\n            userId,\n            name: accountInformation.name,\n            email: accountInformation.email,\n            kdfIterations: tokenResponse.kdfIterations,\n            kdfMemory: tokenResponse.kdfMemory,\n            kdfParallelism: tokenResponse.kdfParallelism,\n            kdfType: tokenResponse.kdf,\n          },\n        },\n        tokens: {\n          ...new AccountTokens(),\n        },\n        keys: accountKeys,\n        adminAuthRequest: adminAuthRequest?.toJSON(),\n      }),\n    );\n\n    await this.userDecryptionOptionsService.setUserDecryptionOptions(\n      UserDecryptionOptions.fromResponse(tokenResponse),\n    );\n\n    await this.billingAccountProfileStateService.setHasPremium(accountInformation.premium, false);\n  }\n\n  protected async processTokenResponse(response: IdentityTokenResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n\n    // Old encryption keys must be migrated, but is currently only available on web.\n    // Other clients shouldn't continue the login process.\n    if (this.encryptionKeyMigrationRequired(response)) {\n      result.requiresEncryptionKeyMigration = true;\n      if (this.platformUtilsService.getClientType() !== ClientType.Web) {\n        return result;\n      }\n    }\n\n    result.resetMasterPassword = response.resetMasterPassword;\n\n    // Convert boolean to enum\n    if (response.forcePasswordReset) {\n      result.forcePasswordReset = ForceSetPasswordReason.AdminForcePasswordReset;\n    }\n\n    // Must come before setting keys, user key needs email to update additional keys\n    await this.saveAccountInformation(response);\n\n    if (response.twoFactorToken != null) {\n      // note: we can read email from access token b/c it was saved in saveAccountInformation\n      const userEmail = await this.tokenService.getEmail();\n\n      await this.tokenService.setTwoFactorToken(userEmail, response.twoFactorToken);\n    }\n\n    await this.setMasterKey(response);\n    await this.setUserKey(response);\n    await this.setPrivateKey(response);\n\n    this.messagingService.send(\"loggedIn\");\n\n    return result;\n  }\n\n  // The keys comes from different sources depending on the login strategy\n  protected abstract setMasterKey(response: IdentityTokenResponse): Promise<void>;\n  protected abstract setUserKey(response: IdentityTokenResponse): Promise<void>;\n  protected abstract setPrivateKey(response: IdentityTokenResponse): Promise<void>;\n\n  // Old accounts used master key for encryption. We are forcing migrations but only need to\n  // check on password logins\n  protected encryptionKeyMigrationRequired(response: IdentityTokenResponse): boolean {\n    return false;\n  }\n\n  protected async createKeyPairForOldAccount() {\n    try {\n      const [publicKey, privateKey] = await this.cryptoService.makeKeyPair();\n      await this.apiService.postAccountKeys(new KeysRequest(publicKey, privateKey.encryptedString));\n      return privateKey.encryptedString;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  /**\n   * Handles the response from the server when a 2FA is required.\n   * It clears any existing 2FA token, as it's no longer valid, and sets up the necessary data for the 2FA process.\n   *\n   * @param {IdentityTwoFactorResponse} response - The response from the server indicating that 2FA is required.\n   * @returns {Promise<AuthResult>} - A promise that resolves to an AuthResult object\n   */\n  private async processTwoFactorResponse(response: IdentityTwoFactorResponse): Promise<AuthResult> {\n    // If we get a 2FA required response, then we should clear the 2FA token\n    // just in case as it is no longer valid.\n    await this.clearTwoFactorToken();\n\n    const result = new AuthResult();\n    result.twoFactorProviders = response.twoFactorProviders2;\n\n    this.twoFactorService.setProviders(response);\n    this.cache.next({ ...this.cache.value, captchaBypassToken: response.captchaToken ?? null });\n    result.ssoEmail2FaSessionToken = response.ssoEmail2faSessionToken;\n    result.email = response.email;\n    return result;\n  }\n\n  /**\n   * Clears the 2FA token from the token service using the user's email if it exists\n   */\n  private async clearTwoFactorToken() {\n    const email = this.cache.value.userEnteredEmail;\n    if (email) {\n      await this.tokenService.clearTwoFactorToken(email);\n    }\n  }\n\n  private async processCaptchaResponse(response: IdentityCaptchaResponse): Promise<AuthResult> {\n    const result = new AuthResult();\n    result.captchaSiteKey = response.siteKey;\n    return result;\n  }\n}\n","import { Observable, map, BehaviorSubject } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { DeviceTrustCryptoServiceAbstraction } from \"@bitwarden/common/auth/abstractions/device-trust-crypto.service.abstraction\";\nimport { TokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TwoFactorService } from \"@bitwarden/common/auth/abstractions/two-factor.service\";\nimport { AuthResult } from \"@bitwarden/common/auth/models/domain/auth-result\";\nimport { PasswordTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/password-token.request\";\nimport { TokenTwoFactorRequest } from \"@bitwarden/common/auth/models/request/identity-token/token-two-factor.request\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\nimport { InternalUserDecryptionOptionsServiceAbstraction } from \"../abstractions/user-decryption-options.service.abstraction\";\nimport { AuthRequestLoginCredentials } from \"../models/domain/login-credentials\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\nimport { LoginStrategy, LoginStrategyData } from \"./login.strategy\";\n\nexport class AuthRequestLoginStrategyData implements LoginStrategyData {\n  tokenRequest: PasswordTokenRequest;\n  captchaBypassToken: string;\n  authRequestCredentials: AuthRequestLoginCredentials;\n\n  static fromJSON(obj: Jsonify<AuthRequestLoginStrategyData>): AuthRequestLoginStrategyData {\n    const data = Object.assign(new AuthRequestLoginStrategyData(), obj, {\n      tokenRequest: PasswordTokenRequest.fromJSON(obj.tokenRequest),\n      authRequestCredentials: AuthRequestLoginCredentials.fromJSON(obj.authRequestCredentials),\n    });\n    return data;\n  }\n}\n\nexport class AuthRequestLoginStrategy extends LoginStrategy {\n  email$: Observable<string>;\n  accessCode$: Observable<string>;\n  authRequestId$: Observable<string>;\n\n  protected cache: BehaviorSubject<AuthRequestLoginStrategyData>;\n\n  constructor(\n    data: AuthRequestLoginStrategyData,\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    userDecryptionOptionsService: InternalUserDecryptionOptionsServiceAbstraction,\n    private deviceTrustCryptoService: DeviceTrustCryptoServiceAbstraction,\n    billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService,\n      userDecryptionOptionsService,\n      billingAccountProfileStateService,\n    );\n\n    this.cache = new BehaviorSubject(data);\n    this.email$ = this.cache.pipe(map((data) => data.tokenRequest.email));\n    this.accessCode$ = this.cache.pipe(map((data) => data.authRequestCredentials.accessCode));\n    this.authRequestId$ = this.cache.pipe(map((data) => data.authRequestCredentials.authRequestId));\n  }\n\n  override async logIn(credentials: AuthRequestLoginCredentials) {\n    const data = new AuthRequestLoginStrategyData();\n    data.tokenRequest = new PasswordTokenRequest(\n      credentials.email,\n      credentials.accessCode,\n      null,\n      await this.buildTwoFactor(credentials.twoFactor, credentials.email),\n      await this.buildDeviceRequest(),\n    );\n    data.tokenRequest.setAuthRequestAccessCode(credentials.authRequestId);\n    data.authRequestCredentials = credentials;\n    this.cache.next(data);\n\n    const [authResult] = await this.startLogIn();\n    return authResult;\n  }\n\n  override async logInTwoFactor(\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string,\n  ): Promise<AuthResult> {\n    const data = this.cache.value;\n    data.tokenRequest.captchaResponse = captchaResponse ?? data.captchaBypassToken;\n    this.cache.next(data);\n\n    return super.logInTwoFactor(twoFactor);\n  }\n\n  protected override async setMasterKey(response: IdentityTokenResponse) {\n    const authRequestCredentials = this.cache.value.authRequestCredentials;\n    if (\n      authRequestCredentials.decryptedMasterKey &&\n      authRequestCredentials.decryptedMasterKeyHash\n    ) {\n      await this.cryptoService.setMasterKey(authRequestCredentials.decryptedMasterKey);\n      await this.cryptoService.setMasterKeyHash(authRequestCredentials.decryptedMasterKeyHash);\n    }\n  }\n\n  protected override async setUserKey(response: IdentityTokenResponse): Promise<void> {\n    const authRequestCredentials = this.cache.value.authRequestCredentials;\n    // User now may or may not have a master password\n    // but set the master key encrypted user key if it exists regardless\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key);\n\n    if (authRequestCredentials.decryptedUserKey) {\n      await this.cryptoService.setUserKey(authRequestCredentials.decryptedUserKey);\n    } else {\n      await this.trySetUserKeyWithMasterKey();\n      // Establish trust if required after setting user key\n      await this.deviceTrustCryptoService.trustDeviceIfRequired();\n    }\n  }\n\n  private async trySetUserKeyWithMasterKey(): Promise<void> {\n    const masterKey = await this.cryptoService.getMasterKey();\n    if (masterKey) {\n      const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(masterKey);\n      await this.cryptoService.setUserKey(userKey);\n    }\n  }\n\n  protected override async setPrivateKey(response: IdentityTokenResponse): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount()),\n    );\n  }\n\n  exportCache(): CacheData {\n    return {\n      authRequest: this.cache.value,\n    };\n  }\n}\n","import { View } from \"../../../models/view/view\";\n\nimport { EncString } from \"./enc-string\";\nimport { SymmetricCryptoKey } from \"./symmetric-crypto-key\";\n\n// https://contributing.bitwarden.com/architecture/clients/data-model#domain\nexport default class Domain {\n  protected buildDomainModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncList: any[] = [],\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = dataObj[map[prop] || prop];\n      if (notEncList.indexOf(prop) > -1) {\n        (domain as any)[prop] = objProp ? objProp : null;\n      } else {\n        (domain as any)[prop] = objProp ? new EncString(objProp) : null;\n      }\n    }\n  }\n  protected buildDataModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncStringList: any[] = [],\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = (domain as any)[map[prop] || prop];\n      if (notEncStringList.indexOf(prop) > -1) {\n        (dataObj as any)[prop] = objProp != null ? objProp : null;\n      } else {\n        (dataObj as any)[prop] = objProp != null ? (objProp as EncString).encryptedString : null;\n      }\n    }\n  }\n\n  protected async decryptObj<T extends View>(\n    viewModel: T,\n    map: any,\n    orgId: string,\n    key: SymmetricCryptoKey = null,\n  ): Promise<T> {\n    const promises = [];\n    const self: any = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp) {\n        const p = Promise.resolve()\n          .then(() => {\n            const mapProp = map[theProp] || theProp;\n            if (self[mapProp]) {\n              return self[mapProp].decrypt(orgId, key);\n            }\n            return null;\n          })\n          .then((val: any) => {\n            (viewModel as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop);\n    }\n\n    await Promise.all(promises);\n    return viewModel;\n  }\n}\n","import { MasterPasswordPolicyResponse } from \"../../../auth/models/response/master-password-policy.response\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\n\nexport class MasterPasswordPolicyOptions extends Domain {\n  minComplexity = 0;\n  minLength = 0;\n  requireUpper = false;\n  requireLower = false;\n  requireNumbers = false;\n  requireSpecial = false;\n\n  /**\n   * Flag to indicate if the policy should be enforced on login.\n   * If true, and the user's password does not meet the policy requirements,\n   * the user will be forced to update their password.\n   */\n  enforceOnLogin = false;\n\n  static fromResponse(policy: MasterPasswordPolicyResponse): MasterPasswordPolicyOptions {\n    if (policy == null) {\n      return null;\n    }\n    const options = new MasterPasswordPolicyOptions();\n    options.minComplexity = policy.minComplexity;\n    options.minLength = policy.minLength;\n    options.requireUpper = policy.requireUpper;\n    options.requireLower = policy.requireLower;\n    options.requireNumbers = policy.requireNumbers;\n    options.requireSpecial = policy.requireSpecial;\n    options.enforceOnLogin = policy.enforceOnLogin;\n    return options;\n  }\n}\n","import { BehaviorSubject, map, Observable } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { MasterPasswordPolicyOptions } from \"@bitwarden/common/admin-console/models/domain/master-password-policy-options\";\nimport { TokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TwoFactorService } from \"@bitwarden/common/auth/abstractions/two-factor.service\";\nimport { AuthResult } from \"@bitwarden/common/auth/models/domain/auth-result\";\nimport { ForceSetPasswordReason } from \"@bitwarden/common/auth/models/domain/force-set-password-reason\";\nimport { PasswordTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/password-token.request\";\nimport { TokenTwoFactorRequest } from \"@bitwarden/common/auth/models/request/identity-token/token-two-factor.request\";\nimport { IdentityCaptchaResponse } from \"@bitwarden/common/auth/models/response/identity-captcha.response\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { IdentityTwoFactorResponse } from \"@bitwarden/common/auth/models/response/identity-two-factor.response\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { HashPurpose } from \"@bitwarden/common/platform/enums\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { PasswordStrengthServiceAbstraction } from \"@bitwarden/common/tools/password-strength\";\nimport { MasterKey } from \"@bitwarden/common/types/key\";\n\nimport { LoginStrategyServiceAbstraction } from \"../abstractions\";\nimport { InternalUserDecryptionOptionsServiceAbstraction } from \"../abstractions/user-decryption-options.service.abstraction\";\nimport { PasswordLoginCredentials } from \"../models/domain/login-credentials\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\nimport { LoginStrategy, LoginStrategyData } from \"./login.strategy\";\n\nexport class PasswordLoginStrategyData implements LoginStrategyData {\n  tokenRequest: PasswordTokenRequest;\n\n  /** User's entered email obtained pre-login. Always present in MP login. */\n  userEnteredEmail: string;\n  /** If 2fa is required, token is returned to bypass captcha */\n  captchaBypassToken?: string;\n  /** The local version of the user's master key hash */\n  localMasterKeyHash: string;\n  /** The user's master key */\n  masterKey: MasterKey;\n  /**\n   * Tracks if the user needs to update their password due to\n   * a password that does not meet an organization's master password policy.\n   */\n  forcePasswordResetReason: ForceSetPasswordReason = ForceSetPasswordReason.None;\n\n  static fromJSON(obj: Jsonify<PasswordLoginStrategyData>): PasswordLoginStrategyData {\n    const data = Object.assign(new PasswordLoginStrategyData(), obj, {\n      tokenRequest: PasswordTokenRequest.fromJSON(obj.tokenRequest),\n      masterKey: SymmetricCryptoKey.fromJSON(obj.masterKey),\n    });\n    return data;\n  }\n}\n\nexport class PasswordLoginStrategy extends LoginStrategy {\n  /** The email address of the user attempting to log in. */\n  email$: Observable<string>;\n  /** The master key hash used for authentication */\n  serverMasterKeyHash$: Observable<string>;\n  /** The local master key hash we store client side */\n  localMasterKeyHash$: Observable<string | null>;\n\n  protected cache: BehaviorSubject<PasswordLoginStrategyData>;\n\n  constructor(\n    data: PasswordLoginStrategyData,\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    protected stateService: StateService,\n    twoFactorService: TwoFactorService,\n    userDecryptionOptionsService: InternalUserDecryptionOptionsServiceAbstraction,\n    private passwordStrengthService: PasswordStrengthServiceAbstraction,\n    private policyService: PolicyService,\n    private loginStrategyService: LoginStrategyServiceAbstraction,\n    billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService,\n      userDecryptionOptionsService,\n      billingAccountProfileStateService,\n    );\n\n    this.cache = new BehaviorSubject(data);\n    this.email$ = this.cache.pipe(map((state) => state.tokenRequest.email));\n    this.serverMasterKeyHash$ = this.cache.pipe(\n      map((state) => state.tokenRequest.masterPasswordHash),\n    );\n    this.localMasterKeyHash$ = this.cache.pipe(map((state) => state.localMasterKeyHash));\n  }\n\n  override async logIn(credentials: PasswordLoginCredentials) {\n    const { email, masterPassword, captchaToken, twoFactor } = credentials;\n\n    const data = new PasswordLoginStrategyData();\n    data.masterKey = await this.loginStrategyService.makePreloginKey(masterPassword, email);\n    data.userEnteredEmail = email;\n\n    // Hash the password early (before authentication) so we don't persist it in memory in plaintext\n    data.localMasterKeyHash = await this.cryptoService.hashMasterKey(\n      masterPassword,\n      data.masterKey,\n      HashPurpose.LocalAuthorization,\n    );\n    const serverMasterKeyHash = await this.cryptoService.hashMasterKey(\n      masterPassword,\n      data.masterKey,\n    );\n\n    data.tokenRequest = new PasswordTokenRequest(\n      email,\n      serverMasterKeyHash,\n      captchaToken,\n      await this.buildTwoFactor(twoFactor, email),\n      await this.buildDeviceRequest(),\n    );\n\n    this.cache.next(data);\n\n    const [authResult, identityResponse] = await this.startLogIn();\n\n    const masterPasswordPolicyOptions =\n      this.getMasterPasswordPolicyOptionsFromResponse(identityResponse);\n\n    // The identity result can contain master password policies for the user's organizations\n    if (masterPasswordPolicyOptions?.enforceOnLogin) {\n      // If there is a policy active, evaluate the supplied password before its no longer in memory\n      const meetsRequirements = this.evaluateMasterPassword(\n        credentials,\n        masterPasswordPolicyOptions,\n      );\n\n      if (!meetsRequirements) {\n        if (authResult.requiresCaptcha || authResult.requiresTwoFactor) {\n          // Save the flag to this strategy for later use as the master password is about to pass out of scope\n          this.cache.next({\n            ...this.cache.value,\n            forcePasswordResetReason: ForceSetPasswordReason.WeakMasterPassword,\n          });\n        } else {\n          // Authentication was successful, save the force update password options with the state service\n          await this.stateService.setForceSetPasswordReason(\n            ForceSetPasswordReason.WeakMasterPassword,\n          );\n          authResult.forcePasswordReset = ForceSetPasswordReason.WeakMasterPassword;\n        }\n      }\n    }\n    return authResult;\n  }\n\n  override async logInTwoFactor(\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string,\n  ): Promise<AuthResult> {\n    const data = this.cache.value;\n    data.tokenRequest.captchaResponse = captchaResponse ?? data.captchaBypassToken;\n    this.cache.next(data);\n\n    const result = await super.logInTwoFactor(twoFactor);\n\n    // 2FA was successful, save the force update password options with the state service if defined\n    const forcePasswordResetReason = this.cache.value.forcePasswordResetReason;\n    if (\n      !result.requiresTwoFactor &&\n      !result.requiresCaptcha &&\n      forcePasswordResetReason != ForceSetPasswordReason.None\n    ) {\n      await this.stateService.setForceSetPasswordReason(forcePasswordResetReason);\n      result.forcePasswordReset = forcePasswordResetReason;\n    }\n\n    return result;\n  }\n\n  protected override async setMasterKey(response: IdentityTokenResponse) {\n    const { masterKey, localMasterKeyHash } = this.cache.value;\n    await this.cryptoService.setMasterKey(masterKey);\n    await this.cryptoService.setMasterKeyHash(localMasterKeyHash);\n  }\n\n  protected override async setUserKey(response: IdentityTokenResponse): Promise<void> {\n    // If migration is required, we won't have a user key to set yet.\n    if (this.encryptionKeyMigrationRequired(response)) {\n      return;\n    }\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key);\n\n    const masterKey = await this.cryptoService.getMasterKey();\n    if (masterKey) {\n      const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(masterKey);\n      await this.cryptoService.setUserKey(userKey);\n    }\n  }\n\n  protected override async setPrivateKey(response: IdentityTokenResponse): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount()),\n    );\n  }\n\n  protected override encryptionKeyMigrationRequired(response: IdentityTokenResponse): boolean {\n    return !response.key;\n  }\n\n  private getMasterPasswordPolicyOptionsFromResponse(\n    response: IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse,\n  ): MasterPasswordPolicyOptions {\n    if (response == null || response instanceof IdentityCaptchaResponse) {\n      return null;\n    }\n    return MasterPasswordPolicyOptions.fromResponse(response.masterPasswordPolicy);\n  }\n\n  private evaluateMasterPassword(\n    { masterPassword, email }: PasswordLoginCredentials,\n    options: MasterPasswordPolicyOptions,\n  ): boolean {\n    const passwordStrength = this.passwordStrengthService.getPasswordStrength(\n      masterPassword,\n      email,\n    )?.score;\n\n    return this.policyService.evaluateMasterPassword(passwordStrength, masterPassword, options);\n  }\n\n  exportCache(): CacheData {\n    return {\n      password: this.cache.value,\n    };\n  }\n}\n","import { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class SsoTokenRequest extends TokenRequest {\n  constructor(\n    public code: string,\n    public codeVerifier: string,\n    public redirectUri: string,\n    protected twoFactor: TokenTwoFactorRequest,\n    device?: DeviceRequest,\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: string) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"authorization_code\";\n    obj.code = this.code;\n    obj.code_verifier = this.codeVerifier;\n    obj.redirect_uri = this.redirectUri;\n\n    return obj;\n  }\n\n  static fromJSON(json: any) {\n    return Object.assign(Object.create(SsoTokenRequest.prototype), json, {\n      device: json.device ? DeviceRequest.fromJSON(json.device) : undefined,\n      twoFactor: json.twoFactor\n        ? Object.assign(new TokenTwoFactorRequest(), json.twoFactor)\n        : undefined,\n    });\n  }\n}\n","import { Observable, map, BehaviorSubject } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { DeviceTrustCryptoServiceAbstraction } from \"@bitwarden/common/auth/abstractions/device-trust-crypto.service.abstraction\";\nimport { KeyConnectorService } from \"@bitwarden/common/auth/abstractions/key-connector.service\";\nimport { TokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TwoFactorService } from \"@bitwarden/common/auth/abstractions/two-factor.service\";\nimport { ForceSetPasswordReason } from \"@bitwarden/common/auth/models/domain/force-set-password-reason\";\nimport { SsoTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/sso-token.request\";\nimport { AuthRequestResponse } from \"@bitwarden/common/auth/models/response/auth-request.response\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { HttpStatusCode } from \"@bitwarden/common/enums\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\nimport {\n  InternalUserDecryptionOptionsServiceAbstraction,\n  AuthRequestServiceAbstraction,\n} from \"../abstractions\";\nimport { SsoLoginCredentials } from \"../models/domain/login-credentials\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\nimport { LoginStrategyData, LoginStrategy } from \"./login.strategy\";\n\nexport class SsoLoginStrategyData implements LoginStrategyData {\n  captchaBypassToken: string;\n  tokenRequest: SsoTokenRequest;\n  /**\n   * User's entered email obtained pre-login. Present in most SSO flows, but not CLI + SSO Flow.\n   */\n  userEnteredEmail?: string;\n  /**\n   * User email address. Only available after authentication.\n   */\n  email?: string;\n  /**\n   * The organization ID that the user is logging into. Used for Key Connector\n   * purposes after authentication.\n   */\n  orgId: string;\n  /**\n   * A token provided by the server as an authentication factor for sending\n   * email OTPs to the user's configured 2FA email address. This is required\n   * as we don't have a master password hash or other verifiable secret when using SSO.\n   */\n  ssoEmail2FaSessionToken?: string;\n\n  static fromJSON(obj: Jsonify<SsoLoginStrategyData>): SsoLoginStrategyData {\n    return Object.assign(new SsoLoginStrategyData(), obj, {\n      tokenRequest: SsoTokenRequest.fromJSON(obj.tokenRequest),\n    });\n  }\n}\n\nexport class SsoLoginStrategy extends LoginStrategy {\n  /**\n   * @see {@link SsoLoginStrategyData.email}\n   */\n  email$: Observable<string | null>;\n  /**\n   * @see {@link SsoLoginStrategyData.orgId}\n   */\n  orgId$: Observable<string>;\n  /**\n   * @see {@link SsoLoginStrategyData.ssoEmail2FaSessionToken}\n   */\n  ssoEmail2FaSessionToken$: Observable<string | null>;\n\n  protected cache: BehaviorSubject<SsoLoginStrategyData>;\n\n  constructor(\n    data: SsoLoginStrategyData,\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    userDecryptionOptionsService: InternalUserDecryptionOptionsServiceAbstraction,\n    private keyConnectorService: KeyConnectorService,\n    private deviceTrustCryptoService: DeviceTrustCryptoServiceAbstraction,\n    private authRequestService: AuthRequestServiceAbstraction,\n    private i18nService: I18nService,\n    billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService,\n      userDecryptionOptionsService,\n      billingAccountProfileStateService,\n    );\n\n    this.cache = new BehaviorSubject(data);\n    this.email$ = this.cache.pipe(map((state) => state.email));\n    this.orgId$ = this.cache.pipe(map((state) => state.orgId));\n    this.ssoEmail2FaSessionToken$ = this.cache.pipe(map((state) => state.ssoEmail2FaSessionToken));\n  }\n\n  async logIn(credentials: SsoLoginCredentials) {\n    const data = new SsoLoginStrategyData();\n    data.orgId = credentials.orgId;\n\n    data.userEnteredEmail = credentials.email;\n\n    data.tokenRequest = new SsoTokenRequest(\n      credentials.code,\n      credentials.codeVerifier,\n      credentials.redirectUrl,\n      await this.buildTwoFactor(credentials.twoFactor, credentials.email),\n      await this.buildDeviceRequest(),\n    );\n\n    this.cache.next(data);\n\n    const [ssoAuthResult] = await this.startLogIn();\n\n    const email = ssoAuthResult.email;\n    const ssoEmail2FaSessionToken = ssoAuthResult.ssoEmail2FaSessionToken;\n\n    // Auth guard currently handles redirects for this.\n    if (ssoAuthResult.forcePasswordReset == ForceSetPasswordReason.AdminForcePasswordReset) {\n      await this.stateService.setForceSetPasswordReason(ssoAuthResult.forcePasswordReset);\n    }\n\n    this.cache.next({\n      ...this.cache.value,\n      email,\n      ssoEmail2FaSessionToken,\n    });\n\n    return ssoAuthResult;\n  }\n\n  protected override async setMasterKey(tokenResponse: IdentityTokenResponse) {\n    // The only way we can be setting a master key at this point is if we are using Key Connector.\n    // First, check to make sure that we should do so based on the token response.\n    if (this.shouldSetMasterKeyFromKeyConnector(tokenResponse)) {\n      // If we're here, we know that the user should use Key Connector (they have a KeyConnectorUrl) and does not have a master password.\n      // We can now check the key on the token response to see whether they are a brand new user or an existing user.\n      // The presence of a masterKeyEncryptedUserKey indicates that the user has already been provisioned in Key Connector.\n      const newSsoUser = tokenResponse.key == null;\n      if (newSsoUser) {\n        await this.keyConnectorService.convertNewSsoUserToKeyConnector(\n          tokenResponse,\n          this.cache.value.orgId,\n        );\n      } else {\n        const keyConnectorUrl = this.getKeyConnectorUrl(tokenResponse);\n        await this.keyConnectorService.setMasterKeyFromUrl(keyConnectorUrl);\n      }\n    }\n  }\n\n  /**\n   * Determines if it is possible set the `masterKey` from Key Connector.\n   * @param tokenResponse\n   * @returns `true` if the master key can be set from Key Connector, `false` otherwise\n   */\n  private shouldSetMasterKeyFromKeyConnector(tokenResponse: IdentityTokenResponse): boolean {\n    const userDecryptionOptions = tokenResponse?.userDecryptionOptions;\n\n    if (userDecryptionOptions != null) {\n      const userHasMasterPassword = userDecryptionOptions.hasMasterPassword;\n      const userHasKeyConnectorUrl =\n        userDecryptionOptions.keyConnectorOption?.keyConnectorUrl != null;\n\n      // In order for us to set the master key from Key Connector, we need to have a Key Connector URL\n      // and the user must not have a master password.\n      return userHasKeyConnectorUrl && !userHasMasterPassword;\n    } else {\n      // In pre-TDE versions of the server, the userDecryptionOptions will not be present.\n      // In this case, we can determine if the user has a master password and has a Key Connector URL by\n      // just checking the keyConnectorUrl property. This is because the server short-circuits on the response\n      // and will not pass back the URL in the response if the user has a master password.\n      // TODO: remove compatibility check after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n      return tokenResponse.keyConnectorUrl != null;\n    }\n  }\n\n  private getKeyConnectorUrl(tokenResponse: IdentityTokenResponse): string {\n    // TODO: remove tokenResponse.keyConnectorUrl reference after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n    const userDecryptionOptions = tokenResponse?.userDecryptionOptions;\n    return (\n      tokenResponse.keyConnectorUrl ?? userDecryptionOptions?.keyConnectorOption?.keyConnectorUrl\n    );\n  }\n\n  // TODO: future passkey login strategy will need to support setting user key (decrypting via TDE or admin approval request)\n  // so might be worth moving this logic to a common place (base login strategy or a separate service?)\n  protected override async setUserKey(tokenResponse: IdentityTokenResponse): Promise<void> {\n    const masterKeyEncryptedUserKey = tokenResponse.key;\n\n    // Note: masterKeyEncryptedUserKey is undefined for SSO JIT provisioned users\n    // on account creation and subsequent logins (confirmed or unconfirmed)\n    // but that is fine for TDE so we cannot return if it is undefined\n\n    if (masterKeyEncryptedUserKey) {\n      // set the master key encrypted user key if it exists\n      await this.cryptoService.setMasterKeyEncryptedUserKey(masterKeyEncryptedUserKey);\n    }\n\n    const userDecryptionOptions = tokenResponse?.userDecryptionOptions;\n\n    // Note: TDE and key connector are mutually exclusive\n    if (userDecryptionOptions?.trustedDeviceOption) {\n      await this.trySetUserKeyWithApprovedAdminRequestIfExists();\n\n      const hasUserKey = await this.cryptoService.hasUserKey();\n\n      // Only try to set user key with device key if admin approval request was not successful\n      if (!hasUserKey) {\n        await this.trySetUserKeyWithDeviceKey(tokenResponse);\n      }\n    } else if (\n      masterKeyEncryptedUserKey != null &&\n      this.getKeyConnectorUrl(tokenResponse) != null\n    ) {\n      // Key connector enabled for user\n      await this.trySetUserKeyWithMasterKey();\n    }\n\n    // Note: In the traditional SSO flow with MP without key connector, the lock component\n    // is responsible for deriving master key from MP entry and then decrypting the user key\n  }\n\n  private async trySetUserKeyWithApprovedAdminRequestIfExists(): Promise<void> {\n    // At this point a user could have an admin auth request that has been approved\n    const adminAuthReqStorable = await this.stateService.getAdminAuthRequest();\n\n    if (!adminAuthReqStorable) {\n      return;\n    }\n\n    // Call server to see if admin auth request has been approved\n    let adminAuthReqResponse: AuthRequestResponse;\n\n    try {\n      adminAuthReqResponse = await this.apiService.getAuthRequest(adminAuthReqStorable.id);\n    } catch (error) {\n      if (error instanceof ErrorResponse && error.statusCode === HttpStatusCode.NotFound) {\n        // if we get a 404, it means the auth request has been deleted so clear it from storage\n        await this.stateService.setAdminAuthRequest(null);\n      }\n\n      // Always return on an error here as we don't want to block the user from logging in\n      return;\n    }\n\n    if (adminAuthReqResponse?.requestApproved) {\n      // if masterPasswordHash has a value, we will always receive authReqResponse.key\n      // as authRequestPublicKey(masterKey) + authRequestPublicKey(masterPasswordHash)\n      if (adminAuthReqResponse.masterPasswordHash) {\n        await this.authRequestService.setKeysAfterDecryptingSharedMasterKeyAndHash(\n          adminAuthReqResponse,\n          adminAuthReqStorable.privateKey,\n        );\n      } else {\n        // if masterPasswordHash is null, we will always receive authReqResponse.key\n        // as authRequestPublicKey(userKey)\n        await this.authRequestService.setUserKeyAfterDecryptingSharedUserKey(\n          adminAuthReqResponse,\n          adminAuthReqStorable.privateKey,\n        );\n      }\n\n      if (await this.cryptoService.hasUserKey()) {\n        // Now that we have a decrypted user key in memory, we can check if we\n        // need to establish trust on the current device\n        await this.deviceTrustCryptoService.trustDeviceIfRequired();\n\n        // if we successfully decrypted the user key, we can delete the admin auth request out of state\n        // TODO: eventually we post and clean up DB as well once consumed on client\n        await this.stateService.setAdminAuthRequest(null);\n\n        this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"loginApproved\"));\n      }\n    }\n  }\n\n  private async trySetUserKeyWithDeviceKey(tokenResponse: IdentityTokenResponse): Promise<void> {\n    const trustedDeviceOption = tokenResponse.userDecryptionOptions?.trustedDeviceOption;\n\n    const deviceKey = await this.deviceTrustCryptoService.getDeviceKey();\n    const encDevicePrivateKey = trustedDeviceOption?.encryptedPrivateKey;\n    const encUserKey = trustedDeviceOption?.encryptedUserKey;\n\n    if (!deviceKey || !encDevicePrivateKey || !encUserKey) {\n      return;\n    }\n\n    const userKey = await this.deviceTrustCryptoService.decryptUserKeyWithDeviceKey(\n      encDevicePrivateKey,\n      encUserKey,\n      deviceKey,\n    );\n\n    if (userKey) {\n      await this.cryptoService.setUserKey(userKey);\n    }\n  }\n\n  private async trySetUserKeyWithMasterKey(): Promise<void> {\n    const masterKey = await this.cryptoService.getMasterKey();\n\n    // There is a scenario in which the master key is not set here. That will occur if the user\n    // has a master password and is using Key Connector. In that case, we cannot set the master key\n    // because the user hasn't entered their master password yet.\n    // Instead, we'll return here and let the migration to Key Connector handle setting the master key.\n    if (!masterKey) {\n      return;\n    }\n\n    const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(masterKey);\n    await this.cryptoService.setUserKey(userKey);\n  }\n\n  protected override async setPrivateKey(tokenResponse: IdentityTokenResponse): Promise<void> {\n    const newSsoUser = tokenResponse.key == null;\n\n    if (!newSsoUser) {\n      await this.cryptoService.setPrivateKey(\n        tokenResponse.privateKey ?? (await this.createKeyPairForOldAccount()),\n      );\n    }\n  }\n\n  exportCache(): CacheData {\n    return {\n      sso: this.cache.value,\n    };\n  }\n}\n","import { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class UserApiTokenRequest extends TokenRequest {\n  constructor(\n    public clientId: string,\n    public clientSecret: string,\n    protected twoFactor: TokenTwoFactorRequest,\n    device?: DeviceRequest,\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken() {\n    const obj = super.toIdentityToken(this.clientId);\n\n    obj.scope = this.clientId.startsWith(\"organization\") ? \"api.organization\" : \"api\";\n    obj.grant_type = \"client_credentials\";\n    obj.client_secret = this.clientSecret;\n\n    return obj;\n  }\n\n  static fromJSON(json: any) {\n    return Object.assign(Object.create(UserApiTokenRequest.prototype), json, {\n      device: json.device ? DeviceRequest.fromJSON(json.device) : undefined,\n      twoFactor: json.twoFactor\n        ? Object.assign(new TokenTwoFactorRequest(), json.twoFactor)\n        : undefined,\n    });\n  }\n}\n","import { firstValueFrom, BehaviorSubject } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { KeyConnectorService } from \"@bitwarden/common/auth/abstractions/key-connector.service\";\nimport { TokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TwoFactorService } from \"@bitwarden/common/auth/abstractions/two-factor.service\";\nimport { UserApiTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/user-api-token.request\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { VaultTimeoutAction } from \"@bitwarden/common/enums/vault-timeout-action.enum\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\nimport { InternalUserDecryptionOptionsServiceAbstraction } from \"../abstractions/user-decryption-options.service.abstraction\";\nimport { UserApiLoginCredentials } from \"../models/domain/login-credentials\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\nimport { LoginStrategy, LoginStrategyData } from \"./login.strategy\";\n\nexport class UserApiLoginStrategyData implements LoginStrategyData {\n  tokenRequest: UserApiTokenRequest;\n  captchaBypassToken: string;\n\n  static fromJSON(obj: Jsonify<UserApiLoginStrategyData>): UserApiLoginStrategyData {\n    return Object.assign(new UserApiLoginStrategyData(), obj, {\n      tokenRequest: UserApiTokenRequest.fromJSON(obj.tokenRequest),\n    });\n  }\n}\n\nexport class UserApiLoginStrategy extends LoginStrategy {\n  protected cache: BehaviorSubject<UserApiLoginStrategyData>;\n\n  constructor(\n    data: UserApiLoginStrategyData,\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    userDecryptionOptionsService: InternalUserDecryptionOptionsServiceAbstraction,\n    private environmentService: EnvironmentService,\n    private keyConnectorService: KeyConnectorService,\n    billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService,\n      userDecryptionOptionsService,\n      billingAccountProfileStateService,\n    );\n    this.cache = new BehaviorSubject(data);\n  }\n\n  override async logIn(credentials: UserApiLoginCredentials) {\n    const data = new UserApiLoginStrategyData();\n    data.tokenRequest = new UserApiTokenRequest(\n      credentials.clientId,\n      credentials.clientSecret,\n      await this.buildTwoFactor(),\n      await this.buildDeviceRequest(),\n    );\n    this.cache.next(data);\n\n    const [authResult] = await this.startLogIn();\n    return authResult;\n  }\n\n  protected override async setMasterKey(response: IdentityTokenResponse) {\n    if (response.apiUseKeyConnector) {\n      const env = await firstValueFrom(this.environmentService.environment$);\n      const keyConnectorUrl = env.getKeyConnectorUrl();\n      await this.keyConnectorService.setMasterKeyFromUrl(keyConnectorUrl);\n    }\n  }\n\n  protected override async setUserKey(response: IdentityTokenResponse): Promise<void> {\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key);\n\n    if (response.apiUseKeyConnector) {\n      const masterKey = await this.cryptoService.getMasterKey();\n      if (masterKey) {\n        const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(masterKey);\n        await this.cryptoService.setUserKey(userKey);\n      }\n    }\n  }\n\n  protected override async setPrivateKey(response: IdentityTokenResponse): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount()),\n    );\n  }\n\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse) {\n    await super.saveAccountInformation(tokenResponse);\n\n    const vaultTimeout = await this.stateService.getVaultTimeout();\n    const vaultTimeoutAction = await this.stateService.getVaultTimeoutAction();\n\n    const tokenRequest = this.cache.value.tokenRequest;\n\n    await this.tokenService.setClientId(\n      tokenRequest.clientId,\n      vaultTimeoutAction as VaultTimeoutAction,\n      vaultTimeout,\n    );\n    await this.tokenService.setClientSecret(\n      tokenRequest.clientSecret,\n      vaultTimeoutAction as VaultTimeoutAction,\n      vaultTimeout,\n    );\n  }\n\n  exportCache(): CacheData {\n    return {\n      userApiKey: this.cache.value,\n    };\n  }\n}\n","import { WebAuthnLoginAssertionResponseRequest } from \"../../../services/webauthn-login/request/webauthn-login-assertion-response.request\";\n\nimport { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class WebAuthnLoginTokenRequest extends TokenRequest {\n  constructor(\n    public token: string,\n    public deviceResponse: WebAuthnLoginAssertionResponseRequest,\n    device?: DeviceRequest,\n  ) {\n    super(undefined, device);\n  }\n\n  toIdentityToken(clientId: string) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"webauthn\";\n    obj.token = this.token;\n    // must be a string b/c sending as form encoded data\n    obj.deviceResponse = JSON.stringify(this.deviceResponse);\n\n    return obj;\n  }\n\n  static fromJSON(json: any) {\n    return Object.assign(Object.create(WebAuthnLoginTokenRequest.prototype), json, {\n      deviceResponse: WebAuthnLoginAssertionResponseRequest.fromJSON(json.deviceResponse),\n      device: json.device ? DeviceRequest.fromJSON(json.device) : undefined,\n      twoFactor: json.twoFactor\n        ? Object.assign(new TokenTwoFactorRequest(), json.twoFactor)\n        : undefined,\n    });\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { TokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TwoFactorService } from \"@bitwarden/common/auth/abstractions/two-factor.service\";\nimport { AuthResult } from \"@bitwarden/common/auth/models/domain/auth-result\";\nimport { WebAuthnLoginTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/webauthn-login-token.request\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { UserKey } from \"@bitwarden/common/types/key\";\n\nimport { InternalUserDecryptionOptionsServiceAbstraction } from \"../abstractions\";\nimport { WebAuthnLoginCredentials } from \"../models/domain/login-credentials\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\nimport { LoginStrategy, LoginStrategyData } from \"./login.strategy\";\n\nexport class WebAuthnLoginStrategyData implements LoginStrategyData {\n  tokenRequest: WebAuthnLoginTokenRequest;\n  captchaBypassToken?: string;\n  credentials: WebAuthnLoginCredentials;\n\n  static fromJSON(obj: Jsonify<WebAuthnLoginStrategyData>): WebAuthnLoginStrategyData {\n    return Object.assign(new WebAuthnLoginStrategyData(), obj, {\n      tokenRequest: WebAuthnLoginTokenRequest.fromJSON(obj.tokenRequest),\n      credentials: WebAuthnLoginCredentials.fromJSON(obj.credentials),\n    });\n  }\n}\n\nexport class WebAuthnLoginStrategy extends LoginStrategy {\n  protected cache: BehaviorSubject<WebAuthnLoginStrategyData>;\n\n  constructor(\n    data: WebAuthnLoginStrategyData,\n    cryptoService: CryptoService,\n    apiService: ApiService,\n    tokenService: TokenService,\n    appIdService: AppIdService,\n    platformUtilsService: PlatformUtilsService,\n    messagingService: MessagingService,\n    logService: LogService,\n    stateService: StateService,\n    twoFactorService: TwoFactorService,\n    userDecryptionOptionsService: InternalUserDecryptionOptionsServiceAbstraction,\n    billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {\n    super(\n      cryptoService,\n      apiService,\n      tokenService,\n      appIdService,\n      platformUtilsService,\n      messagingService,\n      logService,\n      stateService,\n      twoFactorService,\n      userDecryptionOptionsService,\n      billingAccountProfileStateService,\n    );\n\n    this.cache = new BehaviorSubject(data);\n  }\n\n  async logIn(credentials: WebAuthnLoginCredentials) {\n    const data = new WebAuthnLoginStrategyData();\n    data.credentials = credentials;\n    data.tokenRequest = new WebAuthnLoginTokenRequest(\n      credentials.token,\n      credentials.deviceResponse,\n      await this.buildDeviceRequest(),\n    );\n    this.cache.next(data);\n\n    const [authResult] = await this.startLogIn();\n    return authResult;\n  }\n\n  async logInTwoFactor(): Promise<AuthResult> {\n    throw new Error(\"2FA not supported yet for WebAuthn Login.\");\n  }\n\n  protected override async setMasterKey() {\n    return Promise.resolve();\n  }\n\n  protected override async setUserKey(idTokenResponse: IdentityTokenResponse) {\n    const masterKeyEncryptedUserKey = idTokenResponse.key;\n\n    if (masterKeyEncryptedUserKey) {\n      // set the master key encrypted user key if it exists\n      await this.cryptoService.setMasterKeyEncryptedUserKey(masterKeyEncryptedUserKey);\n    }\n\n    const userDecryptionOptions = idTokenResponse?.userDecryptionOptions;\n\n    if (userDecryptionOptions?.webAuthnPrfOption) {\n      const webAuthnPrfOption = idTokenResponse.userDecryptionOptions?.webAuthnPrfOption;\n\n      const credentials = this.cache.value.credentials;\n      // confirm we still have the prf key\n      if (!credentials.prfKey) {\n        return;\n      }\n\n      // decrypt prf encrypted private key\n      const privateKey = await this.cryptoService.decryptToBytes(\n        webAuthnPrfOption.encryptedPrivateKey,\n        credentials.prfKey,\n      );\n\n      // decrypt user key with private key\n      const userKey = await this.cryptoService.rsaDecrypt(\n        webAuthnPrfOption.encryptedUserKey.encryptedString,\n        privateKey,\n      );\n\n      if (userKey) {\n        await this.cryptoService.setUserKey(new SymmetricCryptoKey(userKey) as UserKey);\n      }\n    }\n  }\n\n  protected override async setPrivateKey(response: IdentityTokenResponse): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount()),\n    );\n  }\n\n  exportCache(): CacheData {\n    return {\n      webAuthn: this.cache.value,\n    };\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UserId } from \"../../types/guid\";\nimport { DerivedStateDependencies, StorageKey } from \"../../types/state\";\n\nimport { KeyDefinition } from \"./key-definition\";\nimport { StateDefinition } from \"./state-definition\";\n\ndeclare const depShapeMarker: unique symbol;\n/**\n * A set of options for customizing the behavior of a {@link DeriveDefinition}\n */\ntype DeriveDefinitionOptions<TFrom, TTo, TDeps extends DerivedStateDependencies = never> = {\n  /**\n   * A function to use to convert values from TFrom to TTo. This is called on each emit of the parent state observable\n   * and the resulting value will be emitted from the derived state observable.\n   *\n   * @param from Populated with the latest emission from the parent state observable.\n   * @param deps Populated with the dependencies passed into the constructor of the derived state.\n   * These are constant for the lifetime of the derived state.\n   * @returns  The derived state value or a Promise that resolves to the derived state value.\n   */\n  derive: (from: TFrom, deps: TDeps) => TTo | Promise<TTo>;\n  /**\n   * A function to use to safely convert your type from json to your expected type.\n   *\n   * **Important:** Your data may be serialized/deserialized at any time and this\n   *  callback needs to be able to faithfully re-initialize from the JSON object representation of your type.\n   *\n   * @param jsonValue The JSON object representation of your state.\n   * @returns The fully typed version of your state.\n   */\n  deserializer: (serialized: Jsonify<TTo>) => TTo;\n  /**\n   * An object defining the dependencies of the derive function. The keys of the object are the names of the dependencies\n   * and the values are the types of the dependencies.\n   *\n   * for example:\n   * ```\n   * {\n   *   myService: MyService,\n   *   myOtherService: MyOtherService,\n   * }\n   * ```\n   */\n  [depShapeMarker]?: TDeps;\n  /**\n   * The number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   * Defaults to 1000ms.\n   */\n  cleanupDelayMs?: number;\n  /**\n   * Whether or not to clear the derived state when cleanup occurs. Defaults to true.\n   */\n  clearOnCleanup?: boolean;\n};\n\n/**\n * DeriveDefinitions describe state derived from another observable, the value type of which is given by `TFrom`.\n *\n * The StateDefinition is used to describe the domain of the state, and the DeriveDefinition\n * sub-divides that domain into specific keys. These keys are used to cache data in memory and enables derived state to\n * be calculated once regardless of multiple execution contexts.\n */\n\nexport class DeriveDefinition<TFrom, TTo, TDeps extends DerivedStateDependencies> {\n  /**\n   * Creates a new instance of a DeriveDefinition. Derived state is always stored in memory, so the storage location\n   * defined in @link{StateDefinition} is ignored.\n   *\n   * @param stateDefinition The state definition for which this key belongs to.\n   * @param uniqueDerivationName The name of the key, this should be unique per domain.\n   * @param options A set of options to customize the behavior of {@link DeriveDefinition}.\n   * @param options.derive A function to use to convert values from TFrom to TTo. This is called on each emit of the parent state observable\n   * and the resulting value will be emitted from the derived state observable.\n   * @param options.cleanupDelayMs The number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   * Defaults to 1000ms.\n   * @param options.dependencyShape An object defining the dependencies of the derive function. The keys of the object are the names of the dependencies\n   * and the values are the types of the dependencies.\n   * for example:\n   * ```\n   * {\n   *   myService: MyService,\n   *   myOtherService: MyOtherService,\n   * }\n   * ```\n   *\n   * @param options.deserializer A function to use to safely convert your type from json to your expected type.\n   *   Your data may be serialized/deserialized at any time and this needs callback needs to be able to faithfully re-initialize\n   *   from the JSON object representation of your type.\n   */\n  constructor(\n    readonly stateDefinition: StateDefinition,\n    readonly uniqueDerivationName: string,\n    readonly options: DeriveDefinitionOptions<TFrom, TTo, TDeps>,\n  ) {}\n\n  /**\n   * Factory that produces a {@link DeriveDefinition} from a {@link KeyDefinition} or {@link DeriveDefinition} and new name.\n   *\n   * If a `KeyDefinition` is passed in, the returned definition will have the same key as the given key definition, but\n   * will not collide with it in storage, even if they both reside in memory.\n   *\n   * If a `DeriveDefinition` is passed in, the returned definition will instead use the name given in the second position\n   * of the tuple. It is up to you to ensure this is unique within the domain of derived state.\n   *\n   * @param options A set of options to customize the behavior of {@link DeriveDefinition}.\n   * @param options.derive A function to use to convert values from TFrom to TTo. This is called on each emit of the parent state observable\n   * and the resulting value will be emitted from the derived state observable.\n   * @param options.cleanupDelayMs The number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   * Defaults to 1000ms.\n   * @param options.dependencyShape An object defining the dependencies of the derive function. The keys of the object are the names of the dependencies\n   * and the values are the types of the dependencies.\n   * for example:\n   * ```\n   * {\n   *   myService: MyService,\n   *   myOtherService: MyOtherService,\n   * }\n   * ```\n   *\n   * @param options.deserializer A function to use to safely convert your type from json to your expected type.\n   *   Your data may be serialized/deserialized at any time and this needs callback needs to be able to faithfully re-initialize\n   *   from the JSON object representation of your type.\n   * @param definition\n   * @param options\n   * @returns\n   */\n  static from<TFrom, TTo, TDeps extends DerivedStateDependencies = never>(\n    definition:\n      | KeyDefinition<TFrom>\n      | [DeriveDefinition<unknown, TFrom, DerivedStateDependencies>, string],\n    options: DeriveDefinitionOptions<TFrom, TTo, TDeps>,\n  ) {\n    if (isKeyDefinition(definition)) {\n      return new DeriveDefinition(definition.stateDefinition, definition.key, options);\n    } else {\n      return new DeriveDefinition(definition[0].stateDefinition, definition[1], options);\n    }\n  }\n\n  static fromWithUserId<TKeyDef, TTo, TDeps extends DerivedStateDependencies = never>(\n    definition:\n      | KeyDefinition<TKeyDef>\n      | [DeriveDefinition<unknown, TKeyDef, DerivedStateDependencies>, string],\n    options: DeriveDefinitionOptions<[UserId, TKeyDef], TTo, TDeps>,\n  ) {\n    if (isKeyDefinition(definition)) {\n      return new DeriveDefinition(definition.stateDefinition, definition.key, options);\n    } else {\n      return new DeriveDefinition(definition[0].stateDefinition, definition[1], options);\n    }\n  }\n\n  get derive() {\n    return this.options.derive;\n  }\n\n  deserialize(serialized: Jsonify<TTo>): TTo {\n    return this.options.deserializer(serialized);\n  }\n\n  get cleanupDelayMs() {\n    return this.options.cleanupDelayMs < 0 ? 0 : this.options.cleanupDelayMs ?? 1000;\n  }\n\n  get clearOnCleanup() {\n    return this.options.clearOnCleanup ?? true;\n  }\n\n  buildCacheKey(): string {\n    return `derived_${this.stateDefinition.name}_${this.uniqueDerivationName}`;\n  }\n\n  /**\n   * Creates a {@link StorageKey} that points to the data for the given derived definition.\n   * @returns A key that is ready to be used in a storage service to get data.\n   */\n  get storageKey(): StorageKey {\n    return `derived_${this.stateDefinition.name}_${this.uniqueDerivationName}` as StorageKey;\n  }\n}\n\nfunction isKeyDefinition(\n  definition:\n    | KeyDefinition<unknown>\n    | [DeriveDefinition<unknown, unknown, DerivedStateDependencies>, string],\n): definition is KeyDefinition<unknown> {\n  return Object.prototype.hasOwnProperty.call(definition, \"key\");\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\nimport { DerivedStateDependencies } from \"../../types/state\";\n\nimport { DeriveDefinition } from \"./derive-definition\";\nimport { DerivedState } from \"./derived-state\";\nimport { GlobalState } from \"./global-state\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in docs\nimport { GlobalStateProvider } from \"./global-state.provider\";\nimport { KeyDefinition } from \"./key-definition\";\nimport { UserKeyDefinition } from \"./user-key-definition\";\nimport { ActiveUserState, SingleUserState } from \"./user-state\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in docs\nimport { ActiveUserStateProvider, SingleUserStateProvider } from \"./user-state.provider\";\n\n/** Convenience wrapper class for {@link ActiveUserStateProvider}, {@link SingleUserStateProvider},\n * and {@link GlobalStateProvider}.\n */\nexport abstract class StateProvider {\n  /** @see{@link ActiveUserStateProvider.activeUserId$} */\n  activeUserId$: Observable<UserId | undefined>;\n\n  /**\n   * Gets a state observable for a given key and userId.\n   *\n   * @remarks If userId is falsy the observable returned will attempt to point to the currently active user _and not update if the active user changes_.\n   * This is different to how `getActive` works and more similar to `getUser` for whatever user happens to be active at the time of the call.\n   * If no user happens to be active at the time this method is called with a falsy userId then this observable will not emit a value until\n   * a user becomes active. If you are not confident a user is active at the time this method is called, you may want to pipe a call to `timeout`\n   * or instead call {@link getUserStateOrDefault$} and supply a value you would rather have given in the case of no passed in userId and no active user.\n   *\n   * @note consider converting your {@link KeyDefinition} to a {@link UserKeyDefinition} for additional features.\n   *\n   * @param keyDefinition - The key definition for the state you want to get.\n   * @param userId - The userId for which you want the state for. If not provided, the state for the currently active user will be returned.\n   */\n  abstract getUserState$<T>(keyDefinition: KeyDefinition<T>, userId?: UserId): Observable<T>;\n\n  /**\n   * Gets a state observable for a given key and userId.\n   *\n   * @remarks If userId is falsy the observable returned will attempt to point to the currently active user _and not update if the active user changes_.\n   * This is different to how `getActive` works and more similar to `getUser` for whatever user happens to be active at the time of the call.\n   * If no user happens to be active at the time this method is called with a falsy userId then this observable will not emit a value until\n   * a user becomes active. If you are not confident a user is active at the time this method is called, you may want to pipe a call to `timeout`\n   * or instead call {@link getUserStateOrDefault$} and supply a value you would rather have given in the case of no passed in userId and no active user.\n   *\n   * @param keyDefinition - The key definition for the state you want to get.\n   * @param userId - The userId for which you want the state for. If not provided, the state for the currently active user will be returned.\n   */\n  abstract getUserState$<T>(keyDefinition: UserKeyDefinition<T>, userId?: UserId): Observable<T>;\n\n  /**\n   * Gets a state observable for a given key and userId\n   *\n   * @remarks If userId is falsy the observable return will first attempt to point to the currently active user but will not follow subsequent active user changes,\n   * if there is no immediately available active user, then it will fallback to returning a default value in an observable that immediately completes.\n   *\n   * @note consider converting your {@link KeyDefinition} to a {@link UserKeyDefinition} for additional features.\n   *\n   * @param keyDefinition - The key definition for the state you want to get.\n   * @param config.userId - The userId for which you want the state for. If not provided, the state for the currently active user will be returned.\n   * @param config.defaultValue - The default value that should be wrapped in an observable if no active user is immediately available and no truthy userId is passed in.\n   */\n  abstract getUserStateOrDefault$<T>(\n    keyDefinition: KeyDefinition<T>,\n    config: { userId: UserId | undefined; defaultValue?: T },\n  ): Observable<T>;\n\n  /**\n   * Gets a state observable for a given key and userId\n   *\n   * @remarks If userId is falsy the observable return will first attempt to point to the currently active user but will not follow subsequent active user changes,\n   * if there is no immediately available active user, then it will fallback to returning a default value in an observable that immediately completes.\n   *\n   * @param keyDefinition - The key definition for the state you want to get.\n   * @param config.userId - The userId for which you want the state for. If not provided, the state for the currently active user will be returned.\n   * @param config.defaultValue - The default value that should be wrapped in an observable if no active user is immediately available and no truthy userId is passed in.\n   */\n  abstract getUserStateOrDefault$<T>(\n    keyDefinition: UserKeyDefinition<T>,\n    config: { userId: UserId | undefined; defaultValue?: T },\n  ): Observable<T>;\n\n  /**\n   * Sets the state for a given key and userId.\n   *\n   * @overload\n   * @param keyDefinition - The key definition for the state you want to set.\n   * @param value - The value to set the state to.\n   * @param userId - The userId for which you want to set the state for. If not provided, the state for the currently active user will be set.\n   */\n  abstract setUserState<T>(\n    keyDefinition: UserKeyDefinition<T>,\n    value: T,\n    userId?: UserId,\n  ): Promise<[UserId, T]>;\n\n  /**\n   * Sets the state for a given key and userId.\n   *\n   * **NOTE** Consider converting your {@link KeyDefinition} to a {@link UserKeyDefinition} for additional features.\n   *\n   * @overload\n   * @param keyDefinition - The key definition for the state you want to set.\n   * @param value - The value to set the state to.\n   * @param userId - The userId for which you want to set the state for. If not provided, the state for the currently active user will be set.\n   */\n  abstract setUserState<T>(\n    keyDefinition: KeyDefinition<T>,\n    value: T,\n    userId?: UserId,\n  ): Promise<[UserId, T]>;\n\n  abstract setUserState<T>(\n    keyDefinition: KeyDefinition<T> | UserKeyDefinition<T>,\n    value: T,\n    userId?: UserId,\n  ): Promise<[UserId, T]>;\n\n  /** @see{@link ActiveUserStateProvider.get} */\n  abstract getActive<T>(keyDefinition: UserKeyDefinition<T>): ActiveUserState<T>;\n\n  /**\n   * @see{@link ActiveUserStateProvider.get}\n   *\n   * **NOTE** Consider converting your {@link KeyDefinition} to a {@link UserKeyDefinition} for additional features.\n   */\n  abstract getActive<T>(keyDefinition: KeyDefinition<T>): ActiveUserState<T>;\n\n  /** @see{@link ActiveUserStateProvider.get} */\n  abstract getActive<T>(keyDefinition: KeyDefinition<T> | UserKeyDefinition<T>): ActiveUserState<T>;\n\n  /** @see{@link SingleUserStateProvider.get} */\n  abstract getUser<T>(userId: UserId, keyDefinition: UserKeyDefinition<T>): SingleUserState<T>;\n\n  /**\n   * @see{@link SingleUserStateProvider.get}\n   *\n   * **NOTE** Consider converting your {@link KeyDefinition} to a {@link UserKeyDefinition} for additional features.\n   */\n  abstract getUser<T>(userId: UserId, keyDefinition: KeyDefinition<T>): SingleUserState<T>;\n\n  /** @see{@link SingleUserStateProvider.get} */\n  abstract getUser<T>(\n    userId: UserId,\n    keyDefinition: KeyDefinition<T> | UserKeyDefinition<T>,\n  ): SingleUserState<T>;\n\n  /** @see{@link GlobalStateProvider.get} */\n  getGlobal: <T>(keyDefinition: KeyDefinition<T>) => GlobalState<T>;\n  getDerived: <TFrom, TTo, TDeps extends DerivedStateDependencies>(\n    parentState$: Observable<TFrom>,\n    deriveDefinition: DeriveDefinition<TFrom, TTo, TDeps>,\n    dependencies: TDeps,\n  ) => DerivedState<TTo>;\n}\n","import { Jsonify } from \"type-fest\";\n\n/**\n *\n * @param elementDeserializer\n * @returns\n */\nexport function array<T>(\n  elementDeserializer: (element: Jsonify<T>) => T,\n): (array: Jsonify<T[]>) => T[] {\n  return (array) => {\n    if (array == null) {\n      return null;\n    }\n\n    return array.map((element) => elementDeserializer(element));\n  };\n}\n\n/**\n *\n * @param valueDeserializer\n */\nexport function record<T, TKey extends string = string>(\n  valueDeserializer: (value: Jsonify<T>) => T,\n): (record: Jsonify<Record<TKey, T>>) => Record<TKey, T> {\n  return (jsonValue: Jsonify<Record<TKey, T> | null>) => {\n    if (jsonValue == null) {\n      return null;\n    }\n\n    const output: Record<string, T> = {};\n    for (const key in jsonValue) {\n      output[key] = valueDeserializer((jsonValue as Record<string, Jsonify<T>>)[key]);\n    }\n    return output;\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { StorageKey } from \"../../types/state\";\n\nimport { array, record } from \"./deserialization-helpers\";\nimport { StateDefinition } from \"./state-definition\";\n\n/**\n * A set of options for customizing the behavior of a {@link KeyDefinition}\n */\nexport type KeyDefinitionOptions<T> = {\n  /**\n   * A function to use to safely convert your type from json to your expected type.\n   *\n   * **Important:** Your data may be serialized/deserialized at any time and this\n   *  callback needs to be able to faithfully re-initialize from the JSON object representation of your type.\n   *\n   * @param jsonValue The JSON object representation of your state.\n   * @returns The fully typed version of your state.\n   */\n  readonly deserializer: (jsonValue: Jsonify<T>) => T;\n  /**\n   * The number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   * Defaults to 1000ms.\n   */\n  readonly cleanupDelayMs?: number;\n};\n\n/**\n * KeyDefinitions describe the precise location to store data for a given piece of state.\n * The StateDefinition is used to describe the domain of the state, and the KeyDefinition\n * sub-divides that domain into specific keys.\n */\nexport class KeyDefinition<T> {\n  /**\n   * Creates a new instance of a KeyDefinition\n   * @param stateDefinition The state definition for which this key belongs to.\n   * @param key The name of the key, this should be unique per domain.\n   * @param options A set of options to customize the behavior of {@link KeyDefinition}. All options are required.\n   * @param options.deserializer A function to use to safely convert your type from json to your expected type.\n   *   Your data may be serialized/deserialized at any time and this needs callback needs to be able to faithfully re-initialize\n   *   from the JSON object representation of your type.\n   */\n  constructor(\n    readonly stateDefinition: StateDefinition,\n    readonly key: string,\n    private readonly options: KeyDefinitionOptions<T>,\n  ) {\n    if (options.deserializer == null) {\n      throw new Error(`'deserializer' is a required property on key ${this.errorKeyName}`);\n    }\n\n    if (options.cleanupDelayMs <= 0) {\n      throw new Error(\n        `'cleanupDelayMs' must be greater than 0. Value of ${options.cleanupDelayMs} passed to key ${this.errorKeyName} `,\n      );\n    }\n  }\n\n  /**\n   * Gets the deserializer configured for this {@link KeyDefinition}\n   */\n  get deserializer() {\n    return this.options.deserializer;\n  }\n\n  /**\n   * Gets the number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   */\n  get cleanupDelayMs() {\n    return this.options.cleanupDelayMs < 0 ? 0 : this.options.cleanupDelayMs ?? 1000;\n  }\n\n  /**\n   * Creates a {@link KeyDefinition} for state that is an array.\n   * @param stateDefinition The state definition to be added to the KeyDefinition\n   * @param key The key to be added to the KeyDefinition\n   * @param options The options to customize the final {@link KeyDefinition}.\n   * @returns A {@link KeyDefinition} initialized for arrays, the options run\n   * the deserializer on the provided options for each element of an array.\n   *\n   * @example\n   * ```typescript\n   * const MY_KEY = KeyDefinition.array<MyArrayElement>(MY_STATE, \"key\", {\n   *   deserializer: (myJsonElement) => convertToElement(myJsonElement),\n   * });\n   * ```\n   */\n  static array<T>(\n    stateDefinition: StateDefinition,\n    key: string,\n    // We have them provide options for the element of the array, depending on future options we add, this could get a little weird.\n    options: KeyDefinitionOptions<T>, // The array helper forces  an initialValue of an empty array\n  ) {\n    return new KeyDefinition<T[]>(stateDefinition, key, {\n      ...options,\n      deserializer: array((e) => options.deserializer(e)),\n    });\n  }\n\n  /**\n   * Creates a {@link KeyDefinition} for state that is a record.\n   * @param stateDefinition The state definition to be added to the KeyDefinition\n   * @param key The key to be added to the KeyDefinition\n   * @param options The options to customize the final {@link KeyDefinition}.\n   * @returns A {@link KeyDefinition} that contains a serializer that will run the provided deserializer for each\n   * value in a record and returns every key as a string.\n   *\n   * @example\n   * ```typescript\n   * const MY_KEY = KeyDefinition.record<MyRecordValue>(MY_STATE, \"key\", {\n   *   deserializer: (myJsonValue) => convertToValue(myJsonValue),\n   * });\n   * ```\n   */\n  static record<T, TKey extends string = string>(\n    stateDefinition: StateDefinition,\n    key: string,\n    // We have them provide options for the value of the record, depending on future options we add, this could get a little weird.\n    options: KeyDefinitionOptions<T>, // The array helper forces an initialValue of an empty record\n  ) {\n    return new KeyDefinition<Record<TKey, T>>(stateDefinition, key, {\n      ...options,\n      deserializer: record((v) => options.deserializer(v)),\n    });\n  }\n\n  get fullName() {\n    return `${this.stateDefinition.name}_${this.key}`;\n  }\n\n  protected get errorKeyName() {\n    return `${this.stateDefinition.name} > ${this.key}`;\n  }\n}\n\n/**\n * Creates a {@link StorageKey}\n * @param keyDefinition The key definition of which data the key should point to.\n * @returns A key that is ready to be used in a storage service to get data.\n */\nexport function globalKeyBuilder(keyDefinition: KeyDefinition<unknown>): StorageKey {\n  return `global_${keyDefinition.stateDefinition.name}_${keyDefinition.key}` as StorageKey;\n}\n","import { UserId } from \"../../types/guid\";\nimport { StorageKey } from \"../../types/state\";\nimport { Utils } from \"../misc/utils\";\n\nimport { array, record } from \"./deserialization-helpers\";\nimport { KeyDefinition, KeyDefinitionOptions } from \"./key-definition\";\nimport { StateDefinition } from \"./state-definition\";\n\nexport type ClearEvent = \"lock\" | \"logout\";\n\ntype UserKeyDefinitionOptions<T> = KeyDefinitionOptions<T> & {\n  clearOn: ClearEvent[];\n};\n\nconst USER_KEY_DEFINITION_MARKER: unique symbol = Symbol(\"UserKeyDefinition\");\n\nexport function isUserKeyDefinition<T>(\n  keyDefinition: KeyDefinition<T> | UserKeyDefinition<T>,\n): keyDefinition is UserKeyDefinition<T> {\n  return (\n    USER_KEY_DEFINITION_MARKER in keyDefinition &&\n    keyDefinition[USER_KEY_DEFINITION_MARKER] === true\n  );\n}\n\nexport class UserKeyDefinition<T> {\n  readonly [USER_KEY_DEFINITION_MARKER] = true;\n  /**\n   * A unique array of events that the state stored at this key should be cleared on.\n   */\n  readonly clearOn: ClearEvent[];\n\n  constructor(\n    readonly stateDefinition: StateDefinition,\n    readonly key: string,\n    private readonly options: UserKeyDefinitionOptions<T>,\n  ) {\n    if (options.deserializer == null) {\n      throw new Error(`'deserializer' is a required property on key ${this.errorKeyName}`);\n    }\n\n    if (options.cleanupDelayMs <= 0) {\n      throw new Error(\n        `'cleanupDelayMs' must be greater than 0. Value of ${options.cleanupDelayMs} passed to key ${this.errorKeyName} `,\n      );\n    }\n\n    // Filter out repeat values\n    this.clearOn = Array.from(new Set(options.clearOn));\n  }\n\n  /**\n   * Gets the deserializer configured for this {@link KeyDefinition}\n   */\n  get deserializer() {\n    return this.options.deserializer;\n  }\n\n  /**\n   * Gets the number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   */\n  get cleanupDelayMs() {\n    return this.options.cleanupDelayMs < 0 ? 0 : this.options.cleanupDelayMs ?? 1000;\n  }\n\n  /**\n   *\n   * @param keyDefinition\n   * @returns\n   *\n   * @deprecated You should not use this to convert, just create a {@link UserKeyDefinition}\n   */\n  static fromBaseKeyDefinition<T>(keyDefinition: KeyDefinition<T>) {\n    return new UserKeyDefinition<T>(keyDefinition.stateDefinition, keyDefinition.key, {\n      ...keyDefinition[\"options\"],\n      clearOn: [], // Default to not clearing\n    });\n  }\n\n  /**\n   * Creates a {@link UserKeyDefinition} for state that is an array.\n   * @param stateDefinition The state definition to be added to the UserKeyDefinition\n   * @param key The key to be added to the KeyDefinition\n   * @param options The options to customize the final {@link UserKeyDefinition}.\n   * @returns A {@link UserKeyDefinition} initialized for arrays, the options run\n   * the deserializer on the provided options for each element of an array\n   * **unless that array is null, in which case it will return an empty list.**\n   *\n   * @example\n   * ```typescript\n   * const MY_KEY = UserKeyDefinition.array<MyArrayElement>(MY_STATE, \"key\", {\n   *   deserializer: (myJsonElement) => convertToElement(myJsonElement),\n   * });\n   * ```\n   */\n  static array<T>(\n    stateDefinition: StateDefinition,\n    key: string,\n    // We have them provide options for the element of the array, depending on future options we add, this could get a little weird.\n    options: UserKeyDefinitionOptions<T>,\n  ) {\n    return new UserKeyDefinition<T[]>(stateDefinition, key, {\n      ...options,\n      deserializer: array((e) => options.deserializer(e)),\n    });\n  }\n\n  /**\n   * Creates a {@link UserKeyDefinition} for state that is a record.\n   * @param stateDefinition The state definition to be added to the UserKeyDefinition\n   * @param key The key to be added to the KeyDefinition\n   * @param options The options to customize the final {@link UserKeyDefinition}.\n   * @returns A {@link UserKeyDefinition} that contains a serializer that will run the provided deserializer for each\n   * value in a record and returns every key as a string **unless that record is null, in which case it will return an record.**\n   *\n   * @example\n   * ```typescript\n   * const MY_KEY = UserKeyDefinition.record<MyRecordValue>(MY_STATE, \"key\", {\n   *   deserializer: (myJsonValue) => convertToValue(myJsonValue),\n   * });\n   * ```\n   */\n  static record<T, TKey extends string = string>(\n    stateDefinition: StateDefinition,\n    key: string,\n    // We have them provide options for the value of the record, depending on future options we add, this could get a little weird.\n    options: UserKeyDefinitionOptions<T>, // The array helper forces an initialValue of an empty record\n  ) {\n    return new UserKeyDefinition<Record<TKey, T>>(stateDefinition, key, {\n      ...options,\n      deserializer: record((v) => options.deserializer(v)),\n    });\n  }\n\n  get fullName() {\n    return `${this.stateDefinition.name}_${this.key}`;\n  }\n\n  buildKey(userId: UserId) {\n    if (!Utils.isGuid(userId)) {\n      throw new Error(\n        `You cannot build a user key without a valid UserId, building for key ${this.fullName}`,\n      );\n    }\n    return `user_${userId}_${this.stateDefinition.name}_${this.key}` as StorageKey;\n  }\n\n  private get errorKeyName() {\n    return `${this.stateDefinition.name} > ${this.key}`;\n  }\n}\n","/**\n * Default storage location options.\n *\n * `disk` generally means state that is accessible between restarts of the application,\n * with the exception of the web client. In web this means `sessionStorage`. The data\n * persists through refreshes of the page but not available once that tab is closed or\n * from any other tabs.\n *\n * `memory` means that the information stored there goes away during application\n * restarts.\n */\nexport type StorageLocation = \"disk\" | \"memory\";\n\n/**\n * *Note*: The property names of this object should match exactly with the string values of the {@link ClientType} enum\n */\nexport type ClientLocations = {\n  /**\n   * Overriding storage location for the web client.\n   *\n   * Includes an extra storage location to store data in `localStorage`\n   * that is available from different tabs and after a tab has closed.\n   */\n  web: StorageLocation | \"disk-local\";\n  /**\n   * Overriding storage location for browser clients.\n   */\n  //browser: StorageLocation;\n  /**\n   * Overriding storage location for desktop clients.\n   */\n  //desktop: StorageLocation;\n  /**\n   * Overriding storage location for CLI clients.\n   */\n  //cli: StorageLocation;\n};\n\n/**\n * Defines the base location and instruction of where this state is expected to be located.\n */\nexport class StateDefinition {\n  readonly storageLocationOverrides: Partial<ClientLocations>;\n\n  /**\n   * Creates a new instance of {@link StateDefinition}, the creation of which is owned by the platform team.\n   * @param name The name of the state, this needs to be unique from all other {@link StateDefinition}'s.\n   * @param defaultStorageLocation The location of where this state should be stored.\n   */\n  constructor(\n    readonly name: string,\n    readonly defaultStorageLocation: StorageLocation,\n    storageLocationOverrides?: Partial<ClientLocations>,\n  ) {\n    this.storageLocationOverrides = storageLocationOverrides ?? {};\n  }\n}\n","import { StateDefinition } from \"./state-definition\";\n\n/**\n * `StateDefinition`s comes with some rules, to facilitate a quick review from\n * platform of this file, ensure you follow these rules, the ones marked with (tested)\n * have unit tests that you can run locally.\n *\n * 1. (tested) Names should not be null or undefined\n * 2. (tested) Name and storage location should be unique\n * 3. (tested) Name and storage location can't differ from another export by only casing\n * 4. (tested) Name should be longer than 3 characters. It should be descriptive, but brief.\n * 5. (tested) Name should not contain spaces or underscores\n * 6. Name should be human readable\n * 7. Name should be in camelCase format (unit tests ensure the first character is lowercase)\n * 8. Teams should only use state definitions they have created\n * 9. StateDefinitions should only be used for keys relating to the state name they chose\n *\n */\n\n// Admin Console\n\nexport const ORGANIZATIONS_DISK = new StateDefinition(\"organizations\", \"disk\");\nexport const POLICIES_DISK = new StateDefinition(\"policies\", \"disk\");\nexport const PROVIDERS_DISK = new StateDefinition(\"providers\", \"disk\");\nexport const ORGANIZATION_MANAGEMENT_PREFERENCES_DISK = new StateDefinition(\n  \"organizationManagementPreferences\",\n  \"disk\",\n  {\n    web: \"disk-local\",\n  },\n);\n\n// Billing\nexport const BILLING_DISK = new StateDefinition(\"billing\", \"disk\");\n\n// Auth\n\nexport const ACCOUNT_MEMORY = new StateDefinition(\"account\", \"memory\");\nexport const AVATAR_DISK = new StateDefinition(\"avatar\", \"disk\", { web: \"disk-local\" });\nexport const SSO_DISK = new StateDefinition(\"ssoLogin\", \"disk\");\nexport const TOKEN_DISK = new StateDefinition(\"token\", \"disk\");\nexport const TOKEN_DISK_LOCAL = new StateDefinition(\"tokenDiskLocal\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const TOKEN_MEMORY = new StateDefinition(\"token\", \"memory\");\nexport const LOGIN_STRATEGY_MEMORY = new StateDefinition(\"loginStrategy\", \"memory\");\nexport const USER_DECRYPTION_OPTIONS_DISK = new StateDefinition(\"userDecryptionOptions\", \"disk\");\n\n// Autofill\n\nexport const BADGE_SETTINGS_DISK = new StateDefinition(\"badgeSettings\", \"disk\");\nexport const USER_NOTIFICATION_SETTINGS_DISK = new StateDefinition(\n  \"userNotificationSettings\",\n  \"disk\",\n);\n\nexport const DOMAIN_SETTINGS_DISK = new StateDefinition(\"domainSettings\", \"disk\");\nexport const AUTOFILL_SETTINGS_DISK = new StateDefinition(\"autofillSettings\", \"disk\");\nexport const AUTOFILL_SETTINGS_DISK_LOCAL = new StateDefinition(\"autofillSettingsLocal\", \"disk\", {\n  web: \"disk-local\",\n});\n\n// Components\n\nexport const NEW_WEB_LAYOUT_BANNER_DISK = new StateDefinition(\"newWebLayoutBanner\", \"disk\", {\n  web: \"disk-local\",\n});\n\n// Platform\n\nexport const APPLICATION_ID_DISK = new StateDefinition(\"applicationId\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const BIOMETRIC_SETTINGS_DISK = new StateDefinition(\"biometricSettings\", \"disk\");\nexport const CLEAR_EVENT_DISK = new StateDefinition(\"clearEvent\", \"disk\");\nexport const CRYPTO_DISK = new StateDefinition(\"crypto\", \"disk\");\nexport const CRYPTO_MEMORY = new StateDefinition(\"crypto\", \"memory\");\nexport const DESKTOP_SETTINGS_DISK = new StateDefinition(\"desktopSettings\", \"disk\");\nexport const ENVIRONMENT_DISK = new StateDefinition(\"environment\", \"disk\");\nexport const ENVIRONMENT_MEMORY = new StateDefinition(\"environment\", \"memory\");\nexport const THEMING_DISK = new StateDefinition(\"theming\", \"disk\", { web: \"disk-local\" });\nexport const TRANSLATION_DISK = new StateDefinition(\"translation\", \"disk\");\n\n// Secrets Manager\n\nexport const SM_ONBOARDING_DISK = new StateDefinition(\"smOnboarding\", \"disk\", {\n  web: \"disk-local\",\n});\n\n// Tools\n\nexport const GENERATOR_DISK = new StateDefinition(\"generator\", \"disk\");\nexport const GENERATOR_MEMORY = new StateDefinition(\"generator\", \"memory\");\nexport const EVENT_COLLECTION_DISK = new StateDefinition(\"eventCollection\", \"disk\");\n\n// Vault\n\nexport const COLLECTION_DATA = new StateDefinition(\"collection\", \"disk\", {\n  web: \"memory\",\n});\nexport const FOLDER_DISK = new StateDefinition(\"folder\", \"disk\", { web: \"memory\" });\nexport const VAULT_FILTER_DISK = new StateDefinition(\"vaultFilter\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const VAULT_ONBOARDING = new StateDefinition(\"vaultOnboarding\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const VAULT_SETTINGS_DISK = new StateDefinition(\"vaultSettings\", \"disk\", {\n  web: \"disk-local\",\n});\n","import { PossibleLocation, StorageServiceProvider } from \"../services/storage-service.provider\";\n\nimport { GlobalState } from \"./global-state\";\nimport { GlobalStateProvider } from \"./global-state.provider\";\nimport { KeyDefinition } from \"./key-definition\";\nimport { CLEAR_EVENT_DISK } from \"./state-definitions\";\nimport { ClearEvent, UserKeyDefinition } from \"./user-key-definition\";\n\nexport type StateEventInfo = {\n  state: string;\n  key: string;\n  location: PossibleLocation;\n};\n\nexport const STATE_LOCK_EVENT = KeyDefinition.array<StateEventInfo>(CLEAR_EVENT_DISK, \"lock\", {\n  deserializer: (e) => e,\n});\n\nexport const STATE_LOGOUT_EVENT = KeyDefinition.array<StateEventInfo>(CLEAR_EVENT_DISK, \"logout\", {\n  deserializer: (e) => e,\n});\n\nexport class StateEventRegistrarService {\n  private readonly stateEventStateMap: { [Prop in ClearEvent]: GlobalState<StateEventInfo[]> };\n\n  constructor(\n    globalStateProvider: GlobalStateProvider,\n    private storageServiceProvider: StorageServiceProvider,\n  ) {\n    this.stateEventStateMap = {\n      lock: globalStateProvider.get(STATE_LOCK_EVENT),\n      logout: globalStateProvider.get(STATE_LOGOUT_EVENT),\n    };\n  }\n\n  async registerEvents(keyDefinition: UserKeyDefinition<unknown>) {\n    for (const clearEvent of keyDefinition.clearOn) {\n      const eventState = this.stateEventStateMap[clearEvent];\n      // Determine the storage location for this\n      const [storageLocation] = this.storageServiceProvider.get(\n        keyDefinition.stateDefinition.defaultStorageLocation,\n        keyDefinition.stateDefinition.storageLocationOverrides,\n      );\n\n      const newEvent: StateEventInfo = {\n        state: keyDefinition.stateDefinition.name,\n        key: keyDefinition.key,\n        location: storageLocation,\n      };\n\n      // Only update the event state if the existing list doesn't have a matching entry\n      await eventState.update(\n        (existingTickets) => {\n          existingTickets ??= [];\n          existingTickets.push(newEvent);\n          return existingTickets;\n        },\n        {\n          shouldUpdate: (currentTickets) => {\n            return (\n              // If the current tickets are null, then it will for sure be added\n              currentTickets == null ||\n              // If an existing match couldn't be found, we also need to add one\n              currentTickets.findIndex(\n                (e) =>\n                  e.state === newEvent.state &&\n                  e.key === newEvent.key &&\n                  e.location === newEvent.location,\n              ) === -1\n            );\n          },\n        },\n      );\n    }\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\nimport { StorageServiceProvider } from \"../services/storage-service.provider\";\n\nimport { GlobalState } from \"./global-state\";\nimport { GlobalStateProvider } from \"./global-state.provider\";\nimport { StateDefinition, StorageLocation } from \"./state-definition\";\nimport {\n  STATE_LOCK_EVENT,\n  STATE_LOGOUT_EVENT,\n  StateEventInfo,\n} from \"./state-event-registrar.service\";\nimport { ClearEvent, UserKeyDefinition } from \"./user-key-definition\";\n\nexport class StateEventRunnerService {\n  private readonly stateEventMap: { [Prop in ClearEvent]: GlobalState<StateEventInfo[]> };\n\n  constructor(\n    globalStateProvider: GlobalStateProvider,\n    private storageServiceProvider: StorageServiceProvider,\n  ) {\n    this.stateEventMap = {\n      lock: globalStateProvider.get(STATE_LOCK_EVENT),\n      logout: globalStateProvider.get(STATE_LOGOUT_EVENT),\n    };\n  }\n\n  async handleEvent(event: ClearEvent, userId: UserId) {\n    let tickets = await firstValueFrom(this.stateEventMap[event].state$);\n    tickets ??= [];\n\n    const failures: string[] = [];\n\n    for (const ticket of tickets) {\n      try {\n        const [, service] = this.storageServiceProvider.get(\n          ticket.location,\n          {}, // The storage location is already the computed storage location for this client\n        );\n\n        const ticketStorageKey = this.storageKeyFor(userId, ticket);\n\n        // Evaluate current value so we can avoid writing to state if we don't need to\n        const currentValue = await service.get(ticketStorageKey);\n        if (currentValue != null) {\n          await service.remove(ticketStorageKey);\n        }\n      } catch (err: unknown) {\n        let errorMessage = \"Unknown Error\";\n        if (typeof err === \"object\" && \"message\" in err && typeof err.message === \"string\") {\n          errorMessage = err.message;\n        }\n\n        failures.push(\n          `${errorMessage} in ${ticket.state} > ${ticket.key} located ${ticket.location}`,\n        );\n      }\n    }\n\n    if (failures.length > 0) {\n      // Throw aggregated error\n      throw new Error(\n        `One or more errors occurred while handling event '${event}' for user ${userId}.\\n${failures.join(\"\\n\")}`,\n      );\n    }\n  }\n\n  private storageKeyFor(userId: UserId, ticket: StateEventInfo) {\n    const userKey = new UserKeyDefinition<unknown>(\n      new StateDefinition(ticket.state, ticket.location as unknown as StorageLocation),\n      ticket.key,\n      {\n        deserializer: (v) => v,\n        clearOn: [],\n      },\n    );\n    return userKey.buildKey(userId);\n  }\n}\n","import { AuthenticationType } from \"@bitwarden/common/auth/enums/authentication-type\";\nimport { KeyDefinition, LOGIN_STRATEGY_MEMORY } from \"@bitwarden/common/platform/state\";\n\nimport { AuthRequestLoginStrategyData } from \"../../login-strategies/auth-request-login.strategy\";\nimport { PasswordLoginStrategyData } from \"../../login-strategies/password-login.strategy\";\nimport { SsoLoginStrategyData } from \"../../login-strategies/sso-login.strategy\";\nimport { UserApiLoginStrategyData } from \"../../login-strategies/user-api-login.strategy\";\nimport { WebAuthnLoginStrategyData } from \"../../login-strategies/webauthn-login.strategy\";\n\n/**\n * The current login strategy in use.\n */\nexport const CURRENT_LOGIN_STRATEGY_KEY = new KeyDefinition<AuthenticationType | null>(\n  LOGIN_STRATEGY_MEMORY,\n  \"currentLoginStrategy\",\n  {\n    deserializer: (data) => data,\n  },\n);\n\n/**\n * The expiration date for the login strategy cache.\n * Used as a backup to the timer set on the service.\n */\nexport const CACHE_EXPIRATION_KEY = new KeyDefinition<Date | null>(\n  LOGIN_STRATEGY_MEMORY,\n  \"loginStrategyCacheExpiration\",\n  {\n    deserializer: (data) => (data ? null : new Date(data)),\n  },\n);\n\n/**\n * Auth Request notification for all instances of the login strategy service.\n * Note: this isn't an ideal approach, but allows both a background and\n * foreground instance to send out the notification.\n * TODO: Move to Auth Request service.\n */\nexport const AUTH_REQUEST_PUSH_NOTIFICATION_KEY = new KeyDefinition<string>(\n  LOGIN_STRATEGY_MEMORY,\n  \"authRequestPushNotification\",\n  {\n    deserializer: (data) => data,\n  },\n);\n\nexport type CacheData = {\n  password?: PasswordLoginStrategyData;\n  sso?: SsoLoginStrategyData;\n  userApiKey?: UserApiLoginStrategyData;\n  authRequest?: AuthRequestLoginStrategyData;\n  webAuthn?: WebAuthnLoginStrategyData;\n};\n\n/**\n * A cache for login strategies to use for data persistence through\n * the login process.\n */\nexport const CACHE_KEY = new KeyDefinition<CacheData | null>(\n  LOGIN_STRATEGY_MEMORY,\n  \"loginStrategyCache\",\n  {\n    deserializer: (data) => {\n      if (data == null) {\n        return null;\n      }\n      return {\n        password: data.password ? PasswordLoginStrategyData.fromJSON(data.password) : undefined,\n        sso: data.sso ? SsoLoginStrategyData.fromJSON(data.sso) : undefined,\n        userApiKey: data.userApiKey\n          ? UserApiLoginStrategyData.fromJSON(data.userApiKey)\n          : undefined,\n        authRequest: data.authRequest\n          ? AuthRequestLoginStrategyData.fromJSON(data.authRequest)\n          : undefined,\n        webAuthn: data.webAuthn ? WebAuthnLoginStrategyData.fromJSON(data.webAuthn) : undefined,\n      };\n    },\n  },\n);\n","import {\n  combineLatestWith,\n  distinctUntilChanged,\n  filter,\n  firstValueFrom,\n  map,\n  Observable,\n  shareReplay,\n} from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { DeviceTrustCryptoServiceAbstraction } from \"@bitwarden/common/auth/abstractions/device-trust-crypto.service.abstraction\";\nimport { KeyConnectorService } from \"@bitwarden/common/auth/abstractions/key-connector.service\";\nimport { TokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TwoFactorService } from \"@bitwarden/common/auth/abstractions/two-factor.service\";\nimport { AuthenticationType } from \"@bitwarden/common/auth/enums/authentication-type\";\nimport { AuthResult } from \"@bitwarden/common/auth/models/domain/auth-result\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { TokenTwoFactorRequest } from \"@bitwarden/common/auth/models/request/identity-token/token-two-factor.request\";\nimport { PasswordlessAuthRequest } from \"@bitwarden/common/auth/models/request/passwordless-auth.request\";\nimport { AuthRequestResponse } from \"@bitwarden/common/auth/models/response/auth-request.response\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { PreloginRequest } from \"@bitwarden/common/models/request/prelogin.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { AuthRequestPushNotification } from \"@bitwarden/common/models/response/notification.response\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { KdfType } from \"@bitwarden/common/platform/enums\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { GlobalState, GlobalStateProvider } from \"@bitwarden/common/platform/state\";\nimport { PasswordStrengthServiceAbstraction } from \"@bitwarden/common/tools/password-strength\";\nimport { MasterKey } from \"@bitwarden/common/types/key\";\n\nimport { AuthRequestServiceAbstraction, LoginStrategyServiceAbstraction } from \"../../abstractions\";\nimport { InternalUserDecryptionOptionsServiceAbstraction } from \"../../abstractions/user-decryption-options.service.abstraction\";\nimport { AuthRequestLoginStrategy } from \"../../login-strategies/auth-request-login.strategy\";\nimport { PasswordLoginStrategy } from \"../../login-strategies/password-login.strategy\";\nimport { SsoLoginStrategy } from \"../../login-strategies/sso-login.strategy\";\nimport { UserApiLoginStrategy } from \"../../login-strategies/user-api-login.strategy\";\nimport { WebAuthnLoginStrategy } from \"../../login-strategies/webauthn-login.strategy\";\nimport {\n  UserApiLoginCredentials,\n  PasswordLoginCredentials,\n  SsoLoginCredentials,\n  AuthRequestLoginCredentials,\n  WebAuthnLoginCredentials,\n} from \"../../models\";\n\nimport {\n  AUTH_REQUEST_PUSH_NOTIFICATION_KEY,\n  CURRENT_LOGIN_STRATEGY_KEY,\n  CacheData,\n  CACHE_EXPIRATION_KEY,\n  CACHE_KEY,\n} from \"./login-strategy.state\";\n\nconst sessionTimeoutLength = 2 * 60 * 1000; // 2 minutes\n\nexport class LoginStrategyService implements LoginStrategyServiceAbstraction {\n  private sessionTimeout: unknown;\n  private currentAuthnTypeState: GlobalState<AuthenticationType | null>;\n  private loginStrategyCacheState: GlobalState<CacheData | null>;\n  private loginStrategyCacheExpirationState: GlobalState<Date | null>;\n  private authRequestPushNotificationState: GlobalState<string>;\n\n  private loginStrategy$: Observable<\n    | UserApiLoginStrategy\n    | PasswordLoginStrategy\n    | SsoLoginStrategy\n    | AuthRequestLoginStrategy\n    | WebAuthnLoginStrategy\n    | null\n  >;\n\n  currentAuthType$: Observable<AuthenticationType | null>;\n  // TODO: move to auth request service\n  authRequestPushNotification$: Observable<string>;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected tokenService: TokenService,\n    protected appIdService: AppIdService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected messagingService: MessagingService,\n    protected logService: LogService,\n    protected keyConnectorService: KeyConnectorService,\n    protected environmentService: EnvironmentService,\n    protected stateService: StateService,\n    protected twoFactorService: TwoFactorService,\n    protected i18nService: I18nService,\n    protected encryptService: EncryptService,\n    protected passwordStrengthService: PasswordStrengthServiceAbstraction,\n    protected policyService: PolicyService,\n    protected deviceTrustCryptoService: DeviceTrustCryptoServiceAbstraction,\n    protected authRequestService: AuthRequestServiceAbstraction,\n    protected userDecryptionOptionsService: InternalUserDecryptionOptionsServiceAbstraction,\n    protected stateProvider: GlobalStateProvider,\n    protected billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {\n    this.currentAuthnTypeState = this.stateProvider.get(CURRENT_LOGIN_STRATEGY_KEY);\n    this.loginStrategyCacheState = this.stateProvider.get(CACHE_KEY);\n    this.loginStrategyCacheExpirationState = this.stateProvider.get(CACHE_EXPIRATION_KEY);\n    this.authRequestPushNotificationState = this.stateProvider.get(\n      AUTH_REQUEST_PUSH_NOTIFICATION_KEY,\n    );\n\n    this.currentAuthType$ = this.currentAuthnTypeState.state$;\n    this.authRequestPushNotification$ = this.authRequestPushNotificationState.state$.pipe(\n      filter((id) => id != null),\n    );\n    this.loginStrategy$ = this.currentAuthnTypeState.state$.pipe(\n      distinctUntilChanged(),\n      combineLatestWith(this.loginStrategyCacheState.state$),\n      this.initializeLoginStrategy.bind(this),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n  }\n\n  async getEmail(): Promise<string | null> {\n    const strategy = await firstValueFrom(this.loginStrategy$);\n\n    if (\"email$\" in strategy) {\n      return await firstValueFrom(strategy.email$);\n    }\n    return null;\n  }\n\n  async getMasterPasswordHash(): Promise<string | null> {\n    const strategy = await firstValueFrom(this.loginStrategy$);\n\n    if (\"serverMasterKeyHash$\" in strategy) {\n      return await firstValueFrom(strategy.serverMasterKeyHash$);\n    }\n    return null;\n  }\n\n  async getSsoEmail2FaSessionToken(): Promise<string | null> {\n    const strategy = await firstValueFrom(this.loginStrategy$);\n\n    if (\"ssoEmail2FaSessionToken$\" in strategy) {\n      return await firstValueFrom(strategy.ssoEmail2FaSessionToken$);\n    }\n    return null;\n  }\n\n  async getAccessCode(): Promise<string | null> {\n    const strategy = await firstValueFrom(this.loginStrategy$);\n\n    if (\"accessCode$\" in strategy) {\n      return await firstValueFrom(strategy.accessCode$);\n    }\n    return null;\n  }\n\n  async getAuthRequestId(): Promise<string | null> {\n    const strategy = await firstValueFrom(this.loginStrategy$);\n\n    if (\"authRequestId$\" in strategy) {\n      return await firstValueFrom(strategy.authRequestId$);\n    }\n    return null;\n  }\n\n  async logIn(\n    credentials:\n      | UserApiLoginCredentials\n      | PasswordLoginCredentials\n      | SsoLoginCredentials\n      | AuthRequestLoginCredentials\n      | WebAuthnLoginCredentials,\n  ): Promise<AuthResult> {\n    await this.clearCache();\n\n    await this.currentAuthnTypeState.update((_) => credentials.type);\n\n    const strategy = await firstValueFrom(this.loginStrategy$);\n\n    // Note: We aren't passing the credentials directly to the strategy since they are\n    // created in the popup and can cause DeadObject references on Firefox.\n    // This is a shallow copy, but use deep copy in future if objects are added to credentials\n    // that were created in popup.\n    // If the popup uses its own instance of this service, this can be removed.\n    const ownedCredentials = { ...credentials };\n\n    const result = await strategy.logIn(ownedCredentials as any);\n\n    if (result != null && !result.requiresTwoFactor) {\n      await this.clearCache();\n    } else {\n      // Cache the strategy data so we can attempt again later with 2fa. Cache supports different contexts\n      await this.loginStrategyCacheState.update((_) => strategy.exportCache());\n      await this.startSessionTimeout();\n    }\n\n    return result;\n  }\n\n  async logInTwoFactor(\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string,\n  ): Promise<AuthResult> {\n    if (!(await this.isSessionValid())) {\n      throw new Error(this.i18nService.t(\"sessionTimeout\"));\n    }\n\n    const strategy = await firstValueFrom(this.loginStrategy$);\n    if (strategy == null) {\n      throw new Error(\"No login strategy found.\");\n    }\n\n    try {\n      const result = await strategy.logInTwoFactor(twoFactor, captchaResponse);\n\n      // Only clear cache if 2FA token has been accepted, otherwise we need to be able to try again\n      if (result != null && !result.requiresTwoFactor && !result.requiresCaptcha) {\n        await this.clearCache();\n      }\n      return result;\n    } catch (e) {\n      // API exceptions are okay, but if there are any unhandled client-side errors then clear cache to be safe\n      if (!(e instanceof ErrorResponse)) {\n        await this.clearCache();\n      }\n      throw e;\n    }\n  }\n\n  async makePreloginKey(masterPassword: string, email: string): Promise<MasterKey> {\n    email = email.trim().toLowerCase();\n    let kdf: KdfType = null;\n    let kdfConfig: KdfConfig = null;\n    try {\n      const preloginResponse = await this.apiService.postPrelogin(new PreloginRequest(email));\n      if (preloginResponse != null) {\n        kdf = preloginResponse.kdf;\n        kdfConfig = new KdfConfig(\n          preloginResponse.kdfIterations,\n          preloginResponse.kdfMemory,\n          preloginResponse.kdfParallelism,\n        );\n      }\n    } catch (e) {\n      if (e == null || e.statusCode !== 404) {\n        throw e;\n      }\n    }\n    return await this.cryptoService.makeMasterKey(masterPassword, email, kdf, kdfConfig);\n  }\n\n  // TODO move to auth request service\n  async sendAuthRequestPushNotification(notification: AuthRequestPushNotification): Promise<void> {\n    if (notification.id != null) {\n      await this.authRequestPushNotificationState.update((_) => notification.id);\n    }\n  }\n\n  // TODO: move to auth request service\n  async passwordlessLogin(\n    id: string,\n    key: string,\n    requestApproved: boolean,\n  ): Promise<AuthRequestResponse> {\n    const pubKey = Utils.fromB64ToArray(key);\n\n    const masterKey = await this.cryptoService.getMasterKey();\n    let keyToEncrypt;\n    let encryptedMasterKeyHash = null;\n\n    if (masterKey) {\n      keyToEncrypt = masterKey.encKey;\n\n      // Only encrypt the master password hash if masterKey exists as\n      // we won't have a masterKeyHash without a masterKey\n      const masterKeyHash = await this.stateService.getKeyHash();\n      if (masterKeyHash != null) {\n        encryptedMasterKeyHash = await this.cryptoService.rsaEncrypt(\n          Utils.fromUtf8ToArray(masterKeyHash),\n          pubKey,\n        );\n      }\n    } else {\n      const userKey = await this.cryptoService.getUserKey();\n      keyToEncrypt = userKey.key;\n    }\n\n    const encryptedKey = await this.cryptoService.rsaEncrypt(keyToEncrypt, pubKey);\n\n    const request = new PasswordlessAuthRequest(\n      encryptedKey.encryptedString,\n      encryptedMasterKeyHash?.encryptedString,\n      await this.appIdService.getAppId(),\n      requestApproved,\n    );\n    return await this.apiService.putAuthRequest(id, request);\n  }\n\n  private async clearCache(): Promise<void> {\n    await this.currentAuthnTypeState.update((_) => null);\n    await this.loginStrategyCacheState.update((_) => null);\n    await this.clearSessionTimeout();\n  }\n\n  private async startSessionTimeout(): Promise<void> {\n    await this.clearSessionTimeout();\n    await this.loginStrategyCacheExpirationState.update(\n      (_) => new Date(Date.now() + sessionTimeoutLength),\n    );\n    this.sessionTimeout = setTimeout(() => this.clearCache(), sessionTimeoutLength);\n  }\n\n  private async clearSessionTimeout(): Promise<void> {\n    await this.loginStrategyCacheExpirationState.update((_) => null);\n    this.sessionTimeout = null;\n  }\n\n  private async isSessionValid(): Promise<boolean> {\n    const cache = await firstValueFrom(this.loginStrategyCacheState.state$);\n    if (cache == null) {\n      return false;\n    }\n    const expiration = await firstValueFrom(this.loginStrategyCacheExpirationState.state$);\n    if (expiration != null && expiration < new Date()) {\n      await this.clearCache();\n      return false;\n    }\n    return true;\n  }\n\n  private initializeLoginStrategy(\n    source: Observable<[AuthenticationType | null, CacheData | null]>,\n  ) {\n    return source.pipe(\n      map(([strategy, data]) => {\n        if (strategy == null) {\n          return null;\n        }\n        switch (strategy) {\n          case AuthenticationType.Password:\n            return new PasswordLoginStrategy(\n              data?.password,\n              this.cryptoService,\n              this.apiService,\n              this.tokenService,\n              this.appIdService,\n              this.platformUtilsService,\n              this.messagingService,\n              this.logService,\n              this.stateService,\n              this.twoFactorService,\n              this.userDecryptionOptionsService,\n              this.passwordStrengthService,\n              this.policyService,\n              this,\n              this.billingAccountProfileStateService,\n            );\n          case AuthenticationType.Sso:\n            return new SsoLoginStrategy(\n              data?.sso,\n              this.cryptoService,\n              this.apiService,\n              this.tokenService,\n              this.appIdService,\n              this.platformUtilsService,\n              this.messagingService,\n              this.logService,\n              this.stateService,\n              this.twoFactorService,\n              this.userDecryptionOptionsService,\n              this.keyConnectorService,\n              this.deviceTrustCryptoService,\n              this.authRequestService,\n              this.i18nService,\n              this.billingAccountProfileStateService,\n            );\n          case AuthenticationType.UserApiKey:\n            return new UserApiLoginStrategy(\n              data?.userApiKey,\n              this.cryptoService,\n              this.apiService,\n              this.tokenService,\n              this.appIdService,\n              this.platformUtilsService,\n              this.messagingService,\n              this.logService,\n              this.stateService,\n              this.twoFactorService,\n              this.userDecryptionOptionsService,\n              this.environmentService,\n              this.keyConnectorService,\n              this.billingAccountProfileStateService,\n            );\n          case AuthenticationType.AuthRequest:\n            return new AuthRequestLoginStrategy(\n              data?.authRequest,\n              this.cryptoService,\n              this.apiService,\n              this.tokenService,\n              this.appIdService,\n              this.platformUtilsService,\n              this.messagingService,\n              this.logService,\n              this.stateService,\n              this.twoFactorService,\n              this.userDecryptionOptionsService,\n              this.deviceTrustCryptoService,\n              this.billingAccountProfileStateService,\n            );\n          case AuthenticationType.WebAuthn:\n            return new WebAuthnLoginStrategy(\n              data?.webAuthn,\n              this.cryptoService,\n              this.apiService,\n              this.tokenService,\n              this.appIdService,\n              this.platformUtilsService,\n              this.messagingService,\n              this.logService,\n              this.stateService,\n              this.twoFactorService,\n              this.userDecryptionOptionsService,\n              this.billingAccountProfileStateService,\n            );\n        }\n      }),\n    );\n  }\n}\n","import { map } from \"rxjs\";\n\nimport {\n  ActiveUserState,\n  StateProvider,\n  USER_DECRYPTION_OPTIONS_DISK,\n  UserKeyDefinition,\n} from \"@bitwarden/common/platform/state\";\nimport { UserId } from \"@bitwarden/common/src/types/guid\";\n\nimport { InternalUserDecryptionOptionsServiceAbstraction } from \"../../abstractions/user-decryption-options.service.abstraction\";\nimport { UserDecryptionOptions } from \"../../models\";\n\nexport const USER_DECRYPTION_OPTIONS = new UserKeyDefinition<UserDecryptionOptions>(\n  USER_DECRYPTION_OPTIONS_DISK,\n  \"decryptionOptions\",\n  {\n    deserializer: (decryptionOptions) => UserDecryptionOptions.fromJSON(decryptionOptions),\n    clearOn: [\"logout\"],\n  },\n);\n\nexport class UserDecryptionOptionsService\n  implements InternalUserDecryptionOptionsServiceAbstraction\n{\n  private userDecryptionOptionsState: ActiveUserState<UserDecryptionOptions>;\n\n  userDecryptionOptions$;\n  hasMasterPassword$;\n\n  constructor(private stateProvider: StateProvider) {\n    this.userDecryptionOptionsState = this.stateProvider.getActive(USER_DECRYPTION_OPTIONS);\n\n    this.userDecryptionOptions$ = this.userDecryptionOptionsState.state$;\n    this.hasMasterPassword$ = this.userDecryptionOptions$.pipe(\n      map((options) => options?.hasMasterPassword ?? false),\n    );\n  }\n\n  userDecryptionOptionsById$(userId: UserId) {\n    return this.stateProvider.getUser(userId, USER_DECRYPTION_OPTIONS).state$;\n  }\n\n  async setUserDecryptionOptions(userDecryptionOptions: UserDecryptionOptions): Promise<void> {\n    await this.userDecryptionOptionsState.update((_) => userDecryptionOptions);\n  }\n}\n","export enum OrganizationApiKeyType {\n  Default = 0,\n  BillingSync = 1,\n  Scim = 2,\n}\n","export enum OrganizationConnectionType {\n  CloudBillingSync = 1,\n  Scim = 2,\n}\n","export enum OrganizationUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1,\n}\n","export enum OrganizationUserType {\n  Owner = 0,\n  Admin = 1,\n  User = 2,\n  /**\n   * @deprecated\n   * This is deprecated with the introduction of Flexible Collections.\n   */\n  Manager = 3,\n  Custom = 4,\n}\n","export enum PolicyType {\n  TwoFactorAuthentication = 0, // Requires users to have 2fa enabled\n  MasterPassword = 1, // Sets minimum requirements for master password complexity\n  PasswordGenerator = 2, // Sets minimum requirements/default type for generated passwords/passphrases\n  SingleOrg = 3, // Allows users to only be apart of one organization\n  RequireSso = 4, // Requires users to authenticate with SSO\n  PersonalOwnership = 5, // Disables personal vault ownership for adding/cloning items\n  DisableSend = 6, // Disables the ability to create and edit Bitwarden Sends\n  SendOptions = 7, // Sets restrictions or defaults for Bitwarden Sends\n  ResetPassword = 8, // Allows orgs to use reset password : also can enable auto-enrollment during invite flow\n  MaximumVaultTimeout = 9, // Sets the maximum allowed vault timeout\n  DisablePersonalVaultExport = 10, // Disable personal vault export\n  ActivateAutofill = 11, // Activates autofill with page load on the browser extension\n}\n","export enum ProviderType {\n  Msp = 0,\n  Reseller = 1,\n}\n","export enum ProviderUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1, // Not used, compile-time support only\n}\n","export enum ProviderUserType {\n  ProviderAdmin = 0,\n  ServiceUser = 1,\n}\n","export enum ScimProviderType {\n  Default = 0,\n  AzureAd = 1,\n  Okta = 2,\n  OneLogin = 3,\n  JumpCloud = 4,\n  GoogleWorkspace = 5,\n  Rippling = 6,\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { PasswordlessAuthRequest } from \"@bitwarden/common/auth/models/request/passwordless-auth.request\";\nimport { AuthRequestResponse } from \"@bitwarden/common/auth/models/response/auth-request.response\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { MasterKey, UserKey } from \"@bitwarden/common/types/key\";\n\nimport { AuthRequestServiceAbstraction } from \"../../abstractions/auth-request.service.abstraction\";\n\nexport class AuthRequestService implements AuthRequestServiceAbstraction {\n  constructor(\n    private appIdService: AppIdService,\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private stateService: StateService,\n  ) {}\n\n  async approveOrDenyAuthRequest(\n    approve: boolean,\n    authRequest: AuthRequestResponse,\n  ): Promise<AuthRequestResponse> {\n    if (!authRequest.id) {\n      throw new Error(\"Auth request has no id\");\n    }\n    if (!authRequest.publicKey) {\n      throw new Error(\"Auth request has no public key\");\n    }\n    const pubKey = Utils.fromB64ToArray(authRequest.publicKey);\n\n    const masterKey = await this.cryptoService.getMasterKey();\n    const masterKeyHash = await this.stateService.getKeyHash();\n    let encryptedMasterKeyHash;\n    let keyToEncrypt;\n\n    if (masterKey && masterKeyHash) {\n      // Only encrypt the master password hash if masterKey exists as\n      // we won't have a masterKeyHash without a masterKey\n      encryptedMasterKeyHash = await this.cryptoService.rsaEncrypt(\n        Utils.fromUtf8ToArray(masterKeyHash),\n        pubKey,\n      );\n      keyToEncrypt = masterKey.encKey;\n    } else {\n      const userKey = await this.cryptoService.getUserKey();\n      keyToEncrypt = userKey.key;\n    }\n\n    const encryptedKey = await this.cryptoService.rsaEncrypt(keyToEncrypt, pubKey);\n\n    const response = new PasswordlessAuthRequest(\n      encryptedKey.encryptedString,\n      encryptedMasterKeyHash?.encryptedString,\n      await this.appIdService.getAppId(),\n      approve,\n    );\n    return await this.apiService.putAuthRequest(authRequest.id, response);\n  }\n\n  async setUserKeyAfterDecryptingSharedUserKey(\n    authReqResponse: AuthRequestResponse,\n    authReqPrivateKey: Uint8Array,\n  ) {\n    const userKey = await this.decryptPubKeyEncryptedUserKey(\n      authReqResponse.key,\n      authReqPrivateKey,\n    );\n    await this.cryptoService.setUserKey(userKey);\n  }\n\n  async setKeysAfterDecryptingSharedMasterKeyAndHash(\n    authReqResponse: AuthRequestResponse,\n    authReqPrivateKey: Uint8Array,\n  ) {\n    const { masterKey, masterKeyHash } = await this.decryptPubKeyEncryptedMasterKeyAndHash(\n      authReqResponse.key,\n      authReqResponse.masterPasswordHash,\n      authReqPrivateKey,\n    );\n\n    // Decrypt and set user key in state\n    const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(masterKey);\n\n    // Set masterKey + masterKeyHash in state after decryption (in case decryption fails)\n    await this.cryptoService.setMasterKey(masterKey);\n    await this.cryptoService.setMasterKeyHash(masterKeyHash);\n\n    await this.cryptoService.setUserKey(userKey);\n  }\n\n  // Decryption helpers\n  async decryptPubKeyEncryptedUserKey(\n    pubKeyEncryptedUserKey: string,\n    privateKey: Uint8Array,\n  ): Promise<UserKey> {\n    const decryptedUserKeyBytes = await this.cryptoService.rsaDecrypt(\n      pubKeyEncryptedUserKey,\n      privateKey,\n    );\n\n    return new SymmetricCryptoKey(decryptedUserKeyBytes) as UserKey;\n  }\n\n  async decryptPubKeyEncryptedMasterKeyAndHash(\n    pubKeyEncryptedMasterKey: string,\n    pubKeyEncryptedMasterKeyHash: string,\n    privateKey: Uint8Array,\n  ): Promise<{ masterKey: MasterKey; masterKeyHash: string }> {\n    const decryptedMasterKeyArrayBuffer = await this.cryptoService.rsaDecrypt(\n      pubKeyEncryptedMasterKey,\n      privateKey,\n    );\n\n    const decryptedMasterKeyHashArrayBuffer = await this.cryptoService.rsaDecrypt(\n      pubKeyEncryptedMasterKeyHash,\n      privateKey,\n    );\n\n    const masterKey = new SymmetricCryptoKey(decryptedMasterKeyArrayBuffer) as MasterKey;\n    const masterKeyHash = Utils.fromBufferToUtf8(decryptedMasterKeyHashArrayBuffer);\n\n    return {\n      masterKey,\n      masterKeyHash,\n    };\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { ProductType } from \"../../../enums\";\nimport { OrganizationUserStatusType, OrganizationUserType, ProviderType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\nimport { ProfileOrganizationResponse } from \"../response/profile-organization.response\";\n\nexport class OrganizationData {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  isProviderUser: boolean;\n  isMember: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n  limitCollectionCreationDeletion: boolean;\n  allowAdminAccessToAllCollectionItems: boolean;\n  flexibleCollections: boolean;\n\n  constructor(\n    response?: ProfileOrganizationResponse,\n    options?: {\n      isMember: boolean;\n      isProviderUser: boolean;\n    },\n  ) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.usePolicies = response.usePolicies;\n    this.useGroups = response.useGroups;\n    this.useDirectory = response.useDirectory;\n    this.useEvents = response.useEvents;\n    this.useTotp = response.useTotp;\n    this.use2fa = response.use2fa;\n    this.useApi = response.useApi;\n    this.useSso = response.useSso;\n    this.useKeyConnector = response.useKeyConnector;\n    this.useScim = response.useScim;\n    this.useCustomPermissions = response.useCustomPermissions;\n    this.useResetPassword = response.useResetPassword;\n    this.useSecretsManager = response.useSecretsManager;\n    this.usePasswordManager = response.usePasswordManager;\n    this.useActivateAutofillPolicy = response.useActivateAutofillPolicy;\n    this.selfHost = response.selfHost;\n    this.usersGetPremium = response.usersGetPremium;\n    this.seats = response.seats;\n    this.maxCollections = response.maxCollections;\n    this.maxStorageGb = response.maxStorageGb;\n    this.ssoBound = response.ssoBound;\n    this.identifier = response.identifier;\n    this.permissions = response.permissions;\n    this.resetPasswordEnrolled = response.resetPasswordEnrolled;\n    this.userId = response.userId;\n    this.hasPublicAndPrivateKeys = response.hasPublicAndPrivateKeys;\n    this.providerId = response.providerId;\n    this.providerName = response.providerName;\n    this.providerType = response.providerType;\n    this.familySponsorshipFriendlyName = response.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = response.familySponsorshipAvailable;\n    this.planProductType = response.planProductType;\n    this.keyConnectorEnabled = response.keyConnectorEnabled;\n    this.keyConnectorUrl = response.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = response.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = response.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = response.familySponsorshipToDelete;\n    this.accessSecretsManager = response.accessSecretsManager;\n    this.limitCollectionCreationDeletion = response.limitCollectionCreationDeletion;\n    this.allowAdminAccessToAllCollectionItems = response.allowAdminAccessToAllCollectionItems;\n    this.flexibleCollections = response.flexibleCollections;\n\n    this.isMember = options.isMember;\n    this.isProviderUser = options.isProviderUser;\n  }\n\n  static fromJSON(obj: Jsonify<OrganizationData>) {\n    return Object.assign(new OrganizationData(), obj, {\n      familySponsorshipLastSyncDate:\n        obj.familySponsorshipLastSyncDate != null\n          ? new Date(obj.familySponsorshipLastSyncDate)\n          : obj.familySponsorshipLastSyncDate,\n      familySponsorshipValidUntil:\n        obj.familySponsorshipValidUntil != null\n          ? new Date(obj.familySponsorshipValidUntil)\n          : obj.familySponsorshipValidUntil,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { ProductType } from \"../../../enums\";\nimport { OrganizationUserStatusType, OrganizationUserType, ProviderType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\nimport { OrganizationData } from \"../data/organization.data\";\n\nexport class Organization {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n\n  /**\n   * The member's role in the organization.\n   * Avoid using this for permission checks - use the getters instead (e.g. isOwner, isAdmin, canManageX), because they\n   * properly handle permission inheritance and relationships.\n   */\n  type: OrganizationUserType;\n\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  /**\n   * Indicates that a user is a ProviderUser for the organization\n   */\n  isProviderUser: boolean;\n  /**\n   * Indicates that a user is a member for the organization (may be `false` if they have access via a Provider only)\n   */\n  isMember: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n  /**\n   * Refers to the ability for an organization to limit collection creation and deletion to owners and admins only\n   */\n  limitCollectionCreationDeletion: boolean;\n  /**\n   * Refers to the ability for an owner/admin to access all collection items, regardless of assigned collections\n   */\n  allowAdminAccessToAllCollectionItems: boolean;\n  /**\n   * Returns true if this organization has enabled Flexible Collections (MVP) and their data has been migrated.\n   * Generally, you should use this as the feature flag to gate Flexible Collections features.\n   */\n  flexibleCollections: boolean;\n\n  constructor(obj?: OrganizationData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.usePolicies = obj.usePolicies;\n    this.useGroups = obj.useGroups;\n    this.useDirectory = obj.useDirectory;\n    this.useEvents = obj.useEvents;\n    this.useTotp = obj.useTotp;\n    this.use2fa = obj.use2fa;\n    this.useApi = obj.useApi;\n    this.useSso = obj.useSso;\n    this.useKeyConnector = obj.useKeyConnector;\n    this.useScim = obj.useScim;\n    this.useCustomPermissions = obj.useCustomPermissions;\n    this.useResetPassword = obj.useResetPassword;\n    this.useSecretsManager = obj.useSecretsManager;\n    this.usePasswordManager = obj.usePasswordManager;\n    this.useActivateAutofillPolicy = obj.useActivateAutofillPolicy;\n    this.selfHost = obj.selfHost;\n    this.usersGetPremium = obj.usersGetPremium;\n    this.seats = obj.seats;\n    this.maxCollections = obj.maxCollections;\n    this.maxStorageGb = obj.maxStorageGb;\n    this.ssoBound = obj.ssoBound;\n    this.identifier = obj.identifier;\n    this.permissions = obj.permissions;\n    this.resetPasswordEnrolled = obj.resetPasswordEnrolled;\n    this.userId = obj.userId;\n    this.hasPublicAndPrivateKeys = obj.hasPublicAndPrivateKeys;\n    this.providerId = obj.providerId;\n    this.providerName = obj.providerName;\n    this.providerType = obj.providerType;\n    this.isProviderUser = obj.isProviderUser;\n    this.isMember = obj.isMember;\n    this.familySponsorshipFriendlyName = obj.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = obj.familySponsorshipAvailable;\n    this.planProductType = obj.planProductType;\n    this.keyConnectorEnabled = obj.keyConnectorEnabled;\n    this.keyConnectorUrl = obj.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = obj.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = obj.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = obj.familySponsorshipToDelete;\n    this.accessSecretsManager = obj.accessSecretsManager;\n    this.limitCollectionCreationDeletion = obj.limitCollectionCreationDeletion;\n    this.allowAdminAccessToAllCollectionItems = obj.allowAdminAccessToAllCollectionItems;\n    this.flexibleCollections = obj.flexibleCollections;\n  }\n\n  get canAccess() {\n    if (this.isOwner) {\n      return true;\n    }\n    return this.enabled && this.status === OrganizationUserStatusType.Confirmed;\n  }\n\n  /**\n   * Whether a user has Manager permissions or greater\n   *\n   * @deprecated\n   * This is deprecated with the introduction of Flexible Collections.\n   */\n  get isManager() {\n    return this.type === OrganizationUserType.Manager || this.isAdmin;\n  }\n\n  /**\n   * Whether a user has Admin permissions or greater\n   */\n  get isAdmin() {\n    return this.type === OrganizationUserType.Admin || this.isOwner;\n  }\n\n  /**\n   * Whether a user has Owner permissions (including ProviderUsers)\n   */\n  get isOwner() {\n    return this.type === OrganizationUserType.Owner || this.isProviderUser;\n  }\n\n  get canAccessEventLogs() {\n    return (this.isAdmin || this.permissions.accessEventLogs) && this.useEvents;\n  }\n\n  get canAccessImportExport() {\n    return this.isAdmin || this.permissions.accessImportExport;\n  }\n\n  get canAccessReports() {\n    return this.isAdmin || this.permissions.accessReports;\n  }\n\n  get canCreateNewCollections() {\n    if (this.flexibleCollections) {\n      return (\n        !this.limitCollectionCreationDeletion ||\n        this.isAdmin ||\n        this.permissions.createNewCollections\n      );\n    }\n\n    return this.isManager || this.permissions.createNewCollections;\n  }\n\n  get canEditAnyCollection() {\n    return this.isAdmin || this.permissions.editAnyCollection;\n  }\n\n  get canUseAdminCollections() {\n    return this.canEditAnyCollection;\n  }\n\n  canEditAllCiphers(flexibleCollectionsV1Enabled: boolean) {\n    // Before Flexible Collections, anyone with editAnyCollection permission could edit all ciphers\n    if (!flexibleCollectionsV1Enabled) {\n      return this.canEditAnyCollection;\n    }\n    // Post Flexible Collections V1, the allowAdminAccessToAllCollectionItems flag can restrict admins\n    // Providers and custom users with canEditAnyCollection are not affected by allowAdminAccessToAllCollectionItems flag\n    return (\n      this.isProviderUser ||\n      (this.type === OrganizationUserType.Custom && this.permissions.editAnyCollection) ||\n      (this.allowAdminAccessToAllCollectionItems && this.isAdmin)\n    );\n  }\n\n  get canDeleteAnyCollection() {\n    return this.isAdmin || this.permissions.deleteAnyCollection;\n  }\n\n  get canViewAllCollections() {\n    return this.canEditAnyCollection || this.canDeleteAnyCollection;\n  }\n\n  /**\n   * @deprecated\n   * This is deprecated with the introduction of Flexible Collections.\n   * This will always return false if FlexibleCollections flag is on.\n   */\n  get canEditAssignedCollections() {\n    return this.isManager || this.permissions.editAssignedCollections;\n  }\n\n  /**\n   * @deprecated\n   * This is deprecated with the introduction of Flexible Collections.\n   * This will always return false if FlexibleCollections flag is on.\n   */\n  get canDeleteAssignedCollections() {\n    return this.isManager || this.permissions.deleteAssignedCollections;\n  }\n\n  /**\n   * @deprecated\n   * This is deprecated with the introduction of Flexible Collections.\n   * This will always return false if FlexibleCollections flag is on.\n   */\n  get canViewAssignedCollections() {\n    return this.canDeleteAssignedCollections || this.canEditAssignedCollections;\n  }\n\n  get canManageGroups() {\n    return (this.isAdmin || this.permissions.manageGroups) && this.useGroups;\n  }\n\n  get canManageSso() {\n    return (this.isAdmin || this.permissions.manageSso) && this.useSso;\n  }\n\n  get canManageDomainVerification() {\n    return (this.isAdmin || this.permissions.manageSso) && this.useSso;\n  }\n\n  get canManageScim() {\n    return (this.isAdmin || this.permissions.manageScim) && this.useScim;\n  }\n\n  get canManagePolicies() {\n    return (this.isAdmin || this.permissions.managePolicies) && this.usePolicies;\n  }\n\n  get canManageUsers() {\n    return this.isAdmin || this.permissions.manageUsers;\n  }\n\n  get canManageUsersPassword() {\n    return this.isAdmin || this.permissions.manageResetPassword;\n  }\n\n  get canManageDeviceApprovals() {\n    return (this.isAdmin || this.permissions.manageResetPassword) && this.useSso;\n  }\n\n  get isExemptFromPolicies() {\n    return this.canManagePolicies;\n  }\n\n  get canViewSubscription() {\n    if (this.canEditSubscription) {\n      return true;\n    }\n\n    return this.hasProvider && this.providerType === ProviderType.Msp\n      ? this.isProviderUser\n      : this.isOwner;\n  }\n\n  get canEditSubscription() {\n    return this.hasProvider ? this.isProviderUser : this.isOwner;\n  }\n\n  get canEditPaymentMethods() {\n    return this.canEditSubscription;\n  }\n\n  get canViewBillingHistory() {\n    return this.canEditSubscription;\n  }\n\n  get hasProvider() {\n    return this.providerId != null || this.providerName != null;\n  }\n\n  get hasReseller() {\n    return this.hasProvider && this.providerType === ProviderType.Reseller;\n  }\n\n  get canAccessSecretsManager() {\n    return this.useSecretsManager && this.accessSecretsManager;\n  }\n\n  get isFreeOrg() {\n    // return true if organization needs to be upgraded from a free org\n    return !this.useTotp;\n  }\n\n  get canManageSponsorships() {\n    return this.familySponsorshipAvailable || this.familySponsorshipFriendlyName !== null;\n  }\n\n  static fromJSON(json: Jsonify<Organization>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new Organization(), json, {\n      familySponsorshipLastSyncDate: new Date(json.familySponsorshipLastSyncDate),\n      familySponsorshipValidUntil: new Date(json.familySponsorshipValidUntil),\n    });\n  }\n}\n","import { map, Observable, firstValueFrom } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { ORGANIZATIONS_DISK, StateProvider, UserKeyDefinition } from \"../../../platform/state\";\nimport { UserId } from \"../../../types/guid\";\nimport { InternalOrganizationServiceAbstraction } from \"../../abstractions/organization/organization.service.abstraction\";\nimport { OrganizationData } from \"../../models/data/organization.data\";\nimport { Organization } from \"../../models/domain/organization\";\n\n/**\n * The `KeyDefinition` for accessing organization lists in application state.\n * @todo Ideally this wouldn't require a `fromJSON()` call, but `OrganizationData`\n * has some properties that contain functions. This should probably get\n * cleaned up.\n */\nexport const ORGANIZATIONS = UserKeyDefinition.record<OrganizationData>(\n  ORGANIZATIONS_DISK,\n  \"organizations\",\n  {\n    deserializer: (obj: Jsonify<OrganizationData>) => OrganizationData.fromJSON(obj),\n    clearOn: [\"logout\"],\n  },\n);\n\n/**\n * Filter out organizations from an observable that __do not__ offer a\n * families-for-enterprise sponsorship to members.\n * @returns a function that can be used in `Observable<Organization[]>` pipes,\n * like `organizationService.organizations$`\n */\nfunction mapToExcludeOrganizationsWithoutFamilySponsorshipSupport() {\n  return map<Organization[], Organization[]>((orgs) => orgs.filter((o) => o.canManageSponsorships));\n}\n\n/**\n * Filter out organizations from an observable that the organization user\n * __is not__ a direct member of. This will exclude organizations only\n * accessible as a provider.\n * @returns a function that can be used in `Observable<Organization[]>` pipes,\n * like `organizationService.organizations$`\n */\nfunction mapToExcludeProviderOrganizations() {\n  return map<Organization[], Organization[]>((orgs) => orgs.filter((o) => o.isMember));\n}\n\n/**\n * Map an observable stream of organizations down to a boolean indicating\n * if any organizations exist (`orgs.length > 0`).\n * @returns a function that can be used in `Observable<Organization[]>` pipes,\n * like `organizationService.organizations$`\n */\nfunction mapToBooleanHasAnyOrganizations() {\n  return map<Organization[], boolean>((orgs) => orgs.length > 0);\n}\n\n/**\n * Map an observable stream of organizations down to a single organization.\n * @param `organizationId` The ID of the organization you'd like to subscribe to\n * @returns a function that can be used in `Observable<Organization[]>` pipes,\n * like `organizationService.organizations$`\n */\nfunction mapToSingleOrganization(organizationId: string) {\n  return map<Organization[], Organization>((orgs) => orgs?.find((o) => o.id === organizationId));\n}\n\nexport class OrganizationService implements InternalOrganizationServiceAbstraction {\n  organizations$ = this.getOrganizationsFromState$();\n  memberOrganizations$ = this.organizations$.pipe(mapToExcludeProviderOrganizations());\n\n  constructor(private stateProvider: StateProvider) {}\n\n  get$(id: string): Observable<Organization | undefined> {\n    return this.organizations$.pipe(mapToSingleOrganization(id));\n  }\n\n  async getAll(userId?: string): Promise<Organization[]> {\n    return await firstValueFrom(this.getOrganizationsFromState$(userId as UserId));\n  }\n\n  async canManageSponsorships(): Promise<boolean> {\n    return await firstValueFrom(\n      this.organizations$.pipe(\n        mapToExcludeOrganizationsWithoutFamilySponsorshipSupport(),\n        mapToBooleanHasAnyOrganizations(),\n      ),\n    );\n  }\n\n  async hasOrganizations(): Promise<boolean> {\n    return await firstValueFrom(this.organizations$.pipe(mapToBooleanHasAnyOrganizations()));\n  }\n\n  async upsert(organization: OrganizationData, userId?: UserId): Promise<void> {\n    await this.stateFor(userId).update((existingOrganizations) => {\n      const organizations = existingOrganizations ?? {};\n      organizations[organization.id] = organization;\n      return organizations;\n    });\n  }\n\n  async get(id: string): Promise<Organization> {\n    return await firstValueFrom(this.organizations$.pipe(mapToSingleOrganization(id)));\n  }\n\n  /**\n   * @deprecated For the CLI only\n   * @param id id of the organization\n   */\n  async getFromState(id: string): Promise<Organization> {\n    return await firstValueFrom(this.organizations$.pipe(mapToSingleOrganization(id)));\n  }\n\n  async replace(organizations: { [id: string]: OrganizationData }, userId?: UserId): Promise<void> {\n    await this.stateFor(userId).update(() => organizations);\n  }\n\n  // Ideally this method would be renamed to organizations$() and the\n  // $organizations observable as it stands would be removed. This will\n  // require updates to callers, and so this method exists as a temporary\n  // workaround until we have time & a plan to update callers.\n  //\n  // It can be thought of as \"organizations$ but with a userId option\".\n  private getOrganizationsFromState$(userId?: UserId): Observable<Organization[] | undefined> {\n    return this.stateFor(userId).state$.pipe(this.mapOrganizationRecordToArray());\n  }\n\n  /**\n   * Accepts a record of `OrganizationData`, which is how we store the\n   * organization list as a JSON object on disk, to an array of\n   * `Organization`, which is how the data is published to callers of the\n   * service.\n   * @returns a function that can be used to pipe organization data from\n   * stored state to an exposed object easily consumable by others.\n   */\n  private mapOrganizationRecordToArray() {\n    return map<Record<string, OrganizationData>, Organization[]>((orgs) =>\n      Object.values(orgs ?? {})?.map((o) => new Organization(o)),\n    );\n  }\n\n  /**\n   * Fetches the organization list from on disk state for the specified user.\n   * @param userId the user ID to fetch the organization list for. Defaults to\n   * the currently active user.\n   * @returns an observable of organization state as it is stored on disk.\n   */\n  private stateFor(userId?: UserId) {\n    return userId\n      ? this.stateProvider.getUser(userId, ORGANIZATIONS)\n      : this.stateProvider.getActive(ORGANIZATIONS);\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class ListResponse<T> extends BaseResponse {\n  data: T[];\n  continuationToken: string;\n\n  constructor(response: any, t: new (dataResponse: any) => T) {\n    super(response);\n    const data = this.getResponseProperty(\"Data\");\n    this.data = data == null ? [] : data.map((dr: any) => new t(dr));\n    this.continuationToken = this.getResponseProperty(\"ContinuationToken\");\n  }\n}\n","import { PolicyId } from \"../../../types/guid\";\nimport { PolicyType } from \"../../enums\";\nimport { PolicyResponse } from \"../response/policy.response\";\n\nexport class PolicyData {\n  id: PolicyId;\n  organizationId: string;\n  type: PolicyType;\n  data: Record<string, string | number | boolean>;\n  enabled: boolean;\n\n  constructor(response?: PolicyResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.type = response.type;\n    this.data = response.data;\n    this.enabled = response.enabled;\n  }\n}\n","import { ListResponse } from \"../../../models/response/list.response\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { PolicyId } from \"../../../types/guid\";\nimport { PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../data/policy.data\";\nimport { PolicyResponse } from \"../response/policy.response\";\n\nexport class Policy extends Domain {\n  id: PolicyId;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n\n  /**\n   * Warning: a user can be exempt from a policy even if the policy is enabled.\n   * @see {@link PolicyService} has methods to tell you whether a policy applies to a user.\n   */\n  enabled: boolean;\n\n  constructor(obj?: PolicyData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.organizationId = obj.organizationId;\n    this.type = obj.type;\n    this.data = obj.data;\n    this.enabled = obj.enabled;\n  }\n\n  static fromResponse(response: PolicyResponse): Policy {\n    return new Policy(new PolicyData(response));\n  }\n\n  static fromListResponse(response: ListResponse<PolicyResponse>): Policy[] | undefined {\n    return response.data?.map((d) => Policy.fromResponse(d)) ?? undefined;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { PolicyId } from \"../../../types/guid\";\nimport { PolicyType } from \"../../enums\";\n\nexport class PolicyResponse extends BaseResponse {\n  id: PolicyId;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.data = this.getResponseProperty(\"Data\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { ApiService } from \"../../../abstractions/api.service\";\nimport { HttpStatusCode } from \"../../../enums\";\nimport { ErrorResponse } from \"../../../models/response/error.response\";\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { PolicyApiServiceAbstraction } from \"../../abstractions/policy/policy-api.service.abstraction\";\nimport { InternalPolicyService } from \"../../abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../../models/data/policy.data\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/master-password-policy-options\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { PolicyRequest } from \"../../models/request/policy.request\";\nimport { PolicyResponse } from \"../../models/response/policy.response\";\n\nexport class PolicyApiService implements PolicyApiServiceAbstraction {\n  constructor(\n    private policyService: InternalPolicyService,\n    private apiService: ApiService,\n  ) {}\n\n  async getPolicy(organizationId: string, type: PolicyType): Promise<PolicyResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      null,\n      true,\n      true,\n    );\n    return new PolicyResponse(r);\n  }\n\n  async getPolicies(organizationId: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies\",\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByToken(\n    organizationId: string,\n    token: string,\n    email: string,\n    organizationUserId: string,\n  ): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" +\n        organizationId +\n        \"/policies/token?\" +\n        \"token=\" +\n        encodeURIComponent(token) +\n        \"&email=\" +\n        Utils.encodeRFC3986URIComponent(email) +\n        \"&organizationUserId=\" +\n        organizationUserId,\n      null,\n      false,\n      true,\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  private async getMasterPasswordPolicyResponseForOrgUser(\n    organizationId: string,\n  ): Promise<PolicyResponse> {\n    const response = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/master-password\",\n      null,\n      true,\n      true,\n    );\n\n    return new PolicyResponse(response);\n  }\n\n  async getMasterPasswordPolicyOptsForOrgUser(\n    orgId: string,\n  ): Promise<MasterPasswordPolicyOptions | null> {\n    try {\n      const masterPasswordPolicyResponse =\n        await this.getMasterPasswordPolicyResponseForOrgUser(orgId);\n\n      const masterPasswordPolicy = Policy.fromResponse(masterPasswordPolicyResponse);\n\n      if (!masterPasswordPolicy) {\n        return null;\n      }\n\n      return await firstValueFrom(\n        this.policyService.masterPasswordPolicyOptions$([masterPasswordPolicy]),\n      );\n    } catch (error) {\n      // If policy not found, return null\n      if (error instanceof ErrorResponse && error.statusCode === HttpStatusCode.NotFound) {\n        return null;\n      }\n      // otherwise rethrow error\n      throw error;\n    }\n  }\n\n  async putPolicy(organizationId: string, type: PolicyType, request: PolicyRequest): Promise<any> {\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      request,\n      true,\n      true,\n    );\n    const response = new PolicyResponse(r);\n    const data = new PolicyData(response);\n    await this.policyService.upsert(data);\n  }\n}\n","import Domain from \"../../../platform/models/domain/domain-base\";\n\nexport class ResetPasswordPolicyOptions extends Domain {\n  autoEnrollEnabled = false;\n}\n","import { combineLatest, firstValueFrom, map, Observable, of } from \"rxjs\";\n\nimport { KeyDefinition, POLICIES_DISK, StateProvider } from \"../../../platform/state\";\nimport { PolicyId, UserId } from \"../../../types/guid\";\nimport { OrganizationService } from \"../../abstractions/organization/organization.service.abstraction\";\nimport { InternalPolicyService as InternalPolicyServiceAbstraction } from \"../../abstractions/policy/policy.service.abstraction\";\nimport { OrganizationUserStatusType, PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../../models/data/policy.data\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/master-password-policy-options\";\nimport { Organization } from \"../../models/domain/organization\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../../models/domain/reset-password-policy-options\";\n\nconst policyRecordToArray = (policiesMap: { [id: string]: PolicyData }) =>\n  Object.values(policiesMap || {}).map((f) => new Policy(f));\n\nexport const POLICIES = KeyDefinition.record<PolicyData, PolicyId>(POLICIES_DISK, \"policies\", {\n  deserializer: (policyData) => policyData,\n});\n\nexport class PolicyService implements InternalPolicyServiceAbstraction {\n  private activeUserPolicyState = this.stateProvider.getActive(POLICIES);\n  private activeUserPolicies$ = this.activeUserPolicyState.state$.pipe(\n    map((policyData) => policyRecordToArray(policyData)),\n  );\n\n  policies$ = this.activeUserPolicies$;\n\n  constructor(\n    private stateProvider: StateProvider,\n    private organizationService: OrganizationService,\n  ) {}\n\n  get$(policyType: PolicyType) {\n    const filteredPolicies$ = this.activeUserPolicies$.pipe(\n      map((policies) => policies.filter((p) => p.type === policyType)),\n    );\n\n    return combineLatest([filteredPolicies$, this.organizationService.organizations$]).pipe(\n      map(\n        ([policies, organizations]) =>\n          this.enforcedPolicyFilter(policies, organizations)?.at(0) ?? null,\n      ),\n    );\n  }\n\n  getAll$(policyType: PolicyType, userId?: UserId) {\n    const filteredPolicies$ = this.stateProvider.getUserState$(POLICIES, userId).pipe(\n      map((policyData) => policyRecordToArray(policyData)),\n      map((policies) => policies.filter((p) => p.type === policyType)),\n    );\n\n    return combineLatest([filteredPolicies$, this.organizationService.organizations$]).pipe(\n      map(([policies, organizations]) => this.enforcedPolicyFilter(policies, organizations)),\n    );\n  }\n\n  async getAll(policyType: PolicyType) {\n    return await firstValueFrom(\n      this.policies$.pipe(map((policies) => policies.filter((p) => p.type === policyType))),\n    );\n  }\n\n  policyAppliesToActiveUser$(policyType: PolicyType) {\n    return this.get$(policyType).pipe(map((policy) => policy != null));\n  }\n\n  async policyAppliesToUser(policyType: PolicyType) {\n    return await firstValueFrom(this.policyAppliesToActiveUser$(policyType));\n  }\n\n  private enforcedPolicyFilter(policies: Policy[], organizations: Organization[]) {\n    const orgDict = Object.fromEntries(organizations.map((o) => [o.id, o]));\n    return policies.filter((policy) => {\n      const organization = orgDict[policy.organizationId];\n\n      // This shouldn't happen, i.e. the user should only have policies for orgs they are a member of\n      // But if it does, err on the side of enforcing the policy\n      if (organization == null) {\n        return true;\n      }\n\n      return (\n        policy.enabled &&\n        organization.status >= OrganizationUserStatusType.Accepted &&\n        organization.usePolicies &&\n        !this.isExemptFromPolicy(policy.type, organization)\n      );\n    });\n  }\n\n  masterPasswordPolicyOptions$(policies?: Policy[]): Observable<MasterPasswordPolicyOptions> {\n    const observable = policies ? of(policies) : this.policies$;\n    return observable.pipe(\n      map((obsPolicies) => {\n        let enforcedOptions: MasterPasswordPolicyOptions = null;\n        const filteredPolicies = obsPolicies.filter((p) => p.type === PolicyType.MasterPassword);\n\n        if (filteredPolicies == null || filteredPolicies.length === 0) {\n          return enforcedOptions;\n        }\n\n        filteredPolicies.forEach((currentPolicy) => {\n          if (!currentPolicy.enabled || currentPolicy.data == null) {\n            return;\n          }\n\n          if (enforcedOptions == null) {\n            enforcedOptions = new MasterPasswordPolicyOptions();\n          }\n\n          if (\n            currentPolicy.data.minComplexity != null &&\n            currentPolicy.data.minComplexity > enforcedOptions.minComplexity\n          ) {\n            enforcedOptions.minComplexity = currentPolicy.data.minComplexity;\n          }\n\n          if (\n            currentPolicy.data.minLength != null &&\n            currentPolicy.data.minLength > enforcedOptions.minLength\n          ) {\n            enforcedOptions.minLength = currentPolicy.data.minLength;\n          }\n\n          if (currentPolicy.data.requireUpper) {\n            enforcedOptions.requireUpper = true;\n          }\n\n          if (currentPolicy.data.requireLower) {\n            enforcedOptions.requireLower = true;\n          }\n\n          if (currentPolicy.data.requireNumbers) {\n            enforcedOptions.requireNumbers = true;\n          }\n\n          if (currentPolicy.data.requireSpecial) {\n            enforcedOptions.requireSpecial = true;\n          }\n\n          if (currentPolicy.data.enforceOnLogin) {\n            enforcedOptions.enforceOnLogin = true;\n          }\n        });\n\n        return enforcedOptions;\n      }),\n    );\n  }\n\n  evaluateMasterPassword(\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions: MasterPasswordPolicyOptions,\n  ): boolean {\n    if (enforcedPolicyOptions == null) {\n      return true;\n    }\n\n    if (\n      enforcedPolicyOptions.minComplexity > 0 &&\n      enforcedPolicyOptions.minComplexity > passwordStrength\n    ) {\n      return false;\n    }\n\n    if (\n      enforcedPolicyOptions.minLength > 0 &&\n      enforcedPolicyOptions.minLength > newPassword.length\n    ) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireUpper && newPassword.toLocaleLowerCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireLower && newPassword.toLocaleUpperCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireNumbers && !/[0-9]/.test(newPassword)) {\n      return false;\n    }\n\n    // eslint-disable-next-line\n    if (enforcedPolicyOptions.requireSpecial && !/[!@#$%\\^&*]/g.test(newPassword)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getResetPasswordPolicyOptions(\n    policies: Policy[],\n    orgId: string,\n  ): [ResetPasswordPolicyOptions, boolean] {\n    const resetPasswordPolicyOptions = new ResetPasswordPolicyOptions();\n\n    if (policies == null || orgId == null) {\n      return [resetPasswordPolicyOptions, false];\n    }\n\n    const policy = policies.find(\n      (p) => p.organizationId === orgId && p.type === PolicyType.ResetPassword && p.enabled,\n    );\n    resetPasswordPolicyOptions.autoEnrollEnabled = policy?.data?.autoEnrollEnabled ?? false;\n\n    return [resetPasswordPolicyOptions, policy?.enabled ?? false];\n  }\n\n  async upsert(policy: PolicyData): Promise<void> {\n    await this.activeUserPolicyState.update((policies) => {\n      policies ??= {};\n      policies[policy.id] = policy;\n      return policies;\n    });\n  }\n\n  async replace(policies: { [id: string]: PolicyData }): Promise<void> {\n    await this.activeUserPolicyState.update(() => policies);\n  }\n\n  async clear(userId?: UserId): Promise<void> {\n    await this.stateProvider.setUserState(POLICIES, null, userId);\n  }\n\n  /**\n   * Determines whether an orgUser is exempt from a specific policy because of their role\n   * Generally orgUsers who can manage policies are exempt from them, but some policies are stricter\n   */\n  private isExemptFromPolicy(policyType: PolicyType, organization: Organization) {\n    switch (policyType) {\n      case PolicyType.MaximumVaultTimeout:\n        // Max Vault Timeout applies to everyone except owners\n        return organization.isOwner;\n      default:\n        return organization.canManagePolicies;\n    }\n  }\n}\n","import { ProviderUserStatusType, ProviderUserType } from \"../../enums\";\nimport { ProviderData } from \"../data/provider.data\";\n\nexport class Provider {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(obj?: ProviderData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.userId = obj.userId;\n    this.useEvents = obj.useEvents;\n  }\n\n  get canAccess() {\n    if (this.isProviderAdmin) {\n      return true;\n    }\n    return this.enabled && this.status === ProviderUserStatusType.Confirmed;\n  }\n\n  get canCreateOrganizations() {\n    return this.enabled && this.isProviderAdmin;\n  }\n\n  get canManageUsers() {\n    return this.isProviderAdmin;\n  }\n\n  get canAccessEventLogs() {\n    return this.isProviderAdmin;\n  }\n\n  get isProviderAdmin() {\n    return this.type === ProviderUserType.ProviderAdmin;\n  }\n}\n","import { Observable, map, firstValueFrom, of, switchMap, take } from \"rxjs\";\n\nimport { KeyDefinition, PROVIDERS_DISK, StateProvider } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { ProviderService as ProviderServiceAbstraction } from \"../abstractions/provider.service\";\nimport { ProviderData } from \"../models/data/provider.data\";\nimport { Provider } from \"../models/domain/provider\";\n\nexport const PROVIDERS = KeyDefinition.record<ProviderData>(PROVIDERS_DISK, \"providers\", {\n  deserializer: (obj: ProviderData) => obj,\n});\n\nfunction mapToSingleProvider(providerId: string) {\n  return map<Provider[], Provider>((providers) => providers?.find((p) => p.id === providerId));\n}\n\nexport class ProviderService implements ProviderServiceAbstraction {\n  constructor(private stateProvider: StateProvider) {}\n\n  private providers$(userId?: UserId): Observable<Provider[] | undefined> {\n    // FIXME: Can be replaced with `getUserStateOrDefault$` if we weren't trying to pick this.\n    return (\n      userId != null\n        ? this.stateProvider.getUser(userId, PROVIDERS).state$\n        : this.stateProvider.activeUserId$.pipe(\n            take(1),\n            switchMap((userId) =>\n              userId != null ? this.stateProvider.getUser(userId, PROVIDERS).state$ : of(null),\n            ),\n          )\n    ).pipe(this.mapProviderRecordToArray());\n  }\n\n  private mapProviderRecordToArray() {\n    return map<Record<string, ProviderData>, Provider[]>((providers) =>\n      Object.values(providers ?? {})?.map((o) => new Provider(o)),\n    );\n  }\n\n  async get(id: string): Promise<Provider> {\n    return await firstValueFrom(this.providers$().pipe(mapToSingleProvider(id)));\n  }\n\n  async getAll(): Promise<Provider[]> {\n    return await firstValueFrom(this.providers$());\n  }\n\n  async save(providers: { [id: string]: ProviderData }, userId?: UserId) {\n    await this.stateProvider.setUserState(PROVIDERS, providers, userId);\n  }\n}\n","export enum AuthenticationStatus {\n  LoggedOut = 0,\n  Locked = 1,\n  Unlocked = 2,\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\nimport { AuthenticationStatus } from \"../enums/authentication-status\";\n\n/**\n * Holds information about an account for use in the AccountService\n * if more information is added, be sure to update the equality method.\n */\nexport type AccountInfo = {\n  status: AuthenticationStatus;\n  email: string;\n  name: string | undefined;\n};\n\nexport function accountInfoEqual(a: AccountInfo, b: AccountInfo) {\n  return a?.status === b?.status && a?.email === b?.email && a?.name === b?.name;\n}\n\nexport abstract class AccountService {\n  accounts$: Observable<Record<UserId, AccountInfo>>;\n  activeAccount$: Observable<{ id: UserId | undefined } & AccountInfo>;\n  accountLock$: Observable<UserId>;\n  accountLogout$: Observable<UserId>;\n  /**\n   * Updates the `accounts$` observable with the new account data.\n   * @param userId\n   * @param accountData\n   */\n  abstract addAccount(userId: UserId, accountData: AccountInfo): Promise<void>;\n  /**\n   * updates the `accounts$` observable with the new preferred name for the account.\n   * @param userId\n   * @param name\n   */\n  abstract setAccountName(userId: UserId, name: string): Promise<void>;\n  /**\n   * updates the `accounts$` observable with the new email for the account.\n   * @param userId\n   * @param email\n   */\n  abstract setAccountEmail(userId: UserId, email: string): Promise<void>;\n  /**\n   * Updates the `accounts$` observable with the new account status.\n   * Also emits the `accountLock$` or `accountLogout$` observable if the status is `Locked` or `LoggedOut` respectively.\n   * @param userId\n   * @param status\n   */\n  abstract setAccountStatus(userId: UserId, status: AuthenticationStatus): Promise<void>;\n  /**\n   * Updates the `accounts$` observable with the new account status if the current status is higher than the `maxStatus`.\n   *\n   * This method only downgrades status to the maximum value sent in, it will not increase authentication status.\n   *\n   * @example An account is transitioning from unlocked to logged out. If callbacks that set the status to locked occur\n   * after it is updated to logged out, the account will be in the incorrect state.\n   * @param userId The user id of the account to be updated.\n   * @param maxStatus The new status of the account.\n   */\n  abstract setMaxAccountStatus(userId: UserId, maxStatus: AuthenticationStatus): Promise<void>;\n  /**\n   * Updates the `activeAccount$` observable with the new active account.\n   * @param userId\n   */\n  abstract switchAccount(userId: UserId): Promise<void>;\n}\n\nexport abstract class InternalAccountService extends AccountService {\n  abstract delete(): void;\n}\n","import { Subject, combineLatestWith, map, distinctUntilChanged, shareReplay } from \"rxjs\";\n\nimport {\n  AccountInfo,\n  InternalAccountService,\n  accountInfoEqual,\n} from \"../../auth/abstractions/account.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport {\n  ACCOUNT_MEMORY,\n  GlobalState,\n  GlobalStateProvider,\n  KeyDefinition,\n} from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { AuthenticationStatus } from \"../enums/authentication-status\";\n\nexport const ACCOUNT_ACCOUNTS = KeyDefinition.record<AccountInfo, UserId>(\n  ACCOUNT_MEMORY,\n  \"accounts\",\n  {\n    deserializer: (accountInfo) => accountInfo,\n  },\n);\n\nexport const ACCOUNT_ACTIVE_ACCOUNT_ID = new KeyDefinition(ACCOUNT_MEMORY, \"activeAccountId\", {\n  deserializer: (id: UserId) => id,\n});\n\nexport class AccountServiceImplementation implements InternalAccountService {\n  private lock = new Subject<UserId>();\n  private logout = new Subject<UserId>();\n  private accountsState: GlobalState<Record<UserId, AccountInfo>>;\n  private activeAccountIdState: GlobalState<UserId | undefined>;\n\n  accounts$;\n  activeAccount$;\n  accountLock$ = this.lock.asObservable();\n  accountLogout$ = this.logout.asObservable();\n\n  constructor(\n    private messagingService: MessagingService,\n    private logService: LogService,\n    private globalStateProvider: GlobalStateProvider,\n  ) {\n    this.accountsState = this.globalStateProvider.get(ACCOUNT_ACCOUNTS);\n    this.activeAccountIdState = this.globalStateProvider.get(ACCOUNT_ACTIVE_ACCOUNT_ID);\n\n    this.accounts$ = this.accountsState.state$.pipe(\n      map((accounts) => (accounts == null ? {} : accounts)),\n    );\n    this.activeAccount$ = this.activeAccountIdState.state$.pipe(\n      combineLatestWith(this.accounts$),\n      map(([id, accounts]) => (id ? { id, ...accounts[id] } : undefined)),\n      distinctUntilChanged((a, b) => a?.id === b?.id && accountInfoEqual(a, b)),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n  }\n\n  async addAccount(userId: UserId, accountData: AccountInfo): Promise<void> {\n    await this.accountsState.update((accounts) => {\n      accounts ||= {};\n      accounts[userId] = accountData;\n      return accounts;\n    });\n  }\n\n  async setAccountName(userId: UserId, name: string): Promise<void> {\n    await this.setAccountInfo(userId, { name });\n  }\n\n  async setAccountEmail(userId: UserId, email: string): Promise<void> {\n    await this.setAccountInfo(userId, { email });\n  }\n\n  async setAccountStatus(userId: UserId, status: AuthenticationStatus): Promise<void> {\n    await this.setAccountInfo(userId, { status });\n\n    if (status === AuthenticationStatus.LoggedOut) {\n      this.logout.next(userId);\n    } else if (status === AuthenticationStatus.Locked) {\n      this.lock.next(userId);\n    }\n  }\n\n  async setMaxAccountStatus(userId: UserId, maxStatus: AuthenticationStatus): Promise<void> {\n    await this.accountsState.update(\n      (accounts) => {\n        accounts[userId].status = maxStatus;\n        return accounts;\n      },\n      {\n        shouldUpdate: (accounts) => {\n          if (accounts?.[userId] == null) {\n            throw new Error(\"Account does not exist\");\n          }\n\n          return accounts[userId].status > maxStatus;\n        },\n      },\n    );\n  }\n\n  async switchAccount(userId: UserId): Promise<void> {\n    await this.activeAccountIdState.update(\n      (_, accounts) => {\n        if (userId == null) {\n          // indicates no account is active\n          return null;\n        }\n\n        if (accounts?.[userId] == null) {\n          throw new Error(\"Account does not exist\");\n        }\n        return userId;\n      },\n      {\n        combineLatestWith: this.accounts$,\n        shouldUpdate: (id) => {\n          // update only if userId changes\n          return id !== userId;\n        },\n      },\n    );\n  }\n\n  // TODO: update to use our own account status settings. Requires inverting direction of state service accounts flow\n  async delete(): Promise<void> {\n    try {\n      this.messagingService?.send(\"logout\");\n    } catch (e) {\n      this.logService.error(e);\n      throw e;\n    }\n  }\n\n  private async setAccountInfo(userId: UserId, update: Partial<AccountInfo>): Promise<void> {\n    function newAccountInfo(oldAccountInfo: AccountInfo): AccountInfo {\n      return { ...oldAccountInfo, ...update };\n    }\n    await this.accountsState.update(\n      (accounts) => {\n        accounts[userId] = newAccountInfo(accounts[userId]);\n        return accounts;\n      },\n      {\n        // Avoid unnecessary updates\n        // TODO: Faster comparison, maybe include a hash on the objects?\n        shouldUpdate: (accounts) => {\n          if (accounts?.[userId] == null) {\n            throw new Error(\"Account does not exist\");\n          }\n\n          return !accountInfoEqual(accounts[userId], newAccountInfo(accounts[userId]));\n        },\n      },\n    );\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { KeySuffixOptions } from \"../../platform/enums\";\nimport { AuthService as AuthServiceAbstraction } from \"../abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../enums/authentication-status\";\n\nexport class AuthService implements AuthServiceAbstraction {\n  constructor(\n    protected messagingService: MessagingService,\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected stateService: StateService,\n  ) {}\n\n  async getAuthStatus(userId?: string): Promise<AuthenticationStatus> {\n    // If we don't have an access token or userId, we're logged out\n    const isAuthenticated = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!isAuthenticated) {\n      return AuthenticationStatus.LoggedOut;\n    }\n\n    // If we don't have a user key in memory, we're locked\n    if (!(await this.cryptoService.hasUserKeyInMemory(userId))) {\n      // Check if the user has vault timeout set to never and verify that\n      // they've never unlocked their vault\n      const neverLock =\n        (await this.cryptoService.hasUserKeyStored(KeySuffixOptions.Auto, userId)) &&\n        !(await this.stateService.getEverBeenUnlocked({ userId: userId }));\n\n      if (neverLock) {\n        // Attempt to get the key from storage and set it in memory\n        const userKey = await this.cryptoService.getUserKeyFromStorage(\n          KeySuffixOptions.Auto,\n          userId,\n        );\n        await this.cryptoService.setUserKey(userKey, userId);\n      }\n    }\n\n    // We do another check here in case setting the auto key failed\n    const hasKeyInMemory = await this.cryptoService.hasUserKeyInMemory(userId);\n    if (!hasKeyInMemory) {\n      return AuthenticationStatus.Locked;\n    }\n\n    return AuthenticationStatus.Unlocked;\n  }\n\n  logOut(callback: () => void) {\n    callback();\n    this.messagingService.send(\"loggedOut\");\n  }\n}\n","export class UpdateAvatarRequest {\n  avatarColor: string;\n\n  constructor(avatarColor: string) {\n    this.avatarColor = avatarColor;\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { UpdateAvatarRequest } from \"../../models/request/update-avatar.request\";\nimport { AVATAR_DISK, StateProvider, UserKeyDefinition } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { AvatarService as AvatarServiceAbstraction } from \"../abstractions/avatar.service\";\n\nconst AVATAR_COLOR = new UserKeyDefinition<string>(AVATAR_DISK, \"avatarColor\", {\n  deserializer: (value) => value,\n  clearOn: [],\n});\n\nexport class AvatarService implements AvatarServiceAbstraction {\n  avatarColor$: Observable<string>;\n\n  constructor(\n    private apiService: ApiService,\n    private stateProvider: StateProvider,\n  ) {\n    this.avatarColor$ = this.stateProvider.getActive(AVATAR_COLOR).state$;\n  }\n\n  async setAvatarColor(color: string): Promise<void> {\n    const { avatarColor } = await this.apiService.putAvatar(new UpdateAvatarRequest(color));\n\n    await this.stateProvider.setUserState(AVATAR_COLOR, avatarColor);\n  }\n\n  async setSyncAvatarColor(userId: UserId, color: string): Promise<void> {\n    await this.stateProvider.getUser(userId, AVATAR_COLOR).update(() => color);\n  }\n\n  getUserAvatarColor$(userId: UserId): Observable<string | null> {\n    return this.stateProvider.getUser(userId, AVATAR_COLOR).state$;\n  }\n}\n","export class SecretVerificationRequest {\n  masterPasswordHash: string;\n  otp: string;\n  authRequestAccessCode: string;\n}\n","import { SecretVerificationRequest } from \"./secret-verification.request\";\n\nexport class UpdateDevicesTrustRequest extends SecretVerificationRequest {\n  currentDevice: DeviceKeysUpdateRequest;\n  otherDevices: OtherDeviceKeysUpdateRequest[];\n}\n\nexport class DeviceKeysUpdateRequest {\n  encryptedPublicKey: string;\n  encryptedUserKey: string;\n}\n\nexport class OtherDeviceKeysUpdateRequest extends DeviceKeysUpdateRequest {\n  id: string;\n}\n","import { firstValueFrom, map, Observable } from \"rxjs\";\n\nimport { UserDecryptionOptionsServiceAbstraction } from \"@bitwarden/auth/common\";\n\nimport { AppIdService } from \"../../platform/abstractions/app-id.service\";\nimport { CryptoFunctionService } from \"../../platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { EncryptService } from \"../../platform/abstractions/encrypt.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { KeyGenerationService } from \"../../platform/abstractions/key-generation.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { UserKey, DeviceKey } from \"../../types/key\";\nimport { DeviceTrustCryptoServiceAbstraction } from \"../abstractions/device-trust-crypto.service.abstraction\";\nimport { DeviceResponse } from \"../abstractions/devices/responses/device.response\";\nimport { DevicesApiServiceAbstraction } from \"../abstractions/devices-api.service.abstraction\";\nimport { SecretVerificationRequest } from \"../models/request/secret-verification.request\";\nimport {\n  DeviceKeysUpdateRequest,\n  UpdateDevicesTrustRequest,\n} from \"../models/request/update-devices-trust.request\";\n\nexport class DeviceTrustCryptoService implements DeviceTrustCryptoServiceAbstraction {\n  supportsDeviceTrust$: Observable<boolean>;\n\n  constructor(\n    private keyGenerationService: KeyGenerationService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private cryptoService: CryptoService,\n    private encryptService: EncryptService,\n    private stateService: StateService,\n    private appIdService: AppIdService,\n    private devicesApiService: DevicesApiServiceAbstraction,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private userDecryptionOptionsService: UserDecryptionOptionsServiceAbstraction,\n  ) {\n    this.supportsDeviceTrust$ = this.userDecryptionOptionsService.userDecryptionOptions$.pipe(\n      map((options) => options?.trustedDeviceOption != null ?? false),\n    );\n  }\n\n  /**\n   * @description Retrieves the users choice to trust the device which can only happen after decryption\n   * Note: this value should only be used once and then reset\n   */\n  async getShouldTrustDevice(): Promise<boolean> {\n    return await this.stateService.getShouldTrustDevice();\n  }\n\n  async setShouldTrustDevice(value: boolean): Promise<void> {\n    await this.stateService.setShouldTrustDevice(value);\n  }\n\n  async trustDeviceIfRequired(): Promise<void> {\n    const shouldTrustDevice = await this.getShouldTrustDevice();\n    if (shouldTrustDevice) {\n      await this.trustDevice();\n      // reset the trust choice\n      await this.setShouldTrustDevice(false);\n    }\n  }\n\n  async trustDevice(): Promise<DeviceResponse> {\n    // Attempt to get user key\n    const userKey: UserKey = await this.cryptoService.getUserKey();\n\n    // If user key is not found, throw error\n    if (!userKey) {\n      throw new Error(\"User symmetric key not found\");\n    }\n\n    // Generate deviceKey\n    const deviceKey = await this.makeDeviceKey();\n\n    // Generate asymmetric RSA key pair: devicePrivateKey, devicePublicKey\n    const [devicePublicKey, devicePrivateKey] =\n      await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n\n    const [\n      devicePublicKeyEncryptedUserKey,\n      userKeyEncryptedDevicePublicKey,\n      deviceKeyEncryptedDevicePrivateKey,\n    ] = await Promise.all([\n      // Encrypt user key with the DevicePublicKey\n      this.cryptoService.rsaEncrypt(userKey.key, devicePublicKey),\n\n      // Encrypt devicePublicKey with user key\n      this.encryptService.encrypt(devicePublicKey, userKey),\n\n      // Encrypt devicePrivateKey with deviceKey\n      this.encryptService.encrypt(devicePrivateKey, deviceKey),\n    ]);\n\n    // Send encrypted keys to server\n    const deviceIdentifier = await this.appIdService.getAppId();\n    const deviceResponse = await this.devicesApiService.updateTrustedDeviceKeys(\n      deviceIdentifier,\n      devicePublicKeyEncryptedUserKey.encryptedString,\n      userKeyEncryptedDevicePublicKey.encryptedString,\n      deviceKeyEncryptedDevicePrivateKey.encryptedString,\n    );\n\n    // store device key in local/secure storage if enc keys posted to server successfully\n    await this.setDeviceKey(deviceKey);\n\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"deviceTrusted\"));\n\n    return deviceResponse;\n  }\n\n  async rotateDevicesTrust(newUserKey: UserKey, masterPasswordHash: string): Promise<void> {\n    const currentDeviceKey = await this.getDeviceKey();\n    if (currentDeviceKey == null) {\n      // If the current device doesn't have a device key available to it, then we can't\n      // rotate any trust at all, so early return.\n      return;\n    }\n\n    // At this point of rotating their keys, they should still have their old user key in state\n    const oldUserKey = await firstValueFrom(this.cryptoService.activeUserKey$);\n\n    const deviceIdentifier = await this.appIdService.getAppId();\n    const secretVerificationRequest = new SecretVerificationRequest();\n    secretVerificationRequest.masterPasswordHash = masterPasswordHash;\n\n    // Get the keys that are used in rotating a devices keys from the server\n    const currentDeviceKeys = await this.devicesApiService.getDeviceKeys(\n      deviceIdentifier,\n      secretVerificationRequest,\n    );\n\n    // Decrypt the existing device public key with the old user key\n    const decryptedDevicePublicKey = await this.encryptService.decryptToBytes(\n      currentDeviceKeys.encryptedPublicKey,\n      oldUserKey,\n    );\n\n    // Encrypt the brand new user key with the now-decrypted public key for the device\n    const encryptedNewUserKey = await this.cryptoService.rsaEncrypt(\n      newUserKey.key,\n      decryptedDevicePublicKey,\n    );\n\n    // Re-encrypt the device public key with the new user key\n    const encryptedDevicePublicKey = await this.encryptService.encrypt(\n      decryptedDevicePublicKey,\n      newUserKey,\n    );\n\n    const currentDeviceUpdateRequest = new DeviceKeysUpdateRequest();\n    currentDeviceUpdateRequest.encryptedUserKey = encryptedNewUserKey.encryptedString;\n    currentDeviceUpdateRequest.encryptedPublicKey = encryptedDevicePublicKey.encryptedString;\n\n    // TODO: For device management, allow this method to take an array of device ids that can be looped over and individually rotated\n    // then it can be added to trustRequest.otherDevices.\n\n    const trustRequest = new UpdateDevicesTrustRequest();\n    trustRequest.masterPasswordHash = masterPasswordHash;\n    trustRequest.currentDevice = currentDeviceUpdateRequest;\n    trustRequest.otherDevices = [];\n\n    await this.devicesApiService.updateTrust(trustRequest, deviceIdentifier);\n  }\n\n  async getDeviceKey(): Promise<DeviceKey> {\n    return await this.stateService.getDeviceKey();\n  }\n\n  private async setDeviceKey(deviceKey: DeviceKey | null): Promise<void> {\n    await this.stateService.setDeviceKey(deviceKey);\n  }\n\n  private async makeDeviceKey(): Promise<DeviceKey> {\n    // Create 512-bit device key\n    return (await this.keyGenerationService.createKey(512)) as DeviceKey;\n  }\n\n  async decryptUserKeyWithDeviceKey(\n    encryptedDevicePrivateKey: EncString,\n    encryptedUserKey: EncString,\n    deviceKey?: DeviceKey,\n  ): Promise<UserKey | null> {\n    // If device key provided use it, otherwise try to retrieve from storage\n    deviceKey ||= await this.getDeviceKey();\n\n    if (!deviceKey) {\n      // User doesn't have a device key anymore so device is untrusted\n      return null;\n    }\n\n    try {\n      // attempt to decrypt encryptedDevicePrivateKey with device key\n      const devicePrivateKey = await this.encryptService.decryptToBytes(\n        encryptedDevicePrivateKey,\n        deviceKey,\n      );\n\n      // Attempt to decrypt encryptedUserDataKey with devicePrivateKey\n      const userKey = await this.cryptoService.rsaDecrypt(\n        encryptedUserKey.encryptedString,\n        devicePrivateKey,\n      );\n\n      return new SymmetricCryptoKey(userKey) as UserKey;\n    } catch (e) {\n      // If either decryption effort fails, we want to remove the device key\n      await this.setDeviceKey(null);\n\n      return null;\n    }\n  }\n}\n","import { DeviceType } from \"../../../../enums\";\nimport { View } from \"../../../../models/view/view\";\nimport { DeviceResponse } from \"../responses/device.response\";\n\nexport class DeviceView implements View {\n  id: string;\n  userId: string;\n  name: string;\n  identifier: string;\n  type: DeviceType;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(deviceResponse: DeviceResponse) {\n    Object.assign(this, deviceResponse);\n  }\n}\n","import { Observable, defer, map } from \"rxjs\";\n\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport { DevicesServiceAbstraction } from \"../../abstractions/devices/devices.service.abstraction\";\nimport { DeviceResponse } from \"../../abstractions/devices/responses/device.response\";\nimport { DeviceView } from \"../../abstractions/devices/views/device.view\";\nimport { DevicesApiServiceAbstraction } from \"../../abstractions/devices-api.service.abstraction\";\n\n/**\n * @class DevicesServiceImplementation\n * @implements {DevicesServiceAbstraction}\n * @description Observable based data store service for Devices.\n * note: defer is used to convert the promises to observables and to ensure\n * that observables are created for each subscription\n * (i.e., promsise --> observables are cold until subscribed to)\n */\nexport class DevicesServiceImplementation implements DevicesServiceAbstraction {\n  constructor(private devicesApiService: DevicesApiServiceAbstraction) {}\n\n  /**\n   * @description Gets the list of all devices.\n   */\n  getDevices$(): Observable<Array<DeviceView>> {\n    return defer(() => this.devicesApiService.getDevices()).pipe(\n      map((deviceResponses: ListResponse<DeviceResponse>) => {\n        return deviceResponses.data.map((deviceResponse: DeviceResponse) => {\n          return new DeviceView(deviceResponse);\n        });\n      }),\n    );\n  }\n\n  /**\n   * @description Gets the device with the specified identifier.\n   */\n  getDeviceByIdentifier$(deviceIdentifier: string): Observable<DeviceView> {\n    return defer(() => this.devicesApiService.getDeviceByIdentifier(deviceIdentifier)).pipe(\n      map((deviceResponse: DeviceResponse) => new DeviceView(deviceResponse)),\n    );\n  }\n\n  /**\n   * @description Checks if a device is known for a user by user's email and device's identifier.\n   */\n  isDeviceKnownForUser$(email: string, deviceIdentifier: string): Observable<boolean> {\n    return defer(() => this.devicesApiService.getKnownDevice(email, deviceIdentifier));\n  }\n\n  /**\n   * @description Updates the keys for the specified device.\n   */\n\n  updateTrustedDeviceKeys$(\n    deviceIdentifier: string,\n    devicePublicKeyEncryptedUserKey: string,\n    userKeyEncryptedDevicePublicKey: string,\n    deviceKeyEncryptedDevicePrivateKey: string,\n  ): Observable<DeviceView> {\n    return defer(() =>\n      this.devicesApiService.updateTrustedDeviceKeys(\n        deviceIdentifier,\n        devicePublicKeyEncryptedUserKey,\n        userKeyEncryptedDevicePublicKey,\n        deviceKeyEncryptedDevicePrivateKey,\n      ),\n    ).pipe(map((deviceResponse: DeviceResponse) => new DeviceView(deviceResponse)));\n  }\n}\n","import { DeviceType } from \"../../../../enums\";\nimport { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class DeviceResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  name: string;\n  identifier: string;\n  type: DeviceType;\n  creationDate: string;\n  revisionDate: string;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { DeviceType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\n\nexport class ProtectedDeviceResponse extends BaseResponse {\n  constructor(response: Jsonify<ProtectedDeviceResponse>) {\n    super(response);\n    this.id = this.getResponseProperty(\"id\");\n    this.name = this.getResponseProperty(\"name\");\n    this.identifier = this.getResponseProperty(\"identifier\");\n    this.type = this.getResponseProperty(\"type\");\n    this.creationDate = new Date(this.getResponseProperty(\"creationDate\"));\n    if (response.encryptedUserKey) {\n      this.encryptedUserKey = new EncString(this.getResponseProperty(\"encryptedUserKey\"));\n    }\n    if (response.encryptedPublicKey) {\n      this.encryptedPublicKey = new EncString(this.getResponseProperty(\"encryptedPublicKey\"));\n    }\n  }\n\n  id: string;\n  name: string;\n  type: DeviceType;\n  identifier: string;\n  creationDate: Date;\n  /**\n   * Intended to be the users symmetric key that is encrypted in some form, the current way to encrypt this is with\n   * the devices public key.\n   */\n  encryptedUserKey: EncString;\n  /**\n   * Intended to be the public key that was generated for a device upon trust and encrypted. Currenly encrypted using\n   * a users symmetric key so that when trusted and unlocked a user can decrypt the public key for all their devices.\n   * This enabled a user to rotate the keys for all of their devices.\n   */\n  encryptedPublicKey: EncString;\n}\n","export class TrustedDeviceKeysRequest {\n  constructor(\n    public encryptedUserKey: string,\n    public encryptedPublicKey: string,\n    public encryptedPrivateKey: string,\n  ) {}\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { ListResponse } from \"../../models/response/list.response\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { DeviceResponse } from \"../abstractions/devices/responses/device.response\";\nimport { DevicesApiServiceAbstraction } from \"../abstractions/devices-api.service.abstraction\";\nimport { SecretVerificationRequest } from \"../models/request/secret-verification.request\";\nimport { UpdateDevicesTrustRequest } from \"../models/request/update-devices-trust.request\";\nimport { ProtectedDeviceResponse } from \"../models/response/protected-device.response\";\n\nimport { TrustedDeviceKeysRequest } from \"./devices/requests/trusted-device-keys.request\";\n\nexport class DevicesApiServiceImplementation implements DevicesApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async getKnownDevice(email: string, deviceIdentifier: string): Promise<boolean> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/devices/knowndevice\",\n      null,\n      false,\n      true,\n      null,\n      (headers) => {\n        headers.set(\"X-Device-Identifier\", deviceIdentifier);\n        headers.set(\"X-Request-Email\", Utils.fromUtf8ToUrlB64(email));\n      },\n    );\n    return r as boolean;\n  }\n\n  /**\n   * Get device by identifier\n   * @param deviceIdentifier - client generated id (not device id in DB)\n   */\n  async getDeviceByIdentifier(deviceIdentifier: string): Promise<DeviceResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      `/devices/identifier/${deviceIdentifier}`,\n      null,\n      true,\n      true,\n    );\n    return new DeviceResponse(r);\n  }\n\n  async getDevices(): Promise<ListResponse<DeviceResponse>> {\n    const r = await this.apiService.send(\"GET\", \"/devices\", null, true, true, null);\n    return new ListResponse(r, DeviceResponse);\n  }\n\n  async updateTrustedDeviceKeys(\n    deviceIdentifier: string,\n    devicePublicKeyEncryptedUserKey: string,\n    userKeyEncryptedDevicePublicKey: string,\n    deviceKeyEncryptedDevicePrivateKey: string,\n  ): Promise<DeviceResponse> {\n    const request = new TrustedDeviceKeysRequest(\n      devicePublicKeyEncryptedUserKey,\n      userKeyEncryptedDevicePublicKey,\n      deviceKeyEncryptedDevicePrivateKey,\n    );\n\n    const result = await this.apiService.send(\n      \"PUT\",\n      `/devices/${deviceIdentifier}/keys`,\n      request,\n      true,\n      true,\n    );\n\n    return new DeviceResponse(result);\n  }\n\n  async updateTrust(\n    updateDevicesTrustRequestModel: UpdateDevicesTrustRequest,\n    deviceIdentifier: string,\n  ): Promise<void> {\n    await this.apiService.send(\n      \"POST\",\n      \"/devices/update-trust\",\n      updateDevicesTrustRequestModel,\n      true,\n      false,\n      null,\n      (headers) => {\n        headers.set(\"Device-Identifier\", deviceIdentifier);\n      },\n    );\n  }\n\n  async getDeviceKeys(\n    deviceIdentifier: string,\n    secretVerificationRequest: SecretVerificationRequest,\n  ): Promise<ProtectedDeviceResponse> {\n    const result = await this.apiService.send(\n      \"POST\",\n      `/devices/${deviceIdentifier}/retrieve-keys`,\n      secretVerificationRequest,\n      true,\n      true,\n    );\n    return new ProtectedDeviceResponse(result);\n  }\n}\n","export class KeyConnectorUserKeyRequest {\n  key: string;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n}\n","import { KeysRequest } from \"../../../models/request/keys.request\";\nimport { KdfType } from \"../../../platform/enums\";\nimport { KdfConfig } from \"../domain/kdf-config\";\n\nexport class SetKeyConnectorKeyRequest {\n  key: string;\n  keys: KeysRequest;\n  kdf: KdfType;\n  kdfIterations: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n  orgIdentifier: string;\n\n  constructor(\n    key: string,\n    kdf: KdfType,\n    kdfConfig: KdfConfig,\n    orgIdentifier: string,\n    keys: KeysRequest,\n  ) {\n    this.key = key;\n    this.kdf = kdf;\n    this.kdfIterations = kdfConfig.iterations;\n    this.kdfMemory = kdfConfig.memory;\n    this.kdfParallelism = kdfConfig.parallelism;\n    this.orgIdentifier = orgIdentifier;\n    this.keys = keys;\n  }\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { OrganizationService } from \"../../admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationUserType } from \"../../admin-console/enums\";\nimport { KeysRequest } from \"../../models/request/keys.request\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { KeyGenerationService } from \"../../platform/abstractions/key-generation.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { MasterKey } from \"../../types/key\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"../abstractions/key-connector.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { KdfConfig } from \"../models/domain/kdf-config\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/key-connector-user-key.request\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/set-key-connector-key.request\";\nimport { IdentityTokenResponse } from \"../models/response/identity-token.response\";\n\nexport class KeyConnectorService implements KeyConnectorServiceAbstraction {\n  constructor(\n    private stateService: StateService,\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private tokenService: TokenService,\n    private logService: LogService,\n    private organizationService: OrganizationService,\n    private keyGenerationService: KeyGenerationService,\n    private logoutCallback: (expired: boolean, userId?: string) => Promise<void>,\n  ) {}\n\n  setUsesKeyConnector(usesKeyConnector: boolean) {\n    return this.stateService.setUsesKeyConnector(usesKeyConnector);\n  }\n\n  async getUsesKeyConnector(): Promise<boolean> {\n    return await this.stateService.getUsesKeyConnector();\n  }\n\n  async userNeedsMigration() {\n    const loggedInUsingSso = await this.tokenService.getIsExternal();\n    const requiredByOrganization = (await this.getManagingOrganization()) != null;\n    const userIsNotUsingKeyConnector = !(await this.getUsesKeyConnector());\n\n    return loggedInUsingSso && requiredByOrganization && userIsNotUsingKeyConnector;\n  }\n\n  async migrateUser() {\n    const organization = await this.getManagingOrganization();\n    const masterKey = await this.cryptoService.getMasterKey();\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(masterKey.encKeyB64);\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(\n        organization.keyConnectorUrl,\n        keyConnectorRequest,\n      );\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    await this.apiService.postConvertToKeyConnector();\n  }\n\n  // TODO: UserKey should be renamed to MasterKey and typed accordingly\n  async setMasterKeyFromUrl(url: string) {\n    try {\n      const masterKeyResponse = await this.apiService.getMasterKeyFromKeyConnector(url);\n      const keyArr = Utils.fromB64ToArray(masterKeyResponse.key);\n      const masterKey = new SymmetricCryptoKey(keyArr) as MasterKey;\n      await this.cryptoService.setMasterKey(masterKey);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n  }\n\n  async getManagingOrganization() {\n    const orgs = await this.organizationService.getAll();\n    return orgs.find(\n      (o) =>\n        o.keyConnectorEnabled &&\n        o.type !== OrganizationUserType.Admin &&\n        o.type !== OrganizationUserType.Owner &&\n        !o.isProviderUser,\n    );\n  }\n\n  async convertNewSsoUserToKeyConnector(tokenResponse: IdentityTokenResponse, orgId: string) {\n    // TODO: Remove after tokenResponse.keyConnectorUrl is deprecated in 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n    const {\n      kdf,\n      kdfIterations,\n      kdfMemory,\n      kdfParallelism,\n      keyConnectorUrl: legacyKeyConnectorUrl,\n      userDecryptionOptions,\n    } = tokenResponse;\n    const password = await this.keyGenerationService.createKey(512);\n    const kdfConfig = new KdfConfig(kdfIterations, kdfMemory, kdfParallelism);\n\n    const masterKey = await this.cryptoService.makeMasterKey(\n      password.keyB64,\n      await this.tokenService.getEmail(),\n      kdf,\n      kdfConfig,\n    );\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(masterKey.encKeyB64);\n    await this.cryptoService.setMasterKey(masterKey);\n\n    const userKey = await this.cryptoService.makeUserKey(masterKey);\n    await this.cryptoService.setUserKey(userKey[0]);\n    await this.cryptoService.setMasterKeyEncryptedUserKey(userKey[1].encryptedString);\n\n    const [pubKey, privKey] = await this.cryptoService.makeKeyPair();\n\n    try {\n      const keyConnectorUrl =\n        legacyKeyConnectorUrl ?? userDecryptionOptions?.keyConnectorOption?.keyConnectorUrl;\n      await this.apiService.postUserKeyToKeyConnector(keyConnectorUrl, keyConnectorRequest);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    const keys = new KeysRequest(pubKey, privKey.encryptedString);\n    const setPasswordRequest = new SetKeyConnectorKeyRequest(\n      userKey[1].encryptedString,\n      kdf,\n      kdfConfig,\n      orgId,\n      keys,\n    );\n    await this.apiService.postSetKeyConnectorKey(setPasswordRequest);\n  }\n\n  async setConvertAccountRequired(status: boolean) {\n    await this.stateService.setConvertAccountToKeyConnector(status);\n  }\n\n  async getConvertAccountRequired(): Promise<boolean> {\n    return await this.stateService.getConvertAccountToKeyConnector();\n  }\n\n  async removeConvertAccountRequired() {\n    await this.stateService.setConvertAccountToKeyConnector(null);\n  }\n\n  async clear() {\n    await this.removeConvertAccountRequired();\n  }\n\n  private handleKeyConnectorError(e: any) {\n    this.logService.error(e);\n    if (this.logoutCallback != null) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.logoutCallback(false);\n    }\n    throw new Error(\"Key Connector error\");\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport {\n  ActiveUserState,\n  GlobalState,\n  KeyDefinition,\n  SSO_DISK,\n  StateProvider,\n} from \"../../platform/state\";\nimport { SsoLoginServiceAbstraction } from \"../abstractions/sso-login.service.abstraction\";\n\n/**\n * Uses disk storage so that the code verifier can be persisted across sso redirects.\n */\nconst CODE_VERIFIER = new KeyDefinition<string>(SSO_DISK, \"ssoCodeVerifier\", {\n  deserializer: (codeVerifier) => codeVerifier,\n});\n\n/**\n * Uses disk storage so that the sso state can be persisted across sso redirects.\n */\nconst SSO_STATE = new KeyDefinition<string>(SSO_DISK, \"ssoState\", {\n  deserializer: (state) => state,\n});\n\n/**\n * Uses disk storage so that the organization sso identifier can be persisted across sso redirects.\n */\nconst ORGANIZATION_SSO_IDENTIFIER = new KeyDefinition<string>(\n  SSO_DISK,\n  \"organizationSsoIdentifier\",\n  {\n    deserializer: (organizationIdentifier) => organizationIdentifier,\n  },\n);\n\n/**\n * Uses disk storage so that the user's email can be persisted across sso redirects.\n */\nconst SSO_EMAIL = new KeyDefinition<string>(SSO_DISK, \"ssoEmail\", {\n  deserializer: (state) => state,\n});\n\nexport class SsoLoginService implements SsoLoginServiceAbstraction {\n  private codeVerifierState: GlobalState<string>;\n  private ssoState: GlobalState<string>;\n  private orgSsoIdentifierState: GlobalState<string>;\n  private ssoEmailState: GlobalState<string>;\n  private activeUserOrgSsoIdentifierState: ActiveUserState<string>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.codeVerifierState = this.stateProvider.getGlobal(CODE_VERIFIER);\n    this.ssoState = this.stateProvider.getGlobal(SSO_STATE);\n    this.orgSsoIdentifierState = this.stateProvider.getGlobal(ORGANIZATION_SSO_IDENTIFIER);\n    this.ssoEmailState = this.stateProvider.getGlobal(SSO_EMAIL);\n    this.activeUserOrgSsoIdentifierState = this.stateProvider.getActive(\n      ORGANIZATION_SSO_IDENTIFIER,\n    );\n  }\n\n  getCodeVerifier(): Promise<string> {\n    return firstValueFrom(this.codeVerifierState.state$);\n  }\n\n  async setCodeVerifier(codeVerifier: string): Promise<void> {\n    await this.codeVerifierState.update((_) => codeVerifier);\n  }\n\n  getSsoState(): Promise<string> {\n    return firstValueFrom(this.ssoState.state$);\n  }\n\n  async setSsoState(ssoState: string): Promise<void> {\n    await this.ssoState.update((_) => ssoState);\n  }\n\n  getOrganizationSsoIdentifier(): Promise<string> {\n    return firstValueFrom(this.orgSsoIdentifierState.state$);\n  }\n\n  async setOrganizationSsoIdentifier(organizationIdentifier: string): Promise<void> {\n    await this.orgSsoIdentifierState.update((_) => organizationIdentifier);\n  }\n\n  getSsoEmail(): Promise<string> {\n    return firstValueFrom(this.ssoEmailState.state$);\n  }\n\n  async setSsoEmail(email: string): Promise<void> {\n    await this.ssoEmailState.update((_) => email);\n  }\n\n  getActiveUserOrganizationSsoIdentifier(): Promise<string> {\n    return firstValueFrom(this.activeUserOrgSsoIdentifierState.state$);\n  }\n\n  async setActiveUserOrganizationSsoIdentifier(organizationIdentifier: string): Promise<void> {\n    await this.activeUserOrgSsoIdentifierState.update((_) => organizationIdentifier);\n  }\n}\n","export enum VaultTimeoutAction {\n  Lock = \"lock\",\n  LogOut = \"logOut\",\n}\n","import { KeyDefinition, TOKEN_DISK, TOKEN_DISK_LOCAL, TOKEN_MEMORY } from \"../../platform/state\";\n\n// Note: all tokens / API key information must be cleared on logout.\n// because we are using secure storage, we must manually call to clean up our tokens.\n// See stateService.deAuthenticateAccount for where we call clearTokens(...)\n\nexport const ACCESS_TOKEN_DISK = new KeyDefinition<string>(TOKEN_DISK, \"accessToken\", {\n  deserializer: (accessToken) => accessToken,\n});\n\nexport const ACCESS_TOKEN_MEMORY = new KeyDefinition<string>(TOKEN_MEMORY, \"accessToken\", {\n  deserializer: (accessToken) => accessToken,\n});\n\nexport const REFRESH_TOKEN_DISK = new KeyDefinition<string>(TOKEN_DISK, \"refreshToken\", {\n  deserializer: (refreshToken) => refreshToken,\n});\n\nexport const REFRESH_TOKEN_MEMORY = new KeyDefinition<string>(TOKEN_MEMORY, \"refreshToken\", {\n  deserializer: (refreshToken) => refreshToken,\n});\n\nexport const REFRESH_TOKEN_MIGRATED_TO_SECURE_STORAGE = new KeyDefinition<boolean>(\n  TOKEN_DISK,\n  \"refreshTokenMigratedToSecureStorage\",\n  {\n    deserializer: (refreshTokenMigratedToSecureStorage) => refreshTokenMigratedToSecureStorage,\n  },\n);\n\nexport const EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL = KeyDefinition.record<string, string>(\n  TOKEN_DISK_LOCAL,\n  \"emailTwoFactorTokenRecord\",\n  {\n    deserializer: (emailTwoFactorTokenRecord) => emailTwoFactorTokenRecord,\n  },\n);\n\nexport const API_KEY_CLIENT_ID_DISK = new KeyDefinition<string>(TOKEN_DISK, \"apiKeyClientId\", {\n  deserializer: (apiKeyClientId) => apiKeyClientId,\n});\n\nexport const API_KEY_CLIENT_ID_MEMORY = new KeyDefinition<string>(TOKEN_MEMORY, \"apiKeyClientId\", {\n  deserializer: (apiKeyClientId) => apiKeyClientId,\n});\n\nexport const API_KEY_CLIENT_SECRET_DISK = new KeyDefinition<string>(\n  TOKEN_DISK,\n  \"apiKeyClientSecret\",\n  {\n    deserializer: (apiKeyClientSecret) => apiKeyClientSecret,\n  },\n);\n\nexport const API_KEY_CLIENT_SECRET_MEMORY = new KeyDefinition<string>(\n  TOKEN_MEMORY,\n  \"apiKeyClientSecret\",\n  {\n    deserializer: (apiKeyClientSecret) => apiKeyClientSecret,\n  },\n);\n","import { firstValueFrom } from \"rxjs\";\nimport { Opaque } from \"type-fest\";\n\nimport { decodeJwtTokenToJson } from \"@bitwarden/auth/common\";\n\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { EncryptService } from \"../../platform/abstractions/encrypt.service\";\nimport { KeyGenerationService } from \"../../platform/abstractions/key-generation.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { AbstractStorageService } from \"../../platform/abstractions/storage.service\";\nimport { StorageLocation } from \"../../platform/enums\";\nimport { EncString, EncryptedString } from \"../../platform/models/domain/enc-string\";\nimport { StorageOptions } from \"../../platform/models/domain/storage-options\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport {\n  GlobalState,\n  GlobalStateProvider,\n  KeyDefinition,\n  SingleUserStateProvider,\n} from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { TokenService as TokenServiceAbstraction } from \"../abstractions/token.service\";\n\nimport { ACCOUNT_ACTIVE_ACCOUNT_ID } from \"./account.service\";\nimport {\n  ACCESS_TOKEN_DISK,\n  ACCESS_TOKEN_MEMORY,\n  API_KEY_CLIENT_ID_DISK,\n  API_KEY_CLIENT_ID_MEMORY,\n  API_KEY_CLIENT_SECRET_DISK,\n  API_KEY_CLIENT_SECRET_MEMORY,\n  EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL,\n  REFRESH_TOKEN_DISK,\n  REFRESH_TOKEN_MEMORY,\n  REFRESH_TOKEN_MIGRATED_TO_SECURE_STORAGE,\n} from \"./token.state\";\n\nexport enum TokenStorageLocation {\n  Disk = \"disk\",\n  SecureStorage = \"secureStorage\",\n  Memory = \"memory\",\n}\n\n/**\n * Type representing the structure of a standard Bitwarden decoded access token.\n * src: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1\n * Note: all claims are technically optional so we must verify their existence before using them.\n * Note 2: NumericDate is a number representing a date in seconds since the Unix epoch.\n */\nexport type DecodedAccessToken = {\n  /** Issuer  - the issuer of the token, typically the URL of the authentication server */\n  iss?: string;\n\n  /** Not Before - a timestamp defining when the token starts being valid */\n  nbf?: number;\n\n  /** Issued At - a timestamp of when the token was issued */\n  iat?: number;\n\n  /** Expiration Time - a NumericDate timestamp of when the token will expire */\n  exp?: number;\n\n  /** Scope - the scope of the access request, such as the permissions the token grants */\n  scope?: string[];\n\n  /** Authentication Method Reference - the methods used in the authentication */\n  amr?: string[];\n\n  /** Client ID - the identifier for the client that requested the token */\n  client_id?: string;\n\n  /** Subject - the unique identifier for the user */\n  sub?: string;\n\n  /** Authentication Time - a timestamp of when the user authentication occurred */\n  auth_time?: number;\n\n  /** Identity Provider - the system or service that authenticated the user */\n  idp?: string;\n\n  /** Premium - a boolean flag indicating whether the account is premium */\n  premium?: boolean;\n\n  /** Email - the user's email address */\n  email?: string;\n\n  /** Email Verified - a boolean flag indicating whether the user's email address has been verified */\n  email_verified?: boolean;\n\n  /**\n   * Security Stamp - a unique identifier which invalidates the access token if it changes in the db\n   * (typically after critical account changes like a password change)\n   */\n  sstamp?: string;\n\n  /** Name - the name of the user */\n  name?: string;\n\n  /** Organization Owners - a list of organization owner identifiers */\n  orgowner?: string[];\n\n  /** Device - the identifier of the device used */\n  device?: string;\n\n  /** JWT ID - a unique identifier for the JWT */\n  jti?: string;\n};\n\n/**\n * A symmetric key for encrypting the access token before the token is stored on disk.\n * This key should be stored in secure storage.\n * */\ntype AccessTokenKey = Opaque<SymmetricCryptoKey, \"AccessTokenKey\">;\n\nexport class TokenService implements TokenServiceAbstraction {\n  private readonly accessTokenKeySecureStorageKey: string = \"_accessTokenKey\";\n\n  private readonly refreshTokenSecureStorageKey: string = \"_refreshToken\";\n\n  private emailTwoFactorTokenRecordGlobalState: GlobalState<Record<string, string>>;\n\n  private activeUserIdGlobalState: GlobalState<UserId>;\n\n  constructor(\n    // Note: we cannot use ActiveStateProvider because if we ever want to inject\n    // this service into the AccountService, we will make a circular dependency\n    private singleUserStateProvider: SingleUserStateProvider,\n    private globalStateProvider: GlobalStateProvider,\n    private readonly platformSupportsSecureStorage: boolean,\n    private secureStorageService: AbstractStorageService,\n    private keyGenerationService: KeyGenerationService,\n    private encryptService: EncryptService,\n    private logService: LogService,\n  ) {\n    this.initializeState();\n  }\n\n  // pivoting to an approach where we create a symmetric key we store in secure storage\n  // which is used to protect the data before persisting to disk.\n  // We will also use the same symmetric key to decrypt the data when reading from disk.\n\n  private initializeState(): void {\n    this.emailTwoFactorTokenRecordGlobalState = this.globalStateProvider.get(\n      EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL,\n    );\n\n    this.activeUserIdGlobalState = this.globalStateProvider.get(ACCOUNT_ACTIVE_ACCOUNT_ID);\n  }\n\n  async setTokens(\n    accessToken: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n    refreshToken?: string,\n    clientIdClientSecret?: [string, string],\n  ): Promise<void> {\n    if (!accessToken) {\n      throw new Error(\"Access token is required.\");\n    }\n\n    // get user id the access token\n    const userId: UserId = await this.getUserIdFromAccessToken(accessToken);\n\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot set tokens.\");\n    }\n\n    await this._setAccessToken(accessToken, vaultTimeoutAction, vaultTimeout, userId);\n\n    if (refreshToken) {\n      await this.setRefreshToken(refreshToken, vaultTimeoutAction, vaultTimeout, userId);\n    }\n\n    if (clientIdClientSecret != null) {\n      await this.setClientId(clientIdClientSecret[0], vaultTimeoutAction, vaultTimeout, userId);\n      await this.setClientSecret(clientIdClientSecret[1], vaultTimeoutAction, vaultTimeout, userId);\n    }\n  }\n\n  private async getAccessTokenKey(userId: UserId): Promise<AccessTokenKey | null> {\n    const accessTokenKeyB64 = await this.secureStorageService.get<\n      ReturnType<SymmetricCryptoKey[\"toJSON\"]>\n    >(`${userId}${this.accessTokenKeySecureStorageKey}`, this.getSecureStorageOptions(userId));\n\n    if (!accessTokenKeyB64) {\n      return null;\n    }\n\n    const accessTokenKey = SymmetricCryptoKey.fromJSON(accessTokenKeyB64) as AccessTokenKey;\n    return accessTokenKey;\n  }\n\n  private async createAndSaveAccessTokenKey(userId: UserId): Promise<AccessTokenKey> {\n    const newAccessTokenKey = (await this.keyGenerationService.createKey(512)) as AccessTokenKey;\n\n    await this.secureStorageService.save<AccessTokenKey>(\n      `${userId}${this.accessTokenKeySecureStorageKey}`,\n      newAccessTokenKey,\n      this.getSecureStorageOptions(userId),\n    );\n\n    return newAccessTokenKey;\n  }\n\n  private async clearAccessTokenKey(userId: UserId): Promise<void> {\n    await this.secureStorageService.remove(\n      `${userId}${this.accessTokenKeySecureStorageKey}`,\n      this.getSecureStorageOptions(userId),\n    );\n  }\n\n  private async getOrCreateAccessTokenKey(userId: UserId): Promise<AccessTokenKey> {\n    if (!this.platformSupportsSecureStorage) {\n      throw new Error(\"Platform does not support secure storage. Cannot obtain access token key.\");\n    }\n\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot obtain access token key.\");\n    }\n\n    // First see if we have an accessTokenKey in secure storage and return it if we do\n    let accessTokenKey: AccessTokenKey = await this.getAccessTokenKey(userId);\n\n    if (!accessTokenKey) {\n      // Otherwise, create a new one and save it to secure storage, then return it\n      accessTokenKey = await this.createAndSaveAccessTokenKey(userId);\n    }\n\n    return accessTokenKey;\n  }\n\n  private async encryptAccessToken(accessToken: string, userId: UserId): Promise<EncString> {\n    const accessTokenKey = await this.getOrCreateAccessTokenKey(userId);\n\n    return await this.encryptService.encrypt(accessToken, accessTokenKey);\n  }\n\n  private async decryptAccessToken(\n    encryptedAccessToken: EncString,\n    userId: UserId,\n  ): Promise<string | null> {\n    const accessTokenKey = await this.getAccessTokenKey(userId);\n\n    if (!accessTokenKey) {\n      // If we don't have an accessTokenKey, then that means we don't have an access token as it hasn't been set yet\n      // and we have to return null here to properly indicate the the user isn't logged in.\n      return null;\n    }\n\n    const decryptedAccessToken = await this.encryptService.decryptToUtf8(\n      encryptedAccessToken,\n      accessTokenKey,\n    );\n\n    return decryptedAccessToken;\n  }\n\n  /**\n   * Internal helper for set access token which always requires user id.\n   * This is useful because setTokens always will have a user id from the access token whereas\n   * the public setAccessToken method does not.\n   */\n  private async _setAccessToken(\n    accessToken: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n    userId: UserId,\n  ): Promise<void> {\n    const storageLocation = await this.determineStorageLocation(\n      vaultTimeoutAction,\n      vaultTimeout,\n      true,\n    );\n\n    switch (storageLocation) {\n      case TokenStorageLocation.SecureStorage: {\n        // Secure storage implementations have variable length limitations (Windows), so we cannot\n        // store the access token directly. Instead, we encrypt with accessTokenKey and store that\n        // in secure storage.\n\n        const encryptedAccessToken: EncString = await this.encryptAccessToken(accessToken, userId);\n\n        // Save the encrypted access token to disk\n        await this.singleUserStateProvider\n          .get(userId, ACCESS_TOKEN_DISK)\n          .update((_) => encryptedAccessToken.encryptedString);\n\n        // TODO: PM-6408 - https://bitwarden.atlassian.net/browse/PM-6408\n        // 2024-02-20: Remove access token from memory so that we migrate to encrypt the access token over time.\n        // Remove this call to remove the access token from memory after 3 releases.\n        await this.singleUserStateProvider.get(userId, ACCESS_TOKEN_MEMORY).update((_) => null);\n\n        return;\n      }\n      case TokenStorageLocation.Disk:\n        // Access token stored on disk unencrypted as platform does not support secure storage\n        await this.singleUserStateProvider\n          .get(userId, ACCESS_TOKEN_DISK)\n          .update((_) => accessToken);\n        return;\n      case TokenStorageLocation.Memory:\n        // Access token stored in memory due to vault timeout settings\n        await this.singleUserStateProvider\n          .get(userId, ACCESS_TOKEN_MEMORY)\n          .update((_) => accessToken);\n        return;\n    }\n  }\n\n  async setAccessToken(\n    accessToken: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n  ): Promise<void> {\n    if (!accessToken) {\n      throw new Error(\"Access token is required.\");\n    }\n    const userId: UserId = await this.getUserIdFromAccessToken(accessToken);\n\n    // If we don't have a user id, we can't save the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot save access token.\");\n    }\n\n    await this._setAccessToken(accessToken, vaultTimeoutAction, vaultTimeout, userId);\n  }\n\n  async clearAccessToken(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    // If we don't have a user id, we can't clear the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot clear access token.\");\n    }\n\n    // TODO: re-eval this implementation once we get shared key definitions for vault timeout and vault timeout action data.\n    // we can't determine storage location w/out vaultTimeoutAction and vaultTimeout\n    // but we can simply clear all locations to avoid the need to require those parameters.\n\n    if (this.platformSupportsSecureStorage) {\n      // Always clear the access token key when clearing the access token\n      // The next set of the access token will create a new access token key\n      await this.clearAccessTokenKey(userId);\n    }\n\n    // Platform doesn't support secure storage, so use state provider implementation\n    await this.singleUserStateProvider.get(userId, ACCESS_TOKEN_DISK).update((_) => null);\n    await this.singleUserStateProvider.get(userId, ACCESS_TOKEN_MEMORY).update((_) => null);\n  }\n\n  async getAccessToken(userId?: UserId): Promise<string | undefined> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      return undefined;\n    }\n\n    // Try to get the access token from memory\n    const accessTokenMemory = await this.getStateValueByUserIdAndKeyDef(\n      userId,\n      ACCESS_TOKEN_MEMORY,\n    );\n    if (accessTokenMemory != null) {\n      return accessTokenMemory;\n    }\n\n    // If memory is null, read from disk\n    const accessTokenDisk = await this.getStateValueByUserIdAndKeyDef(userId, ACCESS_TOKEN_DISK);\n    if (!accessTokenDisk) {\n      return null;\n    }\n\n    if (this.platformSupportsSecureStorage) {\n      const accessTokenKey = await this.getAccessTokenKey(userId);\n\n      if (!accessTokenKey) {\n        // We know this is an unencrypted access token because we don't have an access token key\n        return accessTokenDisk;\n      }\n\n      try {\n        const encryptedAccessTokenEncString = new EncString(accessTokenDisk as EncryptedString);\n\n        const decryptedAccessToken = await this.decryptAccessToken(\n          encryptedAccessTokenEncString,\n          userId,\n        );\n        return decryptedAccessToken;\n      } catch (error) {\n        // If an error occurs during decryption, return null for logout.\n        // We don't try to recover here since we'd like to know\n        // if access token and key are getting out of sync.\n        this.logService.error(\n          `Failed to decrypt access token: ${error?.message ?? \"Unknown error.\"}`,\n        );\n        return null;\n      }\n    }\n    return accessTokenDisk;\n  }\n\n  // Private because we only ever set the refresh token when also setting the access token\n  // and we need the user id from the access token to save to secure storage\n  private async setRefreshToken(\n    refreshToken: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n    userId: UserId,\n  ): Promise<void> {\n    // If we don't have a user id, we can't save the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot save refresh token.\");\n    }\n\n    const storageLocation = await this.determineStorageLocation(\n      vaultTimeoutAction,\n      vaultTimeout,\n      true,\n    );\n\n    switch (storageLocation) {\n      case TokenStorageLocation.SecureStorage:\n        await this.saveStringToSecureStorage(\n          userId,\n          this.refreshTokenSecureStorageKey,\n          refreshToken,\n        );\n\n        // TODO: PM-6408 - https://bitwarden.atlassian.net/browse/PM-6408\n        // 2024-02-20: Remove refresh token from memory and disk so that we migrate to secure storage over time.\n        // Remove these 2 calls to remove the refresh token from memory and disk after 3 releases.\n        await this.singleUserStateProvider.get(userId, REFRESH_TOKEN_DISK).update((_) => null);\n        await this.singleUserStateProvider.get(userId, REFRESH_TOKEN_MEMORY).update((_) => null);\n\n        // Set flag to indicate that the refresh token has been migrated to secure storage (don't remove this)\n        await this.setRefreshTokenMigratedToSecureStorage(userId);\n\n        return;\n\n      case TokenStorageLocation.Disk:\n        await this.singleUserStateProvider\n          .get(userId, REFRESH_TOKEN_DISK)\n          .update((_) => refreshToken);\n        return;\n\n      case TokenStorageLocation.Memory:\n        await this.singleUserStateProvider\n          .get(userId, REFRESH_TOKEN_MEMORY)\n          .update((_) => refreshToken);\n        return;\n    }\n  }\n\n  async getRefreshToken(userId?: UserId): Promise<string | undefined> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      return undefined;\n    }\n\n    const refreshTokenMigratedToSecureStorage =\n      await this.getRefreshTokenMigratedToSecureStorage(userId);\n    if (this.platformSupportsSecureStorage && refreshTokenMigratedToSecureStorage) {\n      return await this.getStringFromSecureStorage(userId, this.refreshTokenSecureStorageKey);\n    }\n\n    // pre-secure storage migration:\n    // Always read memory first b/c faster\n    const refreshTokenMemory = await this.getStateValueByUserIdAndKeyDef(\n      userId,\n      REFRESH_TOKEN_MEMORY,\n    );\n\n    if (refreshTokenMemory != null) {\n      return refreshTokenMemory;\n    }\n\n    // if memory is null, read from disk\n    const refreshTokenDisk = await this.getStateValueByUserIdAndKeyDef(userId, REFRESH_TOKEN_DISK);\n\n    if (refreshTokenDisk != null) {\n      return refreshTokenDisk;\n    }\n\n    return null;\n  }\n\n  private async clearRefreshToken(userId: UserId): Promise<void> {\n    // If we don't have a user id, we can't clear the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot clear refresh token.\");\n    }\n\n    // TODO: re-eval this once we get shared key definitions for vault timeout and vault timeout action data.\n    // we can't determine storage location w/out vaultTimeoutAction and vaultTimeout\n    // but we can simply clear all locations to avoid the need to require those parameters\n\n    if (this.platformSupportsSecureStorage) {\n      await this.secureStorageService.remove(\n        `${userId}${this.refreshTokenSecureStorageKey}`,\n        this.getSecureStorageOptions(userId),\n      );\n    }\n\n    // Platform doesn't support secure storage, so use state provider implementation\n    await this.singleUserStateProvider.get(userId, REFRESH_TOKEN_MEMORY).update((_) => null);\n    await this.singleUserStateProvider.get(userId, REFRESH_TOKEN_DISK).update((_) => null);\n  }\n\n  private async getRefreshTokenMigratedToSecureStorage(userId: UserId): Promise<boolean> {\n    return await firstValueFrom(\n      this.singleUserStateProvider.get(userId, REFRESH_TOKEN_MIGRATED_TO_SECURE_STORAGE).state$,\n    );\n  }\n\n  private async setRefreshTokenMigratedToSecureStorage(userId: UserId): Promise<void> {\n    await this.singleUserStateProvider\n      .get(userId, REFRESH_TOKEN_MIGRATED_TO_SECURE_STORAGE)\n      .update((_) => true);\n  }\n\n  async setClientId(\n    clientId: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n    userId?: UserId,\n  ): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    // If we don't have a user id, we can't save the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot save client id.\");\n    }\n\n    const storageLocation = await this.determineStorageLocation(\n      vaultTimeoutAction,\n      vaultTimeout,\n      false, // don't use secure storage for client id\n    );\n\n    if (storageLocation === TokenStorageLocation.Disk) {\n      await this.singleUserStateProvider\n        .get(userId, API_KEY_CLIENT_ID_DISK)\n        .update((_) => clientId);\n    } else if (storageLocation === TokenStorageLocation.Memory) {\n      await this.singleUserStateProvider\n        .get(userId, API_KEY_CLIENT_ID_MEMORY)\n        .update((_) => clientId);\n    }\n  }\n\n  async getClientId(userId?: UserId): Promise<string | undefined> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      return undefined;\n    }\n\n    // Always read memory first b/c faster\n    const apiKeyClientIdMemory = await this.getStateValueByUserIdAndKeyDef(\n      userId,\n      API_KEY_CLIENT_ID_MEMORY,\n    );\n\n    if (apiKeyClientIdMemory != null) {\n      return apiKeyClientIdMemory;\n    }\n\n    // if memory is null, read from disk\n    return await this.getStateValueByUserIdAndKeyDef(userId, API_KEY_CLIENT_ID_DISK);\n  }\n\n  private async clearClientId(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    // If we don't have a user id, we can't clear the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot clear client id.\");\n    }\n\n    // TODO: re-eval this once we get shared key definitions for vault timeout and vault timeout action data.\n    // we can't determine storage location w/out vaultTimeoutAction and vaultTimeout\n    // but we can simply clear both locations to avoid the need to require those parameters\n\n    // Platform doesn't support secure storage, so use state provider implementation\n    await this.singleUserStateProvider.get(userId, API_KEY_CLIENT_ID_MEMORY).update((_) => null);\n    await this.singleUserStateProvider.get(userId, API_KEY_CLIENT_ID_DISK).update((_) => null);\n  }\n\n  async setClientSecret(\n    clientSecret: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n    userId?: UserId,\n  ): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot save client secret.\");\n    }\n\n    const storageLocation = await this.determineStorageLocation(\n      vaultTimeoutAction,\n      vaultTimeout,\n      false, // don't use secure storage for client secret\n    );\n\n    if (storageLocation === TokenStorageLocation.Disk) {\n      await this.singleUserStateProvider\n        .get(userId, API_KEY_CLIENT_SECRET_DISK)\n        .update((_) => clientSecret);\n    } else if (storageLocation === TokenStorageLocation.Memory) {\n      await this.singleUserStateProvider\n        .get(userId, API_KEY_CLIENT_SECRET_MEMORY)\n        .update((_) => clientSecret);\n    }\n  }\n\n  async getClientSecret(userId?: UserId): Promise<string | undefined> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      return undefined;\n    }\n\n    // Always read memory first b/c faster\n    const apiKeyClientSecretMemory = await this.getStateValueByUserIdAndKeyDef(\n      userId,\n      API_KEY_CLIENT_SECRET_MEMORY,\n    );\n\n    if (apiKeyClientSecretMemory != null) {\n      return apiKeyClientSecretMemory;\n    }\n\n    // if memory is null, read from disk\n    return await this.getStateValueByUserIdAndKeyDef(userId, API_KEY_CLIENT_SECRET_DISK);\n  }\n\n  private async clearClientSecret(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    // If we don't have a user id, we can't clear the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot clear client secret.\");\n    }\n\n    // TODO: re-eval this once we get shared key definitions for vault timeout and vault timeout action data.\n    // we can't determine storage location w/out vaultTimeoutAction and vaultTimeout\n    // but we can simply clear both locations to avoid the need to require those parameters\n\n    // Platform doesn't support secure storage, so use state provider implementation\n    await this.singleUserStateProvider\n      .get(userId, API_KEY_CLIENT_SECRET_MEMORY)\n      .update((_) => null);\n    await this.singleUserStateProvider.get(userId, API_KEY_CLIENT_SECRET_DISK).update((_) => null);\n  }\n\n  async setTwoFactorToken(email: string, twoFactorToken: string): Promise<void> {\n    await this.emailTwoFactorTokenRecordGlobalState.update((emailTwoFactorTokenRecord) => {\n      emailTwoFactorTokenRecord ??= {};\n\n      emailTwoFactorTokenRecord[email] = twoFactorToken;\n      return emailTwoFactorTokenRecord;\n    });\n  }\n\n  async getTwoFactorToken(email: string): Promise<string | null> {\n    const emailTwoFactorTokenRecord: Record<string, string> = await firstValueFrom(\n      this.emailTwoFactorTokenRecordGlobalState.state$,\n    );\n\n    if (!emailTwoFactorTokenRecord) {\n      return null;\n    }\n\n    return emailTwoFactorTokenRecord[email];\n  }\n\n  async clearTwoFactorToken(email: string): Promise<void> {\n    await this.emailTwoFactorTokenRecordGlobalState.update((emailTwoFactorTokenRecord) => {\n      emailTwoFactorTokenRecord ??= {};\n      delete emailTwoFactorTokenRecord[email];\n      return emailTwoFactorTokenRecord;\n    });\n  }\n\n  // TODO: stop accepting optional userIds\n  async clearTokens(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot clear tokens.\");\n    }\n\n    await Promise.all([\n      this.clearAccessToken(userId),\n      this.clearRefreshToken(userId),\n      this.clearClientId(userId),\n      this.clearClientSecret(userId),\n    ]);\n  }\n\n  // jwthelper methods\n  // ref https://github.com/auth0/angular-jwt/blob/master/src/angularJwt/services/jwt.js\n\n  async decodeAccessToken(token?: string): Promise<DecodedAccessToken> {\n    token = token ?? (await this.getAccessToken());\n\n    if (token == null) {\n      throw new Error(\"Access token not found.\");\n    }\n\n    return decodeJwtTokenToJson(token) as DecodedAccessToken;\n  }\n\n  // TODO: PM-6678- tech debt - consider consolidating the return types of all these access\n  // token data retrieval methods to return null if something goes wrong instead of throwing an error.\n\n  async getTokenExpirationDate(): Promise<Date | null> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    // per RFC, exp claim is optional but if it exists, it should be a number\n    if (!decoded || typeof decoded.exp !== \"number\") {\n      return null;\n    }\n\n    // The 0 in Date(0) is the key; it sets the date to the epoch\n    const expirationDate = new Date(0);\n    expirationDate.setUTCSeconds(decoded.exp);\n    return expirationDate;\n  }\n\n  async tokenSecondsRemaining(offsetSeconds = 0): Promise<number> {\n    const date = await this.getTokenExpirationDate();\n    if (date == null) {\n      return 0;\n    }\n\n    const msRemaining = date.valueOf() - (new Date().valueOf() + offsetSeconds * 1000);\n    return Math.round(msRemaining / 1000);\n  }\n\n  async tokenNeedsRefresh(minutes = 5): Promise<boolean> {\n    const sRemaining = await this.tokenSecondsRemaining();\n    return sRemaining < 60 * minutes;\n  }\n\n  async getUserId(): Promise<UserId> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.sub !== \"string\") {\n      throw new Error(\"No user id found\");\n    }\n\n    return decoded.sub as UserId;\n  }\n\n  private async getUserIdFromAccessToken(accessToken: string): Promise<UserId> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken(accessToken);\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.sub !== \"string\") {\n      throw new Error(\"No user id found\");\n    }\n\n    return decoded.sub as UserId;\n  }\n\n  async getEmail(): Promise<string> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.email !== \"string\") {\n      throw new Error(\"No email found\");\n    }\n\n    return decoded.email;\n  }\n\n  async getEmailVerified(): Promise<boolean> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.email_verified !== \"boolean\") {\n      throw new Error(\"No email verification found\");\n    }\n\n    return decoded.email_verified;\n  }\n\n  async getName(): Promise<string> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.name !== \"string\") {\n      return null;\n    }\n\n    return decoded.name;\n  }\n\n  async getIssuer(): Promise<string> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.iss !== \"string\") {\n      throw new Error(\"No issuer found\");\n    }\n\n    return decoded.iss;\n  }\n\n  async getIsExternal(): Promise<boolean> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    return Array.isArray(decoded.amr) && decoded.amr.includes(\"external\");\n  }\n\n  private async getStateValueByUserIdAndKeyDef(\n    userId: UserId,\n    storageLocation: KeyDefinition<string>,\n  ): Promise<string | undefined> {\n    // read from single user state provider\n    return await firstValueFrom(this.singleUserStateProvider.get(userId, storageLocation).state$);\n  }\n\n  private async determineStorageLocation(\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n    useSecureStorage: boolean,\n  ): Promise<TokenStorageLocation> {\n    if (vaultTimeoutAction === VaultTimeoutAction.LogOut && vaultTimeout != null) {\n      return TokenStorageLocation.Memory;\n    } else {\n      if (useSecureStorage && this.platformSupportsSecureStorage) {\n        return TokenStorageLocation.SecureStorage;\n      }\n\n      return TokenStorageLocation.Disk;\n    }\n  }\n\n  private async saveStringToSecureStorage(\n    userId: UserId,\n    storageKey: string,\n    value: string,\n  ): Promise<void> {\n    await this.secureStorageService.save<string>(\n      `${userId}${storageKey}`,\n      value,\n      this.getSecureStorageOptions(userId),\n    );\n  }\n\n  private async getStringFromSecureStorage(\n    userId: UserId,\n    storageKey: string,\n  ): Promise<string | null> {\n    // If we have a user ID, read from secure storage.\n    return await this.secureStorageService.get<string>(\n      `${userId}${storageKey}`,\n      this.getSecureStorageOptions(userId),\n    );\n  }\n\n  private getSecureStorageOptions(userId: UserId): StorageOptions {\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId: userId,\n    };\n  }\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nexport function decodeJwtTokenToJson(jwtToken: string): any {\n  if (jwtToken == null) {\n    throw new Error(\"JWT token not found\");\n  }\n\n  const parts = jwtToken.split(\".\");\n  if (parts.length !== 3) {\n    throw new Error(\"JWT must have 3 parts\");\n  }\n\n  // JWT has 3 parts: header, payload, signature separated by '.'\n  // So, grab the payload to decode\n  const encodedPayload = parts[1];\n\n  let decodedPayloadJSON: string;\n  try {\n    // Attempt to decode from URL-safe Base64 to UTF-8\n    decodedPayloadJSON = Utils.fromUrlB64ToUtf8(encodedPayload);\n  } catch (decodingError) {\n    throw new Error(\"Cannot decode the token\");\n  }\n\n  try {\n    // Attempt to parse the JSON payload\n    const decodedToken = JSON.parse(decodedPayloadJSON);\n    return decodedToken;\n  } catch (jsonError) {\n    throw new Error(\"Cannot parse the token's payload into JSON\");\n  }\n}\n","import { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport {\n  TwoFactorProviderDetails,\n  TwoFactorService as TwoFactorServiceAbstraction,\n} from \"../abstractions/two-factor.service\";\nimport { TwoFactorProviderType } from \"../enums/two-factor-provider-type\";\nimport { IdentityTwoFactorResponse } from \"../models/response/identity-two-factor.response\";\n\nexport const TwoFactorProviders: Partial<Record<TwoFactorProviderType, TwoFactorProviderDetails>> =\n  {\n    [TwoFactorProviderType.Authenticator]: {\n      type: TwoFactorProviderType.Authenticator,\n      name: null as string,\n      description: null as string,\n      priority: 1,\n      sort: 1,\n      premium: false,\n    },\n    [TwoFactorProviderType.Yubikey]: {\n      type: TwoFactorProviderType.Yubikey,\n      name: null as string,\n      description: null as string,\n      priority: 3,\n      sort: 2,\n      premium: true,\n    },\n    [TwoFactorProviderType.Duo]: {\n      type: TwoFactorProviderType.Duo,\n      name: \"Duo\",\n      description: null as string,\n      priority: 2,\n      sort: 3,\n      premium: true,\n    },\n    [TwoFactorProviderType.OrganizationDuo]: {\n      type: TwoFactorProviderType.OrganizationDuo,\n      name: \"Duo (Organization)\",\n      description: null as string,\n      priority: 10,\n      sort: 4,\n      premium: false,\n    },\n    [TwoFactorProviderType.Email]: {\n      type: TwoFactorProviderType.Email,\n      name: null as string,\n      description: null as string,\n      priority: 0,\n      sort: 6,\n      premium: false,\n    },\n    [TwoFactorProviderType.WebAuthn]: {\n      type: TwoFactorProviderType.WebAuthn,\n      name: null as string,\n      description: null as string,\n      priority: 4,\n      sort: 5,\n      premium: false,\n    },\n  };\n\nexport class TwoFactorService implements TwoFactorServiceAbstraction {\n  private twoFactorProvidersData: Map<TwoFactorProviderType, { [key: string]: string }>;\n  private selectedTwoFactorProviderType: TwoFactorProviderType = null;\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n  ) {}\n\n  init() {\n    TwoFactorProviders[TwoFactorProviderType.Email].name = this.i18nService.t(\"emailTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Email].description = this.i18nService.t(\"emailDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].name =\n      this.i18nService.t(\"authenticatorAppTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Authenticator].description =\n      this.i18nService.t(\"authenticatorAppDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Duo].description = this.i18nService.t(\"duoDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].name =\n      \"Duo (\" + this.i18nService.t(\"organization\") + \")\";\n    TwoFactorProviders[TwoFactorProviderType.OrganizationDuo].description =\n      this.i18nService.t(\"duoOrganizationDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].name = this.i18nService.t(\"webAuthnTitle\");\n    TwoFactorProviders[TwoFactorProviderType.WebAuthn].description =\n      this.i18nService.t(\"webAuthnDesc\");\n\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].name = this.i18nService.t(\"yubiKeyTitle\");\n    TwoFactorProviders[TwoFactorProviderType.Yubikey].description =\n      this.i18nService.t(\"yubiKeyDesc\");\n  }\n\n  getSupportedProviders(win: Window): TwoFactorProviderDetails[] {\n    const providers: any[] = [];\n    if (this.twoFactorProvidersData == null) {\n      return providers;\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.OrganizationDuo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.OrganizationDuo]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Authenticator)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Authenticator]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Yubikey)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Yubikey]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.Duo) &&\n      this.platformUtilsService.supportsDuo()\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Duo]);\n    }\n\n    if (\n      this.twoFactorProvidersData.has(TwoFactorProviderType.WebAuthn) &&\n      this.platformUtilsService.supportsWebAuthn(win)\n    ) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.WebAuthn]);\n    }\n\n    if (this.twoFactorProvidersData.has(TwoFactorProviderType.Email)) {\n      providers.push(TwoFactorProviders[TwoFactorProviderType.Email]);\n    }\n\n    return providers;\n  }\n\n  getDefaultProvider(webAuthnSupported: boolean): TwoFactorProviderType {\n    if (this.twoFactorProvidersData == null) {\n      return null;\n    }\n\n    if (\n      this.selectedTwoFactorProviderType != null &&\n      this.twoFactorProvidersData.has(this.selectedTwoFactorProviderType)\n    ) {\n      return this.selectedTwoFactorProviderType;\n    }\n\n    let providerType: TwoFactorProviderType = null;\n    let providerPriority = -1;\n    this.twoFactorProvidersData.forEach((_value, type) => {\n      const provider = (TwoFactorProviders as any)[type];\n      if (provider != null && provider.priority > providerPriority) {\n        if (type === TwoFactorProviderType.WebAuthn && !webAuthnSupported) {\n          return;\n        }\n\n        providerType = type;\n        providerPriority = provider.priority;\n      }\n    });\n\n    return providerType;\n  }\n\n  setSelectedProvider(type: TwoFactorProviderType) {\n    this.selectedTwoFactorProviderType = type;\n  }\n\n  clearSelectedProvider() {\n    this.selectedTwoFactorProviderType = null;\n  }\n\n  setProviders(response: IdentityTwoFactorResponse) {\n    this.twoFactorProvidersData = response.twoFactorProviders2;\n  }\n\n  clearProviders() {\n    this.twoFactorProvidersData = null;\n  }\n\n  getProviders() {\n    return this.twoFactorProvidersData;\n  }\n}\n","export enum VerificationType {\n  MasterPassword = 0,\n  OTP = 1,\n  PIN = 2,\n  Biometrics = 3,\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { UserVerificationApiServiceAbstraction } from \"../../abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { VerifyOTPRequest } from \"../../models/request/verify-otp.request\";\n\nexport class UserVerificationApiService implements UserVerificationApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  postAccountVerifyOTP(request: VerifyOTPRequest): Promise<void> {\n    return this.apiService.send(\"POST\", \"/accounts/verify-otp\", request, true, false);\n  }\n  async postAccountRequestOTP(): Promise<void> {\n    return this.apiService.send(\"POST\", \"/accounts/request-otp\", null, true, false);\n  }\n}\n","export class VerifyOTPRequest {\n  OTP: string;\n\n  constructor(OTP: string) {\n    this.OTP = OTP;\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { UserDecryptionOptionsServiceAbstraction } from \"@bitwarden/auth/common\";\n\nimport { PinCryptoServiceAbstraction } from \"../../../../../auth/src/common/abstractions/pin-crypto.service.abstraction\";\nimport { VaultTimeoutSettingsService as VaultTimeoutSettingsServiceAbstraction } from \"../../../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { LogService } from \"../../../platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"../../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { KeySuffixOptions } from \"../../../platform/enums/key-suffix-options.enum\";\nimport { UserKey } from \"../../../types/key\";\nimport { UserVerificationApiServiceAbstraction } from \"../../abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"../../abstractions/user-verification/user-verification.service.abstraction\";\nimport { VerificationType } from \"../../enums/verification-type\";\nimport { SecretVerificationRequest } from \"../../models/request/secret-verification.request\";\nimport { VerifyOTPRequest } from \"../../models/request/verify-otp.request\";\nimport { UserVerificationOptions } from \"../../types/user-verification-options\";\nimport {\n  MasterPasswordVerification,\n  OtpVerification,\n  PinVerification,\n  ServerSideVerification,\n  Verification,\n  VerificationWithSecret,\n  verificationHasSecret,\n} from \"../../types/verification\";\n\n/**\n * Used for general-purpose user verification throughout the app.\n * Use it to verify the input collected by UserVerificationComponent.\n */\nexport class UserVerificationService implements UserVerificationServiceAbstraction {\n  constructor(\n    private stateService: StateService,\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private userVerificationApiService: UserVerificationApiServiceAbstraction,\n    private userDecryptionOptionsService: UserDecryptionOptionsServiceAbstraction,\n    private pinCryptoService: PinCryptoServiceAbstraction,\n    private logService: LogService,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n  ) {}\n\n  async getAvailableVerificationOptions(\n    verificationType: keyof UserVerificationOptions,\n  ): Promise<UserVerificationOptions> {\n    if (verificationType === \"client\") {\n      const [userHasMasterPassword, pinLockType, biometricsLockSet, biometricsUserKeyStored] =\n        await Promise.all([\n          this.hasMasterPasswordAndMasterKeyHash(),\n          this.vaultTimeoutSettingsService.isPinLockSet(),\n          this.vaultTimeoutSettingsService.isBiometricLockSet(),\n          this.cryptoService.hasUserKeyStored(KeySuffixOptions.Biometric),\n        ]);\n\n      // note: we do not need to check this.platformUtilsService.supportsBiometric() because\n      // we can just use the logic below which works for both desktop & the browser extension.\n\n      return {\n        client: {\n          masterPassword: userHasMasterPassword,\n          pin: pinLockType !== \"DISABLED\",\n          biometrics:\n            biometricsLockSet &&\n            (biometricsUserKeyStored || !this.platformUtilsService.supportsSecureStorage()),\n        },\n        server: {\n          masterPassword: false,\n          otp: false,\n        },\n      };\n    } else {\n      // server\n      // Don't check if have MP hash locally, because we are going to send the secret to the server to be verified.\n      const userHasMasterPassword = await this.hasMasterPassword();\n\n      return {\n        client: {\n          masterPassword: false,\n          pin: false,\n          biometrics: false,\n        },\n        server: { masterPassword: userHasMasterPassword, otp: !userHasMasterPassword },\n      };\n    }\n  }\n\n  /**\n   * Create a new request model to be used for server-side verification\n   * @param verification User-supplied verification data (Master Password or OTP)\n   * @param requestClass The request model to create\n   * @param alreadyHashed Whether the master password is already hashed\n   */\n  async buildRequest<T extends SecretVerificationRequest>(\n    verification: ServerSideVerification,\n    requestClass?: new () => T,\n    alreadyHashed?: boolean,\n  ) {\n    this.validateSecretInput(verification);\n\n    const request =\n      requestClass != null ? new requestClass() : (new SecretVerificationRequest() as T);\n\n    if (verification.type === VerificationType.OTP) {\n      request.otp = verification.secret;\n    } else {\n      let masterKey = await this.cryptoService.getMasterKey();\n      if (!masterKey && !alreadyHashed) {\n        masterKey = await this.cryptoService.makeMasterKey(\n          verification.secret,\n          await this.stateService.getEmail(),\n          await this.stateService.getKdfType(),\n          await this.stateService.getKdfConfig(),\n        );\n      }\n      request.masterPasswordHash = alreadyHashed\n        ? verification.secret\n        : await this.cryptoService.hashMasterKey(verification.secret, masterKey);\n    }\n\n    return request;\n  }\n\n  /**\n   * Used to verify Master Password, PIN, or biometrics client-side, or send the OTP to the server for verification (with no other data)\n   * Generally used for client-side verification only.\n   * @param verification User-supplied verification data (OTP, MP, PIN, or biometrics)\n   */\n  async verifyUser(verification: Verification): Promise<boolean> {\n    if (verificationHasSecret(verification)) {\n      this.validateSecretInput(verification);\n    }\n\n    switch (verification.type) {\n      case VerificationType.OTP:\n        return this.verifyUserByOTP(verification);\n      case VerificationType.MasterPassword:\n        return this.verifyUserByMasterPassword(verification);\n      case VerificationType.PIN:\n        return this.verifyUserByPIN(verification);\n      case VerificationType.Biometrics:\n        return this.verifyUserByBiometrics();\n      default: {\n        // Compile-time check for exhaustive switch\n        const _exhaustiveCheck: never = verification;\n        return _exhaustiveCheck;\n      }\n    }\n  }\n\n  private async verifyUserByOTP(verification: OtpVerification): Promise<boolean> {\n    const request = new VerifyOTPRequest(verification.secret);\n    try {\n      await this.userVerificationApiService.postAccountVerifyOTP(request);\n    } catch (e) {\n      throw new Error(this.i18nService.t(\"invalidVerificationCode\"));\n    }\n    return true;\n  }\n\n  private async verifyUserByMasterPassword(\n    verification: MasterPasswordVerification,\n  ): Promise<boolean> {\n    let masterKey = await this.cryptoService.getMasterKey();\n    if (!masterKey) {\n      masterKey = await this.cryptoService.makeMasterKey(\n        verification.secret,\n        await this.stateService.getEmail(),\n        await this.stateService.getKdfType(),\n        await this.stateService.getKdfConfig(),\n      );\n    }\n    const passwordValid = await this.cryptoService.compareAndUpdateKeyHash(\n      verification.secret,\n      masterKey,\n    );\n    if (!passwordValid) {\n      throw new Error(this.i18nService.t(\"invalidMasterPassword\"));\n    }\n    // TODO: we should re-evaluate later on if user verification should have the side effect of modifying state. Probably not.\n    await this.cryptoService.setMasterKey(masterKey);\n    return true;\n  }\n\n  private async verifyUserByPIN(verification: PinVerification): Promise<boolean> {\n    const userKey = await this.pinCryptoService.decryptUserKeyWithPin(verification.secret);\n\n    return userKey != null;\n  }\n\n  private async verifyUserByBiometrics(): Promise<boolean> {\n    let userKey: UserKey;\n    // Biometrics crashes and doesn't return a value if the user cancels the prompt\n    try {\n      userKey = await this.cryptoService.getUserKeyFromStorage(KeySuffixOptions.Biometric);\n    } catch (e) {\n      this.logService.error(`Biometrics User Verification failed: ${e.message}`);\n      // So, any failures should be treated as a failed verification\n      return false;\n    }\n\n    return userKey != null;\n  }\n\n  async requestOTP() {\n    await this.userVerificationApiService.postAccountRequestOTP();\n  }\n\n  /**\n   * Check if user has master password or can only use passwordless technologies to log in\n   * Note: This only checks the server, not the local state\n   * @param userId The user id to check. If not provided, the current user is used\n   * @returns True if the user has a master password\n   * @deprecated Use UserDecryptionOptionsService.hasMasterPassword$ instead\n   */\n  async hasMasterPassword(userId?: string): Promise<boolean> {\n    if (userId) {\n      const decryptionOptions = await firstValueFrom(\n        this.userDecryptionOptionsService.userDecryptionOptionsById$(userId),\n      );\n\n      if (decryptionOptions?.hasMasterPassword != undefined) {\n        return decryptionOptions.hasMasterPassword;\n      }\n    }\n    return await firstValueFrom(this.userDecryptionOptionsService.hasMasterPassword$);\n  }\n\n  async hasMasterPasswordAndMasterKeyHash(userId?: string): Promise<boolean> {\n    return (\n      (await this.hasMasterPassword(userId)) &&\n      (await this.cryptoService.getMasterKeyHash()) != null\n    );\n  }\n\n  private validateSecretInput(verification: VerificationWithSecret) {\n    if (verification?.secret == null || verification.secret === \"\") {\n      switch (verification.type) {\n        case VerificationType.OTP:\n          throw new Error(this.i18nService.t(\"verificationCodeRequired\"));\n        case VerificationType.MasterPassword:\n          throw new Error(this.i18nService.t(\"masterPasswordRequired\"));\n        case VerificationType.PIN:\n          throw new Error(this.i18nService.t(\"pinRequired\"));\n      }\n    }\n  }\n}\n","import { VerificationType } from \"../enums/verification-type\";\n\nexport type OtpVerification = { type: VerificationType.OTP; secret: string };\nexport type MasterPasswordVerification = { type: VerificationType.MasterPassword; secret: string };\nexport type PinVerification = { type: VerificationType.PIN; secret: string };\nexport type BiometricsVerification = { type: VerificationType.Biometrics };\n\nexport type VerificationWithSecret = OtpVerification | MasterPasswordVerification | PinVerification;\nexport type VerificationWithoutSecret = BiometricsVerification;\n\nexport type Verification = VerificationWithSecret | VerificationWithoutSecret;\n\nexport function verificationHasSecret(\n  verification: Verification,\n): verification is VerificationWithSecret {\n  return \"secret\" in verification;\n}\n\nexport type ServerSideVerification = OtpVerification | MasterPasswordVerification;\n","export const TYPE_CHECK = {\n  FUNCTION: \"function\",\n  NUMBER: \"number\",\n  STRING: \"string\",\n} as const;\n\nexport const EVENTS = {\n  CHANGE: \"change\",\n  INPUT: \"input\",\n  KEYDOWN: \"keydown\",\n  KEYPRESS: \"keypress\",\n  KEYUP: \"keyup\",\n  BLUR: \"blur\",\n  CLICK: \"click\",\n  FOCUS: \"focus\",\n  SCROLL: \"scroll\",\n  RESIZE: \"resize\",\n  DOMCONTENTLOADED: \"DOMContentLoaded\",\n  LOAD: \"load\",\n  MESSAGE: \"message\",\n  VISIBILITYCHANGE: \"visibilitychange\",\n  FOCUSOUT: \"focusout\",\n} as const;\n\nexport const ClearClipboardDelay = {\n  Never: null as null,\n  TenSeconds: 10,\n  TwentySeconds: 20,\n  ThirtySeconds: 30,\n  OneMinute: 60,\n  TwoMinutes: 120,\n  FiveMinutes: 300,\n} as const;\n\n/* Context Menu item Ids */\nexport const AUTOFILL_CARD_ID = \"autofill-card\";\nexport const AUTOFILL_ID = \"autofill\";\nexport const SHOW_AUTOFILL_BUTTON = \"show-autofill-button\";\nexport const AUTOFILL_IDENTITY_ID = \"autofill-identity\";\nexport const COPY_IDENTIFIER_ID = \"copy-identifier\";\nexport const COPY_PASSWORD_ID = \"copy-password\";\nexport const COPY_USERNAME_ID = \"copy-username\";\nexport const COPY_VERIFICATION_CODE_ID = \"copy-totp\";\nexport const CREATE_CARD_ID = \"create-card\";\nexport const CREATE_IDENTITY_ID = \"create-identity\";\nexport const CREATE_LOGIN_ID = \"create-login\";\nexport const GENERATE_PASSWORD_ID = \"generate-password\";\nexport const NOOP_COMMAND_SUFFIX = \"noop\";\nexport const ROOT_ID = \"root\";\nexport const SEPARATOR_ID = \"separator\";\n\nexport const NOTIFICATION_BAR_LIFESPAN_MS = 150000; // 150 seconds\n\nexport const AutofillOverlayVisibility = {\n  Off: 0,\n  OnButtonClick: 1,\n  OnFieldFocus: 2,\n} as const;\n","import { map, Observable } from \"rxjs\";\n\nimport { PolicyService } from \"../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"../../admin-console/enums\";\nimport {\n  AUTOFILL_SETTINGS_DISK,\n  AUTOFILL_SETTINGS_DISK_LOCAL,\n  ActiveUserState,\n  GlobalState,\n  KeyDefinition,\n  StateProvider,\n} from \"../../platform/state\";\nimport { ClearClipboardDelay, AutofillOverlayVisibility } from \"../constants\";\nimport { ClearClipboardDelaySetting, InlineMenuVisibilitySetting } from \"../types\";\n\nconst AUTOFILL_ON_PAGE_LOAD = new KeyDefinition(AUTOFILL_SETTINGS_DISK, \"autofillOnPageLoad\", {\n  deserializer: (value: boolean) => value ?? false,\n});\n\nconst AUTOFILL_ON_PAGE_LOAD_DEFAULT = new KeyDefinition(\n  AUTOFILL_SETTINGS_DISK,\n  \"autofillOnPageLoadDefault\",\n  {\n    deserializer: (value: boolean) => value ?? false,\n  },\n);\n\nconst AUTOFILL_ON_PAGE_LOAD_CALLOUT_DISMISSED = new KeyDefinition(\n  AUTOFILL_SETTINGS_DISK,\n  \"autofillOnPageLoadCalloutIsDismissed\",\n  {\n    deserializer: (value: boolean) => value ?? false,\n  },\n);\n\nconst AUTOFILL_ON_PAGE_LOAD_POLICY_TOAST_HAS_DISPLAYED = new KeyDefinition(\n  AUTOFILL_SETTINGS_DISK,\n  \"autofillOnPageLoadPolicyToastHasDisplayed\",\n  {\n    deserializer: (value: boolean) => value ?? false,\n  },\n);\n\nconst AUTO_COPY_TOTP = new KeyDefinition(AUTOFILL_SETTINGS_DISK, \"autoCopyTotp\", {\n  deserializer: (value: boolean) => value ?? true,\n});\n\nconst INLINE_MENU_VISIBILITY = new KeyDefinition(\n  AUTOFILL_SETTINGS_DISK_LOCAL,\n  \"inlineMenuVisibility\",\n  {\n    deserializer: (value: InlineMenuVisibilitySetting) => value ?? AutofillOverlayVisibility.Off,\n  },\n);\n\nconst ENABLE_CONTEXT_MENU = new KeyDefinition(AUTOFILL_SETTINGS_DISK, \"enableContextMenu\", {\n  deserializer: (value: boolean) => value ?? true,\n});\n\nconst CLEAR_CLIPBOARD_DELAY = new KeyDefinition(\n  AUTOFILL_SETTINGS_DISK_LOCAL,\n  \"clearClipboardDelay\",\n  {\n    deserializer: (value: ClearClipboardDelaySetting) => value ?? ClearClipboardDelay.Never,\n  },\n);\n\nexport abstract class AutofillSettingsServiceAbstraction {\n  autofillOnPageLoad$: Observable<boolean>;\n  setAutofillOnPageLoad: (newValue: boolean) => Promise<void>;\n  autofillOnPageLoadDefault$: Observable<boolean>;\n  setAutofillOnPageLoadDefault: (newValue: boolean) => Promise<void>;\n  autofillOnPageLoadCalloutIsDismissed$: Observable<boolean>;\n  setAutofillOnPageLoadCalloutIsDismissed: (newValue: boolean) => Promise<void>;\n  activateAutofillOnPageLoadFromPolicy$: Observable<boolean>;\n  setAutofillOnPageLoadPolicyToastHasDisplayed: (newValue: boolean) => Promise<void>;\n  autofillOnPageLoadPolicyToastHasDisplayed$: Observable<boolean>;\n  autoCopyTotp$: Observable<boolean>;\n  setAutoCopyTotp: (newValue: boolean) => Promise<void>;\n  inlineMenuVisibility$: Observable<InlineMenuVisibilitySetting>;\n  setInlineMenuVisibility: (newValue: InlineMenuVisibilitySetting) => Promise<void>;\n  enableContextMenu$: Observable<boolean>;\n  setEnableContextMenu: (newValue: boolean) => Promise<void>;\n  clearClipboardDelay$: Observable<ClearClipboardDelaySetting>;\n  setClearClipboardDelay: (newValue: ClearClipboardDelaySetting) => Promise<void>;\n}\n\nexport class AutofillSettingsService implements AutofillSettingsServiceAbstraction {\n  private autofillOnPageLoadState: ActiveUserState<boolean>;\n  readonly autofillOnPageLoad$: Observable<boolean>;\n\n  private autofillOnPageLoadDefaultState: ActiveUserState<boolean>;\n  readonly autofillOnPageLoadDefault$: Observable<boolean>;\n\n  private autofillOnPageLoadCalloutIsDismissedState: ActiveUserState<boolean>;\n  readonly autofillOnPageLoadCalloutIsDismissed$: Observable<boolean>;\n\n  readonly activateAutofillOnPageLoadFromPolicy$: Observable<boolean>;\n\n  private autofillOnPageLoadPolicyToastHasDisplayedState: ActiveUserState<boolean>;\n  readonly autofillOnPageLoadPolicyToastHasDisplayed$: Observable<boolean>;\n\n  private autoCopyTotpState: ActiveUserState<boolean>;\n  readonly autoCopyTotp$: Observable<boolean>;\n\n  private inlineMenuVisibilityState: GlobalState<InlineMenuVisibilitySetting>;\n  readonly inlineMenuVisibility$: Observable<InlineMenuVisibilitySetting>;\n\n  private enableContextMenuState: GlobalState<boolean>;\n  readonly enableContextMenu$: Observable<boolean>;\n\n  private clearClipboardDelayState: ActiveUserState<ClearClipboardDelaySetting>;\n  readonly clearClipboardDelay$: Observable<ClearClipboardDelaySetting>;\n\n  constructor(\n    private stateProvider: StateProvider,\n    private policyService: PolicyService,\n  ) {\n    this.autofillOnPageLoadState = this.stateProvider.getActive(AUTOFILL_ON_PAGE_LOAD);\n    this.autofillOnPageLoad$ = this.autofillOnPageLoadState.state$.pipe(map((x) => x ?? false));\n\n    this.autofillOnPageLoadDefaultState = this.stateProvider.getActive(\n      AUTOFILL_ON_PAGE_LOAD_DEFAULT,\n    );\n    this.autofillOnPageLoadDefault$ = this.autofillOnPageLoadDefaultState.state$.pipe(\n      map((x) => x ?? true),\n    );\n\n    this.autofillOnPageLoadCalloutIsDismissedState = this.stateProvider.getActive(\n      AUTOFILL_ON_PAGE_LOAD_CALLOUT_DISMISSED,\n    );\n    this.autofillOnPageLoadCalloutIsDismissed$ =\n      this.autofillOnPageLoadCalloutIsDismissedState.state$.pipe(map((x) => x ?? false));\n\n    this.activateAutofillOnPageLoadFromPolicy$ = this.policyService.policyAppliesToActiveUser$(\n      PolicyType.ActivateAutofill,\n    );\n\n    this.autofillOnPageLoadPolicyToastHasDisplayedState = this.stateProvider.getActive(\n      AUTOFILL_ON_PAGE_LOAD_POLICY_TOAST_HAS_DISPLAYED,\n    );\n    this.autofillOnPageLoadPolicyToastHasDisplayed$ = this.autofillOnPageLoadState.state$.pipe(\n      map((x) => x ?? false),\n    );\n\n    this.autoCopyTotpState = this.stateProvider.getActive(AUTO_COPY_TOTP);\n    this.autoCopyTotp$ = this.autoCopyTotpState.state$.pipe(map((x) => x ?? true));\n\n    this.inlineMenuVisibilityState = this.stateProvider.getGlobal(INLINE_MENU_VISIBILITY);\n    this.inlineMenuVisibility$ = this.inlineMenuVisibilityState.state$.pipe(\n      map((x) => x ?? AutofillOverlayVisibility.Off),\n    );\n\n    this.enableContextMenuState = this.stateProvider.getGlobal(ENABLE_CONTEXT_MENU);\n    this.enableContextMenu$ = this.enableContextMenuState.state$.pipe(map((x) => x ?? true));\n\n    this.clearClipboardDelayState = this.stateProvider.getActive(CLEAR_CLIPBOARD_DELAY);\n    this.clearClipboardDelay$ = this.clearClipboardDelayState.state$.pipe(\n      map((x) => x ?? ClearClipboardDelay.Never),\n    );\n  }\n\n  async setAutofillOnPageLoad(newValue: boolean): Promise<void> {\n    await this.autofillOnPageLoadState.update(() => newValue);\n  }\n\n  async setAutofillOnPageLoadDefault(newValue: boolean): Promise<void> {\n    await this.autofillOnPageLoadDefaultState.update(() => newValue);\n  }\n\n  async setAutofillOnPageLoadCalloutIsDismissed(newValue: boolean): Promise<void> {\n    await this.autofillOnPageLoadCalloutIsDismissedState.update(() => newValue);\n  }\n\n  async setAutofillOnPageLoadPolicyToastHasDisplayed(newValue: boolean): Promise<void> {\n    await this.autofillOnPageLoadPolicyToastHasDisplayedState.update(() => newValue);\n  }\n\n  async setAutoCopyTotp(newValue: boolean): Promise<void> {\n    await this.autoCopyTotpState.update(() => newValue);\n  }\n\n  async setInlineMenuVisibility(newValue: InlineMenuVisibilitySetting): Promise<void> {\n    await this.inlineMenuVisibilityState.update(() => newValue);\n  }\n\n  async setEnableContextMenu(newValue: boolean): Promise<void> {\n    await this.enableContextMenuState.update(() => newValue);\n  }\n\n  async setClearClipboardDelay(newValue: ClearClipboardDelaySetting): Promise<void> {\n    await this.clearClipboardDelayState.update(() => newValue);\n  }\n}\n","import { map, Observable } from \"rxjs\";\n\nimport {\n  BADGE_SETTINGS_DISK,\n  ActiveUserState,\n  KeyDefinition,\n  StateProvider,\n} from \"../../platform/state\";\n\nconst ENABLE_BADGE_COUNTER = new KeyDefinition(BADGE_SETTINGS_DISK, \"enableBadgeCounter\", {\n  deserializer: (value: boolean) => value ?? true,\n});\n\nexport abstract class BadgeSettingsServiceAbstraction {\n  enableBadgeCounter$: Observable<boolean>;\n  setEnableBadgeCounter: (newValue: boolean) => Promise<void>;\n}\n\nexport class BadgeSettingsService implements BadgeSettingsServiceAbstraction {\n  private enableBadgeCounterState: ActiveUserState<boolean>;\n  readonly enableBadgeCounter$: Observable<boolean>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.enableBadgeCounterState = this.stateProvider.getActive(ENABLE_BADGE_COUNTER);\n    this.enableBadgeCounter$ = this.enableBadgeCounterState.state$.pipe(map((x) => x ?? true));\n  }\n\n  async setEnableBadgeCounter(newValue: boolean): Promise<void> {\n    await this.enableBadgeCounterState.update(() => newValue);\n  }\n}\n","import { map, Observable } from \"rxjs\";\n\nimport {\n  NeverDomains,\n  EquivalentDomains,\n  UriMatchStrategySetting,\n  UriMatchStrategy,\n} from \"../../models/domain/domain-service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport {\n  DOMAIN_SETTINGS_DISK,\n  ActiveUserState,\n  GlobalState,\n  KeyDefinition,\n  StateProvider,\n  UserKeyDefinition,\n} from \"../../platform/state\";\n\nconst SHOW_FAVICONS = new KeyDefinition(DOMAIN_SETTINGS_DISK, \"showFavicons\", {\n  deserializer: (value: boolean) => value ?? true,\n});\n\nconst NEVER_DOMAINS = new KeyDefinition(DOMAIN_SETTINGS_DISK, \"neverDomains\", {\n  deserializer: (value: NeverDomains) => value ?? null,\n});\n\nconst EQUIVALENT_DOMAINS = new UserKeyDefinition(DOMAIN_SETTINGS_DISK, \"equivalentDomains\", {\n  deserializer: (value: EquivalentDomains) => value ?? null,\n  clearOn: [\"logout\"],\n});\n\nconst DEFAULT_URI_MATCH_STRATEGY = new KeyDefinition(\n  DOMAIN_SETTINGS_DISK,\n  \"defaultUriMatchStrategy\",\n  {\n    deserializer: (value: UriMatchStrategySetting) => value ?? UriMatchStrategy.Domain,\n  },\n);\n\nexport abstract class DomainSettingsService {\n  showFavicons$: Observable<boolean>;\n  setShowFavicons: (newValue: boolean) => Promise<void>;\n  neverDomains$: Observable<NeverDomains>;\n  setNeverDomains: (newValue: NeverDomains) => Promise<void>;\n  equivalentDomains$: Observable<EquivalentDomains>;\n  setEquivalentDomains: (newValue: EquivalentDomains) => Promise<void>;\n  defaultUriMatchStrategy$: Observable<UriMatchStrategySetting>;\n  setDefaultUriMatchStrategy: (newValue: UriMatchStrategySetting) => Promise<void>;\n  getUrlEquivalentDomains: (url: string) => Observable<Set<string>>;\n}\n\nexport class DefaultDomainSettingsService implements DomainSettingsService {\n  private showFaviconsState: GlobalState<boolean>;\n  readonly showFavicons$: Observable<boolean>;\n\n  private neverDomainsState: GlobalState<NeverDomains>;\n  readonly neverDomains$: Observable<NeverDomains>;\n\n  private equivalentDomainsState: ActiveUserState<EquivalentDomains>;\n  readonly equivalentDomains$: Observable<EquivalentDomains>;\n\n  private defaultUriMatchStrategyState: ActiveUserState<UriMatchStrategySetting>;\n  readonly defaultUriMatchStrategy$: Observable<UriMatchStrategySetting>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.showFaviconsState = this.stateProvider.getGlobal(SHOW_FAVICONS);\n    this.showFavicons$ = this.showFaviconsState.state$.pipe(map((x) => x ?? true));\n\n    this.neverDomainsState = this.stateProvider.getGlobal(NEVER_DOMAINS);\n    this.neverDomains$ = this.neverDomainsState.state$.pipe(map((x) => x ?? null));\n\n    this.equivalentDomainsState = this.stateProvider.getActive(EQUIVALENT_DOMAINS);\n    this.equivalentDomains$ = this.equivalentDomainsState.state$.pipe(map((x) => x ?? null));\n\n    this.defaultUriMatchStrategyState = this.stateProvider.getActive(DEFAULT_URI_MATCH_STRATEGY);\n    this.defaultUriMatchStrategy$ = this.defaultUriMatchStrategyState.state$.pipe(\n      map((x) => x ?? UriMatchStrategy.Domain),\n    );\n  }\n\n  async setShowFavicons(newValue: boolean): Promise<void> {\n    await this.showFaviconsState.update(() => newValue);\n  }\n\n  async setNeverDomains(newValue: NeverDomains): Promise<void> {\n    await this.neverDomainsState.update(() => newValue);\n  }\n\n  async setEquivalentDomains(newValue: EquivalentDomains): Promise<void> {\n    await this.equivalentDomainsState.update(() => newValue);\n  }\n\n  async setDefaultUriMatchStrategy(newValue: UriMatchStrategySetting): Promise<void> {\n    await this.defaultUriMatchStrategyState.update(() => newValue);\n  }\n\n  getUrlEquivalentDomains(url: string): Observable<Set<string>> {\n    const domains$ = this.equivalentDomains$.pipe(\n      map((equivalentDomains) => {\n        const domain = Utils.getDomain(url);\n        if (domain == null || equivalentDomains == null) {\n          return new Set() as Set<string>;\n        }\n\n        const equivalents = equivalentDomains.filter((ed) => ed.includes(domain)).flat();\n\n        return new Set(equivalents);\n      }),\n    );\n\n    return domains$;\n  }\n}\n","import { map, Observable } from \"rxjs\";\n\nimport {\n  USER_NOTIFICATION_SETTINGS_DISK,\n  GlobalState,\n  KeyDefinition,\n  StateProvider,\n} from \"../../platform/state\";\n\nconst ENABLE_ADDED_LOGIN_PROMPT = new KeyDefinition(\n  USER_NOTIFICATION_SETTINGS_DISK,\n  \"enableAddedLoginPrompt\",\n  {\n    deserializer: (value: boolean) => value ?? true,\n  },\n);\nconst ENABLE_CHANGED_PASSWORD_PROMPT = new KeyDefinition(\n  USER_NOTIFICATION_SETTINGS_DISK,\n  \"enableChangedPasswordPrompt\",\n  {\n    deserializer: (value: boolean) => value ?? true,\n  },\n);\n\nexport abstract class UserNotificationSettingsServiceAbstraction {\n  enableAddedLoginPrompt$: Observable<boolean>;\n  setEnableAddedLoginPrompt: (newValue: boolean) => Promise<void>;\n  enableChangedPasswordPrompt$: Observable<boolean>;\n  setEnableChangedPasswordPrompt: (newValue: boolean) => Promise<void>;\n}\n\nexport class UserNotificationSettingsService implements UserNotificationSettingsServiceAbstraction {\n  private enableAddedLoginPromptState: GlobalState<boolean>;\n  readonly enableAddedLoginPrompt$: Observable<boolean>;\n\n  private enableChangedPasswordPromptState: GlobalState<boolean>;\n  readonly enableChangedPasswordPrompt$: Observable<boolean>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.enableAddedLoginPromptState = this.stateProvider.getGlobal(ENABLE_ADDED_LOGIN_PROMPT);\n    this.enableAddedLoginPrompt$ = this.enableAddedLoginPromptState.state$.pipe(\n      map((x) => x ?? true),\n    );\n\n    this.enableChangedPasswordPromptState = this.stateProvider.getGlobal(\n      ENABLE_CHANGED_PASSWORD_PROMPT,\n    );\n    this.enableChangedPasswordPrompt$ = this.enableChangedPasswordPromptState.state$.pipe(\n      map((x) => x ?? true),\n    );\n  }\n\n  async setEnableAddedLoginPrompt(newValue: boolean): Promise<void> {\n    await this.enableAddedLoginPromptState.update(() => newValue);\n  }\n\n  async setEnableChangedPasswordPrompt(newValue: boolean): Promise<void> {\n    await this.enableChangedPasswordPromptState.update(() => newValue);\n  }\n}\n","import { map, Observable, of, switchMap } from \"rxjs\";\n\nimport {\n  ActiveUserState,\n  BILLING_DISK,\n  KeyDefinition,\n  StateProvider,\n} from \"../../../platform/state\";\nimport {\n  BillingAccountProfile,\n  BillingAccountProfileStateService,\n} from \"../../abstractions/account/billing-account-profile-state.service\";\n\nexport const BILLING_ACCOUNT_PROFILE_KEY_DEFINITION = new KeyDefinition<BillingAccountProfile>(\n  BILLING_DISK,\n  \"accountProfile\",\n  {\n    deserializer: (billingAccountProfile) => billingAccountProfile,\n  },\n);\n\nexport class DefaultBillingAccountProfileStateService implements BillingAccountProfileStateService {\n  private billingAccountProfileState: ActiveUserState<BillingAccountProfile>;\n\n  hasPremiumFromAnyOrganization$: Observable<boolean>;\n  hasPremiumPersonally$: Observable<boolean>;\n  hasPremiumFromAnySource$: Observable<boolean>;\n\n  constructor(stateProvider: StateProvider) {\n    this.billingAccountProfileState = stateProvider.getActive(\n      BILLING_ACCOUNT_PROFILE_KEY_DEFINITION,\n    );\n\n    // Setup an observable that will always track the currently active user\n    // but will fallback to emitting null when there is no active user.\n    const billingAccountProfileOrNull = stateProvider.activeUserId$.pipe(\n      switchMap((userId) =>\n        userId != null\n          ? stateProvider.getUser(userId, BILLING_ACCOUNT_PROFILE_KEY_DEFINITION).state$\n          : of(null),\n      ),\n    );\n\n    this.hasPremiumFromAnyOrganization$ = billingAccountProfileOrNull.pipe(\n      map((billingAccountProfile) => !!billingAccountProfile?.hasPremiumFromAnyOrganization),\n    );\n\n    this.hasPremiumPersonally$ = billingAccountProfileOrNull.pipe(\n      map((billingAccountProfile) => !!billingAccountProfile?.hasPremiumPersonally),\n    );\n\n    this.hasPremiumFromAnySource$ = billingAccountProfileOrNull.pipe(\n      map(\n        (billingAccountProfile) =>\n          billingAccountProfile?.hasPremiumFromAnyOrganization === true ||\n          billingAccountProfile?.hasPremiumPersonally === true,\n      ),\n    );\n  }\n\n  async setHasPremium(\n    hasPremiumPersonally: boolean,\n    hasPremiumFromAnyOrganization: boolean,\n  ): Promise<void> {\n    await this.billingAccountProfileState.update((billingAccountProfile) => {\n      return {\n        hasPremiumPersonally: hasPremiumPersonally,\n        hasPremiumFromAnyOrganization: hasPremiumFromAnyOrganization,\n      };\n    });\n  }\n}\n","export abstract class MessagingService {\n  send: (subscriber: string, arg?: any) => void;\n}\n","import { UserId } from \"../../types/guid\";\nimport { EncryptedString } from \"../models/domain/enc-string\";\nimport { KeyDefinition, BIOMETRIC_SETTINGS_DISK } from \"../state\";\n\n/**\n * Indicates whether the user elected to store a biometric key to unlock their vault.\n */\nexport const BIOMETRIC_UNLOCK_ENABLED = new KeyDefinition<boolean>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"biometricUnlockEnabled\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\n/**\n * Boolean indicating the user has elected to require a password to use their biometric key upon starting the application.\n *\n * A true setting controls whether {@link ENCRYPTED_CLIENT_KEY_HALF} is set.\n */\nexport const REQUIRE_PASSWORD_ON_START = new KeyDefinition<boolean>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"requirePasswordOnStart\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\n/**\n * If the user has elected to require a password on first unlock of an application instance, this key will store the\n * encrypted client key half used to unlock the vault.\n *\n * For operating systems without application-level key storage, this key half is concatenated with a signature\n * provided by the OS and used to encrypt the biometric key prior to storage.\n */\nexport const ENCRYPTED_CLIENT_KEY_HALF = new KeyDefinition<EncryptedString>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"clientKeyHalf\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\n/**\n * Indicates the user has been warned about the security implications of using biometrics and, depending on the OS,\n * recommended to require a password on first unlock of an application instance.\n */\nexport const DISMISSED_REQUIRE_PASSWORD_ON_START_CALLOUT = new KeyDefinition<boolean>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"dismissedBiometricRequirePasswordOnStartCallout\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\n/**\n * Stores whether the user has elected to cancel the biometric prompt. This is stored on disk due to process-reload\n * wiping memory state. We don't want to prompt the user again if they've elected to cancel.\n */\nexport const PROMPT_CANCELLED = KeyDefinition.record<boolean, UserId>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"promptCancelled\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\n/**\n * Stores whether the user has elected to automatically prompt for biometric unlock on application start.\n */\nexport const PROMPT_AUTOMATICALLY = new KeyDefinition<boolean>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"promptAutomatically\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\n/**\n * Stores whether or not IPC handshake has been validated this session.\n */\nexport const FINGERPRINT_VALIDATED = new KeyDefinition<boolean>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"fingerprintValidated\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n","import { Observable, firstValueFrom, map, combineLatest } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\nimport { EncryptedString, EncString } from \"../models/domain/enc-string\";\nimport { ActiveUserState, GlobalState, StateProvider } from \"../state\";\n\nimport {\n  BIOMETRIC_UNLOCK_ENABLED,\n  ENCRYPTED_CLIENT_KEY_HALF,\n  REQUIRE_PASSWORD_ON_START,\n  DISMISSED_REQUIRE_PASSWORD_ON_START_CALLOUT,\n  PROMPT_AUTOMATICALLY,\n  PROMPT_CANCELLED,\n  FINGERPRINT_VALIDATED,\n} from \"./biometric.state\";\n\nexport abstract class BiometricStateService {\n  /**\n   * `true` if the currently active user has elected to store a biometric key to unlock their vault.\n   */\n  biometricUnlockEnabled$: Observable<boolean>; // used to be biometricUnlock\n  /**\n   * If the user has elected to require a password on first unlock of an application instance, this key will store the\n   * encrypted client key half used to unlock the vault.\n   *\n   * Tracks the currently active user\n   */\n  encryptedClientKeyHalf$: Observable<EncString | undefined>;\n  /**\n   * whether or not a password is required on first unlock after opening the application\n   *\n   * tracks the currently active user\n   */\n  requirePasswordOnStart$: Observable<boolean>;\n  /**\n   * Indicates the user has been warned about the security implications of using biometrics and, depending on the OS,\n   *\n   * tracks the currently active user.\n   */\n  dismissedRequirePasswordOnStartCallout$: Observable<boolean>;\n  /**\n   * Whether the user has cancelled the biometric prompt.\n   *\n   * tracks the currently active user\n   */\n  promptCancelled$: Observable<boolean>;\n  /**\n   * Whether the user has elected to automatically prompt for biometrics.\n   *\n   * tracks the currently active user\n   */\n  promptAutomatically$: Observable<boolean>;\n  /**\n   * Whether or not IPC fingerprint has been validated by the user this session.\n   */\n  fingerprintValidated$: Observable<boolean>;\n\n  /**\n   * Updates the require password on start state for the currently active user.\n   *\n   * If false, the encrypted client key half will be removed.\n   * @param value whether or not a password is required on first unlock after opening the application\n   */\n  abstract setRequirePasswordOnStart(value: boolean): Promise<void>;\n  /**\n   * Updates the biometric unlock enabled state for the currently active user.\n   * @param enabled whether or not to store a biometric key to unlock the vault\n   */\n  abstract setBiometricUnlockEnabled(enabled: boolean): Promise<void>;\n  /**\n   * Gets the biometric unlock enabled state for the given user.\n   * @param userId user Id to check\n   */\n  abstract getBiometricUnlockEnabled(userId: UserId): Promise<boolean>;\n  abstract setEncryptedClientKeyHalf(encryptedKeyHalf: EncString, userId?: UserId): Promise<void>;\n  abstract getEncryptedClientKeyHalf(userId: UserId): Promise<EncString>;\n  abstract getRequirePasswordOnStart(userId: UserId): Promise<boolean>;\n  abstract removeEncryptedClientKeyHalf(userId: UserId): Promise<void>;\n  /**\n   * Updates the active user's state to reflect that they've been warned about requiring password on start.\n   */\n  abstract setDismissedRequirePasswordOnStartCallout(): Promise<void>;\n  /**\n   * Updates the active user's state to reflect that they've cancelled the biometric prompt.\n   */\n  abstract setUserPromptCancelled(): Promise<void>;\n  /**\n   * Resets the given user's state to reflect that they haven't cancelled the biometric prompt.\n   * @param userId the user to reset the prompt cancelled state for. If not provided, the currently active user will be used.\n   */\n  abstract resetUserPromptCancelled(userId?: UserId): Promise<void>;\n  /**\n   * Resets all user's state to reflect that they haven't cancelled the biometric prompt.\n   */\n  abstract resetAllPromptCancelled(): Promise<void>;\n  /**\n   * Updates the currently active user's setting for auto prompting for biometrics on application start and lock\n   * @param prompt Whether or not to prompt for biometrics on application start.\n   */\n  abstract setPromptAutomatically(prompt: boolean): Promise<void>;\n  /**\n   * Updates whether or not IPC has been validated by the user this session\n   * @param validated the value to save\n   */\n  abstract setFingerprintValidated(validated: boolean): Promise<void>;\n\n  abstract logout(userId: UserId): Promise<void>;\n}\n\nexport class DefaultBiometricStateService implements BiometricStateService {\n  private biometricUnlockEnabledState: ActiveUserState<boolean>;\n  private requirePasswordOnStartState: ActiveUserState<boolean>;\n  private encryptedClientKeyHalfState: ActiveUserState<EncryptedString | undefined>;\n  private dismissedRequirePasswordOnStartCalloutState: ActiveUserState<boolean>;\n  private promptCancelledState: GlobalState<Record<UserId, boolean>>;\n  private promptAutomaticallyState: ActiveUserState<boolean>;\n  private fingerprintValidatedState: GlobalState<boolean>;\n  biometricUnlockEnabled$: Observable<boolean>;\n  encryptedClientKeyHalf$: Observable<EncString | undefined>;\n  requirePasswordOnStart$: Observable<boolean>;\n  dismissedRequirePasswordOnStartCallout$: Observable<boolean>;\n  promptCancelled$: Observable<boolean>;\n  promptAutomatically$: Observable<boolean>;\n  fingerprintValidated$: Observable<boolean>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.biometricUnlockEnabledState = this.stateProvider.getActive(BIOMETRIC_UNLOCK_ENABLED);\n    this.biometricUnlockEnabled$ = this.biometricUnlockEnabledState.state$.pipe(map(Boolean));\n\n    this.requirePasswordOnStartState = this.stateProvider.getActive(REQUIRE_PASSWORD_ON_START);\n    this.requirePasswordOnStart$ = this.requirePasswordOnStartState.state$.pipe(\n      map((value) => !!value),\n    );\n\n    this.encryptedClientKeyHalfState = this.stateProvider.getActive(ENCRYPTED_CLIENT_KEY_HALF);\n    this.encryptedClientKeyHalf$ = this.encryptedClientKeyHalfState.state$.pipe(\n      map(encryptedClientKeyHalfToEncString),\n    );\n\n    this.dismissedRequirePasswordOnStartCalloutState = this.stateProvider.getActive(\n      DISMISSED_REQUIRE_PASSWORD_ON_START_CALLOUT,\n    );\n    this.dismissedRequirePasswordOnStartCallout$ =\n      this.dismissedRequirePasswordOnStartCalloutState.state$.pipe(map(Boolean));\n\n    this.promptCancelledState = this.stateProvider.getGlobal(PROMPT_CANCELLED);\n    this.promptCancelled$ = combineLatest([\n      this.stateProvider.activeUserId$,\n      this.promptCancelledState.state$,\n    ]).pipe(\n      map(([userId, record]) => {\n        return record?.[userId] ?? false;\n      }),\n    );\n    this.promptAutomaticallyState = this.stateProvider.getActive(PROMPT_AUTOMATICALLY);\n    this.promptAutomatically$ = this.promptAutomaticallyState.state$.pipe(map(Boolean));\n\n    this.fingerprintValidatedState = this.stateProvider.getGlobal(FINGERPRINT_VALIDATED);\n    this.fingerprintValidated$ = this.fingerprintValidatedState.state$.pipe(map(Boolean));\n  }\n\n  async setBiometricUnlockEnabled(enabled: boolean): Promise<void> {\n    await this.biometricUnlockEnabledState.update(() => enabled);\n  }\n\n  async getBiometricUnlockEnabled(userId: UserId): Promise<boolean> {\n    return await firstValueFrom(\n      this.stateProvider.getUser(userId, BIOMETRIC_UNLOCK_ENABLED).state$.pipe(map(Boolean)),\n    );\n  }\n\n  async setRequirePasswordOnStart(value: boolean): Promise<void> {\n    let currentActiveId: UserId;\n    await this.requirePasswordOnStartState.update(\n      (_, [userId]) => {\n        currentActiveId = userId;\n        return value;\n      },\n      {\n        combineLatestWith: this.requirePasswordOnStartState.combinedState$,\n      },\n    );\n    if (!value) {\n      await this.removeEncryptedClientKeyHalf(currentActiveId);\n    }\n  }\n\n  async setEncryptedClientKeyHalf(encryptedKeyHalf: EncString, userId?: UserId): Promise<void> {\n    const value = encryptedKeyHalf?.encryptedString ?? null;\n    if (userId) {\n      await this.stateProvider.getUser(userId, ENCRYPTED_CLIENT_KEY_HALF).update(() => value);\n    } else {\n      await this.encryptedClientKeyHalfState.update(() => value);\n    }\n  }\n\n  async removeEncryptedClientKeyHalf(userId: UserId): Promise<void> {\n    await this.stateProvider.getUser(userId, ENCRYPTED_CLIENT_KEY_HALF).update(() => null);\n  }\n\n  async getRequirePasswordOnStart(userId: UserId): Promise<boolean> {\n    return !!(await firstValueFrom(\n      this.stateProvider.getUser(userId, REQUIRE_PASSWORD_ON_START).state$,\n    ));\n  }\n\n  async getEncryptedClientKeyHalf(userId: UserId): Promise<EncString> {\n    return await firstValueFrom(\n      this.stateProvider\n        .getUser(userId, ENCRYPTED_CLIENT_KEY_HALF)\n        .state$.pipe(map(encryptedClientKeyHalfToEncString)),\n    );\n  }\n\n  async logout(userId: UserId): Promise<void> {\n    await this.stateProvider.getUser(userId, ENCRYPTED_CLIENT_KEY_HALF).update(() => null);\n    await this.resetUserPromptCancelled(userId);\n    // Persist auto prompt setting through logout\n    // Persist dismissed require password on start callout through logout\n  }\n\n  async setDismissedRequirePasswordOnStartCallout(): Promise<void> {\n    await this.dismissedRequirePasswordOnStartCalloutState.update(() => true);\n  }\n\n  async resetUserPromptCancelled(userId: UserId): Promise<void> {\n    await this.stateProvider.getGlobal(PROMPT_CANCELLED).update(\n      (data, activeUserId) => {\n        delete data[userId ?? activeUserId];\n        return data;\n      },\n      {\n        combineLatestWith: this.stateProvider.activeUserId$,\n        shouldUpdate: (data, activeUserId) => data?.[userId ?? activeUserId] != null,\n      },\n    );\n  }\n\n  async setUserPromptCancelled(): Promise<void> {\n    await this.promptCancelledState.update(\n      (record, userId) => {\n        record ??= {};\n        record[userId] = true;\n        return record;\n      },\n      {\n        combineLatestWith: this.stateProvider.activeUserId$,\n        shouldUpdate: (_, userId) => {\n          if (userId == null) {\n            throw new Error(\n              \"Cannot update biometric prompt cancelled state without an active user\",\n            );\n          }\n          return true;\n        },\n      },\n    );\n  }\n\n  async resetAllPromptCancelled(): Promise<void> {\n    await this.promptCancelledState.update(() => null);\n  }\n\n  async setPromptAutomatically(prompt: boolean): Promise<void> {\n    await this.promptAutomaticallyState.update(() => prompt);\n  }\n\n  async setFingerprintValidated(validated: boolean): Promise<void> {\n    await this.fingerprintValidatedState.update(() => validated);\n  }\n}\n\nfunction encryptedClientKeyHalfToEncString(\n  encryptedKeyHalf: EncryptedString | undefined,\n): EncString {\n  return encryptedKeyHalf == null ? null : new EncString(encryptedKeyHalf);\n}\n","import { Account } from \"../models/domain/account\";\n\nexport class AccountFactory<T extends Account = Account> {\n  private accountConstructor: new (init: Partial<T>) => T;\n\n  constructor(accountConstructor: new (init: Partial<T>) => T) {\n    this.accountConstructor = accountConstructor;\n  }\n\n  create(args: Partial<T>) {\n    return new this.accountConstructor(args);\n  }\n}\n","import { GlobalState } from \"../models/domain/global-state\";\n\nexport class GlobalStateFactory<T extends GlobalState = GlobalState> {\n  private globalStateConstructor: new (init: Partial<T>) => T;\n\n  constructor(globalStateConstructor: new (init: Partial<T>) => T) {\n    this.globalStateConstructor = globalStateConstructor;\n  }\n\n  create(args?: Partial<T>) {\n    return new this.globalStateConstructor(args);\n  }\n}\n","import { Account } from \"../models/domain/account\";\nimport { GlobalState } from \"../models/domain/global-state\";\n\nimport { AccountFactory } from \"./account-factory\";\nimport { GlobalStateFactory } from \"./global-state-factory\";\n\nexport class StateFactory<\n  TGlobal extends GlobalState = GlobalState,\n  TAccount extends Account = Account,\n> {\n  private globalStateFactory: GlobalStateFactory<TGlobal>;\n  private accountFactory: AccountFactory<TAccount>;\n\n  constructor(\n    globalStateConstructor: new (init: Partial<TGlobal>) => TGlobal,\n    accountConstructor: new (init: Partial<TAccount>) => TAccount,\n  ) {\n    this.globalStateFactory = new GlobalStateFactory(globalStateConstructor);\n    this.accountFactory = new AccountFactory(accountConstructor);\n  }\n\n  createGlobal(args: Partial<TGlobal>): TGlobal {\n    return this.globalStateFactory.create(args);\n  }\n\n  createAccount(args: Partial<TAccount>): TAccount {\n    return this.accountFactory.create(args);\n  }\n}\n","import { ThemeType } from \"../../enums\";\n\nexport class GlobalState {\n  installedVersion?: string;\n  organizationInvitation?: any;\n  rememberedEmail?: string;\n  theme?: ThemeType = ThemeType.System;\n  twoFactorToken?: string;\n  biometricFingerprintValidated?: boolean;\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string;\n  loginRedirect?: any;\n  mainWindowSize?: number;\n  enableBrowserIntegration?: boolean;\n  enableBrowserIntegrationFingerprint?: boolean;\n  deepLinkRedirectUrl?: string;\n}\n","import { Observable, filter, firstValueFrom, tap } from \"rxjs\";\n\nimport { AppIdService as AppIdServiceAbstraction } from \"../abstractions/app-id.service\";\nimport { Utils } from \"../misc/utils\";\nimport { APPLICATION_ID_DISK, GlobalStateProvider, KeyDefinition } from \"../state\";\n\nexport const APP_ID_KEY = new KeyDefinition(APPLICATION_ID_DISK, \"appId\", {\n  deserializer: (value: string) => value,\n});\nexport const ANONYMOUS_APP_ID_KEY = new KeyDefinition(APPLICATION_ID_DISK, \"anonymousAppId\", {\n  deserializer: (value: string) => value,\n});\n\nexport class AppIdService implements AppIdServiceAbstraction {\n  appId$: Observable<string>;\n  anonymousAppId$: Observable<string>;\n\n  constructor(globalStateProvider: GlobalStateProvider) {\n    const appIdState = globalStateProvider.get(APP_ID_KEY);\n    const anonymousAppIdState = globalStateProvider.get(ANONYMOUS_APP_ID_KEY);\n    this.appId$ = appIdState.state$.pipe(\n      tap(async (appId) => {\n        if (!appId) {\n          await appIdState.update(() => Utils.newGuid());\n        }\n      }),\n      filter((appId) => !!appId),\n    );\n    this.anonymousAppId$ = anonymousAppIdState.state$.pipe(\n      tap(async (appId) => {\n        if (!appId) {\n          await anonymousAppIdState.update(() => Utils.newGuid());\n        }\n      }),\n      filter((appId) => !!appId),\n    );\n  }\n\n  async getAppId(): Promise<string> {\n    return await firstValueFrom(this.appId$);\n  }\n\n  async getAnonymousAppId(): Promise<string> {\n    return await firstValueFrom(this.anonymousAppId$);\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { Region } from \"../../abstractions/environment.service\";\n\nexport class ServerConfigResponse extends BaseResponse {\n  version: string;\n  gitHash: string;\n  server: ThirdPartyServerConfigResponse;\n  environment: EnvironmentServerConfigResponse;\n  featureStates: { [key: string]: string } = {};\n\n  constructor(response: any) {\n    super(response);\n\n    if (response == null) {\n      return;\n    }\n\n    this.version = this.getResponseProperty(\"Version\");\n    this.gitHash = this.getResponseProperty(\"GitHash\");\n    this.server = new ThirdPartyServerConfigResponse(this.getResponseProperty(\"Server\"));\n    this.environment = new EnvironmentServerConfigResponse(this.getResponseProperty(\"Environment\"));\n    this.featureStates = this.getResponseProperty(\"FeatureStates\");\n  }\n}\n\nexport class EnvironmentServerConfigResponse extends BaseResponse {\n  cloudRegion: Region;\n  vault: string;\n  api: string;\n  identity: string;\n  notifications: string;\n  sso: string;\n\n  constructor(data: any = null) {\n    super(data);\n\n    if (data == null) {\n      return;\n    }\n\n    this.cloudRegion = this.getResponseProperty(\"CloudRegion\");\n    this.vault = this.getResponseProperty(\"Vault\");\n    this.api = this.getResponseProperty(\"Api\");\n    this.identity = this.getResponseProperty(\"Identity\");\n    this.notifications = this.getResponseProperty(\"Notifications\");\n    this.sso = this.getResponseProperty(\"Sso\");\n  }\n}\n\nexport class ThirdPartyServerConfigResponse extends BaseResponse {\n  name: string;\n  url: string;\n\n  constructor(data: any = null) {\n    super(data);\n\n    if (data == null) {\n      return;\n    }\n\n    this.name = this.getResponseProperty(\"Name\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { AuthService } from \"../../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../../auth/enums/authentication-status\";\nimport { ConfigApiServiceAbstraction } from \"../../abstractions/config/config-api.service.abstraction\";\nimport { ServerConfigResponse } from \"../../models/response/server-config.response\";\n\nexport class ConfigApiService implements ConfigApiServiceAbstraction {\n  constructor(\n    private apiService: ApiService,\n    private authService: AuthService,\n  ) {}\n\n  async get(): Promise<ServerConfigResponse> {\n    const authed: boolean =\n      (await this.authService.getAuthStatus()) !== AuthenticationStatus.LoggedOut;\n\n    const r = await this.apiService.send(\"GET\", \"/config\", null, authed, true);\n    return new ServerConfigResponse(r);\n  }\n}\n","import { LogService as LogServiceAbstraction } from \"../abstractions/log.service\";\nimport { LogLevelType } from \"../enums/log-level-type.enum\";\n\nexport class ConsoleLogService implements LogServiceAbstraction {\n  protected timersMap: Map<string, [number, number]> = new Map();\n\n  constructor(\n    protected isDev: boolean,\n    protected filter: (level: LogLevelType) => boolean = null,\n  ) {}\n\n  debug(message: string) {\n    if (!this.isDev) {\n      return;\n    }\n    this.write(LogLevelType.Debug, message);\n  }\n\n  info(message: string) {\n    this.write(LogLevelType.Info, message);\n  }\n\n  warning(message: string) {\n    this.write(LogLevelType.Warning, message);\n  }\n\n  error(message: string) {\n    this.write(LogLevelType.Error, message);\n  }\n\n  write(level: LogLevelType, message: string) {\n    if (this.filter != null && this.filter(level)) {\n      return;\n    }\n\n    switch (level) {\n      case LogLevelType.Debug:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Info:\n        // eslint-disable-next-line\n        console.log(message);\n        break;\n      case LogLevelType.Warning:\n        // eslint-disable-next-line\n        console.warn(message);\n        break;\n      case LogLevelType.Error:\n        // eslint-disable-next-line\n        console.error(message);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\n\nexport class ContainerService {\n  constructor(\n    private cryptoService: CryptoService,\n    private encryptService: EncryptService,\n  ) {}\n\n  attachToGlobal(global: any) {\n    if (!global.bitwardenContainerService) {\n      global.bitwardenContainerService = this;\n    }\n  }\n\n  /**\n   * @throws Will throw if CryptoService was not instantiated and provided to the ContainerService constructor\n   */\n  getCryptoService(): CryptoService {\n    if (this.cryptoService == null) {\n      throw new Error(\"ContainerService.cryptoService not initialized.\");\n    }\n    return this.cryptoService;\n  }\n\n  /**\n   * @throws Will throw if EncryptService was not instantiated and provided to the ContainerService constructor\n   */\n  getEncryptService(): EncryptService {\n    if (this.encryptService == null) {\n      throw new Error(\"ContainerService.encryptService not initialized.\");\n    }\n    return this.encryptService;\n  }\n}\n","import { Utils } from \"../../../platform/misc/utils\";\nimport { EncryptionType } from \"../../enums\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\n\nconst ENC_TYPE_LENGTH = 1;\nconst IV_LENGTH = 16;\nconst MAC_LENGTH = 32;\nconst MIN_DATA_LENGTH = 1;\n\nexport class EncArrayBuffer implements Encrypted {\n  readonly encryptionType: EncryptionType = null;\n  readonly dataBytes: Uint8Array = null;\n  readonly ivBytes: Uint8Array = null;\n  readonly macBytes: Uint8Array = null;\n\n  constructor(readonly buffer: Uint8Array) {\n    const encBytes = buffer;\n    const encType = encBytes[0];\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH);\n        this.macBytes = encBytes.slice(\n          ENC_TYPE_LENGTH + IV_LENGTH,\n          ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH,\n        );\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH);\n        break;\n      }\n      case EncryptionType.AesCbc256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH);\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH);\n        break;\n      }\n      default:\n        this.throwDecryptionError();\n    }\n\n    this.encryptionType = encType;\n  }\n\n  private throwDecryptionError() {\n    throw new Error(\n      \"Error parsing encrypted ArrayBuffer: data is corrupted or has an invalid format.\",\n    );\n  }\n\n  static async fromResponse(response: {\n    arrayBuffer: () => Promise<ArrayBuffer>;\n  }): Promise<EncArrayBuffer> {\n    const buffer = await response.arrayBuffer();\n    if (buffer == null) {\n      throw new Error(\"Cannot create EncArrayBuffer from Response - Response is empty\");\n    }\n    return new EncArrayBuffer(new Uint8Array(buffer));\n  }\n\n  static fromB64(b64: string) {\n    const buffer = Utils.fromB64ToArray(b64);\n    return new EncArrayBuffer(buffer);\n  }\n}\n","import { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\n\nexport class EncryptedObject {\n  iv: Uint8Array;\n  data: Uint8Array;\n  mac: Uint8Array;\n  key: SymmetricCryptoKey;\n}\n","import { Utils } from \"../../../platform/misc/utils\";\nimport { CryptoFunctionService } from \"../../abstractions/crypto-function.service\";\nimport { EncryptService } from \"../../abstractions/encrypt.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { EncryptionType } from \"../../enums\";\nimport { Decryptable } from \"../../interfaces/decryptable.interface\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\nimport { EncString } from \"../../models/domain/enc-string\";\nimport { EncryptedObject } from \"../../models/domain/encrypted-object\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\n\nexport class EncryptServiceImplementation implements EncryptService {\n  constructor(\n    protected cryptoFunctionService: CryptoFunctionService,\n    protected logService: LogService,\n    protected logMacFailures: boolean,\n  ) {}\n\n  async encrypt(plainValue: string | Uint8Array, key: SymmetricCryptoKey): Promise<EncString> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (plainValue == null) {\n      return Promise.resolve(null);\n    }\n\n    let plainBuf: Uint8Array;\n    if (typeof plainValue === \"string\") {\n      plainBuf = Utils.fromUtf8ToArray(plainValue);\n    } else {\n      plainBuf = plainValue;\n    }\n\n    const encObj = await this.aesEncrypt(plainBuf, key);\n    const iv = Utils.fromBufferToB64(encObj.iv);\n    const data = Utils.fromBufferToB64(encObj.data);\n    const mac = encObj.mac != null ? Utils.fromBufferToB64(encObj.mac) : null;\n    return new EncString(encObj.key.encType, data, iv, mac);\n  }\n\n  async encryptToBytes(plainValue: Uint8Array, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    const encValue = await this.aesEncrypt(plainValue, key);\n    let macLen = 0;\n    if (encValue.mac != null) {\n      macLen = encValue.mac.byteLength;\n    }\n\n    const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);\n    encBytes.set([encValue.key.encType]);\n    encBytes.set(new Uint8Array(encValue.iv), 1);\n    if (encValue.mac != null) {\n      encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);\n    }\n\n    encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);\n    return new EncArrayBuffer(encBytes);\n  }\n\n  async decryptToUtf8(encString: EncString, key: SymmetricCryptoKey): Promise<string> {\n    if (key == null) {\n      throw new Error(\"No key provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encString);\n\n    if (key.macKey != null && encString?.mac == null) {\n      this.logService.error(\"mac required.\");\n      return null;\n    }\n\n    if (key.encType !== encString.encryptionType) {\n      this.logService.error(\"encType unavailable.\");\n      return null;\n    }\n\n    const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(\n      encString.data,\n      encString.iv,\n      encString.mac,\n      key,\n    );\n    if (fastParams.macKey != null && fastParams.mac != null) {\n      const computedMac = await this.cryptoFunctionService.hmacFast(\n        fastParams.macData,\n        fastParams.macKey,\n        \"sha256\",\n      );\n      const macsEqual = await this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);\n      if (!macsEqual) {\n        this.logMacFailed(\"mac failed.\");\n        return null;\n      }\n    }\n\n    return await this.cryptoFunctionService.aesDecryptFast(fastParams, \"cbc\");\n  }\n\n  async decryptToBytes(encThing: Encrypted, key: SymmetricCryptoKey): Promise<Uint8Array> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (encThing == null) {\n      throw new Error(\"Nothing provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encThing);\n\n    if (key.macKey != null && encThing.macBytes == null) {\n      return null;\n    }\n\n    if (key.encType !== encThing.encryptionType) {\n      return null;\n    }\n\n    if (key.macKey != null && encThing.macBytes != null) {\n      const macData = new Uint8Array(encThing.ivBytes.byteLength + encThing.dataBytes.byteLength);\n      macData.set(new Uint8Array(encThing.ivBytes), 0);\n      macData.set(new Uint8Array(encThing.dataBytes), encThing.ivBytes.byteLength);\n      const computedMac = await this.cryptoFunctionService.hmac(macData, key.macKey, \"sha256\");\n      if (computedMac === null) {\n        return null;\n      }\n\n      const macsMatch = await this.cryptoFunctionService.compare(encThing.macBytes, computedMac);\n      if (!macsMatch) {\n        this.logMacFailed(\"mac failed.\");\n        return null;\n      }\n    }\n\n    const result = await this.cryptoFunctionService.aesDecrypt(\n      encThing.dataBytes,\n      encThing.ivBytes,\n      key.encKey,\n      \"cbc\",\n    );\n\n    return result ?? null;\n  }\n\n  async rsaEncrypt(data: Uint8Array, publicKey: Uint8Array): Promise<EncString> {\n    if (data == null) {\n      throw new Error(\"No data provided for encryption.\");\n    }\n\n    if (publicKey == null) {\n      throw new Error(\"No public key provided for encryption.\");\n    }\n    const encrypted = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encrypted));\n  }\n\n  async rsaDecrypt(data: EncString, privateKey: Uint8Array): Promise<Uint8Array> {\n    if (data == null) {\n      throw new Error(\"No data provided for decryption.\");\n    }\n\n    let algorithm: \"sha1\" | \"sha256\";\n    switch (data.encryptionType) {\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        algorithm = \"sha1\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        algorithm = \"sha256\";\n        break;\n      default:\n        throw new Error(\"Invalid encryption type.\");\n    }\n\n    if (privateKey == null) {\n      throw new Error(\"No private key provided for decryption.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data.dataBytes, privateKey, algorithm);\n  }\n\n  async decryptItems<T extends InitializerMetadata>(\n    items: Decryptable<T>[],\n    key: SymmetricCryptoKey,\n  ): Promise<T[]> {\n    if (items == null || items.length < 1) {\n      return [];\n    }\n\n    // don't use promise.all because this task is not io bound\n    const results = [];\n    for (let i = 0; i < items.length; i++) {\n      results.push(await items[i].decrypt(key));\n    }\n    return results;\n  }\n\n  async hash(value: string | Uint8Array, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hashArray = await this.cryptoFunctionService.hash(value, algorithm);\n    return Utils.fromBufferToB64(hashArray);\n  }\n\n  private async aesEncrypt(data: Uint8Array, key: SymmetricCryptoKey): Promise<EncryptedObject> {\n    const obj = new EncryptedObject();\n    obj.key = key;\n    obj.iv = await this.cryptoFunctionService.randomBytes(16);\n    obj.data = await this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);\n\n    if (obj.key.macKey != null) {\n      const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);\n      macData.set(new Uint8Array(obj.iv), 0);\n      macData.set(new Uint8Array(obj.data), obj.iv.byteLength);\n      obj.mac = await this.cryptoFunctionService.hmac(macData, obj.key.macKey, \"sha256\");\n    }\n\n    return obj;\n  }\n\n  private logMacFailed(msg: string) {\n    if (this.logMacFailures) {\n      this.logService.error(msg);\n    }\n  }\n\n  /**\n   * Transform into new key for the old encrypt-then-mac scheme if required, otherwise return the current key unchanged\n   * @param encThing The encrypted object (e.g. encString or encArrayBuffer) that you want to decrypt\n   */\n  resolveLegacyKey(key: SymmetricCryptoKey, encThing: Encrypted): SymmetricCryptoKey {\n    if (\n      encThing.encryptionType === EncryptionType.AesCbc128_HmacSha256_B64 &&\n      key.encType === EncryptionType.AesCbc256_B64\n    ) {\n      return new SymmetricCryptoKey(key.key, EncryptionType.AesCbc128_HmacSha256_B64);\n    }\n\n    return key;\n  }\n}\n","import { AttachmentResponse } from \"../response/attachment.response\";\n\nexport class AttachmentData {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response?: AttachmentResponse) {\n    if (response == null) {\n      return;\n    }\n    this.id = response.id;\n    this.url = response.url;\n    this.fileName = response.fileName;\n    this.key = response.key;\n    this.size = response.size;\n    this.sizeName = response.sizeName;\n  }\n}\n","import { CardApi } from \"../api/card.api\";\n\nexport class CardData {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data?: CardApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.cardholderName = data.cardholderName;\n    this.brand = data.brand;\n    this.number = data.number;\n    this.expMonth = data.expMonth;\n    this.expYear = data.expYear;\n    this.code = data.code;\n  }\n}\n","import { FieldType, LinkedIdType } from \"../../enums\";\nimport { FieldApi } from \"../api/field.api\";\n\nexport class FieldData {\n  type: FieldType;\n  name: string;\n  value: string;\n  linkedId: LinkedIdType;\n\n  constructor(response?: FieldApi) {\n    if (response == null) {\n      return;\n    }\n    this.type = response.type;\n    this.name = response.name;\n    this.value = response.value;\n    this.linkedId = response.linkedId;\n  }\n}\n","import { IdentityApi } from \"../api/identity.api\";\n\nexport class IdentityData {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data?: IdentityApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.title = data.title;\n    this.firstName = data.firstName;\n    this.middleName = data.middleName;\n    this.lastName = data.lastName;\n    this.address1 = data.address1;\n    this.address2 = data.address2;\n    this.address3 = data.address3;\n    this.city = data.city;\n    this.state = data.state;\n    this.postalCode = data.postalCode;\n    this.country = data.country;\n    this.company = data.company;\n    this.email = data.email;\n    this.phone = data.phone;\n    this.ssn = data.ssn;\n    this.username = data.username;\n    this.passportNumber = data.passportNumber;\n    this.licenseNumber = data.licenseNumber;\n  }\n}\n","import { Fido2CredentialApi } from \"../api/fido2-credential.api\";\n\nexport class Fido2CredentialData {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  userName: string;\n  counter: string;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: string;\n  creationDate: string;\n\n  constructor(data?: Fido2CredentialApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.credentialId = data.credentialId;\n    this.keyType = data.keyType;\n    this.keyAlgorithm = data.keyAlgorithm;\n    this.keyCurve = data.keyCurve;\n    this.keyValue = data.keyValue;\n    this.rpId = data.rpId;\n    this.userHandle = data.userHandle;\n    this.userName = data.userName;\n    this.counter = data.counter;\n    this.rpName = data.rpName;\n    this.userDisplayName = data.userDisplayName;\n    this.discoverable = data.discoverable;\n    this.creationDate = data.creationDate;\n  }\n}\n","import { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { LoginUriApi } from \"../api/login-uri.api\";\n\nexport class LoginUriData {\n  uri: string;\n  uriChecksum: string;\n  match: UriMatchStrategySetting = null;\n\n  constructor(data?: LoginUriApi) {\n    if (data == null) {\n      return;\n    }\n    this.uri = data.uri;\n    this.uriChecksum = data.uriChecksum;\n    this.match = data.match;\n  }\n}\n","import { LoginApi } from \"../api/login.api\";\n\nimport { Fido2CredentialData } from \"./fido2-credential.data\";\nimport { LoginUriData } from \"./login-uri.data\";\n\nexport class LoginData {\n  uris: LoginUriData[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n  fido2Credentials?: Fido2CredentialData[];\n\n  constructor(data?: LoginApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.username = data.username;\n    this.password = data.password;\n    this.passwordRevisionDate = data.passwordRevisionDate;\n    this.totp = data.totp;\n    this.autofillOnPageLoad = data.autofillOnPageLoad;\n\n    if (data.uris) {\n      this.uris = data.uris.map((u) => new LoginUriData(u));\n    }\n\n    if (data.fido2Credentials) {\n      this.fido2Credentials = data.fido2Credentials?.map((key) => new Fido2CredentialData(key));\n    }\n  }\n}\n","import { PasswordHistoryResponse } from \"../response/password-history.response\";\n\nexport class PasswordHistoryData {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response?: PasswordHistoryResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.password = response.password;\n    this.lastUsedDate = response.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../enums\";\nimport { SecureNoteApi } from \"../api/secure-note.api\";\n\nexport class SecureNoteData {\n  type: SecureNoteType;\n\n  constructor(data?: SecureNoteApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.type = data.type;\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CipherResponse } from \"../response/cipher.response\";\n\nimport { AttachmentData } from \"./attachment.data\";\nimport { CardData } from \"./card.data\";\nimport { FieldData } from \"./field.data\";\nimport { IdentityData } from \"./identity.data\";\nimport { LoginData } from \"./login.data\";\nimport { PasswordHistoryData } from \"./password-history.data\";\nimport { SecureNoteData } from \"./secure-note.data\";\n\nexport class CipherData {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  favorite: boolean;\n  revisionDate: string;\n  type: CipherType;\n  name: string;\n  notes: string;\n  login?: LoginData;\n  secureNote?: SecureNoteData;\n  card?: CardData;\n  identity?: IdentityData;\n  fields?: FieldData[];\n  attachments?: AttachmentData[];\n  passwordHistory?: PasswordHistoryData[];\n  collectionIds?: string[];\n  creationDate: string;\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n  key: string;\n\n  constructor(response?: CipherResponse, collectionIds?: string[]) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.folderId = response.folderId;\n    this.edit = response.edit;\n    this.viewPassword = response.viewPassword;\n    this.organizationUseTotp = response.organizationUseTotp;\n    this.favorite = response.favorite;\n    this.revisionDate = response.revisionDate;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;\n    this.creationDate = response.creationDate;\n    this.deletedDate = response.deletedDate;\n    this.reprompt = response.reprompt;\n    this.key = response.key;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginData(response.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteData(response.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardData(response.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityData(response.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (response.fields != null) {\n      this.fields = response.fields.map((f) => new FieldData(f));\n    }\n    if (response.attachments != null) {\n      this.attachments = response.attachments.map((a) => new AttachmentData(a));\n    }\n    if (response.passwordHistory != null) {\n      this.passwordHistory = response.passwordHistory.map((ph) => new PasswordHistoryData(ph));\n    }\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { AttachmentData } from \"../data/attachment.data\";\nimport { AttachmentView } from \"../view/attachment.view\";\n\nexport class Attachment extends Domain {\n  id: string;\n  url: string;\n  size: string;\n  sizeName: string; // Readable size, ex: \"4.2 KB\" or \"1.43 GB\"\n  key: EncString;\n  fileName: EncString;\n\n  constructor(obj?: AttachmentData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"],\n    );\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<AttachmentView> {\n    const view = await this.decryptObj(\n      new AttachmentView(this),\n      {\n        fileName: null,\n      },\n      orgId,\n      encKey,\n    );\n\n    if (this.key != null) {\n      view.key = await this.decryptAttachmentKey(orgId, encKey);\n    }\n\n    return view;\n  }\n\n  private async decryptAttachmentKey(orgId: string, encKey?: SymmetricCryptoKey) {\n    try {\n      if (encKey == null) {\n        encKey = await this.getKeyForDecryption(orgId);\n      }\n\n      const encryptService = Utils.getContainerService().getEncryptService();\n      const decValue = await encryptService.decryptToBytes(this.key, encKey);\n      return new SymmetricCryptoKey(decValue);\n    } catch (e) {\n      // TODO: error?\n    }\n  }\n\n  private async getKeyForDecryption(orgId: string) {\n    const cryptoService = Utils.getContainerService().getCryptoService();\n    return orgId != null\n      ? await cryptoService.getOrgKey(orgId)\n      : await cryptoService.getUserKeyWithLegacySupport();\n  }\n\n  toAttachmentData(): AttachmentData {\n    const a = new AttachmentData();\n    a.size = this.size;\n    this.buildDataModel(\n      this,\n      a,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"],\n    );\n    return a;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Attachment>>): Attachment {\n    if (obj == null) {\n      return null;\n    }\n\n    const key = EncString.fromJSON(obj.key);\n    const fileName = EncString.fromJSON(obj.fileName);\n\n    return Object.assign(new Attachment(), obj, {\n      key,\n      fileName,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { CardData } from \"../data/card.data\";\nimport { CardView } from \"../view/card.view\";\n\nexport class Card extends Domain {\n  cardholderName: EncString;\n  brand: EncString;\n  number: EncString;\n  expMonth: EncString;\n  expYear: EncString;\n  code: EncString;\n\n  constructor(obj?: CardData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<CardView> {\n    return this.decryptObj(\n      new CardView(),\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  toCardData(): CardData {\n    const c = new CardData();\n    this.buildDataModel(this, c, {\n      cardholderName: null,\n      brand: null,\n      number: null,\n      expMonth: null,\n      expYear: null,\n      code: null,\n    });\n    return c;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Card>>): Card {\n    if (obj == null) {\n      return null;\n    }\n\n    const cardholderName = EncString.fromJSON(obj.cardholderName);\n    const brand = EncString.fromJSON(obj.brand);\n    const number = EncString.fromJSON(obj.number);\n    const expMonth = EncString.fromJSON(obj.expMonth);\n    const expYear = EncString.fromJSON(obj.expYear);\n    const code = EncString.fromJSON(obj.code);\n    return Object.assign(new Card(), obj, {\n      cardholderName,\n      brand,\n      number,\n      expMonth,\n      expYear,\n      code,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { FieldType, LinkedIdType } from \"../../enums\";\nimport { FieldData } from \"../data/field.data\";\nimport { FieldView } from \"../view/field.view\";\n\nexport class Field extends Domain {\n  name: EncString;\n  value: EncString;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(obj?: FieldData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n    this.linkedId = obj.linkedId;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        name: null,\n        value: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<FieldView> {\n    return this.decryptObj(\n      new FieldView(this),\n      {\n        name: null,\n        value: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  toFieldData(): FieldData {\n    const f = new FieldData();\n    this.buildDataModel(\n      this,\n      f,\n      {\n        name: null,\n        value: null,\n        type: null,\n        linkedId: null,\n      },\n      [\"type\", \"linkedId\"],\n    );\n    return f;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Field>>): Field {\n    if (obj == null) {\n      return null;\n    }\n\n    const name = EncString.fromJSON(obj.name);\n    const value = EncString.fromJSON(obj.value);\n\n    return Object.assign(new Field(), obj, {\n      name,\n      value,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { IdentityData } from \"../data/identity.data\";\nimport { IdentityView } from \"../view/identity.view\";\n\nexport class Identity extends Domain {\n  title: EncString;\n  firstName: EncString;\n  middleName: EncString;\n  lastName: EncString;\n  address1: EncString;\n  address2: EncString;\n  address3: EncString;\n  city: EncString;\n  state: EncString;\n  postalCode: EncString;\n  country: EncString;\n  company: EncString;\n  email: EncString;\n  phone: EncString;\n  ssn: EncString;\n  username: EncString;\n  passportNumber: EncString;\n  licenseNumber: EncString;\n\n  constructor(obj?: IdentityData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<IdentityView> {\n    return this.decryptObj(\n      new IdentityView(),\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  toIdentityData(): IdentityData {\n    const i = new IdentityData();\n    this.buildDataModel(this, i, {\n      title: null,\n      firstName: null,\n      middleName: null,\n      lastName: null,\n      address1: null,\n      address2: null,\n      address3: null,\n      city: null,\n      state: null,\n      postalCode: null,\n      country: null,\n      company: null,\n      email: null,\n      phone: null,\n      ssn: null,\n      username: null,\n      passportNumber: null,\n      licenseNumber: null,\n    });\n    return i;\n  }\n\n  static fromJSON(obj: Jsonify<Identity>): Identity {\n    if (obj == null) {\n      return null;\n    }\n\n    const title = EncString.fromJSON(obj.title);\n    const firstName = EncString.fromJSON(obj.firstName);\n    const middleName = EncString.fromJSON(obj.middleName);\n    const lastName = EncString.fromJSON(obj.lastName);\n    const address1 = EncString.fromJSON(obj.address1);\n    const address2 = EncString.fromJSON(obj.address2);\n    const address3 = EncString.fromJSON(obj.address3);\n    const city = EncString.fromJSON(obj.city);\n    const state = EncString.fromJSON(obj.state);\n    const postalCode = EncString.fromJSON(obj.postalCode);\n    const country = EncString.fromJSON(obj.country);\n    const company = EncString.fromJSON(obj.company);\n    const email = EncString.fromJSON(obj.email);\n    const phone = EncString.fromJSON(obj.phone);\n    const ssn = EncString.fromJSON(obj.ssn);\n    const username = EncString.fromJSON(obj.username);\n    const passportNumber = EncString.fromJSON(obj.passportNumber);\n    const licenseNumber = EncString.fromJSON(obj.licenseNumber);\n\n    return Object.assign(new Identity(), obj, {\n      title,\n      firstName,\n      middleName,\n      lastName,\n      address1,\n      address2,\n      address3,\n      city,\n      state,\n      postalCode,\n      country,\n      company,\n      email,\n      phone,\n      ssn,\n      username,\n      passportNumber,\n      licenseNumber,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { Fido2CredentialData } from \"../data/fido2-credential.data\";\nimport { Fido2CredentialView } from \"../view/fido2-credential.view\";\n\nexport class Fido2Credential extends Domain {\n  credentialId: EncString | null = null;\n  keyType: EncString;\n  keyAlgorithm: EncString;\n  keyCurve: EncString;\n  keyValue: EncString;\n  rpId: EncString;\n  userHandle: EncString;\n  userName: EncString;\n  counter: EncString;\n  rpName: EncString;\n  userDisplayName: EncString;\n  discoverable: EncString;\n  creationDate: Date;\n\n  constructor(obj?: Fido2CredentialData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        credentialId: null,\n        keyType: null,\n        keyAlgorithm: null,\n        keyCurve: null,\n        keyValue: null,\n        rpId: null,\n        userHandle: null,\n        userName: null,\n        counter: null,\n        rpName: null,\n        userDisplayName: null,\n        discoverable: null,\n      },\n      [],\n    );\n    this.creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<Fido2CredentialView> {\n    const view = await this.decryptObj(\n      new Fido2CredentialView(),\n      {\n        credentialId: null,\n        keyType: null,\n        keyAlgorithm: null,\n        keyCurve: null,\n        keyValue: null,\n        rpId: null,\n        userHandle: null,\n        userName: null,\n        rpName: null,\n        userDisplayName: null,\n        discoverable: null,\n      },\n      orgId,\n      encKey,\n    );\n\n    const { counter } = await this.decryptObj(\n      { counter: \"\" },\n      {\n        counter: null,\n      },\n      orgId,\n      encKey,\n    );\n    // Counter will end up as NaN if this fails\n    view.counter = parseInt(counter);\n\n    const { discoverable } = await this.decryptObj(\n      { discoverable: \"\" },\n      {\n        discoverable: null,\n      },\n      orgId,\n      encKey,\n    );\n    view.discoverable = discoverable === \"true\";\n    view.creationDate = this.creationDate;\n\n    return view;\n  }\n\n  toFido2CredentialData(): Fido2CredentialData {\n    const i = new Fido2CredentialData();\n    i.creationDate = this.creationDate.toISOString();\n    this.buildDataModel(this, i, {\n      credentialId: null,\n      keyType: null,\n      keyAlgorithm: null,\n      keyCurve: null,\n      keyValue: null,\n      rpId: null,\n      userHandle: null,\n      userName: null,\n      counter: null,\n      rpName: null,\n      userDisplayName: null,\n      discoverable: null,\n    });\n    return i;\n  }\n\n  static fromJSON(obj: Jsonify<Fido2Credential>): Fido2Credential {\n    if (obj == null) {\n      return null;\n    }\n\n    const credentialId = EncString.fromJSON(obj.credentialId);\n    const keyType = EncString.fromJSON(obj.keyType);\n    const keyAlgorithm = EncString.fromJSON(obj.keyAlgorithm);\n    const keyCurve = EncString.fromJSON(obj.keyCurve);\n    const keyValue = EncString.fromJSON(obj.keyValue);\n    const rpId = EncString.fromJSON(obj.rpId);\n    const userHandle = EncString.fromJSON(obj.userHandle);\n    const userName = EncString.fromJSON(obj.userName);\n    const counter = EncString.fromJSON(obj.counter);\n    const rpName = EncString.fromJSON(obj.rpName);\n    const userDisplayName = EncString.fromJSON(obj.userDisplayName);\n    const discoverable = EncString.fromJSON(obj.discoverable);\n    const creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n\n    return Object.assign(new Fido2Credential(), obj, {\n      credentialId,\n      keyType,\n      keyAlgorithm,\n      keyCurve,\n      keyValue,\n      rpId,\n      userHandle,\n      userName,\n      counter,\n      rpName,\n      userDisplayName,\n      discoverable,\n      creationDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { LoginUriData } from \"../data/login-uri.data\";\nimport { LoginUriView } from \"../view/login-uri.view\";\n\nexport class LoginUri extends Domain {\n  uri: EncString;\n  uriChecksum: EncString | undefined;\n  match: UriMatchStrategySetting;\n\n  constructor(obj?: LoginUriData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.match = obj.match;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        uri: null,\n        uriChecksum: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginUriView> {\n    return this.decryptObj(\n      new LoginUriView(this),\n      {\n        uri: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  async validateChecksum(clearTextUri: string, orgId: string, encKey: SymmetricCryptoKey) {\n    if (this.uriChecksum == null) {\n      return false;\n    }\n\n    const cryptoService = Utils.getContainerService().getEncryptService();\n    const localChecksum = await cryptoService.hash(clearTextUri, \"sha256\");\n\n    const remoteChecksum = await this.uriChecksum.decrypt(orgId, encKey);\n    return remoteChecksum === localChecksum;\n  }\n\n  toLoginUriData(): LoginUriData {\n    const u = new LoginUriData();\n    this.buildDataModel(\n      this,\n      u,\n      {\n        uri: null,\n        uriChecksum: null,\n        match: null,\n      },\n      [\"match\"],\n    );\n    return u;\n  }\n\n  static fromJSON(obj: Jsonify<LoginUri>): LoginUri {\n    if (obj == null) {\n      return null;\n    }\n\n    const uri = EncString.fromJSON(obj.uri);\n    const uriChecksum = EncString.fromJSON(obj.uriChecksum);\n    return Object.assign(new LoginUri(), obj, {\n      uri,\n      uriChecksum,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { LoginData } from \"../data/login.data\";\nimport { LoginView } from \"../view/login.view\";\n\nimport { Fido2Credential } from \"./fido2-credential\";\nimport { LoginUri } from \"./login-uri\";\n\nexport class Login extends Domain {\n  uris: LoginUri[];\n  username: EncString;\n  password: EncString;\n  passwordRevisionDate?: Date;\n  totp: EncString;\n  autofillOnPageLoad: boolean;\n  fido2Credentials: Fido2Credential[];\n\n  constructor(obj?: LoginData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.passwordRevisionDate =\n      obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;\n    this.autofillOnPageLoad = obj.autofillOnPageLoad;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      [],\n    );\n\n    if (obj.uris) {\n      this.uris = [];\n      obj.uris.forEach((u) => {\n        this.uris.push(new LoginUri(u));\n      });\n    }\n\n    if (obj.fido2Credentials) {\n      this.fido2Credentials = obj.fido2Credentials.map((key) => new Fido2Credential(key));\n    }\n  }\n\n  async decrypt(\n    orgId: string,\n    bypassValidation: boolean,\n    encKey?: SymmetricCryptoKey,\n  ): Promise<LoginView> {\n    const view = await this.decryptObj(\n      new LoginView(this),\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      orgId,\n      encKey,\n    );\n\n    if (this.uris != null) {\n      view.uris = [];\n      for (let i = 0; i < this.uris.length; i++) {\n        const uri = await this.uris[i].decrypt(orgId, encKey);\n        // URIs are shared remotely after decryption\n        // we need to validate that the string hasn't been changed by a compromised server\n        // This validation is tied to the existence of cypher.key for backwards compatibility\n        // So we bypass the validation if there's no cipher.key or procceed with the validation and\n        // Skip the value if it's been tampered with.\n        if (bypassValidation || (await this.uris[i].validateChecksum(uri.uri, orgId, encKey))) {\n          view.uris.push(uri);\n        }\n      }\n    }\n\n    if (this.fido2Credentials != null) {\n      view.fido2Credentials = await Promise.all(\n        this.fido2Credentials.map((key) => key.decrypt(orgId, encKey)),\n      );\n    }\n\n    return view;\n  }\n\n  toLoginData(): LoginData {\n    const l = new LoginData();\n    l.passwordRevisionDate =\n      this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;\n    l.autofillOnPageLoad = this.autofillOnPageLoad;\n    this.buildDataModel(this, l, {\n      username: null,\n      password: null,\n      totp: null,\n    });\n\n    if (this.uris != null && this.uris.length > 0) {\n      l.uris = [];\n      this.uris.forEach((u) => {\n        l.uris.push(u.toLoginUriData());\n      });\n    }\n\n    if (this.fido2Credentials != null && this.fido2Credentials.length > 0) {\n      l.fido2Credentials = this.fido2Credentials.map((key) => key.toFido2CredentialData());\n    }\n\n    return l;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Login>>): Login {\n    if (obj == null) {\n      return null;\n    }\n\n    const username = EncString.fromJSON(obj.username);\n    const password = EncString.fromJSON(obj.password);\n    const totp = EncString.fromJSON(obj.totp);\n    const passwordRevisionDate =\n      obj.passwordRevisionDate == null ? null : new Date(obj.passwordRevisionDate);\n    const uris = obj.uris?.map((uri: any) => LoginUri.fromJSON(uri));\n    const fido2Credentials =\n      obj.fido2Credentials?.map((key) => Fido2Credential.fromJSON(key)) ?? [];\n\n    return Object.assign(new Login(), obj, {\n      username,\n      password,\n      totp,\n      passwordRevisionDate,\n      uris,\n      fido2Credentials,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { PasswordHistoryData } from \"../data/password-history.data\";\nimport { PasswordHistoryView } from \"../view/password-history.view\";\n\nexport class Password extends Domain {\n  password: EncString;\n  lastUsedDate: Date;\n\n  constructor(obj?: PasswordHistoryData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(this, obj, {\n      password: null,\n    });\n    this.lastUsedDate = new Date(obj.lastUsedDate);\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<PasswordHistoryView> {\n    return this.decryptObj(\n      new PasswordHistoryView(this),\n      {\n        password: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  toPasswordHistoryData(): PasswordHistoryData {\n    const ph = new PasswordHistoryData();\n    ph.lastUsedDate = this.lastUsedDate.toISOString();\n    this.buildDataModel(this, ph, {\n      password: null,\n    });\n    return ph;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Password>>): Password {\n    if (obj == null) {\n      return null;\n    }\n\n    const password = EncString.fromJSON(obj.password);\n    const lastUsedDate = obj.lastUsedDate == null ? null : new Date(obj.lastUsedDate);\n\n    return Object.assign(new Password(), obj, {\n      password,\n      lastUsedDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { SecureNoteType } from \"../../enums\";\nimport { SecureNoteData } from \"../data/secure-note.data\";\nimport { SecureNoteView } from \"../view/secure-note.view\";\n\nexport class SecureNote extends Domain {\n  type: SecureNoteType;\n\n  constructor(obj?: SecureNoteData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<SecureNoteView> {\n    return Promise.resolve(new SecureNoteView(this));\n  }\n\n  toSecureNoteData(): SecureNoteData {\n    const n = new SecureNoteData();\n    n.type = this.type;\n    return n;\n  }\n\n  static fromJSON(obj: Jsonify<SecureNote>): SecureNote {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new SecureNote(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Decryptable } from \"../../../platform/interfaces/decryptable.interface\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { InitializerKey } from \"../../../platform/services/cryptography/initializer-key\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CipherData } from \"../data/cipher.data\";\nimport { LocalData } from \"../data/local.data\";\nimport { CipherView } from \"../view/cipher.view\";\n\nimport { Attachment } from \"./attachment\";\nimport { Card } from \"./card\";\nimport { Field } from \"./field\";\nimport { Identity } from \"./identity\";\nimport { Login } from \"./login\";\nimport { Password } from \"./password\";\nimport { SecureNote } from \"./secure-note\";\n\nexport class Cipher extends Domain implements Decryptable<CipherView> {\n  readonly initializerKey = InitializerKey.Cipher;\n\n  id: string;\n  organizationId: string;\n  folderId: string;\n  name: EncString;\n  notes: EncString;\n  type: CipherType;\n  favorite: boolean;\n  organizationUseTotp: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  revisionDate: Date;\n  localData: LocalData;\n  login: Login;\n  identity: Identity;\n  card: Card;\n  secureNote: SecureNote;\n  attachments: Attachment[];\n  fields: Field[];\n  passwordHistory: Password[];\n  collectionIds: string[];\n  creationDate: Date;\n  deletedDate: Date;\n  reprompt: CipherRepromptType;\n  key: EncString;\n\n  constructor(obj?: CipherData, localData: LocalData = null) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        folderId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"organizationId\", \"folderId\"],\n    );\n\n    this.type = obj.type;\n    this.favorite = obj.favorite;\n    this.organizationUseTotp = obj.organizationUseTotp;\n    this.edit = obj.edit;\n    if (obj.viewPassword != null) {\n      this.viewPassword = obj.viewPassword;\n    } else {\n      this.viewPassword = true; // Default for already synced Ciphers without viewPassword\n    }\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.collectionIds = obj.collectionIds;\n    this.localData = localData;\n    this.creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n    this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;\n    this.reprompt = obj.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new Login(obj.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNote(obj.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new Card(obj.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new Identity(obj.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (obj.attachments != null) {\n      this.attachments = obj.attachments.map((a) => new Attachment(a));\n    } else {\n      this.attachments = null;\n    }\n\n    if (obj.fields != null) {\n      this.fields = obj.fields.map((f) => new Field(f));\n    } else {\n      this.fields = null;\n    }\n\n    if (obj.passwordHistory != null) {\n      this.passwordHistory = obj.passwordHistory.map((ph) => new Password(ph));\n    } else {\n      this.passwordHistory = null;\n    }\n  }\n\n  // We are passing the organizationId into the EncString.decrypt() method here, but because the encKey will always be\n  // present and so the organizationId will not be used.\n  // We will refactor the EncString.decrypt() in https://bitwarden.atlassian.net/browse/PM-3762 to remove the dependency on the organizationId.\n  async decrypt(encKey: SymmetricCryptoKey): Promise<CipherView> {\n    const model = new CipherView(this);\n    let bypassValidation = true;\n\n    if (this.key != null) {\n      const encryptService = Utils.getContainerService().getEncryptService();\n      encKey = new SymmetricCryptoKey(await encryptService.decryptToBytes(this.key, encKey));\n      bypassValidation = false;\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      this.organizationId,\n      encKey,\n    );\n\n    switch (this.type) {\n      case CipherType.Login:\n        model.login = await this.login.decrypt(this.organizationId, bypassValidation, encKey);\n        break;\n      case CipherType.SecureNote:\n        model.secureNote = await this.secureNote.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Card:\n        model.card = await this.card.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Identity:\n        model.identity = await this.identity.decrypt(this.organizationId, encKey);\n        break;\n      default:\n        break;\n    }\n\n    if (this.attachments != null && this.attachments.length > 0) {\n      const attachments: any[] = [];\n      await this.attachments.reduce((promise, attachment) => {\n        return promise\n          .then(() => {\n            return attachment.decrypt(this.organizationId, encKey);\n          })\n          .then((decAttachment) => {\n            attachments.push(decAttachment);\n          });\n      }, Promise.resolve());\n      model.attachments = attachments;\n    }\n\n    if (this.fields != null && this.fields.length > 0) {\n      const fields: any[] = [];\n      await this.fields.reduce((promise, field) => {\n        return promise\n          .then(() => {\n            return field.decrypt(this.organizationId, encKey);\n          })\n          .then((decField) => {\n            fields.push(decField);\n          });\n      }, Promise.resolve());\n      model.fields = fields;\n    }\n\n    if (this.passwordHistory != null && this.passwordHistory.length > 0) {\n      const passwordHistory: any[] = [];\n      await this.passwordHistory.reduce((promise, ph) => {\n        return promise\n          .then(() => {\n            return ph.decrypt(this.organizationId, encKey);\n          })\n          .then((decPh) => {\n            passwordHistory.push(decPh);\n          });\n      }, Promise.resolve());\n      model.passwordHistory = passwordHistory;\n    }\n\n    return model;\n  }\n\n  toCipherData(): CipherData {\n    const c = new CipherData();\n    c.id = this.id;\n    c.organizationId = this.organizationId;\n    c.folderId = this.folderId;\n    c.edit = this.edit;\n    c.viewPassword = this.viewPassword;\n    c.organizationUseTotp = this.organizationUseTotp;\n    c.favorite = this.favorite;\n    c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;\n    c.type = this.type;\n    c.collectionIds = this.collectionIds;\n    c.creationDate = this.creationDate != null ? this.creationDate.toISOString() : null;\n    c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;\n    c.reprompt = this.reprompt;\n    c.key = this.key?.encryptedString;\n\n    this.buildDataModel(this, c, {\n      name: null,\n      notes: null,\n    });\n\n    switch (c.type) {\n      case CipherType.Login:\n        c.login = this.login.toLoginData();\n        break;\n      case CipherType.SecureNote:\n        c.secureNote = this.secureNote.toSecureNoteData();\n        break;\n      case CipherType.Card:\n        c.card = this.card.toCardData();\n        break;\n      case CipherType.Identity:\n        c.identity = this.identity.toIdentityData();\n        break;\n      default:\n        break;\n    }\n\n    if (this.fields != null) {\n      c.fields = this.fields.map((f) => f.toFieldData());\n    }\n    if (this.attachments != null) {\n      c.attachments = this.attachments.map((a) => a.toAttachmentData());\n    }\n    if (this.passwordHistory != null) {\n      c.passwordHistory = this.passwordHistory.map((ph) => ph.toPasswordHistoryData());\n    }\n    return c;\n  }\n\n  static fromJSON(obj: Jsonify<Cipher>) {\n    if (obj == null) {\n      return null;\n    }\n\n    const domain = new Cipher();\n    const name = EncString.fromJSON(obj.name);\n    const notes = EncString.fromJSON(obj.notes);\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const deletedDate = obj.deletedDate == null ? null : new Date(obj.deletedDate);\n    const attachments = obj.attachments?.map((a: any) => Attachment.fromJSON(a));\n    const fields = obj.fields?.map((f: any) => Field.fromJSON(f));\n    const passwordHistory = obj.passwordHistory?.map((ph: any) => Password.fromJSON(ph));\n    const key = EncString.fromJSON(obj.key);\n\n    Object.assign(domain, obj, {\n      name,\n      notes,\n      revisionDate,\n      deletedDate,\n      attachments,\n      fields,\n      passwordHistory,\n      key,\n    });\n\n    switch (obj.type) {\n      case CipherType.Card:\n        domain.card = Card.fromJSON(obj.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = Identity.fromJSON(obj.identity);\n        break;\n      case CipherType.Login:\n        domain.login = Login.fromJSON(obj.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNote.fromJSON(obj.secureNote);\n        break;\n      default:\n        break;\n    }\n\n    return domain;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Cipher } from \"../../../vault/models/domain/cipher\";\nimport { CipherView } from \"../../../vault/models/view/cipher.view\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\n\nimport { InitializerKey } from \"./initializer-key\";\n\n/**\n * Internal reference of classes so we can reconstruct objects properly.\n * Each entry should be keyed using the Decryptable.initializerKey property\n */\nconst classInitializers: Record<InitializerKey, (obj: any) => any> = {\n  [InitializerKey.Cipher]: Cipher.fromJSON,\n  [InitializerKey.CipherView]: CipherView.fromJSON,\n};\n\nexport function getClassInitializer<T extends InitializerMetadata>(\n  className: InitializerKey,\n): (obj: Jsonify<T>) => T {\n  return classInitializers[className];\n}\n","import { defaultIfEmpty, filter, firstValueFrom, fromEvent, map, Subject, takeUntil } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { Decryptable } from \"../../interfaces/decryptable.interface\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\n\nimport { EncryptServiceImplementation } from \"./encrypt.service.implementation\";\nimport { getClassInitializer } from \"./get-class-initializer\";\n\n// TTL (time to live) is not strictly required but avoids tying up memory resources if inactive\nconst workerTTL = 3 * 60000; // 3 minutes\n\nexport class MultithreadEncryptServiceImplementation extends EncryptServiceImplementation {\n  private worker: Worker;\n  private timeout: any;\n\n  private clear$ = new Subject<void>();\n\n  /**\n   * Sends items to a web worker to decrypt them.\n   * This utilises multithreading to decrypt items faster without interrupting other operations (e.g. updating UI).\n   */\n  async decryptItems<T extends InitializerMetadata>(\n    items: Decryptable<T>[],\n    key: SymmetricCryptoKey,\n  ): Promise<T[]> {\n    if (items == null || items.length < 1) {\n      return [];\n    }\n\n    this.logService.info(\"Starting decryption using multithreading\");\n\n    this.worker ??= new Worker(\n      new URL(\n        /* webpackChunkName: 'encrypt-worker' */\n        \"@bitwarden/common/platform/services/cryptography/encrypt.worker.ts\",\n        import.meta.url,\n      ),\n    );\n\n    this.restartTimeout();\n\n    const request = {\n      id: Utils.newGuid(),\n      items: items,\n      key: key,\n    };\n\n    this.worker.postMessage(JSON.stringify(request));\n\n    return await firstValueFrom(\n      fromEvent(this.worker, \"message\").pipe(\n        filter((response: MessageEvent) => response.data?.id === request.id),\n        map((response) => JSON.parse(response.data.items)),\n        map((items) =>\n          items.map((jsonItem: Jsonify<T>) => {\n            const initializer = getClassInitializer<T>(jsonItem.initializerKey);\n            return initializer(jsonItem);\n          }),\n        ),\n        takeUntil(this.clear$),\n        defaultIfEmpty([]),\n      ),\n    );\n  }\n\n  private clear() {\n    this.clear$.next();\n    this.worker?.terminate();\n    this.worker = null;\n    this.clearTimeout();\n  }\n\n  private restartTimeout() {\n    this.clearTimeout();\n    this.timeout = setTimeout(() => this.clear(), workerTTL);\n  }\n\n  private clearTimeout() {\n    if (this.timeout != null) {\n      clearTimeout(this.timeout);\n    }\n  }\n}\n","import { LogService } from \"../../abstractions/log.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\n\nconst MAX_SINGLE_BLOB_UPLOAD_SIZE = 256 * 1024 * 1024; // 256 MiB\nconst MAX_BLOCKS_PER_BLOB = 50000;\n\nexport class AzureFileUploadService {\n  constructor(private logService: LogService) {}\n\n  async upload(url: string, data: EncArrayBuffer, renewalCallback: () => Promise<string>) {\n    if (data.buffer.byteLength <= MAX_SINGLE_BLOB_UPLOAD_SIZE) {\n      return await this.azureUploadBlob(url, data);\n    } else {\n      return await this.azureUploadBlocks(url, data, renewalCallback);\n    }\n  }\n  private async azureUploadBlob(url: string, data: EncArrayBuffer) {\n    const urlObject = Utils.getUrl(url);\n    const headers = new Headers({\n      \"x-ms-date\": new Date().toUTCString(),\n      \"x-ms-version\": urlObject.searchParams.get(\"sv\"),\n      \"Content-Length\": data.buffer.byteLength.toString(),\n      \"x-ms-blob-type\": \"BlockBlob\",\n    });\n\n    const request = new Request(url, {\n      body: data.buffer,\n      cache: \"no-store\",\n      method: \"PUT\",\n      headers: headers,\n    });\n\n    const blobResponse = await fetch(request);\n\n    if (blobResponse.status !== 201) {\n      throw new Error(`Failed to create Azure blob: ${blobResponse.status}`);\n    }\n  }\n  private async azureUploadBlocks(\n    url: string,\n    data: EncArrayBuffer,\n    renewalCallback: () => Promise<string>,\n  ) {\n    const baseUrl = Utils.getUrl(url);\n    const blockSize = this.getMaxBlockSize(baseUrl.searchParams.get(\"sv\"));\n    let blockIndex = 0;\n    const numBlocks = Math.ceil(data.buffer.byteLength / blockSize);\n    const blocksStaged: string[] = [];\n\n    if (numBlocks > MAX_BLOCKS_PER_BLOB) {\n      throw new Error(\n        `Cannot upload file, exceeds maximum size of ${blockSize * MAX_BLOCKS_PER_BLOB}`,\n      );\n    }\n\n    // eslint-disable-next-line\n    try {\n      while (blockIndex < numBlocks) {\n        url = await this.renewUrlIfNecessary(url, renewalCallback);\n        const blockUrl = Utils.getUrl(url);\n        const blockId = this.encodedBlockId(blockIndex);\n        blockUrl.searchParams.append(\"comp\", \"block\");\n        blockUrl.searchParams.append(\"blockid\", blockId);\n        const start = blockIndex * blockSize;\n        const blockData = data.buffer.slice(start, start + blockSize);\n        const blockHeaders = new Headers({\n          \"x-ms-date\": new Date().toUTCString(),\n          \"x-ms-version\": blockUrl.searchParams.get(\"sv\"),\n          \"Content-Length\": blockData.byteLength.toString(),\n        });\n\n        const blockRequest = new Request(blockUrl.toString(), {\n          body: blockData,\n          cache: \"no-store\",\n          method: \"PUT\",\n          headers: blockHeaders,\n        });\n\n        const blockResponse = await fetch(blockRequest);\n\n        if (blockResponse.status !== 201) {\n          const message = `Unsuccessful block PUT. Received status ${blockResponse.status}`;\n          this.logService.error(message + \"\\n\" + (await blockResponse.json()));\n          throw new Error(message);\n        }\n\n        blocksStaged.push(blockId);\n        blockIndex++;\n      }\n\n      url = await this.renewUrlIfNecessary(url, renewalCallback);\n      const blockListUrl = Utils.getUrl(url);\n      const blockListXml = this.blockListXml(blocksStaged);\n      blockListUrl.searchParams.append(\"comp\", \"blocklist\");\n      const headers = new Headers({\n        \"x-ms-date\": new Date().toUTCString(),\n        \"x-ms-version\": blockListUrl.searchParams.get(\"sv\"),\n        \"Content-Length\": blockListXml.length.toString(),\n      });\n\n      const request = new Request(blockListUrl.toString(), {\n        body: blockListXml,\n        cache: \"no-store\",\n        method: \"PUT\",\n        headers: headers,\n      });\n\n      const response = await fetch(request);\n\n      if (response.status !== 201) {\n        const message = `Unsuccessful block list PUT. Received status ${response.status}`;\n        this.logService.error(message + \"\\n\" + (await response.json()));\n        throw new Error(message);\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private async renewUrlIfNecessary(\n    url: string,\n    renewalCallback: () => Promise<string>,\n  ): Promise<string> {\n    const urlObject = Utils.getUrl(url);\n    const expiry = new Date(urlObject.searchParams.get(\"se\") ?? \"\");\n\n    if (isNaN(expiry.getTime())) {\n      expiry.setTime(Date.now() + 3600000);\n    }\n\n    if (expiry.getTime() < Date.now() + 1000) {\n      return await renewalCallback();\n    }\n    return url;\n  }\n\n  private encodedBlockId(blockIndex: number) {\n    // Encoded blockId max size is 64, so pre-encoding max size is 48\n    const utfBlockId = (\n      \"000000000000000000000000000000000000000000000000\" + blockIndex.toString()\n    ).slice(-48);\n    return Utils.fromUtf8ToB64(utfBlockId);\n  }\n\n  private blockListXml(blockIdList: string[]) {\n    let xml = '<?xml version=\"1.0\" encoding=\"utf-8\"?><BlockList>';\n    blockIdList.forEach((blockId) => {\n      xml += `<Latest>${blockId}</Latest>`;\n    });\n    xml += \"</BlockList>\";\n    return xml;\n  }\n\n  private getMaxBlockSize(version: string) {\n    if (Version.compare(version, \"2019-12-12\") >= 0) {\n      return 4000 * 1024 * 1024; // 4000 MiB\n    } else if (Version.compare(version, \"2016-05-31\") >= 0) {\n      return 100 * 1024 * 1024; // 100 MiB\n    } else {\n      return 4 * 1024 * 1024; // 4 MiB\n    }\n  }\n}\n\nclass Version {\n  /**\n   * Compares two Azure Versions against each other\n   * @param a Version to compare\n   * @param b Version to compare\n   * @returns a number less than zero if b is newer than a, 0 if equal,\n   * and greater than zero if a is newer than b\n   */\n  static compare(a: Required<Version> | string, b: Required<Version> | string) {\n    if (typeof a === \"string\") {\n      a = new Version(a);\n    }\n\n    if (typeof b === \"string\") {\n      b = new Version(b);\n    }\n\n    return a.year !== b.year\n      ? a.year - b.year\n      : a.month !== b.month\n        ? a.month - b.month\n        : a.day !== b.day\n          ? a.day - b.day\n          : 0;\n  }\n  year = 0;\n  month = 0;\n  day = 0;\n\n  constructor(version: string) {\n    try {\n      const parts = version.split(\"-\").map((v) => Number.parseInt(v, 10));\n      this.year = parts[0];\n      this.month = parts[1];\n      this.day = parts[2];\n    } catch {\n      // Ignore error\n    }\n  }\n  /**\n   * Compares two Azure Versions against each other\n   * @param compareTo Version to compare against\n   * @returns a number less than zero if compareTo is newer, 0 if equal,\n   * and greater than zero if this is greater than compareTo\n   */\n  compare(compareTo: Required<Version> | string) {\n    return Version.compare(this, compareTo);\n  }\n}\n","import { Utils } from \"../../misc/utils\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\n\nexport class BitwardenFileUploadService {\n  async upload(\n    encryptedFileName: string,\n    encryptedFileData: EncArrayBuffer,\n    apiCall: (fd: FormData) => Promise<any>,\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encryptedFileData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"data\", blob, encryptedFileName);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\n          \"data\",\n          Buffer.from(encryptedFileData.buffer) as any,\n          {\n            filepath: encryptedFileName,\n            contentType: \"application/octet-stream\",\n          } as any,\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    await apiCall(fd);\n  }\n}\n","import {\n  FileUploadApiMethods,\n  FileUploadService as FileUploadServiceAbstraction,\n} from \"../../abstractions/file-upload/file-upload.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { FileUploadType } from \"../../enums\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\nimport { EncString } from \"../../models/domain/enc-string\";\n\nimport { AzureFileUploadService } from \"./azure-file-upload.service\";\nimport { BitwardenFileUploadService } from \"./bitwarden-file-upload.service\";\n\nexport class FileUploadService implements FileUploadServiceAbstraction {\n  private azureFileUploadService: AzureFileUploadService;\n  private bitwardenFileUploadService: BitwardenFileUploadService;\n\n  constructor(protected logService: LogService) {\n    this.azureFileUploadService = new AzureFileUploadService(logService);\n    this.bitwardenFileUploadService = new BitwardenFileUploadService();\n  }\n\n  async upload(\n    uploadData: { url: string; fileUploadType: FileUploadType },\n    fileName: EncString,\n    encryptedFileData: EncArrayBuffer,\n    fileUploadMethods: FileUploadApiMethods,\n  ) {\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            fileName.encryptedString,\n            encryptedFileData,\n            (fd) => fileUploadMethods.postDirect(fd),\n          );\n          break;\n        case FileUploadType.Azure: {\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            fileUploadMethods.renewFileUploadUrl,\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type\");\n      }\n    } catch (e) {\n      await fileUploadMethods.rollback();\n      throw e;\n    }\n  }\n}\n","import { KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport { CsprngArray } from \"../../types/csprng\";\nimport { CryptoFunctionService } from \"../abstractions/crypto-function.service\";\nimport { KeyGenerationService as KeyGenerationServiceAbstraction } from \"../abstractions/key-generation.service\";\nimport {\n  ARGON2_ITERATIONS,\n  ARGON2_MEMORY,\n  ARGON2_PARALLELISM,\n  KdfType,\n  PBKDF2_ITERATIONS,\n} from \"../enums\";\nimport { Utils } from \"../misc/utils\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\nexport class KeyGenerationService implements KeyGenerationServiceAbstraction {\n  constructor(private cryptoFunctionService: CryptoFunctionService) {}\n\n  async createKey(bitLength: 256 | 512): Promise<SymmetricCryptoKey> {\n    const key = await this.cryptoFunctionService.aesGenerateKey(bitLength);\n    return new SymmetricCryptoKey(key);\n  }\n\n  async createKeyWithPurpose(\n    bitLength: 128 | 192 | 256 | 512,\n    purpose: string,\n    salt?: string,\n  ): Promise<{ salt: string; material: CsprngArray; derivedKey: SymmetricCryptoKey }> {\n    if (salt == null) {\n      const bytes = await this.cryptoFunctionService.randomBytes(32);\n      salt = Utils.fromBufferToUtf8(bytes);\n    }\n    const material = await this.cryptoFunctionService.aesGenerateKey(bitLength);\n    const key = await this.cryptoFunctionService.hkdf(material, salt, purpose, 64, \"sha256\");\n    return { salt, material, derivedKey: new SymmetricCryptoKey(key) };\n  }\n\n  async deriveKeyFromMaterial(\n    material: CsprngArray,\n    salt: string,\n    purpose: string,\n  ): Promise<SymmetricCryptoKey> {\n    const key = await this.cryptoFunctionService.hkdf(material, salt, purpose, 64, \"sha256\");\n    return new SymmetricCryptoKey(key);\n  }\n\n  async deriveKeyFromPassword(\n    password: string | Uint8Array,\n    salt: string | Uint8Array,\n    kdf: KdfType,\n    kdfConfig: KdfConfig,\n  ): Promise<SymmetricCryptoKey> {\n    let key: Uint8Array = null;\n    if (kdf == null || kdf === KdfType.PBKDF2_SHA256) {\n      if (kdfConfig.iterations == null) {\n        kdfConfig.iterations = PBKDF2_ITERATIONS.defaultValue;\n      }\n\n      key = await this.cryptoFunctionService.pbkdf2(password, salt, \"sha256\", kdfConfig.iterations);\n    } else if (kdf == KdfType.Argon2id) {\n      if (kdfConfig.iterations == null) {\n        kdfConfig.iterations = ARGON2_ITERATIONS.defaultValue;\n      }\n\n      if (kdfConfig.memory == null) {\n        kdfConfig.memory = ARGON2_MEMORY.defaultValue;\n      }\n\n      if (kdfConfig.parallelism == null) {\n        kdfConfig.parallelism = ARGON2_PARALLELISM.defaultValue;\n      }\n\n      const saltHash = await this.cryptoFunctionService.hash(salt, \"sha256\");\n      key = await this.cryptoFunctionService.argon2(\n        password,\n        saltHash,\n        kdfConfig.iterations,\n        kdfConfig.memory * 1024, // convert to KiB from MiB\n        kdfConfig.parallelism,\n      );\n    } else {\n      throw new Error(\"Unknown Kdf.\");\n    }\n    return new SymmetricCryptoKey(key);\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { MemoryStorageOptions, StorageOptions } from \"../models/domain/storage-options\";\n\nexport type StorageUpdateType = \"save\" | \"remove\";\nexport type StorageUpdate = {\n  key: string;\n  updateType: StorageUpdateType;\n};\n\nexport interface ObservableStorageService {\n  /**\n   * Provides an {@link Observable} that represents a stream of updates that\n   * have happened in this storage service or in the storage this service provides\n   * an interface to.\n   */\n  get updates$(): Observable<StorageUpdate>;\n}\n\nexport abstract class AbstractStorageService {\n  abstract get valuesRequireDeserialization(): boolean;\n  abstract get<T>(key: string, options?: StorageOptions): Promise<T>;\n  abstract has(key: string, options?: StorageOptions): Promise<boolean>;\n  abstract save<T>(key: string, obj: T, options?: StorageOptions): Promise<void>;\n  abstract remove(key: string, options?: StorageOptions): Promise<void>;\n}\n\nexport abstract class AbstractMemoryStorageService extends AbstractStorageService {\n  // Used to identify the service in the session sync decorator framework\n  static readonly TYPE = \"MemoryStorageService\";\n  readonly type = AbstractMemoryStorageService.TYPE;\n\n  abstract get<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T>;\n  abstract getBypassCache<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T>;\n}\n","import { Subject } from \"rxjs\";\n\nimport { AbstractMemoryStorageService, StorageUpdate } from \"../abstractions/storage.service\";\n\nexport class MemoryStorageService extends AbstractMemoryStorageService {\n  protected store = new Map<string, unknown>();\n  private updatesSubject = new Subject<StorageUpdate>();\n\n  get valuesRequireDeserialization(): boolean {\n    return false;\n  }\n  get updates$() {\n    return this.updatesSubject.asObservable();\n  }\n\n  get<T>(key: string): Promise<T> {\n    if (this.store.has(key)) {\n      const obj = this.store.get(key);\n      return Promise.resolve(obj as T);\n    }\n    return Promise.resolve(null);\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  save<T>(key: string, obj: T): Promise<void> {\n    if (obj == null) {\n      return this.remove(key);\n    }\n    // TODO: Remove once foreground/background contexts are separated in browser\n    // Needed to ensure ownership of all memory by the context running the storage service\n    const toStore = structuredClone(obj);\n    this.store.set(key, toStore);\n    this.updatesSubject.next({ key, updateType: \"save\" });\n    return Promise.resolve();\n  }\n\n  remove(key: string): Promise<void> {\n    this.store.delete(key);\n    this.updatesSubject.next({ key, updateType: \"remove\" });\n    return Promise.resolve();\n  }\n\n  getBypassCache<T>(key: string): Promise<T> {\n    return this.get<T>(key);\n  }\n}\n","import { MigrationHelper } from \"./migration-helper\";\nimport { Direction, Migrator, VersionFrom, VersionTo } from \"./migrator\";\n\nexport class MigrationBuilder<TCurrent extends number = 0> {\n  /** Create a new MigrationBuilder with an empty buffer of migrations to perform.\n   *\n   * Add migrations to the buffer with {@link with} and {@link rollback}.\n   * @returns A new MigrationBuilder.\n   */\n  static create(): MigrationBuilder<0> {\n    return new MigrationBuilder([]);\n  }\n\n  private constructor(\n    private migrations: readonly { migrator: Migrator<number, number>; direction: Direction }[],\n  ) {}\n\n  /** Add a migrator to the MigrationBuilder. Types are updated such that the chained MigrationBuilder must currently be\n   * at state version equal to the from version of the migrator. Return as MigrationBuilder<TTo> where TTo is the to\n   * version of the migrator, so that the next migrator can be chained.\n   *\n   * @param migrate A migrator class or a tuple of a migrator class, the from version, and the to version. A tuple is\n   * required to instantiate version numbers unless a default constructor is defined.\n   * @returns A new MigrationBuilder with the to version of the migrator as the current version.\n   */\n  with<\n    TMigrator extends Migrator<number, number>,\n    TFrom extends VersionFrom<TMigrator> & TCurrent,\n    TTo extends VersionTo<TMigrator>,\n  >(\n    ...migrate: [new () => TMigrator] | [new (from: TFrom, to: TTo) => TMigrator, TFrom, TTo]\n  ): MigrationBuilder<TTo> {\n    return this.addMigrator(migrate, \"up\");\n  }\n\n  /** Add a migrator to rollback on the MigrationBuilder's list of migrations. As with {@link with}, types of\n   * MigrationBuilder and Migrator must align. However, this time the migration is reversed so TCurrent of the\n   * MigrationBuilder must be equal to the to version of the migrator. Return as MigrationBuilder<TFrom> where TFrom\n   * is the from version of the migrator, so that the next migrator can be chained.\n   *\n   * @param migrate A migrator class or a tuple of a migrator class, the from version, and the to version. A tuple is\n   * required to instantiate version numbers unless a default constructor is defined.\n   * @returns A new MigrationBuilder with the from version of the migrator as the current version.\n   */\n  rollback<\n    TMigrator extends Migrator<number, number>,\n    TFrom extends VersionFrom<TMigrator>,\n    TTo extends VersionTo<TMigrator> & TCurrent,\n  >(\n    ...migrate: [new () => TMigrator] | [new (from: TFrom, to: TTo) => TMigrator, TTo, TFrom]\n  ): MigrationBuilder<TFrom> {\n    if (migrate.length === 3) {\n      migrate = [migrate[0], migrate[2], migrate[1]];\n    }\n    return this.addMigrator(migrate, \"down\");\n  }\n\n  /** Execute the migrations as defined in the MigrationBuilder's migrator buffer */\n  migrate(helper: MigrationHelper): Promise<void> {\n    return this.migrations.reduce(\n      (promise, migrator) =>\n        promise.then(async () => {\n          await this.runMigrator(migrator.migrator, helper, migrator.direction);\n        }),\n      Promise.resolve(),\n    );\n  }\n\n  private addMigrator<\n    TMigrator extends Migrator<number, number>,\n    TFrom extends VersionFrom<TMigrator> & TCurrent,\n    TTo extends VersionTo<TMigrator>,\n  >(\n    migrate: [new () => TMigrator] | [new (from: TFrom, to: TTo) => TMigrator, TFrom, TTo],\n    direction: Direction = \"up\",\n  ) {\n    const newMigration =\n      migrate.length === 1\n        ? { migrator: new migrate[0](), direction }\n        : { migrator: new migrate[0](migrate[1], migrate[2]), direction };\n\n    return new MigrationBuilder<TTo>([...this.migrations, newMigration]);\n  }\n\n  private async runMigrator(\n    migrator: Migrator<number, number>,\n    helper: MigrationHelper,\n    direction: Direction,\n  ): Promise<void> {\n    const shouldMigrate = await migrator.shouldMigrate(helper, direction);\n    helper.info(\n      `Migrator ${migrator.constructor.name} (to version ${migrator.toVersion}) should migrate: ${shouldMigrate} - ${direction}`,\n    );\n    if (shouldMigrate) {\n      const method = direction === \"up\" ? migrator.migrate : migrator.rollback;\n      await method.bind(migrator)(helper);\n      helper.info(\n        `Migrator ${migrator.constructor.name} (to version ${migrator.toVersion}) migrated - ${direction}`,\n      );\n      await migrator.updateVersion(helper, direction);\n      helper.info(\n        `Migrator ${migrator.constructor.name} (to version ${migrator.toVersion}) updated version - ${direction}`,\n      );\n    }\n  }\n}\n","import { NonNegativeInteger } from \"type-fest\";\n\nimport { MigrationHelper } from \"./migration-helper\";\n\nexport const IRREVERSIBLE = new Error(\"Irreversible migration\");\n\nexport type VersionFrom<T> =\n  T extends Migrator<infer TFrom, number>\n    ? TFrom extends NonNegativeInteger<TFrom>\n      ? TFrom\n      : never\n    : never;\nexport type VersionTo<T> =\n  T extends Migrator<number, infer TTo>\n    ? TTo extends NonNegativeInteger<TTo>\n      ? TTo\n      : never\n    : never;\nexport type Direction = \"up\" | \"down\";\n\nexport abstract class Migrator<TFrom extends number, TTo extends number> {\n  constructor(\n    public fromVersion: TFrom,\n    public toVersion: TTo,\n  ) {\n    if (fromVersion == null || toVersion == null) {\n      throw new Error(\"Invalid migration\");\n    }\n    if (fromVersion > toVersion) {\n      throw new Error(\"Invalid migration\");\n    }\n  }\n\n  shouldMigrate(helper: MigrationHelper, direction: Direction): Promise<boolean> {\n    const startVersion = direction === \"up\" ? this.fromVersion : this.toVersion;\n    return Promise.resolve(helper.currentVersion === startVersion);\n  }\n  abstract migrate(helper: MigrationHelper): Promise<void>;\n  abstract rollback(helper: MigrationHelper): Promise<void>;\n  async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    await helper.set(\"stateVersion\", endVersion);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  profile?: {\n    everHadUserKey?: boolean;\n  };\n};\n\nconst USER_EVER_HAD_USER_KEY: KeyDefinitionLike = {\n  key: \"everHadUserKey\",\n  stateDefinition: {\n    name: \"crypto\",\n  },\n};\n\nexport class EverHadUserKeyMigrator extends Migrator<9, 10> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.profile?.everHadUserKey;\n      await helper.setToUser(userId, USER_EVER_HAD_USER_KEY, value ?? false);\n      if (value != null) {\n        delete account.profile.everHadUserKey;\n      }\n      await helper.set(userId, account);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, USER_EVER_HAD_USER_KEY);\n      if (account) {\n        account.profile = Object.assign(account.profile ?? {}, {\n          everHadUserKey: value,\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_EVER_HAD_USER_KEY, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype OrgKeyDataType = {\n  type: \"organization\" | \"provider\";\n  key: string;\n  providerId?: string;\n};\n\ntype ExpectedAccountType = {\n  keys?: {\n    organizationKeys?: {\n      encrypted?: Record<string, OrgKeyDataType>;\n    };\n  };\n};\n\nconst USER_ENCRYPTED_ORGANIZATION_KEYS: KeyDefinitionLike = {\n  key: \"organizationKeys\",\n  stateDefinition: {\n    name: \"crypto\",\n  },\n};\n\nexport class OrganizationKeyMigrator extends Migrator<10, 11> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.keys?.organizationKeys?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ENCRYPTED_ORGANIZATION_KEYS, value);\n        delete account.keys.organizationKeys;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser<Record<string, OrgKeyDataType>>(\n        userId,\n        USER_ENCRYPTED_ORGANIZATION_KEYS,\n      );\n      if (account && value) {\n        account.keys = Object.assign(account.keys ?? {}, {\n          organizationKeys: {\n            encrypted: value,\n          },\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ENCRYPTED_ORGANIZATION_KEYS, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype EnvironmentUrls = Record<string, string>;\n\ntype ExpectedAccountType = {\n  settings?: { region?: string; environmentUrls?: EnvironmentUrls };\n};\n\ntype ExpectedGlobalType = { region?: string; environmentUrls?: EnvironmentUrls };\n\nconst ENVIRONMENT_STATE: StateDefinitionLike = { name: \"environment\" };\n\nconst REGION_KEY: KeyDefinitionLike = { key: \"region\", stateDefinition: ENVIRONMENT_STATE };\nconst URLS_KEY: KeyDefinitionLike = { key: \"urls\", stateDefinition: ENVIRONMENT_STATE };\n\nexport class MoveEnvironmentStateToProviders extends Migrator<11, 12> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyGlobal = await helper.get<ExpectedGlobalType>(\"global\");\n\n    // Move global data\n    if (legacyGlobal?.region != null) {\n      await helper.setToGlobal(REGION_KEY, legacyGlobal.region);\n    }\n\n    if (legacyGlobal?.environmentUrls != null) {\n      await helper.setToGlobal(URLS_KEY, legacyGlobal.environmentUrls);\n    }\n\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        // Move account data\n        if (account?.settings?.region != null) {\n          await helper.setToUser(userId, REGION_KEY, account.settings.region);\n        }\n\n        if (account?.settings?.environmentUrls != null) {\n          await helper.setToUser(userId, URLS_KEY, account.settings.environmentUrls);\n        }\n\n        // Delete old account data\n        delete account?.settings?.region;\n        delete account?.settings?.environmentUrls;\n        await helper.set(userId, account);\n      }),\n    );\n\n    // Delete legacy global data\n    delete legacyGlobal?.region;\n    delete legacyGlobal?.environmentUrls;\n    await helper.set(\"global\", legacyGlobal);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    let legacyGlobal = await helper.get<ExpectedGlobalType>(\"global\");\n\n    let updatedLegacyGlobal = false;\n\n    const globalRegion = await helper.getFromGlobal<string>(REGION_KEY);\n\n    if (globalRegion) {\n      if (!legacyGlobal) {\n        legacyGlobal = {};\n      }\n\n      updatedLegacyGlobal = true;\n      legacyGlobal.region = globalRegion;\n      await helper.setToGlobal(REGION_KEY, null);\n    }\n\n    const globalUrls = await helper.getFromGlobal<EnvironmentUrls>(URLS_KEY);\n\n    if (globalUrls) {\n      if (!legacyGlobal) {\n        legacyGlobal = {};\n      }\n\n      updatedLegacyGlobal = true;\n      legacyGlobal.environmentUrls = globalUrls;\n      await helper.setToGlobal(URLS_KEY, null);\n    }\n\n    if (updatedLegacyGlobal) {\n      await helper.set(\"global\", legacyGlobal);\n    }\n\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      let updatedAccount = false;\n      const userRegion = await helper.getFromUser<string>(userId, REGION_KEY);\n\n      if (userRegion) {\n        if (!account) {\n          account = {};\n        }\n\n        if (!account.settings) {\n          account.settings = {};\n        }\n\n        updatedAccount = true;\n        account.settings.region = userRegion;\n        await helper.setToUser(userId, REGION_KEY, null);\n      }\n\n      const userUrls = await helper.getFromUser<EnvironmentUrls>(userId, URLS_KEY);\n\n      if (userUrls) {\n        if (!account) {\n          account = {};\n        }\n\n        if (!account.settings) {\n          account.settings = {};\n        }\n\n        updatedAccount = true;\n        account.settings.environmentUrls = userUrls;\n        await helper.setToUser(userId, URLS_KEY, null);\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  keys?: {\n    providerKeys?: {\n      encrypted?: Record<string, string>; // Record<ProviderId, EncryptedString> where EncryptedString is the ProviderKey encrypted by the UserKey.\n    };\n  };\n};\n\nconst USER_ENCRYPTED_PROVIDER_KEYS: KeyDefinitionLike = {\n  key: \"providerKeys\",\n  stateDefinition: {\n    name: \"crypto\",\n  },\n};\n\nexport class ProviderKeyMigrator extends Migrator<12, 13> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.keys?.providerKeys?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ENCRYPTED_PROVIDER_KEYS, value);\n        delete account.keys.providerKeys;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser<Record<string, string>>(\n        userId,\n        USER_ENCRYPTED_PROVIDER_KEYS,\n      );\n      if (account && value) {\n        account.keys = Object.assign(account.keys ?? {}, {\n          providerKeys: {\n            encrypted: value,\n          },\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ENCRYPTED_PROVIDER_KEYS, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    disableAutoBiometricsPrompt?: boolean;\n    biometricUnlock?: boolean;\n    dismissedBiometricRequirePasswordOnStartCallout?: boolean;\n  };\n  keys?: { biometricEncryptionClientKeyHalf?: string };\n};\n\n// Biometric text, no auto prompt text, fingerprint validated, and prompt cancelled are refreshed on every app start, so we don't need to migrate them\nexport const CLIENT_KEY_HALF: KeyDefinitionLike = {\n  key: \"clientKeyHalf\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport class MoveBiometricClientKeyHalfToStateProviders extends Migrator<13, 14> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        // Move account data\n        if (account?.keys?.biometricEncryptionClientKeyHalf != null) {\n          await helper.setToUser(\n            userId,\n            CLIENT_KEY_HALF,\n            account.keys.biometricEncryptionClientKeyHalf,\n          );\n\n          // Delete old account data\n          delete account?.keys?.biometricEncryptionClientKeyHalf;\n          await helper.set(userId, account);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      let updatedAccount = false;\n\n      const userKeyHalf = await helper.getFromUser<string>(userId, CLIENT_KEY_HALF);\n\n      if (userKeyHalf) {\n        account ??= {};\n        account.keys ??= {};\n\n        updatedAccount = true;\n        account.keys.biometricEncryptionClientKeyHalf = userKeyHalf;\n        await helper.setToUser(userId, CLIENT_KEY_HALF, null);\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype FolderDataType = {\n  id: string;\n  name: string;\n  revisionDate: string;\n};\n\ntype ExpectedAccountType = {\n  data?: {\n    folders?: {\n      encrypted?: Record<string, FolderDataType>;\n    };\n  };\n};\n\nconst USER_ENCRYPTED_FOLDERS: KeyDefinitionLike = {\n  key: \"folders\",\n  stateDefinition: {\n    name: \"folder\",\n  },\n};\n\nexport class FolderMigrator extends Migrator<14, 15> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.data?.folders?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ENCRYPTED_FOLDERS, value);\n        delete account.data.folders;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, USER_ENCRYPTED_FOLDERS);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          folders: {\n            encrypted: value,\n          },\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ENCRYPTED_FOLDERS, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  profile?: {\n    lastSync?: string;\n  };\n};\n\nconst LAST_SYNC_KEY: KeyDefinitionLike = {\n  key: \"lastSync\",\n  stateDefinition: {\n    name: \"sync\",\n  },\n};\n\nexport class LastSyncMigrator extends Migrator<15, 16> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.profile?.lastSync;\n      await helper.setToUser(userId, LAST_SYNC_KEY, value ?? null);\n      if (value != null) {\n        delete account.profile.lastSync;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, LAST_SYNC_KEY);\n      if (account) {\n        account.profile = Object.assign(account.profile ?? {}, {\n          lastSync: value,\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, LAST_SYNC_KEY, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobalType = {\n  enablePasskeys?: boolean;\n};\n\nconst USER_ENABLE_PASSKEYS: KeyDefinitionLike = {\n  key: \"enablePasskeys\",\n  stateDefinition: {\n    name: \"vaultSettings\",\n  },\n};\n\nexport class EnablePasskeysMigrator extends Migrator<16, 17> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const global = await helper.get<ExpectedGlobalType>(\"global\");\n\n    if (global?.enablePasskeys != null) {\n      await helper.setToGlobal(USER_ENABLE_PASSKEYS, global.enablePasskeys);\n      delete global?.enablePasskeys;\n      await helper.set(\"global\", global);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    let global = await helper.get<ExpectedGlobalType>(\"global\");\n    const globalEnablePasskeys = await helper.getFromGlobal<boolean>(USER_ENABLE_PASSKEYS);\n\n    if (globalEnablePasskeys != null) {\n      global = Object.assign(global ?? {}, { enablePasskeys: globalEnablePasskeys });\n      await helper.set(\"global\", global);\n      await helper.setToGlobal(USER_ENABLE_PASSKEYS, undefined);\n    }\n  }\n}\n","import { StateDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nconst AutofillOverlayVisibility = {\n  Off: 0,\n  OnButtonClick: 1,\n  OnFieldFocus: 2,\n} as const;\n\ntype InlineMenuVisibilitySetting =\n  (typeof AutofillOverlayVisibility)[keyof typeof AutofillOverlayVisibility];\n\ntype ExpectedAccountState = {\n  settings?: {\n    autoFillOnPageLoadDefault?: boolean;\n    enableAutoFillOnPageLoad?: boolean;\n    dismissedAutoFillOnPageLoadCallout?: boolean;\n    disableAutoTotpCopy?: boolean;\n    activateAutoFillOnPageLoadFromPolicy?: InlineMenuVisibilitySetting;\n  };\n};\n\ntype ExpectedGlobalState = { autoFillOverlayVisibility?: InlineMenuVisibilitySetting };\n\nconst autofillSettingsStateDefinition: {\n  stateDefinition: StateDefinitionLike;\n} = {\n  stateDefinition: {\n    name: \"autofillSettings\",\n  },\n};\n\nexport class AutofillSettingsKeyMigrator extends Migrator<17, 18> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // global state (e.g. \"autoFillOverlayVisibility -> inlineMenuVisibility\")\n    const globalState = await helper.get<ExpectedGlobalState>(\"global\");\n\n    if (globalState?.autoFillOverlayVisibility != null) {\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"autofillSettingsLocal\",\n          },\n          key: \"inlineMenuVisibility\",\n        },\n        globalState.autoFillOverlayVisibility,\n      );\n\n      // delete `autoFillOverlayVisibility` from state global\n      delete globalState.autoFillOverlayVisibility;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n\n    // account state (e.g. account settings -> state provider framework keys)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    // migrate account state\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let updateAccount = false;\n      const accountSettings = account?.settings;\n\n      if (accountSettings?.autoFillOnPageLoadDefault != null) {\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoadDefault\" },\n          accountSettings.autoFillOnPageLoadDefault,\n        );\n        delete account.settings.autoFillOnPageLoadDefault;\n        updateAccount = true;\n      }\n\n      if (accountSettings?.enableAutoFillOnPageLoad != null) {\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoad\" },\n          accountSettings?.enableAutoFillOnPageLoad,\n        );\n        delete account.settings.enableAutoFillOnPageLoad;\n        updateAccount = true;\n      }\n\n      if (accountSettings?.dismissedAutoFillOnPageLoadCallout != null) {\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoadCalloutIsDismissed\" },\n          accountSettings?.dismissedAutoFillOnPageLoadCallout,\n        );\n        delete account.settings.dismissedAutoFillOnPageLoadCallout;\n        updateAccount = true;\n      }\n\n      if (accountSettings?.disableAutoTotpCopy != null) {\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autoCopyTotp\" },\n          // invert the value to match the new naming convention\n          !accountSettings?.disableAutoTotpCopy,\n        );\n        delete account.settings.disableAutoTotpCopy;\n        updateAccount = true;\n      }\n\n      if (accountSettings?.activateAutoFillOnPageLoadFromPolicy != null) {\n        await helper.setToUser(\n          userId,\n          {\n            stateDefinition: {\n              name: \"autofillSettingsLocal\",\n            },\n            key: \"activateAutofillOnPageLoadFromPolicy\",\n          },\n          accountSettings?.activateAutoFillOnPageLoadFromPolicy,\n        );\n        delete account.settings.activateAutoFillOnPageLoadFromPolicy;\n        updateAccount = true;\n      }\n\n      if (updateAccount) {\n        // update the state account settings with the migrated values deleted\n        await helper.set(userId, account);\n      }\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // global state (e.g. \"inlineMenuVisibility -> autoFillOverlayVisibility\")\n    const globalState = (await helper.get<ExpectedGlobalState>(\"global\")) || {};\n    const inlineMenuVisibility: InlineMenuVisibilitySetting = await helper.getFromGlobal({\n      stateDefinition: {\n        name: \"autofillSettingsLocal\",\n      },\n      key: \"inlineMenuVisibility\",\n    });\n\n    if (inlineMenuVisibility) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        autoFillOverlayVisibility: inlineMenuVisibility,\n      });\n\n      // remove the global state provider framework key for `inlineMenuVisibility`\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"autofillSettingsLocal\",\n          },\n          key: \"inlineMenuVisibility\",\n        },\n        null,\n      );\n    }\n\n    // account state (e.g. state provider framework keys -> account settings)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    // rollback account state\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let updateAccount = false;\n      let settings = account?.settings || {};\n\n      const autoFillOnPageLoadDefault: boolean = await helper.getFromUser(userId, {\n        ...autofillSettingsStateDefinition,\n        key: \"autofillOnPageLoadDefault\",\n      });\n\n      const enableAutoFillOnPageLoad: boolean = await helper.getFromUser(userId, {\n        ...autofillSettingsStateDefinition,\n        key: \"autofillOnPageLoad\",\n      });\n\n      const dismissedAutoFillOnPageLoadCallout: boolean = await helper.getFromUser(userId, {\n        ...autofillSettingsStateDefinition,\n        key: \"autofillOnPageLoadCalloutIsDismissed\",\n      });\n\n      const autoCopyTotp: boolean = await helper.getFromUser(userId, {\n        ...autofillSettingsStateDefinition,\n        key: \"autoCopyTotp\",\n      });\n\n      const activateAutoFillOnPageLoadFromPolicy: InlineMenuVisibilitySetting =\n        await helper.getFromUser(userId, {\n          stateDefinition: {\n            name: \"autofillSettingsLocal\",\n          },\n          key: \"activateAutofillOnPageLoadFromPolicy\",\n        });\n\n      // update new settings and remove the account state provider framework keys for the rolled back values\n      if (autoFillOnPageLoadDefault != null) {\n        settings = { ...settings, autoFillOnPageLoadDefault };\n\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoadDefault\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (enableAutoFillOnPageLoad != null) {\n        settings = { ...settings, enableAutoFillOnPageLoad };\n\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoad\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (dismissedAutoFillOnPageLoadCallout != null) {\n        settings = { ...settings, dismissedAutoFillOnPageLoadCallout };\n\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoadCalloutIsDismissed\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (autoCopyTotp != null) {\n        // invert the value to match the new naming convention\n        settings = { ...settings, disableAutoTotpCopy: !autoCopyTotp };\n\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autoCopyTotp\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (activateAutoFillOnPageLoadFromPolicy != null) {\n        settings = { ...settings, activateAutoFillOnPageLoadFromPolicy };\n\n        await helper.setToUser(\n          userId,\n          {\n            stateDefinition: {\n              name: \"autofillSettingsLocal\",\n            },\n            key: \"activateAutofillOnPageLoadFromPolicy\",\n          },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (updateAccount) {\n        // commit updated settings to state\n        await helper.set(userId, {\n          ...account,\n          settings,\n        });\n      }\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    requirePasswordOnStart?: boolean;\n  };\n};\n\n// Biometric text, no auto prompt text, fingerprint validated, and prompt cancelled are refreshed on every app start, so we don't need to migrate them\nexport const REQUIRE_PASSWORD_ON_START: KeyDefinitionLike = {\n  key: \"requirePasswordOnStart\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport class RequirePasswordOnStartMigrator extends Migrator<18, 19> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        // Move account data\n        if (account?.settings?.requirePasswordOnStart != null) {\n          await helper.setToUser(\n            userId,\n            REQUIRE_PASSWORD_ON_START,\n            account.settings.requirePasswordOnStart,\n          );\n\n          // Delete old account data\n          delete account.settings.requirePasswordOnStart;\n          await helper.set(userId, account);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      const requirePassword = await helper.getFromUser<boolean>(userId, REQUIRE_PASSWORD_ON_START);\n\n      if (requirePassword) {\n        account ??= {};\n        account.settings ??= {};\n\n        account.settings.requirePasswordOnStart = requirePassword;\n        await helper.setToUser(userId, REQUIRE_PASSWORD_ON_START, null);\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  keys?: {\n    privateKey?: {\n      encrypted?: string; // EncryptedString\n    };\n  };\n};\n\nconst USER_ENCRYPTED_PRIVATE_KEY: KeyDefinitionLike = {\n  key: \"privateKey\",\n  stateDefinition: {\n    name: \"crypto\",\n  },\n};\n\nexport class PrivateKeyMigrator extends Migrator<19, 20> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.keys?.privateKey?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ENCRYPTED_PRIVATE_KEY, value);\n        delete account.keys.privateKey;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser<Record<string, string>>(\n        userId,\n        USER_ENCRYPTED_PRIVATE_KEY,\n      );\n      if (account && value) {\n        account.keys = Object.assign(account.keys ?? {}, {\n          privateKey: {\n            encrypted: value,\n          },\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ENCRYPTED_PRIVATE_KEY, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype CollectionDataType = {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n  readOnly: boolean;\n  manage: boolean;\n  hidePasswords: boolean;\n};\n\ntype ExpectedAccountType = {\n  data?: {\n    collections?: {\n      encrypted?: Record<string, CollectionDataType>;\n    };\n  };\n};\n\nconst USER_ENCRYPTED_COLLECTIONS: KeyDefinitionLike = {\n  key: \"collections\",\n  stateDefinition: {\n    name: \"collection\",\n  },\n};\n\nexport class CollectionMigrator extends Migrator<20, 21> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.data?.collections?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ENCRYPTED_COLLECTIONS, value);\n        delete account.data.collections;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, USER_ENCRYPTED_COLLECTIONS);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          collections: {\n            encrypted: value,\n          },\n        });\n\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ENCRYPTED_COLLECTIONS, null);\n    }\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    collapsedGroupings?: string[];\n  };\n};\n\nconst COLLAPSED_GROUPINGS: KeyDefinitionLike = {\n  key: \"collapsedGroupings\",\n  stateDefinition: {\n    name: \"vaultFilter\",\n  },\n};\n\nexport class CollapsedGroupingsMigrator extends Migrator<21, 22> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.settings?.collapsedGroupings;\n      if (value != null) {\n        await helper.setToUser(userId, COLLAPSED_GROUPINGS, value);\n        delete account.settings.collapsedGroupings;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, COLLAPSED_GROUPINGS);\n      if (account) {\n        account.settings = Object.assign(account.settings ?? {}, {\n          collapsedGroupings: value,\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, COLLAPSED_GROUPINGS, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    disableAutoBiometricsPrompt?: boolean;\n    dismissedBiometricRequirePasswordOnStartCallout?: boolean;\n  };\n};\n\n// prompt cancelled is refreshed on every app start/quit/unlock, so we don't need to migrate it\n\nexport const DISMISSED_BIOMETRIC_REQUIRE_PASSWORD_ON_START_CALLOUT: KeyDefinitionLike = {\n  key: \"dismissedBiometricRequirePasswordOnStartCallout\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport const PROMPT_AUTOMATICALLY: KeyDefinitionLike = {\n  key: \"promptAutomatically\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport class MoveBiometricPromptsToStateProviders extends Migrator<22, 23> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        if (account == null) {\n          return;\n        }\n        // Move account data\n\n        if (account?.settings?.dismissedBiometricRequirePasswordOnStartCallout != null) {\n          await helper.setToUser(\n            userId,\n            DISMISSED_BIOMETRIC_REQUIRE_PASSWORD_ON_START_CALLOUT,\n            account.settings.dismissedBiometricRequirePasswordOnStartCallout,\n          );\n        }\n\n        if (account?.settings?.disableAutoBiometricsPrompt != null) {\n          await helper.setToUser(\n            userId,\n            PROMPT_AUTOMATICALLY,\n            !account.settings.disableAutoBiometricsPrompt,\n          );\n        }\n\n        // Delete old account data\n        delete account?.settings?.dismissedBiometricRequirePasswordOnStartCallout;\n        delete account?.settings?.disableAutoBiometricsPrompt;\n        await helper.set(userId, account);\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      let updatedAccount = false;\n\n      const userDismissed = await helper.getFromUser<boolean>(\n        userId,\n        DISMISSED_BIOMETRIC_REQUIRE_PASSWORD_ON_START_CALLOUT,\n      );\n\n      if (userDismissed) {\n        account ??= {};\n        account.settings ??= {};\n\n        updatedAccount = true;\n        account.settings.dismissedBiometricRequirePasswordOnStartCallout = userDismissed;\n        await helper.setToUser(userId, DISMISSED_BIOMETRIC_REQUIRE_PASSWORD_ON_START_CALLOUT, null);\n      }\n\n      const userPromptAutomatically = await helper.getFromUser<boolean>(\n        userId,\n        PROMPT_AUTOMATICALLY,\n      );\n\n      if (userPromptAutomatically != null) {\n        account ??= {};\n        account.settings ??= {};\n\n        updatedAccount = true;\n        account.settings.disableAutoBiometricsPrompt = !userPromptAutomatically;\n        await helper.setToUser(userId, PROMPT_AUTOMATICALLY, null);\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    smOnboardingTasks?: Record<string, Record<string, boolean>>;\n  };\n};\n\nexport const SM_ONBOARDING_TASKS: KeyDefinitionLike = {\n  key: \"tasks\",\n  stateDefinition: { name: \"smOnboarding\" },\n};\n\nexport class SmOnboardingTasksMigrator extends Migrator<23, 24> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        // Move account data\n        if (account?.settings?.smOnboardingTasks != null) {\n          await helper.setToUser(userId, SM_ONBOARDING_TASKS, account.settings.smOnboardingTasks);\n\n          // Delete old account data\n          delete account.settings.smOnboardingTasks;\n          await helper.set(userId, account);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      const smOnboardingTasks = await helper.getFromUser<Record<string, Record<string, boolean>>>(\n        userId,\n        SM_ONBOARDING_TASKS,\n      );\n      if (smOnboardingTasks) {\n        account ??= {};\n        account.settings ??= {};\n\n        account.settings.smOnboardingTasks = smOnboardingTasks;\n        await helper.setToUser(userId, SM_ONBOARDING_TASKS, null);\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { StateDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nconst ClearClipboardDelay = {\n  Never: null as null,\n  TenSeconds: 10,\n  TwentySeconds: 20,\n  ThirtySeconds: 30,\n  OneMinute: 60,\n  TwoMinutes: 120,\n  FiveMinutes: 300,\n} as const;\n\ntype ClearClipboardDelaySetting = (typeof ClearClipboardDelay)[keyof typeof ClearClipboardDelay];\n\ntype ExpectedAccountState = {\n  settings?: {\n    clearClipboard?: ClearClipboardDelaySetting;\n  };\n};\n\nconst autofillSettingsLocalStateDefinition: {\n  stateDefinition: StateDefinitionLike;\n} = {\n  stateDefinition: {\n    name: \"autofillSettingsLocal\",\n  },\n};\n\nexport class ClearClipboardDelayMigrator extends Migrator<24, 25> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // account state (e.g. account settings -> state provider framework keys)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    // migrate account state\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      const accountSettings = account?.settings;\n\n      if (accountSettings?.clearClipboard !== undefined) {\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsLocalStateDefinition, key: \"clearClipboardDelay\" },\n          accountSettings.clearClipboard,\n        );\n        delete account.settings.clearClipboard;\n\n        // update the state account settings with the migrated values deleted\n        await helper.set(userId, account);\n      }\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // account state (e.g. state provider framework keys -> account settings)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    // rollback account state\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let settings = account?.settings || {};\n\n      const clearClipboardDelay: ClearClipboardDelaySetting = await helper.getFromUser(userId, {\n        ...autofillSettingsLocalStateDefinition,\n        key: \"clearClipboardDelay\",\n      });\n\n      // update new settings and remove the account state provider framework keys for the rolled back values\n      if (clearClipboardDelay !== undefined) {\n        settings = { ...settings, clearClipboard: clearClipboardDelay };\n\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsLocalStateDefinition, key: \"clearClipboardDelay\" },\n          null,\n        );\n\n        // commit updated settings to state\n        await helper.set(userId, {\n          ...account,\n          settings,\n        });\n      }\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  profile?: {\n    lastSync?: string;\n  };\n};\n\nconst LAST_SYNC_KEY: KeyDefinitionLike = {\n  key: \"lastSync\",\n  stateDefinition: {\n    name: \"sync\",\n  },\n};\n\nexport class RevertLastSyncMigrator extends Migrator<25, 26> {\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.profile?.lastSync;\n      await helper.setToUser(userId, LAST_SYNC_KEY, value ?? null);\n      if (value != null) {\n        delete account.profile.lastSync;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, LAST_SYNC_KEY);\n      if (account) {\n        account.profile = Object.assign(account.profile ?? {}, {\n          lastSync: value,\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, LAST_SYNC_KEY, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  settings?: {\n    disableBadgeCounter?: boolean;\n  };\n};\n\nconst enableBadgeCounterKeyDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"badgeSettings\",\n  },\n  key: \"enableBadgeCounter\",\n};\n\nexport class BadgeSettingsMigrator extends Migrator<26, 27> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // account state (e.g. account settings -> state provider framework keys)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    // migrate account state\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      const accountSettings = account?.settings;\n\n      if (accountSettings?.disableBadgeCounter != undefined) {\n        await helper.setToUser(\n          userId,\n          enableBadgeCounterKeyDefinition,\n          !accountSettings.disableBadgeCounter,\n        );\n        delete account.settings.disableBadgeCounter;\n\n        // update the state account settings with the migrated values deleted\n        await helper.set(userId, account);\n      }\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // account state (e.g. state provider framework keys -> account settings)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    // rollback account state\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let settings = account?.settings || {};\n\n      const enableBadgeCounter: boolean = await helper.getFromUser(\n        userId,\n        enableBadgeCounterKeyDefinition,\n      );\n\n      // update new settings and remove the account state provider framework keys for the rolled back values\n      if (enableBadgeCounter != undefined) {\n        settings = { ...settings, disableBadgeCounter: !enableBadgeCounter };\n\n        await helper.setToUser(userId, enableBadgeCounterKeyDefinition, null);\n\n        // commit updated settings to state\n        await helper.set(userId, {\n          ...account,\n          settings,\n        });\n      }\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    biometricUnlock?: boolean;\n  };\n};\n\nexport const BIOMETRIC_UNLOCK_ENABLED: KeyDefinitionLike = {\n  key: \"biometricUnlockEnabled\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport class MoveBiometricUnlockToStateProviders extends Migrator<27, 28> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        if (account == null) {\n          return;\n        }\n        // Move account data\n        if (account?.settings?.biometricUnlock != null) {\n          await helper.setToUser(\n            userId,\n            BIOMETRIC_UNLOCK_ENABLED,\n            account.settings.biometricUnlock,\n          );\n        }\n\n        // Delete old account data\n        delete account?.settings?.biometricUnlock;\n        await helper.set(userId, account);\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      const biometricUnlock = await helper.getFromUser<boolean>(userId, BIOMETRIC_UNLOCK_ENABLED);\n\n      if (biometricUnlock != null) {\n        account ??= {};\n        account.settings ??= {};\n\n        account.settings.biometricUnlock = biometricUnlock;\n        await helper.setToUser(userId, BIOMETRIC_UNLOCK_ENABLED, null);\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobalState = {\n  disableAddLoginNotification?: boolean;\n  disableChangedPasswordNotification?: boolean;\n};\n\nexport class UserNotificationSettingsKeyMigrator extends Migrator<28, 29> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const globalState = await helper.get<ExpectedGlobalState>(\"global\");\n\n    // disableAddLoginNotification -> enableAddedLoginPrompt\n    if (globalState?.disableAddLoginNotification != null) {\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"userNotificationSettings\",\n          },\n          key: \"enableAddedLoginPrompt\",\n        },\n        !globalState.disableAddLoginNotification,\n      );\n\n      // delete `disableAddLoginNotification` from state global\n      delete globalState.disableAddLoginNotification;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n\n    // disableChangedPasswordNotification -> enableChangedPasswordPrompt\n    if (globalState?.disableChangedPasswordNotification != null) {\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"userNotificationSettings\",\n          },\n          key: \"enableChangedPasswordPrompt\",\n        },\n        !globalState.disableChangedPasswordNotification,\n      );\n\n      // delete `disableChangedPasswordNotification` from state global\n      delete globalState.disableChangedPasswordNotification;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const globalState = (await helper.get<ExpectedGlobalState>(\"global\")) || {};\n\n    const enableAddedLoginPrompt: boolean = await helper.getFromGlobal({\n      stateDefinition: {\n        name: \"userNotificationSettings\",\n      },\n      key: \"enableAddedLoginPrompt\",\n    });\n\n    const enableChangedPasswordPrompt: boolean = await helper.getFromGlobal({\n      stateDefinition: {\n        name: \"userNotificationSettings\",\n      },\n      key: \"enableChangedPasswordPrompt\",\n    });\n\n    // enableAddedLoginPrompt -> disableAddLoginNotification\n    if (enableAddedLoginPrompt) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        disableAddLoginNotification: !enableAddedLoginPrompt,\n      });\n\n      // remove the global state provider framework key for `enableAddedLoginPrompt`\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"userNotificationSettings\",\n          },\n          key: \"enableAddedLoginPrompt\",\n        },\n        null,\n      );\n    }\n\n    // enableChangedPasswordPrompt -> disableChangedPasswordNotification\n    if (enableChangedPasswordPrompt) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        disableChangedPasswordNotification: !enableChangedPasswordPrompt,\n      });\n\n      // remove the global state provider framework key for `enableChangedPasswordPrompt`\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"userNotificationSettings\",\n          },\n          key: \"enableChangedPasswordPrompt\",\n        },\n        null,\n      );\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nenum PolicyType {\n  TwoFactorAuthentication = 0, // Requires users to have 2fa enabled\n  MasterPassword = 1, // Sets minimum requirements for master password complexity\n  PasswordGenerator = 2, // Sets minimum requirements/default type for generated passwords/passphrases\n  SingleOrg = 3, // Allows users to only be apart of one organization\n  RequireSso = 4, // Requires users to authenticate with SSO\n  PersonalOwnership = 5, // Disables personal vault ownership for adding/cloning items\n  DisableSend = 6, // Disables the ability to create and edit Bitwarden Sends\n  SendOptions = 7, // Sets restrictions or defaults for Bitwarden Sends\n  ResetPassword = 8, // Allows orgs to use reset password : also can enable auto-enrollment during invite flow\n  MaximumVaultTimeout = 9, // Sets the maximum allowed vault timeout\n  DisablePersonalVaultExport = 10, // Disable personal vault export\n  ActivateAutofill = 11, // Activates autofill with page load on the browser extension\n}\n\ntype PolicyDataType = {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: Record<string, string | number | boolean>;\n  enabled: boolean;\n};\n\ntype ExpectedAccountType = {\n  data?: {\n    policies?: {\n      encrypted?: Record<string, PolicyDataType>;\n    };\n  };\n};\n\nconst POLICIES_KEY: KeyDefinitionLike = {\n  key: \"policies\",\n  stateDefinition: {\n    name: \"policies\",\n  },\n};\n\nexport class PolicyMigrator extends Migrator<29, 30> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.data?.policies?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, POLICIES_KEY, value);\n        delete account.data.policies;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => migrateAccount(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, POLICIES_KEY);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          policies: {\n            encrypted: value,\n          },\n        });\n\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, POLICIES_KEY, null);\n    }\n    await Promise.all(accounts.map(({ userId, account }) => rollbackAccount(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobalState = {\n  disableContextMenuItem?: boolean;\n};\n\nconst enableContextMenuKeyDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"autofillSettings\",\n  },\n  key: \"enableContextMenu\",\n};\n\nexport class EnableContextMenuMigrator extends Migrator<30, 31> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const globalState = await helper.get<ExpectedGlobalState>(\"global\");\n\n    // disableContextMenuItem -> enableContextMenu\n    if (globalState?.disableContextMenuItem != null) {\n      await helper.setToGlobal(enableContextMenuKeyDefinition, !globalState.disableContextMenuItem);\n\n      // delete `disableContextMenuItem` from state global\n      delete globalState.disableContextMenuItem;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const globalState = (await helper.get<ExpectedGlobalState>(\"global\")) || {};\n\n    const enableContextMenu: boolean = await helper.getFromGlobal(enableContextMenuKeyDefinition);\n\n    // enableContextMenu -> disableContextMenuItem\n    if (enableContextMenu != null) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        disableContextMenuItem: !enableContextMenu,\n      });\n\n      // remove the global state provider framework key for `enableContextMenu`\n      await helper.setToGlobal(enableContextMenuKeyDefinition, null);\n    }\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobal = {\n  locale?: string;\n};\n\nexport const LOCALE_KEY = {\n  key: \"locale\",\n  stateDefinition: {\n    name: \"translation\",\n  },\n};\n\nexport class PreferredLanguageMigrator extends Migrator<31, 32> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // global state\n    const global = await helper.get<ExpectedGlobal>(\"global\");\n    if (!global?.locale) {\n      return;\n    }\n\n    await helper.setToGlobal(LOCALE_KEY, global.locale);\n    delete global.locale;\n    await helper.set(\"global\", global);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const locale = await helper.getFromGlobal<string>(LOCALE_KEY);\n\n    if (!locale) {\n      return;\n    }\n    const global = (await helper.get<ExpectedGlobal>(\"global\")) ?? {};\n    global.locale = locale;\n    await helper.set(\"global\", global);\n    await helper.setToGlobal(LOCALE_KEY, null);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nexport const APP_ID_STORAGE_KEY = \"appId\";\nexport const ANONYMOUS_APP_ID_STORAGE_KEY = \"anonymousAppId\";\n\nexport const APP_ID_KEY: KeyDefinitionLike = {\n  key: APP_ID_STORAGE_KEY,\n  stateDefinition: { name: \"applicationId\" },\n};\n\nexport const ANONYMOUS_APP_ID_KEY: KeyDefinitionLike = {\n  key: ANONYMOUS_APP_ID_STORAGE_KEY,\n  stateDefinition: { name: \"applicationId\" },\n};\n\nexport class AppIdMigrator extends Migrator<32, 33> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const appId = await helper.get<string>(APP_ID_STORAGE_KEY);\n    const anonymousAppId = await helper.get<string>(ANONYMOUS_APP_ID_STORAGE_KEY);\n\n    if (appId != null) {\n      await helper.setToGlobal(APP_ID_KEY, appId);\n      await helper.set(APP_ID_STORAGE_KEY, null);\n    }\n\n    if (anonymousAppId != null) {\n      await helper.setToGlobal(ANONYMOUS_APP_ID_KEY, anonymousAppId);\n      await helper.set(ANONYMOUS_APP_ID_STORAGE_KEY, null);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const appId = await helper.getFromGlobal<string>(APP_ID_KEY);\n    const anonymousAppId = await helper.getFromGlobal<string>(ANONYMOUS_APP_ID_KEY);\n\n    if (appId != null) {\n      await helper.set(APP_ID_STORAGE_KEY, appId);\n      await helper.setToGlobal(APP_ID_KEY, null);\n    }\n    if (anonymousAppId != null) {\n      await helper.set(ANONYMOUS_APP_ID_STORAGE_KEY, anonymousAppId);\n      await helper.setToGlobal(ANONYMOUS_APP_ID_KEY, null);\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nconst UriMatchStrategy = {\n  Domain: 0,\n  Host: 1,\n  StartsWith: 2,\n  Exact: 3,\n  RegularExpression: 4,\n  Never: 5,\n} as const;\n\ntype UriMatchStrategySetting = (typeof UriMatchStrategy)[keyof typeof UriMatchStrategy];\n\ntype ExpectedAccountState = {\n  settings?: {\n    defaultUriMatch?: UriMatchStrategySetting;\n    settings?: {\n      equivalentDomains?: string[][];\n    };\n  };\n};\n\ntype ExpectedGlobalState = {\n  neverDomains?: { [key: string]: null };\n};\n\nconst defaultUriMatchStrategyDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"domainSettings\",\n  },\n  key: \"defaultUriMatchStrategy\",\n};\n\nconst equivalentDomainsDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"domainSettings\",\n  },\n  key: \"equivalentDomains\",\n};\n\nconst neverDomainsDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"domainSettings\",\n  },\n  key: \"neverDomains\",\n};\n\nexport class DomainSettingsMigrator extends Migrator<33, 34> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    let updateAccount = false;\n\n    // global state (\"neverDomains\")\n    const globalState = await helper.get<ExpectedGlobalState>(\"global\");\n\n    if (globalState?.neverDomains != null) {\n      await helper.setToGlobal(neverDomainsDefinition, globalState.neverDomains);\n\n      // delete `neverDomains` from state global\n      delete globalState.neverDomains;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n\n    // account state (\"defaultUriMatch\" and \"settings.equivalentDomains\")\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    // migrate account state\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      const accountSettings = account?.settings;\n\n      if (accountSettings?.defaultUriMatch != undefined) {\n        await helper.setToUser(\n          userId,\n          defaultUriMatchStrategyDefinition,\n          accountSettings.defaultUriMatch,\n        );\n        delete account.settings.defaultUriMatch;\n\n        updateAccount = true;\n      }\n\n      if (accountSettings?.settings?.equivalentDomains != undefined) {\n        await helper.setToUser(\n          userId,\n          equivalentDomainsDefinition,\n          accountSettings.settings.equivalentDomains,\n        );\n        delete account.settings.settings.equivalentDomains;\n        delete account.settings.settings;\n\n        updateAccount = true;\n      }\n\n      if (updateAccount) {\n        // update the state account settings with the migrated values deleted\n        await helper.set(userId, account);\n      }\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    let updateAccount = false;\n\n    // global state (\"neverDomains\")\n    const globalState = (await helper.get<ExpectedGlobalState>(\"global\")) || {};\n    const neverDomains: { [key: string]: null } =\n      await helper.getFromGlobal(neverDomainsDefinition);\n\n    if (neverDomains != null) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        neverDomains: neverDomains,\n      });\n\n      // remove the global state provider framework key for `neverDomains`\n      await helper.setToGlobal(neverDomainsDefinition, null);\n    }\n\n    // account state (\"defaultUriMatchStrategy\" and \"equivalentDomains\")\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    // rollback account state\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let settings = account?.settings || {};\n\n      const defaultUriMatchStrategy: UriMatchStrategySetting = await helper.getFromUser(\n        userId,\n        defaultUriMatchStrategyDefinition,\n      );\n\n      const equivalentDomains: string[][] = await helper.getFromUser(\n        userId,\n        equivalentDomainsDefinition,\n      );\n\n      // update new settings and remove the account state provider framework keys for the rolled back values\n      if (defaultUriMatchStrategy != null) {\n        settings = { ...settings, defaultUriMatch: defaultUriMatchStrategy };\n\n        await helper.setToUser(userId, defaultUriMatchStrategyDefinition, null);\n\n        updateAccount = true;\n      }\n\n      if (equivalentDomains != null) {\n        settings = { ...settings, settings: { equivalentDomains } };\n\n        await helper.setToUser(userId, equivalentDomainsDefinition, null);\n\n        updateAccount = true;\n      }\n\n      // commit updated settings to state\n      if (updateAccount) {\n        await helper.set(userId, {\n          ...account,\n          settings,\n        });\n      }\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobal = { theme?: string };\n\nconst THEME_SELECTION: KeyDefinitionLike = {\n  key: \"selection\",\n  stateDefinition: { name: \"theming\" },\n};\n\nexport class MoveThemeToStateProviderMigrator extends Migrator<34, 35> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyGlobalState = await helper.get<ExpectedGlobal>(\"global\");\n    const theme = legacyGlobalState?.theme;\n    if (theme != null) {\n      await helper.setToGlobal(THEME_SELECTION, theme);\n      delete legacyGlobalState.theme;\n      await helper.set(\"global\", legacyGlobalState);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const theme = await helper.getFromGlobal<string>(THEME_SELECTION);\n    if (theme != null) {\n      const legacyGlobal = (await helper.get<ExpectedGlobal>(\"global\")) ?? {};\n      legacyGlobal.theme = theme;\n      await helper.set(\"global\", legacyGlobal);\n      await helper.removeFromGlobal(THEME_SELECTION);\n    }\n  }\n}\n","import { MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  settings?: {\n    dontShowCardsCurrentTab?: boolean;\n    dontShowIdentitiesCurrentTab?: boolean;\n  };\n};\n\nconst vaultSettingsStateDefinition: {\n  stateDefinition: StateDefinitionLike;\n} = {\n  stateDefinition: {\n    name: \"vaultSettings\",\n  },\n};\n\nexport class VaultSettingsKeyMigrator extends Migrator<35, 36> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let updateAccount = false;\n      const accountSettings = account?.settings;\n\n      if (accountSettings?.dontShowCardsCurrentTab != null) {\n        await helper.setToUser(\n          userId,\n          { ...vaultSettingsStateDefinition, key: \"showCardsCurrentTab\" },\n          !accountSettings.dontShowCardsCurrentTab,\n        );\n        delete account.settings.dontShowCardsCurrentTab;\n        updateAccount = true;\n      }\n\n      if (accountSettings?.dontShowIdentitiesCurrentTab != null) {\n        await helper.setToUser(\n          userId,\n          { ...vaultSettingsStateDefinition, key: \"showIdentitiesCurrentTab\" },\n          !accountSettings.dontShowIdentitiesCurrentTab,\n        );\n        delete account.settings.dontShowIdentitiesCurrentTab;\n        updateAccount = true;\n      }\n\n      if (updateAccount) {\n        await helper.set(userId, account);\n      }\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let updateAccount = false;\n      let settings = account?.settings ?? {};\n\n      const showCardsCurrentTab = await helper.getFromUser<boolean>(userId, {\n        ...vaultSettingsStateDefinition,\n        key: \"showCardsCurrentTab\",\n      });\n\n      const showIdentitiesCurrentTab = await helper.getFromUser<boolean>(userId, {\n        ...vaultSettingsStateDefinition,\n        key: \"showIdentitiesCurrentTab\",\n      });\n\n      if (showCardsCurrentTab != null) {\n        // invert the value to match the new naming convention\n        settings = { ...settings, dontShowCardsCurrentTab: !showCardsCurrentTab };\n\n        await helper.setToUser(\n          userId,\n          { ...vaultSettingsStateDefinition, key: \"showCardsCurrentTab\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (showIdentitiesCurrentTab != null) {\n        // invert the value to match the new naming convention\n        settings = { ...settings, dontShowIdentitiesCurrentTab: !showIdentitiesCurrentTab };\n\n        await helper.setToUser(\n          userId,\n          { ...vaultSettingsStateDefinition, key: \"showIdentitiesCurrentTab\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (updateAccount) {\n        await helper.set(userId, { ...account, settings });\n      }\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  settings?: { avatarColor?: string };\n};\n\nconst AVATAR_COLOR_STATE: StateDefinitionLike = { name: \"avatar\" };\n\nconst AVATAR_COLOR_KEY: KeyDefinitionLike = {\n  key: \"avatarColor\",\n  stateDefinition: AVATAR_COLOR_STATE,\n};\n\nexport class AvatarColorMigrator extends Migrator<36, 37> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        // Move account avatarColor\n        if (account?.settings?.avatarColor != null) {\n          await helper.setToUser(userId, AVATAR_COLOR_KEY, account.settings.avatarColor);\n\n          // Delete old account avatarColor property\n          delete account?.settings?.avatarColor;\n          await helper.set(userId, account);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountState) {\n      let updatedAccount = false;\n      const userAvatarColor = await helper.getFromUser<string>(userId, AVATAR_COLOR_KEY);\n\n      if (userAvatarColor) {\n        if (!account) {\n          account = {};\n        }\n\n        updatedAccount = true;\n        account.settings.avatarColor = userAvatarColor;\n        await helper.setToUser(userId, AVATAR_COLOR_KEY, null);\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\n// Types to represent data as it is stored in JSON\ntype ExpectedAccountType = {\n  tokens?: {\n    accessToken?: string;\n    refreshToken?: string;\n  };\n  profile?: {\n    apiKeyClientId?: string;\n    email?: string;\n  };\n  keys?: {\n    apiKeyClientSecret?: string;\n  };\n};\n\ntype ExpectedGlobalType = {\n  twoFactorToken?: string;\n};\n\nexport const EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL: KeyDefinitionLike = {\n  key: \"emailTwoFactorTokenRecord\",\n  stateDefinition: {\n    name: \"tokenDiskLocal\",\n  },\n};\n\nconst TOKEN_STATE_DEF_LIKE: StateDefinitionLike = {\n  name: \"token\",\n};\n\nexport const ACCESS_TOKEN_DISK: KeyDefinitionLike = {\n  key: \"accessToken\", // matches KeyDefinition.key\n  stateDefinition: TOKEN_STATE_DEF_LIKE,\n};\n\nexport const REFRESH_TOKEN_DISK: KeyDefinitionLike = {\n  key: \"refreshToken\",\n  stateDefinition: TOKEN_STATE_DEF_LIKE,\n};\n\nexport const API_KEY_CLIENT_ID_DISK: KeyDefinitionLike = {\n  key: \"apiKeyClientId\",\n  stateDefinition: TOKEN_STATE_DEF_LIKE,\n};\n\nexport const API_KEY_CLIENT_SECRET_DISK: KeyDefinitionLike = {\n  key: \"apiKeyClientSecret\",\n  stateDefinition: TOKEN_STATE_DEF_LIKE,\n};\n\nexport class TokenServiceStateProviderMigrator extends Migrator<37, 38> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // Move global data\n    const globalData = await helper.get<ExpectedGlobalType>(\"global\");\n\n    // Create new global record for 2FA token that we can accumulate data in\n    const emailTwoFactorTokenRecord = {};\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(\n      userId: string,\n      account: ExpectedAccountType | undefined,\n      globalTwoFactorToken: string | undefined,\n      emailTwoFactorTokenRecord: Record<string, string>,\n    ): Promise<void> {\n      let updatedAccount = false;\n\n      // migrate 2FA token from global to user state\n      // Due to the existing implmentation, n users on the same device share the same global state value for 2FA token.\n      // So, we will just migrate it to all users to keep it valid for whichever was the user that set it previously.\n      // Note: don't bother migrating 2FA Token if user account or email is undefined\n      const email = account?.profile?.email;\n      if (globalTwoFactorToken != undefined && account != undefined && email != undefined) {\n        emailTwoFactorTokenRecord[email] = globalTwoFactorToken;\n        // Note: don't set updatedAccount to true here as we aren't updating\n        // the legacy user state, just migrating a global state to a new user state\n      }\n\n      // Migrate access token\n      const existingAccessToken = account?.tokens?.accessToken;\n\n      if (existingAccessToken != null) {\n        // Only migrate data that exists\n        if (helper.type !== \"web-disk-local\") {\n          // only migrate access token to session storage - never local.\n          await helper.setToUser(userId, ACCESS_TOKEN_DISK, existingAccessToken);\n        }\n        delete account.tokens.accessToken;\n        updatedAccount = true;\n      }\n\n      // Migrate refresh token\n      const existingRefreshToken = account?.tokens?.refreshToken;\n\n      if (existingRefreshToken != null) {\n        if (helper.type !== \"web-disk-local\") {\n          // only migrate refresh token to session storage - never local.\n          await helper.setToUser(userId, REFRESH_TOKEN_DISK, existingRefreshToken);\n        }\n        delete account.tokens.refreshToken;\n        updatedAccount = true;\n      }\n\n      // Migrate API key client id\n      const existingApiKeyClientId = account?.profile?.apiKeyClientId;\n\n      if (existingApiKeyClientId != null) {\n        if (helper.type !== \"web-disk-local\") {\n          // only migrate client id to session storage - never local.\n          await helper.setToUser(userId, API_KEY_CLIENT_ID_DISK, existingApiKeyClientId);\n        }\n        delete account.profile.apiKeyClientId;\n        updatedAccount = true;\n      }\n\n      // Migrate API key client secret\n      const existingApiKeyClientSecret = account?.keys?.apiKeyClientSecret;\n      if (existingApiKeyClientSecret != null) {\n        if (helper.type !== \"web-disk-local\") {\n          // only migrate client secret to session storage - never local.\n          await helper.setToUser(userId, API_KEY_CLIENT_SECRET_DISK, existingApiKeyClientSecret);\n        }\n        delete account.keys.apiKeyClientSecret;\n        updatedAccount = true;\n      }\n\n      if (updatedAccount) {\n        // Save the migrated account only if it was updated\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([\n      ...accounts.map(({ userId, account }) =>\n        migrateAccount(userId, account, globalData?.twoFactorToken, emailTwoFactorTokenRecord),\n      ),\n    ]);\n\n    // Save the global 2FA token record\n    await helper.setToGlobal(EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL, emailTwoFactorTokenRecord);\n\n    // Delete global data\n    delete globalData?.twoFactorToken;\n    await helper.set(\"global\", globalData);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    // Since we migrated the global 2FA token to all users, we need to rollback the 2FA token for all users\n    // but we only need to set it to the global state once\n\n    // Go through accounts and find the first user that has a non-null email and 2FA token\n    let migratedTwoFactorToken: string | null = null;\n    for (const { account } of accounts) {\n      const email = account?.profile?.email;\n      if (email == null) {\n        continue;\n      }\n      const emailTwoFactorTokenRecord: Record<string, string> = await helper.getFromGlobal(\n        EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL,\n      );\n\n      migratedTwoFactorToken = emailTwoFactorTokenRecord[email];\n\n      if (migratedTwoFactorToken != null) {\n        break;\n      }\n    }\n\n    if (migratedTwoFactorToken != null) {\n      let legacyGlobal = await helper.get<ExpectedGlobalType>(\"global\");\n      if (!legacyGlobal) {\n        legacyGlobal = {};\n      }\n      legacyGlobal.twoFactorToken = migratedTwoFactorToken;\n      await helper.set(\"global\", legacyGlobal);\n    }\n\n    // delete global 2FA token record\n    await helper.setToGlobal(EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL, null);\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      let updatedLegacyAccount = false;\n\n      // Rollback access token\n      const migratedAccessToken = await helper.getFromUser<string>(userId, ACCESS_TOKEN_DISK);\n\n      if (account?.tokens && migratedAccessToken != null) {\n        account.tokens.accessToken = migratedAccessToken;\n        updatedLegacyAccount = true;\n      }\n\n      await helper.setToUser(userId, ACCESS_TOKEN_DISK, null);\n\n      // Rollback refresh token\n      const migratedRefreshToken = await helper.getFromUser<string>(userId, REFRESH_TOKEN_DISK);\n\n      if (account?.tokens && migratedRefreshToken != null) {\n        account.tokens.refreshToken = migratedRefreshToken;\n        updatedLegacyAccount = true;\n      }\n\n      await helper.setToUser(userId, REFRESH_TOKEN_DISK, null);\n\n      // Rollback API key client id\n\n      const migratedApiKeyClientId = await helper.getFromUser<string>(\n        userId,\n        API_KEY_CLIENT_ID_DISK,\n      );\n\n      if (account?.profile && migratedApiKeyClientId != null) {\n        account.profile.apiKeyClientId = migratedApiKeyClientId;\n        updatedLegacyAccount = true;\n      }\n\n      await helper.setToUser(userId, API_KEY_CLIENT_ID_DISK, null);\n\n      // Rollback API key client secret\n      const migratedApiKeyClientSecret = await helper.getFromUser<string>(\n        userId,\n        API_KEY_CLIENT_SECRET_DISK,\n      );\n\n      if (account?.keys && migratedApiKeyClientSecret != null) {\n        account.keys.apiKeyClientSecret = migratedApiKeyClientSecret;\n        updatedLegacyAccount = true;\n      }\n\n      await helper.setToUser(userId, API_KEY_CLIENT_SECRET_DISK, null);\n\n      if (updatedLegacyAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  profile?: {\n    hasPremiumPersonally?: boolean;\n    hasPremiumFromOrganization?: boolean;\n  };\n};\n\ntype ExpectedBillingAccountProfileType = {\n  hasPremiumPersonally: boolean;\n  hasPremiumFromOrganization: boolean;\n};\n\nexport const BILLING_ACCOUNT_PROFILE_KEY_DEFINITION: KeyDefinitionLike = {\n  key: \"accountProfile\",\n  stateDefinition: {\n    name: \"billing\",\n  },\n};\n\nexport class MoveBillingAccountProfileMigrator extends Migrator<38, 39> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    const migrateAccount = async (userId: string, account: ExpectedAccountType): Promise<void> => {\n      const hasPremiumPersonally = account?.profile?.hasPremiumPersonally;\n      const hasPremiumFromOrganization = account?.profile?.hasPremiumFromOrganization;\n\n      if (hasPremiumPersonally != null || hasPremiumFromOrganization != null) {\n        await helper.setToUser(userId, BILLING_ACCOUNT_PROFILE_KEY_DEFINITION, {\n          hasPremiumPersonally: hasPremiumPersonally,\n          hasPremiumFromOrganization: hasPremiumFromOrganization,\n        });\n\n        delete account?.profile?.hasPremiumPersonally;\n        delete account?.profile?.hasPremiumFromOrganization;\n        await helper.set(userId, account);\n      }\n    };\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    const rollbackAccount = async (userId: string, account: ExpectedAccountType): Promise<void> => {\n      const value = await helper.getFromUser<ExpectedBillingAccountProfileType>(\n        userId,\n        BILLING_ACCOUNT_PROFILE_KEY_DEFINITION,\n      );\n\n      if (account && value) {\n        account.profile = Object.assign(account.profile ?? {}, {\n          hasPremiumPersonally: value?.hasPremiumPersonally,\n          hasPremiumFromOrganization: value?.hasPremiumFromOrganization,\n        });\n        await helper.set(userId, account);\n      }\n\n      await helper.setToUser(userId, BILLING_ACCOUNT_PROFILE_KEY_DEFINITION, null);\n    };\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { profile?: { everBeenUnlocked?: boolean } };\n\nexport class RemoveEverBeenUnlockedMigrator extends Migrator<3, 4> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function removeEverBeenUnlocked(userId: string, account: ExpectedAccountType) {\n      if (account?.profile?.everBeenUnlocked != null) {\n        delete account.profile.everBeenUnlocked;\n        return helper.set(userId, account);\n      }\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all(accounts.map(({ userId, account }) => removeEverBeenUnlocked(userId, account)));\n  }\n\n  rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\n// Local declarations of `OrganizationData` and the types of it's properties.\n// Duplicated to remain frozen in time when migration occurs.\nenum OrganizationUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1,\n}\n\nenum OrganizationUserType {\n  Owner = 0,\n  Admin = 1,\n  User = 2,\n  Manager = 3,\n  Custom = 4,\n}\n\ntype PermissionsApi = {\n  accessEventLogs: boolean;\n  accessImportExport: boolean;\n  accessReports: boolean;\n  createNewCollections: boolean;\n  editAnyCollection: boolean;\n  deleteAnyCollection: boolean;\n  editAssignedCollections: boolean;\n  deleteAssignedCollections: boolean;\n  manageCiphers: boolean;\n  manageGroups: boolean;\n  manageSso: boolean;\n  managePolicies: boolean;\n  manageUsers: boolean;\n  manageResetPassword: boolean;\n  manageScim: boolean;\n};\n\nenum ProviderType {\n  Msp = 0,\n  Reseller = 1,\n}\n\nenum ProductType {\n  Free = 0,\n  Families = 1,\n  Teams = 2,\n  Enterprise = 3,\n  TeamsStarter = 4,\n}\n\ntype OrganizationData = {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  isProviderUser: boolean;\n  isMember: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n  limitCollectionCreationDeletion: boolean;\n  allowAdminAccessToAllCollectionItems: boolean;\n  flexibleCollections: boolean;\n};\n\ntype ExpectedAccountType = {\n  data?: {\n    organizations?: Record<string, Jsonify<OrganizationData>>;\n  };\n};\n\nconst USER_ORGANIZATIONS: KeyDefinitionLike = {\n  key: \"organizations\",\n  stateDefinition: {\n    name: \"organizations\",\n  },\n};\n\nexport class OrganizationMigrator extends Migrator<39, 40> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.data?.organizations;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ORGANIZATIONS, value);\n        delete account.data.organizations;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => migrateAccount(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, USER_ORGANIZATIONS);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          organizations: value,\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ORGANIZATIONS, null);\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackAccount(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  data?: {\n    eventCollection?: [];\n  };\n};\n\nconst EVENT_COLLECTION: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"eventCollection\",\n  },\n  key: \"eventCollection\",\n};\n\nexport class EventCollectionMigrator extends Migrator<40, 41> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      const value = account?.data?.eventCollection;\n      if (value != null) {\n        await helper.setToUser(userId, EVENT_COLLECTION, value);\n        delete account.data.eventCollection;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      const value = await helper.getFromUser(userId, EVENT_COLLECTION);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          eventCollection: value,\n        });\n\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, EVENT_COLLECTION, null);\n    }\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobalState = {\n  disableFavicon?: boolean;\n};\n\nconst ShowFaviconDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"domainSettings\",\n  },\n  key: \"showFavicons\",\n};\n\nexport class EnableFaviconMigrator extends Migrator<41, 42> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // global state (\"disableFavicon\" -> \"showFavicons\")\n    const globalState = await helper.get<ExpectedGlobalState>(\"global\");\n\n    if (globalState?.disableFavicon != null) {\n      await helper.setToGlobal(ShowFaviconDefinition, !globalState.disableFavicon);\n\n      // delete `disableFavicon` from state global\n      delete globalState.disableFavicon;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // global state (\"showFavicons\" -> \"disableFavicon\")\n    const globalState = (await helper.get<ExpectedGlobalState>(\"global\")) || {};\n    const showFavicons: boolean = await helper.getFromGlobal(ShowFaviconDefinition);\n\n    if (showFavicons != null) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        disableFavicon: !showFavicons,\n      });\n\n      // remove the global state provider framework key for `showFavicons`\n      await helper.setToGlobal(ShowFaviconDefinition, null);\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  settings?: { autoConfirmFingerPrints?: boolean };\n};\n\nconst ORGANIZATION_MANAGEMENT_PREFERENCES: StateDefinitionLike = {\n  name: \"organizationManagementPreferences\",\n};\n\nconst AUTO_CONFIRM_FINGERPRINTS: KeyDefinitionLike = {\n  key: \"autoConfirmFingerPrints\",\n  stateDefinition: ORGANIZATION_MANAGEMENT_PREFERENCES,\n};\n\nexport class AutoConfirmFingerPrintsMigrator extends Migrator<42, 43> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        if (account?.settings?.autoConfirmFingerPrints != null) {\n          await helper.setToUser(\n            userId,\n            AUTO_CONFIRM_FINGERPRINTS,\n            account.settings.autoConfirmFingerPrints,\n          );\n          delete account?.settings?.autoConfirmFingerPrints;\n          await helper.set(userId, account);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountState) {\n      let updatedAccount = false;\n      const autoConfirmFingerPrints = await helper.getFromUser<boolean>(\n        userId,\n        AUTO_CONFIRM_FINGERPRINTS,\n      );\n\n      if (autoConfirmFingerPrints) {\n        if (!account) {\n          account = {};\n        }\n\n        updatedAccount = true;\n        account.settings.autoConfirmFingerPrints = autoConfirmFingerPrints;\n        await helper.setToUser(userId, AUTO_CONFIRM_FINGERPRINTS, null);\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype DecryptionOptionsType = {\n  hasMasterPassword: boolean;\n  trustedDeviceOption?: {\n    hasAdminApproval: boolean;\n    hasLoginApprovingDevice: boolean;\n    hasManageResetPasswordPermission: boolean;\n  };\n  keyConnectorOption?: {\n    keyConnectorUrl: string;\n  };\n};\n\ntype ExpectedAccountType = {\n  decryptionOptions?: DecryptionOptionsType;\n};\n\nconst USER_DECRYPTION_OPTIONS: KeyDefinitionLike = {\n  key: \"decryptionOptions\",\n  stateDefinition: {\n    name: \"userDecryptionOptions\",\n  },\n};\n\nexport class UserDecryptionOptionsMigrator extends Migrator<43, 44> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.decryptionOptions;\n      if (value != null) {\n        await helper.setToUser(userId, USER_DECRYPTION_OPTIONS, value);\n        delete account.decryptionOptions;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value: DecryptionOptionsType = await helper.getFromUser(\n        userId,\n        USER_DECRYPTION_OPTIONS,\n      );\n      if (account) {\n        account.decryptionOptions = Object.assign(account.decryptionOptions, value);\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_DECRYPTION_OPTIONS, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nconst ENVIRONMENT_STATE: StateDefinitionLike = { name: \"environment\" };\n\nconst ENVIRONMENT_REGION: KeyDefinitionLike = {\n  key: \"region\",\n  stateDefinition: ENVIRONMENT_STATE,\n};\n\nconst ENVIRONMENT_URLS: KeyDefinitionLike = {\n  key: \"urls\",\n  stateDefinition: ENVIRONMENT_STATE,\n};\n\nconst ENVIRONMENT_ENVIRONMENT: KeyDefinitionLike = {\n  key: \"environment\",\n  stateDefinition: ENVIRONMENT_STATE,\n};\n\nexport class MergeEnvironmentState extends Migrator<44, 45> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<unknown>();\n\n    async function migrateAccount(userId: string, account: unknown): Promise<void> {\n      const region = await helper.getFromUser(userId, ENVIRONMENT_REGION);\n      const urls = await helper.getFromUser(userId, ENVIRONMENT_URLS);\n\n      if (region == null && urls == null) {\n        return;\n      }\n\n      await helper.setToUser(userId, ENVIRONMENT_ENVIRONMENT, {\n        region,\n        urls,\n      });\n      await helper.removeFromUser(userId, ENVIRONMENT_REGION);\n      await helper.removeFromUser(userId, ENVIRONMENT_URLS);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    const region = await helper.getFromGlobal(ENVIRONMENT_REGION);\n    const urls = await helper.getFromGlobal(ENVIRONMENT_URLS);\n\n    if (region == null && urls == null) {\n      return;\n    }\n\n    await helper.setToGlobal(ENVIRONMENT_ENVIRONMENT, {\n      region,\n      urls,\n    });\n    await helper.removeFromGlobal(ENVIRONMENT_REGION);\n    await helper.removeFromGlobal(ENVIRONMENT_URLS);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<unknown>();\n\n    async function rollbackAccount(userId: string, account: unknown): Promise<void> {\n      const state = (await helper.getFromUser(userId, ENVIRONMENT_ENVIRONMENT)) as {\n        region: string;\n        urls: string;\n      } | null;\n\n      await helper.setToUser(userId, ENVIRONMENT_REGION, state?.region);\n      await helper.setToUser(userId, ENVIRONMENT_URLS, state?.urls);\n      await helper.removeFromUser(userId, ENVIRONMENT_ENVIRONMENT);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    const state = (await helper.getFromGlobal(ENVIRONMENT_ENVIRONMENT)) as {\n      region: string;\n      urls: string;\n    } | null;\n\n    await helper.setToGlobal(ENVIRONMENT_REGION, state?.region);\n    await helper.setToGlobal(ENVIRONMENT_URLS, state?.urls);\n    await helper.removeFromGlobal(ENVIRONMENT_ENVIRONMENT);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { IRREVERSIBLE, Migrator } from \"../migrator\";\n\nexport const PROMPT_CANCELLED: KeyDefinitionLike = {\n  key: \"promptCancelled\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport class DeleteBiometricPromptCancelledData extends Migrator<45, 46> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    await Promise.all(\n      (await helper.getAccounts()).map(async ({ userId }) => {\n        if (helper.getFromUser(userId, PROMPT_CANCELLED) != null) {\n          await helper.removeFromUser(userId, PROMPT_CANCELLED);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedGlobalType = {\n  window?: object;\n  enableTray?: boolean;\n  enableMinimizeToTray?: boolean;\n  enableCloseToTray?: boolean;\n  enableStartToTray?: boolean;\n  openAtLogin?: boolean;\n  alwaysShowDock?: boolean;\n  enableAlwaysOnTop?: boolean;\n};\n\ntype ExpectedAccountType = {\n  settings?: {\n    enableAlwaysOnTop?: boolean;\n  };\n};\n\nconst DESKTOP_SETTINGS_STATE: StateDefinitionLike = { name: \"desktopSettings\" };\n\nconst WINDOW_KEY: KeyDefinitionLike = { key: \"window\", stateDefinition: DESKTOP_SETTINGS_STATE };\n\nconst CLOSE_TO_TRAY_KEY: KeyDefinitionLike = {\n  key: \"closeToTray\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\nconst MINIMIZE_TO_TRAY_KEY: KeyDefinitionLike = {\n  key: \"minimizeToTray\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\nconst START_TO_TRAY_KEY: KeyDefinitionLike = {\n  key: \"startToTray\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\nconst TRAY_ENABLED_KEY: KeyDefinitionLike = {\n  key: \"trayEnabled\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\nconst OPEN_AT_LOGIN_KEY: KeyDefinitionLike = {\n  key: \"openAtLogin\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\nconst ALWAYS_SHOW_DOCK_KEY: KeyDefinitionLike = {\n  key: \"alwaysShowDock\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\n\nconst ALWAYS_ON_TOP_KEY: KeyDefinitionLike = {\n  key: \"alwaysOnTop\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\n\nexport class MoveDesktopSettingsMigrator extends Migrator<46, 47> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyGlobal = await helper.get<ExpectedGlobalType>(\"global\");\n\n    let updatedGlobal = false;\n    if (legacyGlobal?.window !== undefined) {\n      await helper.setToGlobal(WINDOW_KEY, legacyGlobal.window);\n      updatedGlobal = true;\n      delete legacyGlobal.window;\n    }\n\n    if (legacyGlobal?.enableCloseToTray != null) {\n      await helper.setToGlobal(CLOSE_TO_TRAY_KEY, legacyGlobal.enableCloseToTray);\n      updatedGlobal = true;\n      delete legacyGlobal.enableCloseToTray;\n    }\n\n    if (legacyGlobal?.enableMinimizeToTray != null) {\n      await helper.setToGlobal(MINIMIZE_TO_TRAY_KEY, legacyGlobal.enableMinimizeToTray);\n      updatedGlobal = true;\n      delete legacyGlobal.enableMinimizeToTray;\n    }\n\n    if (legacyGlobal?.enableStartToTray != null) {\n      await helper.setToGlobal(START_TO_TRAY_KEY, legacyGlobal.enableStartToTray);\n      updatedGlobal = true;\n      delete legacyGlobal.enableStartToTray;\n    }\n\n    if (legacyGlobal?.enableTray != null) {\n      await helper.setToGlobal(TRAY_ENABLED_KEY, legacyGlobal.enableTray);\n      updatedGlobal = true;\n      delete legacyGlobal.enableTray;\n    }\n\n    if (legacyGlobal?.openAtLogin != null) {\n      await helper.setToGlobal(OPEN_AT_LOGIN_KEY, legacyGlobal.openAtLogin);\n      updatedGlobal = true;\n      delete legacyGlobal.openAtLogin;\n    }\n\n    if (legacyGlobal?.alwaysShowDock != null) {\n      await helper.setToGlobal(ALWAYS_SHOW_DOCK_KEY, legacyGlobal.alwaysShowDock);\n      updatedGlobal = true;\n      delete legacyGlobal.alwaysShowDock;\n    }\n\n    if (legacyGlobal?.enableAlwaysOnTop != null) {\n      await helper.setToGlobal(ALWAYS_ON_TOP_KEY, legacyGlobal.enableAlwaysOnTop);\n      updatedGlobal = true;\n      delete legacyGlobal.enableAlwaysOnTop;\n    }\n\n    if (updatedGlobal) {\n      await helper.set(\"global\", legacyGlobal);\n    }\n\n    async function migrateAccount(userId: string, account: ExpectedAccountType) {\n      // We only migrate the global setting for this, if we find it on the account object\n      // just delete it.\n      if (account?.settings?.enableAlwaysOnTop != null) {\n        delete account.settings.enableAlwaysOnTop;\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    await Promise.all(accounts.map(({ userId, account }) => migrateAccount(userId, account)));\n  }\n\n  rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobal = {\n  enableDuckDuckGoBrowserIntegration?: boolean;\n};\n\nexport const DDG_KEY: KeyDefinitionLike = {\n  key: \"enableDuckDuckGoBrowserIntegration\",\n  stateDefinition: {\n    name: \"autofillSettings\",\n  },\n};\n\nexport class MoveDdgToStateProviderMigrator extends Migrator<47, 48> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // global state\n    const global = await helper.get<ExpectedGlobal>(\"global\");\n    if (global?.enableDuckDuckGoBrowserIntegration == null) {\n      return;\n    }\n\n    await helper.setToGlobal(DDG_KEY, global.enableDuckDuckGoBrowserIntegration);\n    delete global.enableDuckDuckGoBrowserIntegration;\n    await helper.set(\"global\", global);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const enableDdg = await helper.getFromGlobal<boolean>(DDG_KEY);\n\n    if (!enableDdg) {\n      return;\n    }\n\n    const global = (await helper.get<ExpectedGlobal>(\"global\")) ?? {};\n    global.enableDuckDuckGoBrowserIntegration = enableDdg;\n    await helper.set(\"global\", global);\n    await helper.removeFromGlobal(DDG_KEY);\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { keys?: { organizationKeys?: { encrypted: Record<string, string> } } };\ntype NewAccountType = {\n  keys?: {\n    organizationKeys?: { encrypted: Record<string, { type: \"organization\"; key: string }> };\n  };\n};\n\nexport class AddKeyTypeToOrgKeysMigrator extends Migrator<4, 5> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts();\n\n    async function updateOrgKey(userId: string, account: ExpectedAccountType) {\n      const encryptedOrgKeys = account?.keys?.organizationKeys?.encrypted;\n      if (encryptedOrgKeys == null) {\n        return;\n      }\n\n      const newOrgKeys: Record<string, { type: \"organization\"; key: string }> = {};\n\n      Object.entries(encryptedOrgKeys).forEach(([orgId, encKey]) => {\n        newOrgKeys[orgId] = {\n          type: \"organization\",\n          key: encKey,\n        };\n      });\n      (account as any).keys.organizationKeys.encrypted = newOrgKeys;\n\n      await helper.set(userId, account);\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all(accounts.map(({ userId, account }) => updateOrgKey(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts();\n\n    async function updateOrgKey(userId: string, account: NewAccountType) {\n      const encryptedOrgKeys = account?.keys?.organizationKeys?.encrypted;\n      if (encryptedOrgKeys == null) {\n        return;\n      }\n\n      const newOrgKeys: Record<string, string> = {};\n\n      Object.entries(encryptedOrgKeys).forEach(([orgId, encKey]) => {\n        newOrgKeys[orgId] = encKey.key;\n      });\n      (account as any).keys.organizationKeys.encrypted = newOrgKeys;\n\n      await helper.set(userId, account);\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all(accounts.map(async ({ userId, account }) => updateOrgKey(userId, account)));\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { keys?: { legacyEtmKey?: string } };\n\nexport class RemoveLegacyEtmKeyMigrator extends Migrator<5, 6> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function updateAccount(userId: string, account: ExpectedAccountType) {\n      if (account?.keys?.legacyEtmKey) {\n        delete account.keys.legacyEtmKey;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => updateAccount(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { settings?: { disableAutoBiometricsPrompt?: boolean } };\n\nexport class MoveBiometricAutoPromptToAccount extends Migrator<6, 7> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const global = await helper.get<{ noAutoPromptBiometrics?: boolean }>(\"global\");\n    const noAutoPromptBiometrics = global?.noAutoPromptBiometrics ?? false;\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function updateAccount(userId: string, account: ExpectedAccountType) {\n      if (account == null) {\n        return;\n      }\n\n      if (noAutoPromptBiometrics) {\n        account.settings = Object.assign(account?.settings ?? {}, {\n          disableAutoBiometricsPrompt: true,\n        });\n        await helper.set(userId, account);\n      }\n    }\n\n    delete global.noAutoPromptBiometrics;\n\n    await Promise.all([\n      ...accounts.map(({ userId, account }) => updateAccount(userId, account)),\n      helper.set(\"global\", global),\n    ]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { JsonObject } from \"type-fest\";\n\nimport { MigrationHelper } from \"../migration-helper\";\nimport { Direction, Migrator } from \"../migrator\";\n\nexport class MoveStateVersionMigrator extends Migrator<7, 8> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const global = await helper.get<{ stateVersion: number }>(\"global\");\n    if (global.stateVersion) {\n      await helper.set(\"stateVersion\", global.stateVersion);\n      delete global.stateVersion;\n      await helper.set(\"global\", global);\n    } else {\n      throw new Error(\"Migration failed, state version not found\");\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const version = await helper.get<number>(\"stateVersion\");\n    const global = await helper.get<JsonObject>(\"global\");\n    await helper.set(\"global\", { ...global, stateVersion: version });\n    await helper.set(\"stateVersion\", undefined);\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but this migration moves\n  // it from a `global` object to root.This makes for unique rollback versioning.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    if (direction === \"up\") {\n      await helper.set(\"stateVersion\", endVersion);\n    } else {\n      const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n      await helper.set(\"global\", { ...global, stateVersion: endVersion });\n    }\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype NeverDomains = { [id: string]: unknown };\n\ntype ExpectedAccountType = {\n  settings?: {\n    neverDomains?: NeverDomains;\n    disableAddLoginNotification?: boolean;\n    disableChangedPasswordNotification?: boolean;\n    disableContextMenuItem?: boolean;\n  };\n};\n\ntype TargetGlobalState = {\n  neverDomains?: NeverDomains;\n  disableAddLoginNotification?: boolean;\n  disableChangedPasswordNotification?: boolean;\n  disableContextMenuItem?: boolean;\n};\n\nexport class MoveBrowserSettingsToGlobal extends Migrator<8, 9> {\n  // Will first check if any of the accounts have a value from the given accountSelector\n  // if they do have a value it will set that value into global state but if multiple\n  // users have differing values it will prefer the false setting,\n  // if all users have true then it will take true.\n  tryAddSetting(\n    accounts: { userId: string; account: ExpectedAccountType }[],\n    accountSelector: (account: ExpectedAccountType) => boolean | undefined,\n    globalSetter: (value: boolean | undefined) => void,\n  ): void {\n    const hasValue = accounts.some(({ account }) => {\n      return accountSelector(account) !== undefined;\n    });\n\n    if (hasValue) {\n      const value = !accounts.some(({ account }) => {\n        return (accountSelector(account) ?? false) === false;\n      });\n\n      globalSetter(value);\n    }\n  }\n\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const global = await helper.get<object>(\"global\");\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    const globalNeverDomainsValue = accounts.reduce((accumulator, { account }) => {\n      const normalizedNeverDomains = account.settings?.neverDomains ?? {};\n      for (const [id, value] of Object.entries(normalizedNeverDomains)) {\n        accumulator ??= {};\n        accumulator[id] = value;\n      }\n      return accumulator;\n    }, undefined as NeverDomains);\n\n    const targetGlobalState: TargetGlobalState = {};\n\n    if (globalNeverDomainsValue != null) {\n      targetGlobalState.neverDomains = globalNeverDomainsValue;\n    }\n\n    this.tryAddSetting(\n      accounts,\n      (a) => a.settings?.disableAddLoginNotification,\n      (v) => (targetGlobalState.disableAddLoginNotification = v),\n    );\n\n    this.tryAddSetting(\n      accounts,\n      (a) => a.settings?.disableChangedPasswordNotification,\n      (v) => (targetGlobalState.disableChangedPasswordNotification = v),\n    );\n\n    this.tryAddSetting(\n      accounts,\n      (a) => a.settings?.disableContextMenuItem,\n      (v) => (targetGlobalState.disableContextMenuItem = v),\n    );\n\n    await helper.set<TargetGlobalState>(\"global\", {\n      ...global,\n      ...targetGlobalState,\n    });\n\n    await Promise.all(\n      accounts.map(async ({ userId, account }) => {\n        delete account.settings?.disableAddLoginNotification;\n        delete account.settings?.disableChangedPasswordNotification;\n        delete account.settings?.disableContextMenuItem;\n        delete account.settings?.neverDomains;\n        await helper.set(userId, account);\n      }),\n    );\n  }\n\n  rollback(helper: MigrationHelper): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { MinVersion, MIN_VERSION } from \"../migrate\";\nimport { MigrationHelper } from \"../migration-helper\";\nimport { IRREVERSIBLE, Migrator } from \"../migrator\";\n\nexport function minVersionError(current: number) {\n  return `Your local data is too old to be migrated. Your current state version is ${current}, but minimum version is ${MIN_VERSION}.`;\n}\n\nexport class MinVersionMigrator extends Migrator<0, MinVersion> {\n  constructor() {\n    super(0, MIN_VERSION);\n  }\n\n  // Overrides the default implementation to catch any version that may be passed in.\n  override shouldMigrate(helper: MigrationHelper): Promise<boolean> {\n    return Promise.resolve(helper.currentVersion < MIN_VERSION);\n  }\n  async migrate(helper: MigrationHelper): Promise<void> {\n    if (helper.currentVersion < MIN_VERSION) {\n      throw new Error(minVersionError(helper.currentVersion));\n    }\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n}\n","// eslint-disable-next-line import/no-restricted-paths -- Needed to print log messages\nimport { LogService } from \"../platform/abstractions/log.service\";\n// eslint-disable-next-line import/no-restricted-paths -- Needed to interface with storage locations\nimport { AbstractStorageService } from \"../platform/abstractions/storage.service\";\n\nimport { MigrationBuilder } from \"./migration-builder\";\nimport { EverHadUserKeyMigrator } from \"./migrations/10-move-ever-had-user-key-to-state-providers\";\nimport { OrganizationKeyMigrator } from \"./migrations/11-move-org-keys-to-state-providers\";\nimport { MoveEnvironmentStateToProviders } from \"./migrations/12-move-environment-state-to-providers\";\nimport { ProviderKeyMigrator } from \"./migrations/13-move-provider-keys-to-state-providers\";\nimport { MoveBiometricClientKeyHalfToStateProviders } from \"./migrations/14-move-biometric-client-key-half-state-to-providers\";\nimport { FolderMigrator } from \"./migrations/15-move-folder-state-to-state-provider\";\nimport { LastSyncMigrator } from \"./migrations/16-move-last-sync-to-state-provider\";\nimport { EnablePasskeysMigrator } from \"./migrations/17-move-enable-passkeys-to-state-providers\";\nimport { AutofillSettingsKeyMigrator } from \"./migrations/18-move-autofill-settings-to-state-providers\";\nimport { RequirePasswordOnStartMigrator } from \"./migrations/19-migrate-require-password-on-start\";\nimport { PrivateKeyMigrator } from \"./migrations/20-move-private-key-to-state-providers\";\nimport { CollectionMigrator } from \"./migrations/21-move-collections-state-to-state-provider\";\nimport { CollapsedGroupingsMigrator } from \"./migrations/22-move-collapsed-groupings-to-state-provider\";\nimport { MoveBiometricPromptsToStateProviders } from \"./migrations/23-move-biometric-prompts-to-state-providers\";\nimport { SmOnboardingTasksMigrator } from \"./migrations/24-move-sm-onboarding-key-to-state-providers\";\nimport { ClearClipboardDelayMigrator } from \"./migrations/25-move-clear-clipboard-to-autofill-settings-state-provider\";\nimport { RevertLastSyncMigrator } from \"./migrations/26-revert-move-last-sync-to-state-provider\";\nimport { BadgeSettingsMigrator } from \"./migrations/27-move-badge-settings-to-state-providers\";\nimport { MoveBiometricUnlockToStateProviders } from \"./migrations/28-move-biometric-unlock-to-state-providers\";\nimport { UserNotificationSettingsKeyMigrator } from \"./migrations/29-move-user-notification-settings-to-state-provider\";\nimport { PolicyMigrator } from \"./migrations/30-move-policy-state-to-state-provider\";\nimport { EnableContextMenuMigrator } from \"./migrations/31-move-enable-context-menu-to-autofill-settings-state-provider\";\nimport { PreferredLanguageMigrator } from \"./migrations/32-move-preferred-language\";\nimport { AppIdMigrator } from \"./migrations/33-move-app-id-to-state-providers\";\nimport { DomainSettingsMigrator } from \"./migrations/34-move-domain-settings-to-state-providers\";\nimport { MoveThemeToStateProviderMigrator } from \"./migrations/35-move-theme-to-state-providers\";\nimport { VaultSettingsKeyMigrator } from \"./migrations/36-move-show-card-and-identity-to-state-provider\";\nimport { AvatarColorMigrator } from \"./migrations/37-move-avatar-color-to-state-providers\";\nimport { TokenServiceStateProviderMigrator } from \"./migrations/38-migrate-token-svc-to-state-provider\";\nimport { MoveBillingAccountProfileMigrator } from \"./migrations/39-move-billing-account-profile-to-state-providers\";\nimport { RemoveEverBeenUnlockedMigrator } from \"./migrations/4-remove-ever-been-unlocked\";\nimport { OrganizationMigrator } from \"./migrations/40-move-organization-state-to-state-provider\";\nimport { EventCollectionMigrator } from \"./migrations/41-move-event-collection-to-state-provider\";\nimport { EnableFaviconMigrator } from \"./migrations/42-move-enable-favicon-to-domain-settings-state-provider\";\nimport { AutoConfirmFingerPrintsMigrator } from \"./migrations/43-move-auto-confirm-finger-prints-to-state-provider\";\nimport { UserDecryptionOptionsMigrator } from \"./migrations/44-move-user-decryption-options-to-state-provider\";\nimport { MergeEnvironmentState } from \"./migrations/45-merge-environment-state\";\nimport { DeleteBiometricPromptCancelledData } from \"./migrations/46-delete-orphaned-biometric-prompt-data\";\nimport { MoveDesktopSettingsMigrator } from \"./migrations/47-move-desktop-settings\";\nimport { MoveDdgToStateProviderMigrator } from \"./migrations/48-move-ddg-to-state-provider\";\nimport { AddKeyTypeToOrgKeysMigrator } from \"./migrations/5-add-key-type-to-org-keys\";\nimport { RemoveLegacyEtmKeyMigrator } from \"./migrations/6-remove-legacy-etm-key\";\nimport { MoveBiometricAutoPromptToAccount } from \"./migrations/7-move-biometric-auto-prompt-to-account\";\nimport { MoveStateVersionMigrator } from \"./migrations/8-move-state-version\";\nimport { MoveBrowserSettingsToGlobal } from \"./migrations/9-move-browser-settings-to-global\";\nimport { MinVersionMigrator } from \"./migrations/min-version\";\n\nexport const MIN_VERSION = 3;\nexport const CURRENT_VERSION = 48;\n\nexport type MinVersion = typeof MIN_VERSION;\n\nexport function createMigrationBuilder() {\n  return MigrationBuilder.create()\n    .with(MinVersionMigrator)\n    .with(RemoveEverBeenUnlockedMigrator, 3, 4)\n    .with(AddKeyTypeToOrgKeysMigrator, 4, 5)\n    .with(RemoveLegacyEtmKeyMigrator, 5, 6)\n    .with(MoveBiometricAutoPromptToAccount, 6, 7)\n    .with(MoveStateVersionMigrator, 7, 8)\n    .with(MoveBrowserSettingsToGlobal, 8, 9)\n    .with(EverHadUserKeyMigrator, 9, 10)\n    .with(OrganizationKeyMigrator, 10, 11)\n    .with(MoveEnvironmentStateToProviders, 11, 12)\n    .with(ProviderKeyMigrator, 12, 13)\n    .with(MoveBiometricClientKeyHalfToStateProviders, 13, 14)\n    .with(FolderMigrator, 14, 15)\n    .with(LastSyncMigrator, 15, 16)\n    .with(EnablePasskeysMigrator, 16, 17)\n    .with(AutofillSettingsKeyMigrator, 17, 18)\n    .with(RequirePasswordOnStartMigrator, 18, 19)\n    .with(PrivateKeyMigrator, 19, 20)\n    .with(CollectionMigrator, 20, 21)\n    .with(CollapsedGroupingsMigrator, 21, 22)\n    .with(MoveBiometricPromptsToStateProviders, 22, 23)\n    .with(SmOnboardingTasksMigrator, 23, 24)\n    .with(ClearClipboardDelayMigrator, 24, 25)\n    .with(RevertLastSyncMigrator, 25, 26)\n    .with(BadgeSettingsMigrator, 26, 27)\n    .with(MoveBiometricUnlockToStateProviders, 27, 28)\n    .with(UserNotificationSettingsKeyMigrator, 28, 29)\n    .with(PolicyMigrator, 29, 30)\n    .with(EnableContextMenuMigrator, 30, 31)\n    .with(PreferredLanguageMigrator, 31, 32)\n    .with(AppIdMigrator, 32, 33)\n    .with(DomainSettingsMigrator, 33, 34)\n    .with(MoveThemeToStateProviderMigrator, 34, 35)\n    .with(VaultSettingsKeyMigrator, 35, 36)\n    .with(AvatarColorMigrator, 36, 37)\n    .with(TokenServiceStateProviderMigrator, 37, 38)\n    .with(MoveBillingAccountProfileMigrator, 38, 39)\n    .with(OrganizationMigrator, 39, 40)\n    .with(EventCollectionMigrator, 40, 41)\n    .with(EnableFaviconMigrator, 41, 42)\n    .with(AutoConfirmFingerPrintsMigrator, 42, 43)\n    .with(UserDecryptionOptionsMigrator, 43, 44)\n    .with(MergeEnvironmentState, 44, 45)\n    .with(DeleteBiometricPromptCancelledData, 45, 46)\n    .with(MoveDesktopSettingsMigrator, 46, 47)\n    .with(MoveDdgToStateProviderMigrator, 47, CURRENT_VERSION);\n}\n\nexport async function currentVersion(\n  storageService: AbstractStorageService,\n  logService: LogService,\n) {\n  let state = await storageService.get<number>(\"stateVersion\");\n  if (state == null) {\n    // Pre v8\n    state = (await storageService.get<{ stateVersion: number }>(\"global\"))?.stateVersion;\n  }\n  if (state == null) {\n    logService.info(\"No state version found, assuming empty state.\");\n    return -1;\n  }\n  logService.info(`State version: ${state}`);\n  return state;\n}\n\n/**\n * Waits for migrations to have a chance to run and will resolve the promise once they are.\n *\n * @param storageService Disk storage where the `stateVersion` will or is already saved in.\n * @param logService Log service\n */\nexport async function waitForMigrations(\n  storageService: AbstractStorageService,\n  logService: LogService,\n) {\n  const isReady = async () => {\n    const version = await currentVersion(storageService, logService);\n    // The saved version is what we consider the latest\n    // migrations should be complete, the state version\n    // shouldn't become larger than `CURRENT_VERSION` in\n    // any normal usage of the application but it is common\n    // enough in dev scenarios where we want to consider that\n    // ready as well and return true in that scenario.\n    return version >= CURRENT_VERSION;\n  };\n\n  const wait = async (time: number) => {\n    // Wait exponentially\n    const nextTime = time * 2;\n    if (nextTime > 8192) {\n      // Don't wait longer than ~8 seconds in a single wait,\n      // if the migrations still haven't happened. They aren't\n      // likely to.\n      return;\n    }\n    return new Promise<void>((resolve) => {\n      setTimeout(async () => {\n        if (!(await isReady())) {\n          logService.info(`Waiting for migrations to finish, waiting for ${nextTime}ms`);\n          await wait(nextTime);\n        }\n        resolve();\n      }, time);\n    });\n  };\n\n  if (!(await isReady())) {\n    // Wait for 2ms to start with\n    await wait(2);\n  }\n}\n","import { createMigrationBuilder } from \"../../state-migrations\";\nimport { MigrationBuilder } from \"../../state-migrations/migration-builder\";\n\nexport class MigrationBuilderService {\n  private migrationBuilderCache: MigrationBuilder;\n\n  build() {\n    return (this.migrationBuilderCache ??= createMigrationBuilder());\n  }\n}\n","// eslint-disable-next-line import/no-restricted-paths -- Needed to print log messages\nimport { LogService } from \"../platform/abstractions/log.service\";\n// eslint-disable-next-line import/no-restricted-paths -- Needed to interface with storage locations\nimport { AbstractStorageService } from \"../platform/abstractions/storage.service\";\n\nexport type StateDefinitionLike = { name: string };\nexport type KeyDefinitionLike = {\n  stateDefinition: StateDefinitionLike;\n  key: string;\n};\n\nexport type MigrationHelperType = \"general\" | \"web-disk-local\";\n\nexport class MigrationHelper {\n  constructor(\n    public currentVersion: number,\n    private storageService: AbstractStorageService,\n    public logService: LogService,\n    type: MigrationHelperType,\n  ) {\n    this.type = type;\n  }\n\n  /**\n   * On some clients, migrations are ran multiple times without direct action from the migration writer.\n   *\n   * All clients will run through migrations at least once, this run is referred to as `\"general\"`. If a migration is\n   * ran more than that single time, they will get a unique name if that the write can make conditional logic based on which\n   * migration run this is.\n   *\n   * @remarks The preferrable way of writing migrations is ALWAYS to be defensive and reflect on the data you are given back. This\n   * should really only be used when reflecting on the data given isn't enough.\n   */\n  type: MigrationHelperType;\n\n  /**\n   * Gets a value from the storage service at the given key.\n   *\n   * This is a brute force method to just get a value from the storage service. If you can use {@link getFromGlobal} or {@link getFromUser}, you should.\n   * @param key location\n   * @returns the value at the location\n   */\n  get<T>(key: string): Promise<T> {\n    return this.storageService.get<T>(key);\n  }\n\n  /**\n   * Sets a value in the storage service at the given key.\n   *\n   * This is a brute force method to just set a value in the storage service. If you can use {@link setToGlobal} or {@link setToUser}, you should.\n   * @param key location\n   * @param value the value to set\n   * @returns\n   */\n  set<T>(key: string, value: T): Promise<void> {\n    this.logService.info(`Setting ${key}`);\n    return this.storageService.save(key, value);\n  }\n\n  /**\n   * Remove a value in the storage service at the given key.\n   *\n   * This is a brute force method to just remove a value in the storage service. If you can use {@link removeFromGlobal} or {@link removeFromUser}, you should.\n   * @param key location\n   * @returns void\n   */\n  remove(key: string): Promise<void> {\n    this.logService.info(`Removing ${key}`);\n    return this.storageService.remove(key);\n  }\n\n  /**\n   * Gets a globally scoped value from a location derived through the key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link get} for those.\n   * @param keyDefinition unique key definition\n   * @returns value from store\n   */\n  getFromGlobal<T>(keyDefinition: KeyDefinitionLike): Promise<T> {\n    return this.get<T>(this.getGlobalKey(keyDefinition));\n  }\n\n  /**\n   * Sets a globally scoped value to a location derived through the key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link set} for those.\n   * @param keyDefinition unique key definition\n   * @param value value to store\n   * @returns void\n   */\n  setToGlobal<T>(keyDefinition: KeyDefinitionLike, value: T): Promise<void> {\n    return this.set(this.getGlobalKey(keyDefinition), value);\n  }\n\n  /**\n   * Remove a globally scoped location derived through the key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link remove} for those.\n   * @param keyDefinition unique key definition\n   * @returns void\n   */\n  removeFromGlobal(keyDefinition: KeyDefinitionLike): Promise<void> {\n    return this.remove(this.getGlobalKey(keyDefinition));\n  }\n\n  /**\n   * Gets a user scoped value from a location derived through the user id and key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link get} for those.\n   * @param userId userId to use in the key\n   * @param keyDefinition unique key definition\n   * @returns value from store\n   */\n  getFromUser<T>(userId: string, keyDefinition: KeyDefinitionLike): Promise<T> {\n    return this.get<T>(this.getUserKey(userId, keyDefinition));\n  }\n\n  /**\n   * Sets a user scoped value to a location derived through the user id and key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link set} for those.\n   * @param userId userId to use in the key\n   * @param keyDefinition unique key definition\n   * @param value value to store\n   * @returns void\n   */\n  setToUser<T>(userId: string, keyDefinition: KeyDefinitionLike, value: T): Promise<void> {\n    return this.set(this.getUserKey(userId, keyDefinition), value);\n  }\n\n  /**\n   * Remove a user scoped location derived through the key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link remove} for those.\n   * @param keyDefinition unique key definition\n   * @returns void\n   */\n  removeFromUser(userId: string, keyDefinition: KeyDefinitionLike): Promise<void> {\n    return this.remove(this.getUserKey(userId, keyDefinition));\n  }\n\n  info(message: string): void {\n    this.logService.info(message);\n  }\n\n  /**\n   * Helper method to read all Account objects stored by the State Service.\n   *\n   * This is useful from creating migrations off of this paradigm, but should not be used once a value is migrated to a state provider.\n   *\n   * @returns a list of all accounts that have been authenticated with state service, cast the the expected type.\n   */\n  async getAccounts<ExpectedAccountType>(): Promise<\n    { userId: string; account: ExpectedAccountType }[]\n  > {\n    const userIds = (await this.get<string[]>(\"authenticatedAccounts\")) ?? [];\n    return Promise.all(\n      userIds.map(async (userId) => ({\n        userId,\n        account: await this.get<ExpectedAccountType>(userId),\n      })),\n    );\n  }\n\n  /**\n   * Builds a user storage key appropriate for the current version.\n   *\n   * @param userId userId to use in the key\n   * @param keyDefinition state and key to use in the key\n   * @returns\n   */\n  private getUserKey(userId: string, keyDefinition: KeyDefinitionLike): string {\n    if (this.currentVersion < 9) {\n      return userKeyBuilderPre9();\n    } else {\n      return userKeyBuilder(userId, keyDefinition);\n    }\n  }\n\n  /**\n   * Builds a global storage key appropriate for the current version.\n   *\n   * @param keyDefinition state and key to use in the key\n   * @returns\n   */\n  private getGlobalKey(keyDefinition: KeyDefinitionLike): string {\n    if (this.currentVersion < 9) {\n      return globalKeyBuilderPre9();\n    } else {\n      return globalKeyBuilder(keyDefinition);\n    }\n  }\n}\n\n/**\n * When this is updated, rename this function to `userKeyBuilderXToY` where `X` is the version number it\n * became relevant, and `Y` prior to the version it was updated.\n *\n * Be sure to update the map in `MigrationHelper` to point to the appropriate function for the current version.\n * @param userId The userId of the user you want the key to be for.\n * @param keyDefinition the key definition of which data the key should point to.\n * @returns\n */\nfunction userKeyBuilder(userId: string, keyDefinition: KeyDefinitionLike): string {\n  return `user_${userId}_${keyDefinition.stateDefinition.name}_${keyDefinition.key}`;\n}\n\nfunction userKeyBuilderPre9(): string {\n  throw Error(\"No key builder should be used for versions prior to 9.\");\n}\n\n/**\n * When this is updated, rename this function to `globalKeyBuilderXToY` where `X` is the version number\n * it became relevant, and `Y` prior to the version it was updated.\n *\n * Be sure to update the map in `MigrationHelper` to point to the appropriate function for the current version.\n * @param keyDefinition the key definition of which data the key should point to.\n * @returns\n */\nfunction globalKeyBuilder(keyDefinition: KeyDefinitionLike): string {\n  return `global_${keyDefinition.stateDefinition.name}_${keyDefinition.key}`;\n}\n\nfunction globalKeyBuilderPre9(): string {\n  throw Error(\"No key builder should be used for versions prior to 9.\");\n}\n","import { waitForMigrations } from \"../../state-migrations\";\nimport { CURRENT_VERSION, currentVersion } from \"../../state-migrations/migrate\";\nimport { MigrationHelper } from \"../../state-migrations/migration-helper\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { AbstractStorageService } from \"../abstractions/storage.service\";\n\nimport { MigrationBuilderService } from \"./migration-builder.service\";\n\nexport class MigrationRunner {\n  constructor(\n    protected diskStorage: AbstractStorageService,\n    protected logService: LogService,\n    protected migrationBuilderService: MigrationBuilderService,\n  ) {}\n\n  async run(): Promise<void> {\n    const migrationHelper = new MigrationHelper(\n      await currentVersion(this.diskStorage, this.logService),\n      this.diskStorage,\n      this.logService,\n      \"general\",\n    );\n\n    if (migrationHelper.currentVersion < 0) {\n      // Cannot determine state, assuming empty so we don't repeatedly apply a migration.\n      await this.diskStorage.save(\"stateVersion\", CURRENT_VERSION);\n      return;\n    }\n\n    const migrationBuilder = this.migrationBuilderService.build();\n\n    await migrationBuilder.migrate(migrationHelper);\n  }\n\n  async waitForCompletion(): Promise<void> {\n    await waitForMigrations(this.diskStorage, this.logService);\n  }\n}\n","import { AbstractStorageService, ObservableStorageService } from \"../abstractions/storage.service\";\n// eslint-disable-next-line import/no-restricted-paths\nimport { ClientLocations, StorageLocation } from \"../state/state-definition\";\n\nexport type PossibleLocation = StorageLocation | ClientLocations[keyof ClientLocations];\n\n/**\n * A provider for getting client specific computed storage locations and services.\n */\nexport class StorageServiceProvider {\n  constructor(\n    protected readonly diskStorageService: AbstractStorageService & ObservableStorageService,\n    protected readonly memoryStorageService: AbstractStorageService & ObservableStorageService,\n  ) {}\n\n  /**\n   * Computes the location and corresponding service for a given client.\n   *\n   * **NOTE** The default implementation does not respect client overrides and if clients\n   * have special overrides they are responsible for implementing this service.\n   * @param defaultLocation The default location to use if no client specific override is preferred.\n   * @param overrides Client specific overrides\n   * @returns The computed storage location and corresponding storage service to use to get/store state.\n   * @throws If there is no configured storage service for the given inputs.\n   */\n  get(\n    defaultLocation: PossibleLocation,\n    overrides: Partial<ClientLocations>,\n  ): [location: PossibleLocation, service: AbstractStorageService & ObservableStorageService] {\n    switch (defaultLocation) {\n      case \"disk\":\n        return [defaultLocation, this.diskStorageService];\n      case \"memory\":\n        return [defaultLocation, this.memoryStorageService];\n      default:\n        throw new Error(`Unexpected location: ${defaultLocation}`);\n    }\n  }\n}\n","import { firstValueFrom, timeout } from \"rxjs\";\n\nimport { VaultTimeoutSettingsService } from \"../../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { AuthService } from \"../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { AutofillSettingsServiceAbstraction } from \"../../autofill/services/autofill-settings.service\";\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platform-utils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { SystemService as SystemServiceAbstraction } from \"../abstractions/system.service\";\nimport { BiometricStateService } from \"../biometrics/biometric-state.service\";\nimport { Utils } from \"../misc/utils\";\n\nexport class SystemService implements SystemServiceAbstraction {\n  private reloadInterval: any = null;\n  private clearClipboardTimeout: any = null;\n  private clearClipboardTimeoutFunction: () => Promise<any> = null;\n\n  constructor(\n    private messagingService: MessagingService,\n    private platformUtilsService: PlatformUtilsService,\n    private reloadCallback: () => Promise<void> = null,\n    private stateService: StateService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsService,\n    private biometricStateService: BiometricStateService,\n  ) {}\n\n  async startProcessReload(authService: AuthService): Promise<void> {\n    const accounts = await firstValueFrom(this.stateService.accounts$);\n    if (accounts != null) {\n      const keys = Object.keys(accounts);\n      if (keys.length > 0) {\n        for (const userId of keys) {\n          if ((await authService.getAuthStatus(userId)) === AuthenticationStatus.Unlocked) {\n            return;\n          }\n        }\n      }\n    }\n\n    // A reloadInterval has already been set and is executing\n    if (this.reloadInterval != null) {\n      return;\n    }\n\n    // User has set a PIN, with ask for master password on restart, to protect their vault\n    const ephemeralPin = await this.stateService.getPinKeyEncryptedUserKeyEphemeral();\n    if (ephemeralPin != null) {\n      return;\n    }\n\n    this.cancelProcessReload();\n    await this.executeProcessReload();\n  }\n\n  private async executeProcessReload() {\n    const biometricLockedFingerprintValidated = await firstValueFrom(\n      this.biometricStateService.fingerprintValidated$,\n    );\n    if (!biometricLockedFingerprintValidated) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n\n      const currentUser = await firstValueFrom(this.stateService.activeAccount$.pipe(timeout(500)));\n      // Replace current active user if they will be logged out on reload\n      if (currentUser != null) {\n        const timeoutAction = await firstValueFrom(\n          this.vaultTimeoutSettingsService.vaultTimeoutAction$().pipe(timeout(500)),\n        );\n        if (timeoutAction === VaultTimeoutAction.LogOut) {\n          const nextUser = await this.stateService.nextUpActiveUser();\n          await this.stateService.setActiveUser(nextUser);\n        }\n      }\n\n      this.messagingService.send(\"reloadProcess\");\n      if (this.reloadCallback != null) {\n        await this.reloadCallback();\n      }\n      return;\n    }\n    if (this.reloadInterval == null) {\n      this.reloadInterval = setInterval(async () => await this.executeProcessReload(), 1000);\n    }\n  }\n\n  cancelProcessReload(): void {\n    if (this.reloadInterval != null) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n    }\n  }\n\n  async clearClipboard(clipboardValue: string, timeoutMs: number = null): Promise<void> {\n    if (this.clearClipboardTimeout != null) {\n      clearTimeout(this.clearClipboardTimeout);\n      this.clearClipboardTimeout = null;\n    }\n\n    if (Utils.isNullOrWhitespace(clipboardValue)) {\n      return;\n    }\n\n    const clearClipboardDelay = await firstValueFrom(\n      this.autofillSettingsService.clearClipboardDelay$,\n    );\n\n    if (clearClipboardDelay == null) {\n      return;\n    }\n\n    if (timeoutMs == null) {\n      timeoutMs = clearClipboardDelay * 1000;\n    }\n\n    this.clearClipboardTimeoutFunction = async () => {\n      const clipboardValueNow = await this.platformUtilsService.readFromClipboard();\n      if (clipboardValue === clipboardValueNow) {\n        this.platformUtilsService.copyToClipboard(\"\", { clearing: true });\n      }\n    };\n\n    this.clearClipboardTimeout = setTimeout(async () => {\n      await this.clearPendingClipboard();\n    }, timeoutMs);\n  }\n\n  async clearPendingClipboard() {\n    if (this.clearClipboardTimeoutFunction != null) {\n      await this.clearClipboardTimeoutFunction();\n      this.clearClipboardTimeoutFunction = null;\n    }\n  }\n}\n","export class DecryptParameters<T> {\n  encKey: T;\n  data: T;\n  iv: T;\n  macKey: T;\n  mac: T;\n  macData: T;\n}\n","import * as argon2 from \"argon2-browser\";\nimport * as forge from \"node-forge\";\n\nimport { Utils } from \"../../platform/misc/utils\";\nimport { CsprngArray } from \"../../types/csprng\";\nimport { CryptoFunctionService } from \"../abstractions/crypto-function.service\";\nimport { DecryptParameters } from \"../models/domain/decrypt-parameters\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\nexport class WebCryptoFunctionService implements CryptoFunctionService {\n  private crypto: Crypto;\n  private subtle: SubtleCrypto;\n  private wasmSupported: boolean;\n\n  constructor(globalContext: Window | typeof global) {\n    this.crypto = typeof globalContext.crypto !== \"undefined\" ? globalContext.crypto : null;\n    this.subtle =\n      !!this.crypto && typeof this.crypto.subtle !== \"undefined\" ? this.crypto.subtle : null;\n    this.wasmSupported = this.checkIfWasmSupported();\n  }\n\n  async pbkdf2(\n    password: string | Uint8Array,\n    salt: string | Uint8Array,\n    algorithm: \"sha256\" | \"sha512\",\n    iterations: number,\n  ): Promise<Uint8Array> {\n    const wcLen = algorithm === \"sha256\" ? 256 : 512;\n    const passwordBuf = this.toBuf(password);\n    const saltBuf = this.toBuf(salt);\n\n    const pbkdf2Params: Pbkdf2Params = {\n      name: \"PBKDF2\",\n      salt: saltBuf,\n      iterations: iterations,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\n      \"raw\",\n      passwordBuf,\n      { name: \"PBKDF2\" } as any,\n      false,\n      [\"deriveBits\"],\n    );\n    const buffer = await this.subtle.deriveBits(pbkdf2Params as any, impKey, wcLen);\n    return new Uint8Array(buffer);\n  }\n\n  async argon2(\n    password: string | Uint8Array,\n    salt: string | Uint8Array,\n    iterations: number,\n    memory: number,\n    parallelism: number,\n  ): Promise<Uint8Array> {\n    if (!this.wasmSupported) {\n      throw \"Webassembly support is required for the Argon2 KDF feature.\";\n    }\n\n    const passwordArr = new Uint8Array(this.toBuf(password));\n    const saltArr = new Uint8Array(this.toBuf(salt));\n\n    const result = await argon2.hash({\n      pass: passwordArr,\n      salt: saltArr,\n      time: iterations,\n      mem: memory,\n      parallelism: parallelism,\n      hashLen: 32,\n      type: argon2.ArgonType.Argon2id,\n    });\n    argon2.unloadRuntime();\n    return result.hash;\n  }\n\n  async hkdf(\n    ikm: Uint8Array,\n    salt: string | Uint8Array,\n    info: string | Uint8Array,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\",\n  ): Promise<Uint8Array> {\n    const saltBuf = this.toBuf(salt);\n    const infoBuf = this.toBuf(info);\n\n    const hkdfParams: HkdfParams = {\n      name: \"HKDF\",\n      salt: saltBuf,\n      info: infoBuf,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", ikm, { name: \"HKDF\" } as any, false, [\n      \"deriveBits\",\n    ]);\n    const buffer = await this.subtle.deriveBits(hkdfParams as any, impKey, outputByteSize * 8);\n    return new Uint8Array(buffer);\n  }\n\n  // ref: https://tools.ietf.org/html/rfc5869\n  async hkdfExpand(\n    prk: Uint8Array,\n    info: string | Uint8Array,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\",\n  ): Promise<Uint8Array> {\n    const hashLen = algorithm === \"sha256\" ? 32 : 64;\n    if (outputByteSize > 255 * hashLen) {\n      throw new Error(\"outputByteSize is too large.\");\n    }\n    const prkArr = new Uint8Array(prk);\n    if (prkArr.length < hashLen) {\n      throw new Error(\"prk is too small.\");\n    }\n    const infoBuf = this.toBuf(info);\n    const infoArr = new Uint8Array(infoBuf);\n    let runningOkmLength = 0;\n    let previousT = new Uint8Array(0);\n    const n = Math.ceil(outputByteSize / hashLen);\n    const okm = new Uint8Array(n * hashLen);\n    for (let i = 0; i < n; i++) {\n      const t = new Uint8Array(previousT.length + infoArr.length + 1);\n      t.set(previousT);\n      t.set(infoArr, previousT.length);\n      t.set([i + 1], t.length - 1);\n      previousT = new Uint8Array(await this.hmac(t, prk, algorithm));\n      okm.set(previousT, runningOkmLength);\n      runningOkmLength += previousT.length;\n      if (runningOkmLength >= outputByteSize) {\n        break;\n      }\n    }\n    return okm.slice(0, outputByteSize);\n  }\n\n  async hash(\n    value: string | Uint8Array,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\",\n  ): Promise<Uint8Array> {\n    if (algorithm === \"md5\") {\n      const md = forge.md.md5.create();\n      const valueBytes = this.toByteString(value);\n      md.update(valueBytes, \"raw\");\n      return Utils.fromByteStringToArray(md.digest().data);\n    }\n\n    const valueBuf = this.toBuf(value);\n    const buffer = await this.subtle.digest(\n      { name: this.toWebCryptoAlgorithm(algorithm) },\n      valueBuf,\n    );\n    return new Uint8Array(buffer);\n  }\n\n  async hmac(\n    value: Uint8Array,\n    key: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\",\n  ): Promise<Uint8Array> {\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", key, signingAlgorithm, false, [\"sign\"]);\n    const buffer = await this.subtle.sign(signingAlgorithm, impKey, value);\n    return new Uint8Array(buffer);\n  }\n\n  // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).\n  // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\n  // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy\n  async compare(a: Uint8Array, b: Uint8Array): Promise<boolean> {\n    const macKey = await this.randomBytes(32);\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    };\n    const impKey = await this.subtle.importKey(\"raw\", macKey, signingAlgorithm, false, [\"sign\"]);\n    const mac1 = await this.subtle.sign(signingAlgorithm, impKey, a);\n    const mac2 = await this.subtle.sign(signingAlgorithm, impKey, b);\n\n    if (mac1.byteLength !== mac2.byteLength) {\n      return false;\n    }\n\n    const arr1 = new Uint8Array(mac1);\n    const arr2 = new Uint8Array(mac2);\n    for (let i = 0; i < arr2.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hmacFast(value: string, key: string, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hmac = forge.hmac.create();\n    hmac.start(algorithm, key);\n    hmac.update(value);\n    const bytes = hmac.digest().getBytes();\n    return Promise.resolve(bytes);\n  }\n\n  async compareFast(a: string, b: string): Promise<boolean> {\n    const rand = await this.randomBytes(32);\n    const bytes = new Uint32Array(rand);\n    const buffer = forge.util.createBuffer();\n    for (let i = 0; i < bytes.length; i++) {\n      buffer.putInt32(bytes[i]);\n    }\n    const macKey = buffer.getBytes();\n\n    const hmac = forge.hmac.create();\n    hmac.start(\"sha256\", macKey);\n    hmac.update(a);\n    const mac1 = hmac.digest().getBytes();\n\n    hmac.start(null, null);\n    hmac.update(b);\n    const mac2 = hmac.digest().getBytes();\n\n    const equals = mac1 === mac2;\n    return equals;\n  }\n\n  async aesEncrypt(data: Uint8Array, iv: Uint8Array, key: Uint8Array): Promise<Uint8Array> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"encrypt\",\n    ]);\n    const buffer = await this.subtle.encrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  aesDecryptFastParameters(\n    data: string,\n    iv: string,\n    mac: string,\n    key: SymmetricCryptoKey,\n  ): DecryptParameters<string> {\n    const p = new DecryptParameters<string>();\n    if (key.meta != null) {\n      p.encKey = key.meta.encKeyByteString;\n      p.macKey = key.meta.macKeyByteString;\n    }\n\n    if (p.encKey == null) {\n      p.encKey = forge.util.decode64(key.encKeyB64);\n    }\n    p.data = forge.util.decode64(data);\n    p.iv = forge.util.decode64(iv);\n    p.macData = p.iv + p.data;\n    if (p.macKey == null && key.macKeyB64 != null) {\n      p.macKey = forge.util.decode64(key.macKeyB64);\n    }\n    if (mac != null) {\n      p.mac = forge.util.decode64(mac);\n    }\n\n    // cache byte string keys for later\n    if (key.meta == null) {\n      key.meta = {};\n    }\n    if (key.meta.encKeyByteString == null) {\n      key.meta.encKeyByteString = p.encKey;\n    }\n    if (p.macKey != null && key.meta.macKeyByteString == null) {\n      key.meta.macKeyByteString = p.macKey;\n    }\n\n    return p;\n  }\n\n  aesDecryptFast(parameters: DecryptParameters<string>, mode: \"cbc\" | \"ecb\"): Promise<string> {\n    const decipher = (forge as any).cipher.createDecipher(\n      this.toWebCryptoAesMode(mode),\n      parameters.encKey,\n    );\n    const options = {} as any;\n    if (mode === \"cbc\") {\n      options.iv = parameters.iv;\n    }\n    const dataBuffer = (forge as any).util.createBuffer(parameters.data);\n    decipher.start(options);\n    decipher.update(dataBuffer);\n    decipher.finish();\n    const val = decipher.output.toString();\n    return Promise.resolve(val);\n  }\n\n  async aesDecrypt(\n    data: Uint8Array,\n    iv: Uint8Array,\n    key: Uint8Array,\n    mode: \"cbc\" | \"ecb\",\n  ): Promise<Uint8Array> {\n    if (mode === \"ecb\") {\n      // Web crypto does not support AES-ECB mode, so we need to do this in forge.\n      const params = new DecryptParameters<string>();\n      params.data = this.toByteString(data);\n      params.encKey = this.toByteString(key);\n      const result = await this.aesDecryptFast(params, \"ecb\");\n      return Utils.fromByteStringToArray(result);\n    }\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"decrypt\",\n    ]);\n    const buffer = await this.subtle.decrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaEncrypt(\n    data: Uint8Array,\n    publicKey: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\",\n  ): Promise<Uint8Array> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"spki\", publicKey, rsaParams, false, [\"encrypt\"]);\n    const buffer = await this.subtle.encrypt(rsaParams, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaDecrypt(\n    data: Uint8Array,\n    privateKey: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\",\n  ): Promise<Uint8Array> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, false, [\"decrypt\"]);\n    const buffer = await this.subtle.decrypt(rsaParams, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaExtractPublicKey(privateKey: Uint8Array): Promise<Uint8Array> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const impPrivateKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, true, [\n      \"decrypt\",\n    ]);\n    const jwkPrivateKey = await this.subtle.exportKey(\"jwk\", impPrivateKey);\n    const jwkPublicKeyParams = {\n      kty: \"RSA\",\n      e: jwkPrivateKey.e,\n      n: jwkPrivateKey.n,\n      alg: \"RSA-OAEP\",\n      ext: true,\n    };\n    const impPublicKey = await this.subtle.importKey(\"jwk\", jwkPublicKeyParams, rsaParams, true, [\n      \"encrypt\",\n    ]);\n    const buffer = await this.subtle.exportKey(\"spki\", impPublicKey);\n    return new Uint8Array(buffer);\n  }\n\n  async aesGenerateKey(bitLength = 128 | 192 | 256 | 512): Promise<CsprngArray> {\n    if (bitLength === 512) {\n      // 512 bit keys are not supported in WebCrypto, so we concat two 256 bit keys\n      const key1 = await this.aesGenerateKey(256);\n      const key2 = await this.aesGenerateKey(256);\n      return new Uint8Array([...key1, ...key2]) as CsprngArray;\n    }\n    const aesParams = {\n      name: \"AES-CBC\",\n      length: bitLength,\n    };\n\n    const key = await this.subtle.generateKey(aesParams, true, [\"encrypt\", \"decrypt\"]);\n    const rawKey = await this.subtle.exportKey(\"raw\", key);\n    return new Uint8Array(rawKey) as CsprngArray;\n  }\n\n  async rsaGenerateKeyPair(length: 1024 | 2048 | 4096): Promise<[Uint8Array, Uint8Array]> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      modulusLength: length,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const keyPair = await this.subtle.generateKey(rsaParams, true, [\"encrypt\", \"decrypt\"]);\n    const publicKey = await this.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await this.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    return [new Uint8Array(publicKey), new Uint8Array(privateKey)];\n  }\n\n  randomBytes(length: number): Promise<CsprngArray> {\n    const arr = new Uint8Array(length);\n    this.crypto.getRandomValues(arr);\n    return Promise.resolve(arr as CsprngArray);\n  }\n\n  private toBuf(value: string | Uint8Array): Uint8Array {\n    let buf: Uint8Array;\n    if (typeof value === \"string\") {\n      buf = Utils.fromUtf8ToArray(value);\n    } else {\n      buf = value;\n    }\n    return buf;\n  }\n\n  private toByteString(value: string | Uint8Array): string {\n    let bytes: string;\n    if (typeof value === \"string\") {\n      bytes = forge.util.encodeUtf8(value);\n    } else {\n      bytes = Utils.fromBufferToByteString(value);\n    }\n    return bytes;\n  }\n\n  private toWebCryptoAlgorithm(algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"): string {\n    if (algorithm === \"md5\") {\n      throw new Error(\"MD5 is not supported in WebCrypto.\");\n    }\n    return algorithm === \"sha1\" ? \"SHA-1\" : algorithm === \"sha256\" ? \"SHA-256\" : \"SHA-512\";\n  }\n\n  private toWebCryptoAesMode(mode: \"cbc\" | \"ecb\"): string {\n    return mode === \"cbc\" ? \"AES-CBC\" : \"AES-ECB\";\n  }\n\n  // ref: https://stackoverflow.com/a/47880734/1090359\n  private checkIfWasmSupported(): boolean {\n    try {\n      if (typeof WebAssembly === \"object\" && typeof WebAssembly.instantiate === \"function\") {\n        const module = new WebAssembly.Module(\n          Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00),\n        );\n        if (module instanceof WebAssembly.Module) {\n          return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;\n        }\n      }\n    } catch {\n      return false;\n    }\n    return false;\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\n\nimport { StateUpdateOptions } from \"./state-update-options\";\n\nexport type CombinedState<T> = readonly [userId: UserId, state: T];\n\n/**\n * A helper object for interacting with state that is scoped to a specific user.\n */\nexport interface UserState<T> {\n  /**\n   * Emits a stream of data.\n   */\n  readonly state$: Observable<T>;\n\n  /**\n   * Emits a stream of data alongside the user id the data corresponds to.\n   */\n  readonly combinedState$: Observable<CombinedState<T>>;\n}\n\nexport const activeMarker: unique symbol = Symbol(\"active\");\nexport interface ActiveUserState<T> extends UserState<T> {\n  readonly [activeMarker]: true;\n  /**\n   * Updates backing stores for the active user.\n   * @param configureState function that takes the current state and returns the new state\n   * @param options Defaults to @see {module:state-update-options#DEFAULT_OPTIONS}\n   * @param options.shouldUpdate A callback for determining if you want to update state. Defaults to () => true\n   * @param options.combineLatestWith An observable that you want to combine with the current state for callbacks. Defaults to null\n   * @param options.msTimeout A timeout for how long you are willing to wait for a `combineLatestWith` option to complete. Defaults to 1000ms. Only applies if `combineLatestWith` is set.\n\n   * @returns A promise that must be awaited before your next action to ensure the update has been written to state.\n   * Resolves to the new state. If `shouldUpdate` returns false, the promise will resolve to the current state.\n   */\n  readonly update: <TCombine>(\n    configureState: (state: T, dependencies: TCombine) => T,\n    options?: StateUpdateOptions<T, TCombine>,\n  ) => Promise<[UserId, T]>;\n}\nexport interface SingleUserState<T> extends UserState<T> {\n  readonly userId: UserId;\n\n  /**\n   * Updates backing stores for the active user.\n   * @param configureState function that takes the current state and returns the new state\n   * @param options Defaults to @see {module:state-update-options#DEFAULT_OPTIONS}\n   * @param options.shouldUpdate A callback for determining if you want to update state. Defaults to () => true\n   * @param options.combineLatestWith An observable that you want to combine with the current state for callbacks. Defaults to null\n   * @param options.msTimeout A timeout for how long you are willing to wait for a `combineLatestWith` option to complete. Defaults to 1000ms. Only applies if `combineLatestWith` is set.\n\n   * @returns A promise that must be awaited before your next action to ensure the update has been written to state.\n   * Resolves to the new state. If `shouldUpdate` returns false, the promise will resolve to the current state.\n   */\n  readonly update: <TCombine>(\n    configureState: (state: T, dependencies: TCombine) => T,\n    options?: StateUpdateOptions<T, TCombine>,\n  ) => Promise<T>;\n}\n","import { Observable, map, switchMap, firstValueFrom, timeout, throwError, NEVER } from \"rxjs\";\n\nimport { UserId } from \"../../../types/guid\";\nimport { StateUpdateOptions } from \"../state-update-options\";\nimport { UserKeyDefinition } from \"../user-key-definition\";\nimport { ActiveUserState, CombinedState, activeMarker } from \"../user-state\";\nimport { SingleUserStateProvider } from \"../user-state.provider\";\n\nexport class DefaultActiveUserState<T> implements ActiveUserState<T> {\n  [activeMarker]: true;\n  combinedState$: Observable<CombinedState<T>>;\n  state$: Observable<T>;\n\n  constructor(\n    protected keyDefinition: UserKeyDefinition<T>,\n    private activeUserId$: Observable<UserId | null>,\n    private singleUserStateProvider: SingleUserStateProvider,\n  ) {\n    this.combinedState$ = this.activeUserId$.pipe(\n      switchMap((userId) =>\n        userId != null\n          ? this.singleUserStateProvider.get(userId, this.keyDefinition).combinedState$\n          : NEVER,\n      ),\n    );\n\n    // State should just be combined state without the user id\n    this.state$ = this.combinedState$.pipe(map(([_userId, state]) => state));\n  }\n\n  async update<TCombine>(\n    configureState: (state: T, dependency: TCombine) => T,\n    options: StateUpdateOptions<T, TCombine> = {},\n  ): Promise<[UserId, T]> {\n    const userId = await firstValueFrom(\n      this.activeUserId$.pipe(\n        timeout({\n          first: 1000,\n          with: () =>\n            throwError(\n              () =>\n                new Error(\n                  `Timeout while retrieving active user for key ${this.keyDefinition.fullName}.`,\n                ),\n            ),\n        }),\n      ),\n    );\n    if (userId == null) {\n      throw new Error(\n        `Error storing ${this.keyDefinition.fullName} for the active user: No active user at this time.`,\n      );\n    }\n\n    return [\n      userId,\n      await this.singleUserStateProvider\n        .get(userId, this.keyDefinition)\n        .update(configureState, options),\n    ];\n  }\n}\n","import { Observable, distinctUntilChanged, map } from \"rxjs\";\n\nimport { AccountService } from \"../../../auth/abstractions/account.service\";\nimport { UserId } from \"../../../types/guid\";\nimport { KeyDefinition } from \"../key-definition\";\nimport { UserKeyDefinition, isUserKeyDefinition } from \"../user-key-definition\";\nimport { ActiveUserState } from \"../user-state\";\nimport { ActiveUserStateProvider, SingleUserStateProvider } from \"../user-state.provider\";\n\nimport { DefaultActiveUserState } from \"./default-active-user-state\";\n\nexport class DefaultActiveUserStateProvider implements ActiveUserStateProvider {\n  activeUserId$: Observable<UserId | undefined>;\n\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly singleUserStateProvider: SingleUserStateProvider,\n  ) {\n    this.activeUserId$ = this.accountService.activeAccount$.pipe(\n      map((account) => account?.id),\n      // To avoid going to storage when we don't need to, only get updates when there is a true change.\n      distinctUntilChanged((a, b) => (a == null || b == null ? a == b : a === b)), // Treat null and undefined as equal\n    );\n  }\n\n  get<T>(keyDefinition: KeyDefinition<T> | UserKeyDefinition<T>): ActiveUserState<T> {\n    if (!isUserKeyDefinition(keyDefinition)) {\n      keyDefinition = UserKeyDefinition.fromBaseKeyDefinition(keyDefinition);\n    }\n\n    // All other providers cache the creation of their corresponding `State` objects, this instance\n    // doesn't need to do that since it calls `SingleUserStateProvider` it will go through their caching\n    // layer, because of that, the creation of this instance is quite simple and not worth caching.\n    return new DefaultActiveUserState(\n      keyDefinition,\n      this.activeUserId$,\n      this.singleUserStateProvider,\n    );\n  }\n}\n","import { Observable } from \"rxjs\";\n\nexport const DEFAULT_OPTIONS = {\n  shouldUpdate: () => true,\n  combineLatestWith: null as Observable<unknown>,\n  msTimeout: 1000,\n};\n\ntype DefinitelyTypedDefault<T, TCombine> = Omit<\n  typeof DEFAULT_OPTIONS,\n  \"shouldUpdate\" | \"combineLatestWith\"\n> & {\n  shouldUpdate: (state: T, dependency: TCombine) => boolean;\n  combineLatestWith?: Observable<TCombine>;\n};\n\nexport type StateUpdateOptions<T, TCombine> = Partial<DefinitelyTypedDefault<T, TCombine>>;\n\nexport function populateOptionsWithDefault<T, TCombine>(\n  options: StateUpdateOptions<T, TCombine>,\n): StateUpdateOptions<T, TCombine> {\n  return {\n    ...(DEFAULT_OPTIONS as StateUpdateOptions<T, TCombine>),\n    ...options,\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { AbstractStorageService } from \"../../abstractions/storage.service\";\n\nexport async function getStoredValue<T>(\n  key: string,\n  storage: AbstractStorageService,\n  deserializer: (jsonValue: Jsonify<T>) => T,\n) {\n  if (storage.valuesRequireDeserialization) {\n    const jsonValue = await storage.get<Jsonify<T>>(key);\n    const value = deserializer(jsonValue);\n    return value;\n  } else {\n    const value = await storage.get<T>(key);\n    return value ?? null;\n  }\n}\n","import {\n  Observable,\n  ReplaySubject,\n  defer,\n  filter,\n  firstValueFrom,\n  merge,\n  share,\n  switchMap,\n  timeout,\n  timer,\n} from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { StorageKey } from \"../../../types/state\";\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"../../abstractions/storage.service\";\nimport { StateUpdateOptions, populateOptionsWithDefault } from \"../state-update-options\";\n\nimport { getStoredValue } from \"./util\";\n\n// The parts of a KeyDefinition this class cares about to make it work\ntype KeyDefinitionRequirements<T> = {\n  deserializer: (jsonState: Jsonify<T>) => T;\n  cleanupDelayMs: number;\n};\n\nexport abstract class StateBase<T, KeyDef extends KeyDefinitionRequirements<T>> {\n  private updatePromise: Promise<T>;\n\n  readonly state$: Observable<T>;\n\n  constructor(\n    protected readonly key: StorageKey,\n    protected readonly storageService: AbstractStorageService & ObservableStorageService,\n    protected readonly keyDefinition: KeyDef,\n  ) {\n    const storageUpdate$ = storageService.updates$.pipe(\n      filter((storageUpdate) => storageUpdate.key === key),\n      switchMap(async (storageUpdate) => {\n        if (storageUpdate.updateType === \"remove\") {\n          return null;\n        }\n\n        return await getStoredValue(key, storageService, keyDefinition.deserializer);\n      }),\n    );\n\n    this.state$ = merge(\n      defer(() => getStoredValue(key, storageService, keyDefinition.deserializer)),\n      storageUpdate$,\n    ).pipe(\n      share({\n        connector: () => new ReplaySubject(1),\n        resetOnRefCountZero: () => timer(keyDefinition.cleanupDelayMs),\n      }),\n    );\n  }\n\n  async update<TCombine>(\n    configureState: (state: T, dependency: TCombine) => T,\n    options: StateUpdateOptions<T, TCombine> = {},\n  ): Promise<T> {\n    options = populateOptionsWithDefault(options);\n    if (this.updatePromise != null) {\n      await this.updatePromise;\n    }\n\n    try {\n      this.updatePromise = this.internalUpdate(configureState, options);\n      const newState = await this.updatePromise;\n      return newState;\n    } finally {\n      this.updatePromise = null;\n    }\n  }\n\n  private async internalUpdate<TCombine>(\n    configureState: (state: T, dependency: TCombine) => T,\n    options: StateUpdateOptions<T, TCombine>,\n  ): Promise<T> {\n    const currentState = await this.getStateForUpdate();\n    const combinedDependencies =\n      options.combineLatestWith != null\n        ? await firstValueFrom(options.combineLatestWith.pipe(timeout(options.msTimeout)))\n        : null;\n\n    if (!options.shouldUpdate(currentState, combinedDependencies)) {\n      return currentState;\n    }\n\n    const newState = configureState(currentState, combinedDependencies);\n    await this.doStorageSave(newState, currentState);\n    return newState;\n  }\n\n  protected async doStorageSave(newState: T, oldState: T) {\n    await this.storageService.save(this.key, newState);\n  }\n\n  /** For use in update methods, does not wait for update to complete before yielding state.\n   * The expectation is that that await is already done\n   */\n  private async getStateForUpdate() {\n    return await getStoredValue(this.key, this.storageService, this.keyDefinition.deserializer);\n  }\n}\n","import {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"../../abstractions/storage.service\";\nimport { GlobalState } from \"../global-state\";\nimport { KeyDefinition, globalKeyBuilder } from \"../key-definition\";\n\nimport { StateBase } from \"./state-base\";\n\nexport class DefaultGlobalState<T>\n  extends StateBase<T, KeyDefinition<T>>\n  implements GlobalState<T>\n{\n  constructor(\n    keyDefinition: KeyDefinition<T>,\n    chosenLocation: AbstractStorageService & ObservableStorageService,\n  ) {\n    super(globalKeyBuilder(keyDefinition), chosenLocation, keyDefinition);\n  }\n}\n","import { StorageServiceProvider } from \"../../services/storage-service.provider\";\nimport { GlobalState } from \"../global-state\";\nimport { GlobalStateProvider } from \"../global-state.provider\";\nimport { KeyDefinition } from \"../key-definition\";\n\nimport { DefaultGlobalState } from \"./default-global-state\";\n\nexport class DefaultGlobalStateProvider implements GlobalStateProvider {\n  private globalStateCache: Record<string, GlobalState<unknown>> = {};\n\n  constructor(private storageServiceProvider: StorageServiceProvider) {}\n\n  get<T>(keyDefinition: KeyDefinition<T>): GlobalState<T> {\n    const [location, storageService] = this.storageServiceProvider.get(\n      keyDefinition.stateDefinition.defaultStorageLocation,\n      keyDefinition.stateDefinition.storageLocationOverrides,\n    );\n    const cacheKey = this.buildCacheKey(location, keyDefinition);\n    const existingGlobalState = this.globalStateCache[cacheKey];\n    if (existingGlobalState != null) {\n      // The cast into the actual generic is safe because of rules around key definitions\n      // being unique.\n      return existingGlobalState as DefaultGlobalState<T>;\n    }\n\n    const newGlobalState = new DefaultGlobalState<T>(keyDefinition, storageService);\n\n    this.globalStateCache[cacheKey] = newGlobalState;\n    return newGlobalState;\n  }\n\n  private buildCacheKey(location: string, keyDefinition: KeyDefinition<unknown>) {\n    return `${location}_${keyDefinition.fullName}`;\n  }\n}\n","import { Observable, combineLatest, of } from \"rxjs\";\n\nimport { UserId } from \"../../../types/guid\";\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"../../abstractions/storage.service\";\nimport { StateEventRegistrarService } from \"../state-event-registrar.service\";\nimport { UserKeyDefinition } from \"../user-key-definition\";\nimport { CombinedState, SingleUserState } from \"../user-state\";\n\nimport { StateBase } from \"./state-base\";\n\nexport class DefaultSingleUserState<T>\n  extends StateBase<T, UserKeyDefinition<T>>\n  implements SingleUserState<T>\n{\n  readonly combinedState$: Observable<CombinedState<T>>;\n\n  constructor(\n    readonly userId: UserId,\n    keyDefinition: UserKeyDefinition<T>,\n    chosenLocation: AbstractStorageService & ObservableStorageService,\n    private stateEventRegistrarService: StateEventRegistrarService,\n  ) {\n    super(keyDefinition.buildKey(userId), chosenLocation, keyDefinition);\n    this.combinedState$ = combineLatest([of(userId), this.state$]);\n  }\n\n  protected override async doStorageSave(newState: T, oldState: T): Promise<void> {\n    await super.doStorageSave(newState, oldState);\n    if (newState != null && oldState == null) {\n      await this.stateEventRegistrarService.registerEvents(this.keyDefinition);\n    }\n  }\n}\n","import { UserId } from \"../../../types/guid\";\nimport { StorageServiceProvider } from \"../../services/storage-service.provider\";\nimport { KeyDefinition } from \"../key-definition\";\nimport { StateEventRegistrarService } from \"../state-event-registrar.service\";\nimport { UserKeyDefinition, isUserKeyDefinition } from \"../user-key-definition\";\nimport { SingleUserState } from \"../user-state\";\nimport { SingleUserStateProvider } from \"../user-state.provider\";\n\nimport { DefaultSingleUserState } from \"./default-single-user-state\";\n\nexport class DefaultSingleUserStateProvider implements SingleUserStateProvider {\n  private cache: Record<string, SingleUserState<unknown>> = {};\n\n  constructor(\n    private readonly storageServiceProvider: StorageServiceProvider,\n    private readonly stateEventRegistrarService: StateEventRegistrarService,\n  ) {}\n\n  get<T>(\n    userId: UserId,\n    keyDefinition: KeyDefinition<T> | UserKeyDefinition<T>,\n  ): SingleUserState<T> {\n    if (!isUserKeyDefinition(keyDefinition)) {\n      keyDefinition = UserKeyDefinition.fromBaseKeyDefinition(keyDefinition);\n    }\n    const [location, storageService] = this.storageServiceProvider.get(\n      keyDefinition.stateDefinition.defaultStorageLocation,\n      keyDefinition.stateDefinition.storageLocationOverrides,\n    );\n    const cacheKey = this.buildCacheKey(location, userId, keyDefinition);\n    const existingUserState = this.cache[cacheKey];\n    if (existingUserState != null) {\n      // I have to cast out of the unknown generic but this should be safe if rules\n      // around domain token are made\n      return existingUserState as SingleUserState<T>;\n    }\n\n    const newUserState = new DefaultSingleUserState<T>(\n      userId,\n      keyDefinition,\n      storageService,\n      this.stateEventRegistrarService,\n    );\n    this.cache[cacheKey] = newUserState;\n    return newUserState;\n  }\n\n  private buildCacheKey(\n    location: string,\n    userId: UserId,\n    keyDefinition: UserKeyDefinition<unknown>,\n  ) {\n    return `${location}_${keyDefinition.fullName}_${userId}`;\n  }\n}\n","import { Observable, filter, of, switchMap, take } from \"rxjs\";\n\nimport { UserId } from \"../../../types/guid\";\nimport { DerivedStateDependencies } from \"../../../types/state\";\nimport { DeriveDefinition } from \"../derive-definition\";\nimport { DerivedState } from \"../derived-state\";\nimport { DerivedStateProvider } from \"../derived-state.provider\";\nimport { GlobalStateProvider } from \"../global-state.provider\";\nimport { KeyDefinition } from \"../key-definition\";\nimport { StateProvider } from \"../state.provider\";\nimport { UserKeyDefinition } from \"../user-key-definition\";\nimport { ActiveUserStateProvider, SingleUserStateProvider } from \"../user-state.provider\";\n\nexport class DefaultStateProvider implements StateProvider {\n  activeUserId$: Observable<UserId>;\n  constructor(\n    private readonly activeUserStateProvider: ActiveUserStateProvider,\n    private readonly singleUserStateProvider: SingleUserStateProvider,\n    private readonly globalStateProvider: GlobalStateProvider,\n    private readonly derivedStateProvider: DerivedStateProvider,\n  ) {\n    this.activeUserId$ = this.activeUserStateProvider.activeUserId$;\n  }\n\n  getUserState$<T>(\n    keyDefinition: KeyDefinition<T> | UserKeyDefinition<T>,\n    userId?: UserId,\n  ): Observable<T> {\n    if (userId) {\n      return this.getUser<T>(userId, keyDefinition).state$;\n    } else {\n      return this.activeUserId$.pipe(\n        filter((userId) => userId != null), // Filter out null-ish user ids since we can't get state for a null user id\n        take(1),\n        switchMap((userId) => this.getUser<T>(userId, keyDefinition).state$),\n      );\n    }\n  }\n\n  getUserStateOrDefault$<T>(\n    keyDefinition: KeyDefinition<T> | UserKeyDefinition<T>,\n    config: { userId: UserId | undefined; defaultValue?: T },\n  ): Observable<T> {\n    const { userId, defaultValue = null } = config;\n    if (userId) {\n      return this.getUser<T>(userId, keyDefinition).state$;\n    } else {\n      return this.activeUserId$.pipe(\n        take(1),\n        switchMap((userId) =>\n          userId != null ? this.getUser<T>(userId, keyDefinition).state$ : of(defaultValue),\n        ),\n      );\n    }\n  }\n\n  async setUserState<T>(\n    keyDefinition: KeyDefinition<T> | UserKeyDefinition<T>,\n    value: T,\n    userId?: UserId,\n  ): Promise<[UserId, T]> {\n    if (userId) {\n      return [userId, await this.getUser<T>(userId, keyDefinition).update(() => value)];\n    } else {\n      return await this.getActive<T>(keyDefinition).update(() => value);\n    }\n  }\n\n  getActive: InstanceType<typeof ActiveUserStateProvider>[\"get\"] =\n    this.activeUserStateProvider.get.bind(this.activeUserStateProvider);\n  getUser: InstanceType<typeof SingleUserStateProvider>[\"get\"] =\n    this.singleUserStateProvider.get.bind(this.singleUserStateProvider);\n  getGlobal: InstanceType<typeof GlobalStateProvider>[\"get\"] = this.globalStateProvider.get.bind(\n    this.globalStateProvider,\n  );\n  getDerived: <TFrom, TTo, TDeps extends DerivedStateDependencies>(\n    parentState$: Observable<TFrom>,\n    deriveDefinition: DeriveDefinition<unknown, TTo, TDeps>,\n    dependencies: TDeps,\n  ) => DerivedState<TTo> = this.derivedStateProvider.get.bind(this.derivedStateProvider);\n}\n","import { Observable, map } from \"rxjs\";\n\nimport { ThemeType } from \"../enums\";\nimport { GlobalStateProvider, KeyDefinition, THEMING_DISK } from \"../state\";\n\nexport abstract class ThemeStateService {\n  /**\n   * The users selected theme.\n   */\n  selectedTheme$: Observable<ThemeType>;\n\n  /**\n   * A method for updating the current users configured theme.\n   * @param theme The chosen user theme.\n   */\n  setSelectedTheme: (theme: ThemeType) => Promise<void>;\n}\n\nconst THEME_SELECTION = new KeyDefinition<ThemeType>(THEMING_DISK, \"selection\", {\n  deserializer: (s) => s,\n});\n\nexport class DefaultThemeStateService implements ThemeStateService {\n  private readonly selectedThemeState = this.globalStateProvider.get(THEME_SELECTION);\n\n  selectedTheme$ = this.selectedThemeState.state$.pipe(map((theme) => theme ?? this.defaultTheme));\n\n  constructor(\n    private globalStateProvider: GlobalStateProvider,\n    private defaultTheme: ThemeType = ThemeType.System,\n  ) {}\n\n  async setSelectedTheme(theme: ThemeType): Promise<void> {\n    await this.selectedThemeState.update(() => theme, {\n      shouldUpdate: (currentTheme) => currentTheme !== theme,\n    });\n  }\n}\n","import { BillingSyncConfigApi } from \"../../../billing/models/api/billing-sync-config.api\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { OrganizationConnectionType } from \"../../enums\";\nimport { ScimConfigApi } from \"../api/scim-config.api\";\n\n/**API response config types for OrganizationConnectionResponse */\nexport type OrganizationConnectionConfigApis = BillingSyncConfigApi | ScimConfigApi;\n\nexport class OrganizationConnectionResponse<\n  TConfig extends OrganizationConnectionConfigApis,\n> extends BaseResponse {\n  id: string;\n  type: OrganizationConnectionType;\n  organizationId: string;\n  enabled: boolean;\n  config: TConfig;\n\n  constructor(response: any, configType: { new (response: any): TConfig }) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const rawConfig = this.getResponseProperty(\"Config\");\n    this.config = rawConfig == null ? null : new configType(rawConfig);\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class CardApi extends BaseResponse {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.cardholderName = this.getResponseProperty(\"CardholderName\");\n    this.brand = this.getResponseProperty(\"Brand\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.expMonth = this.getResponseProperty(\"ExpMonth\");\n    this.expYear = this.getResponseProperty(\"ExpYear\");\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { FieldType, LinkedIdType } from \"../../enums\";\n\nexport class FieldApi extends BaseResponse {\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.linkedId = this.getResponseProperty(\"linkedId\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class IdentityApi extends BaseResponse {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.title = this.getResponseProperty(\"Title\");\n    this.firstName = this.getResponseProperty(\"FirstName\");\n    this.middleName = this.getResponseProperty(\"MiddleName\");\n    this.lastName = this.getResponseProperty(\"LastName\");\n    this.address1 = this.getResponseProperty(\"Address1\");\n    this.address2 = this.getResponseProperty(\"Address2\");\n    this.address3 = this.getResponseProperty(\"Address3\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.company = this.getResponseProperty(\"Company\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.phone = this.getResponseProperty(\"Phone\");\n    this.ssn = this.getResponseProperty(\"SSN\");\n    this.username = this.getResponseProperty(\"Username\");\n    this.passportNumber = this.getResponseProperty(\"PassportNumber\");\n    this.licenseNumber = this.getResponseProperty(\"LicenseNumber\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class Fido2CredentialApi extends BaseResponse {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  userName: string;\n  counter: string;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: string;\n  creationDate: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n\n    this.credentialId = this.getResponseProperty(\"CredentialId\");\n    this.keyType = this.getResponseProperty(\"KeyType\");\n    this.keyAlgorithm = this.getResponseProperty(\"KeyAlgorithm\");\n    this.keyCurve = this.getResponseProperty(\"KeyCurve\");\n    this.keyValue = this.getResponseProperty(\"keyValue\");\n    this.rpId = this.getResponseProperty(\"RpId\");\n    this.userHandle = this.getResponseProperty(\"UserHandle\");\n    this.userName = this.getResponseProperty(\"UserName\");\n    this.counter = this.getResponseProperty(\"Counter\");\n    this.rpName = this.getResponseProperty(\"RpName\");\n    this.userDisplayName = this.getResponseProperty(\"UserDisplayName\");\n    this.discoverable = this.getResponseProperty(\"Discoverable\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n","import { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class LoginUriApi extends BaseResponse {\n  uri: string;\n  uriChecksum: string;\n  match: UriMatchStrategySetting = null;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.uri = this.getResponseProperty(\"Uri\");\n    this.uriChecksum = this.getResponseProperty(\"UriChecksum\");\n    const match = this.getResponseProperty(\"Match\");\n    this.match = match != null ? match : null;\n  }\n}\n","import { JsonObject } from \"type-fest\";\n\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { Fido2CredentialApi } from \"./fido2-credential.api\";\nimport { LoginUriApi } from \"./login-uri.api\";\n\nexport class LoginApi extends BaseResponse {\n  uris: LoginUriApi[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n  fido2Credentials?: Fido2CredentialApi[];\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.username = this.getResponseProperty(\"Username\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.passwordRevisionDate = this.getResponseProperty(\"PasswordRevisionDate\");\n    this.totp = this.getResponseProperty(\"Totp\");\n    this.autofillOnPageLoad = this.getResponseProperty(\"AutofillOnPageLoad\");\n\n    const uris = this.getResponseProperty(\"Uris\");\n    if (uris != null) {\n      this.uris = uris.map((u: any) => new LoginUriApi(u));\n    }\n\n    const fido2Credentials = this.getResponseProperty(\"Fido2Credentials\");\n    if (fido2Credentials != null) {\n      this.fido2Credentials = fido2Credentials.map(\n        (key: JsonObject) => new Fido2CredentialApi(key),\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { SecureNoteType } from \"../../enums\";\n\nexport class SecureNoteApi extends BaseResponse {\n  type: SecureNoteType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class AttachmentResponse extends BaseResponse {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class PasswordHistoryResponse extends BaseResponse {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.password = this.getResponseProperty(\"Password\");\n    this.lastUsedDate = this.getResponseProperty(\"LastUsedDate\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CardApi } from \"../api/card.api\";\nimport { FieldApi } from \"../api/field.api\";\nimport { IdentityApi } from \"../api/identity.api\";\nimport { LoginApi } from \"../api/login.api\";\nimport { SecureNoteApi } from \"../api/secure-note.api\";\n\nimport { AttachmentResponse } from \"./attachment.response\";\nimport { PasswordHistoryResponse } from \"./password-history.response\";\n\nexport class CipherResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  type: number;\n  name: string;\n  notes: string;\n  fields: FieldApi[];\n  login: LoginApi;\n  card: CardApi;\n  identity: IdentityApi;\n  secureNote: SecureNoteApi;\n  favorite: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  revisionDate: string;\n  attachments: AttachmentResponse[];\n  passwordHistory: PasswordHistoryResponse[];\n  collectionIds: string[];\n  creationDate: string;\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.folderId = this.getResponseProperty(\"FolderId\") || null;\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.favorite = this.getResponseProperty(\"Favorite\") || false;\n    this.edit = !!this.getResponseProperty(\"Edit\");\n    if (this.getResponseProperty(\"ViewPassword\") == null) {\n      this.viewPassword = true;\n    } else {\n      this.viewPassword = this.getResponseProperty(\"ViewPassword\");\n    }\n    this.organizationUseTotp = this.getResponseProperty(\"OrganizationUseTotp\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.deletedDate = this.getResponseProperty(\"DeletedDate\");\n\n    const login = this.getResponseProperty(\"Login\");\n    if (login != null) {\n      this.login = new LoginApi(login);\n    }\n\n    const card = this.getResponseProperty(\"Card\");\n    if (card != null) {\n      this.card = new CardApi(card);\n    }\n\n    const identity = this.getResponseProperty(\"Identity\");\n    if (identity != null) {\n      this.identity = new IdentityApi(identity);\n    }\n\n    const secureNote = this.getResponseProperty(\"SecureNote\");\n    if (secureNote != null) {\n      this.secureNote = new SecureNoteApi(secureNote);\n    }\n\n    const fields = this.getResponseProperty(\"Fields\");\n    if (fields != null) {\n      this.fields = fields.map((f: any) => new FieldApi(f));\n    }\n\n    const attachments = this.getResponseProperty(\"Attachments\");\n    if (attachments != null) {\n      this.attachments = attachments.map((a: any) => new AttachmentResponse(a));\n    }\n\n    const passwordHistory = this.getResponseProperty(\"PasswordHistory\");\n    if (passwordHistory != null) {\n      this.passwordHistory = passwordHistory.map((h: any) => new PasswordHistoryResponse(h));\n    }\n\n    this.reprompt = this.getResponseProperty(\"Reprompt\") || CipherRepromptType.None;\n    this.key = this.getResponseProperty(\"Key\") || null;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class SelectionReadOnlyResponse extends BaseResponse {\n  id: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n  manage: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.readOnly = this.getResponseProperty(\"ReadOnly\");\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\");\n    this.manage = this.getResponseProperty(\"Manage\");\n  }\n}\n","import { SelectionReadOnlyResponse } from \"../../../admin-console/models/response/selection-read-only.response\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { CollectionId, OrganizationId } from \"../../../types/guid\";\n\nexport class CollectionResponse extends BaseResponse {\n  id: CollectionId;\n  organizationId: OrganizationId;\n  name: string;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class CollectionDetailsResponse extends CollectionResponse {\n  readOnly: boolean;\n  manage: boolean;\n  hidePasswords: boolean;\n  assigned: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.readOnly = this.getResponseProperty(\"ReadOnly\") || false;\n    this.manage = this.getResponseProperty(\"Manage\") || false;\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\") || false;\n\n    // Temporary until the API is updated to return this property in AC-2084\n    // For now, we can assume that if the object is 'collectionDetails' then the user is assigned\n    this.assigned = this.getResponseProperty(\"object\") == \"collectionDetails\";\n  }\n}\n\nexport class CollectionAccessDetailsResponse extends CollectionResponse {\n  groups: SelectionReadOnlyResponse[] = [];\n  users: SelectionReadOnlyResponse[] = [];\n\n  /**\n   * Flag indicating the user has been explicitly assigned to this Collection\n   */\n  assigned: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.assigned = this.getResponseProperty(\"Assigned\") || false;\n\n    const groups = this.getResponseProperty(\"Groups\");\n    if (groups != null) {\n      this.groups = groups.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n\n    const users = this.getResponseProperty(\"Users\");\n    if (users != null) {\n      this.users = users.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { CipherResponse } from \"../../../vault/models/response/cipher.response\";\nimport { CollectionResponse } from \"../../../vault/models/response/collection.response\";\n\nexport class OrganizationExportResponse extends BaseResponse {\n  collections: CollectionResponse[];\n  ciphers: CipherResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionResponse(c));\n    }\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class OrganizationSponsorshipSyncStatusResponse extends BaseResponse {\n  lastSyncDate?: Date;\n\n  constructor(response: any) {\n    super(response);\n    const lastSyncDate = this.getResponseProperty(\"LastSyncDate\");\n    if (lastSyncDate) {\n      this.lastSyncDate = new Date(lastSyncDate);\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class ProviderOrganizationResponse extends BaseResponse {\n  id: string;\n  providerId: string;\n  organizationId: string;\n  key: string;\n  settings: string;\n  creationDate: string;\n  revisionDate: string;\n  userCount: number;\n  seats?: number;\n  plan?: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.settings = this.getResponseProperty(\"Settings\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.userCount = this.getResponseProperty(\"UserCount\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.plan = this.getResponseProperty(\"Plan\");\n  }\n}\n\nexport class ProviderOrganizationOrganizationDetailsResponse extends ProviderOrganizationResponse {\n  organizationName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationName = this.getResponseProperty(\"OrganizationName\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class OrganizationUserBulkPublicKeyResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { OrganizationUserBulkPublicKeyResponse } from \"../../../abstractions/organization-user/responses\";\n\nexport class ProviderUserBulkPublicKeyResponse extends OrganizationUserBulkPublicKeyResponse {}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class ProviderUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class PermissionsApi extends BaseResponse {\n  accessEventLogs: boolean;\n  accessImportExport: boolean;\n  accessReports: boolean;\n  createNewCollections: boolean;\n  editAnyCollection: boolean;\n  deleteAnyCollection: boolean;\n  editAssignedCollections: boolean;\n  deleteAssignedCollections: boolean;\n  manageCiphers: boolean;\n  manageGroups: boolean;\n  manageSso: boolean;\n  managePolicies: boolean;\n  manageUsers: boolean;\n  manageResetPassword: boolean;\n  manageScim: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return this;\n    }\n    this.accessEventLogs = this.getResponseProperty(\"AccessEventLogs\");\n    this.accessImportExport = this.getResponseProperty(\"AccessImportExport\");\n    this.accessReports = this.getResponseProperty(\"AccessReports\");\n\n    this.createNewCollections = this.getResponseProperty(\"CreateNewCollections\");\n    this.editAnyCollection = this.getResponseProperty(\"EditAnyCollection\");\n    this.deleteAnyCollection = this.getResponseProperty(\"DeleteAnyCollection\");\n    this.editAssignedCollections = this.getResponseProperty(\"EditAssignedCollections\");\n    this.deleteAssignedCollections = this.getResponseProperty(\"DeleteAssignedCollections\");\n\n    this.manageCiphers = this.getResponseProperty(\"ManageCiphers\");\n    this.manageGroups = this.getResponseProperty(\"ManageGroups\");\n    this.manageSso = this.getResponseProperty(\"ManageSso\");\n    this.managePolicies = this.getResponseProperty(\"ManagePolicies\");\n    this.manageUsers = this.getResponseProperty(\"ManageUsers\");\n    this.manageResetPassword = this.getResponseProperty(\"ManageResetPassword\");\n    this.manageScim = this.getResponseProperty(\"ManageScim\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { ProviderUserStatusType, ProviderUserType } from \"../../../enums\";\nimport { PermissionsApi } from \"../../api/permissions.api\";\n\nexport class ProviderUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: ProviderUserType;\n  status: ProviderUserStatusType;\n  permissions: PermissionsApi;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n  }\n}\n\nexport class ProviderUserUserDetailsResponse extends ProviderUserResponse {\n  name: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class ProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  businessName: string;\n  billingEmail: string;\n  creationDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.businessName = this.getResponseProperty(\"BusinessName\");\n    this.billingEmail = this.getResponseProperty(\"BillingEmail\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class ApiKeyResponse extends BaseResponse {\n  apiKey: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.apiKey = this.getResponseProperty(\"ApiKey\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","import { DeviceType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nconst RequestTimeOut = 60000 * 15; //15 Minutes\n\nexport class AuthRequestResponse extends BaseResponse {\n  id: string;\n  publicKey: string;\n  requestDeviceType: DeviceType;\n  requestIpAddress: string;\n  key: string;\n  masterPasswordHash: string;\n  creationDate: string;\n  requestApproved?: boolean;\n  responseDate?: string;\n  isAnswered: boolean;\n  isExpired: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n    this.requestDeviceType = this.getResponseProperty(\"RequestDeviceType\");\n    this.requestIpAddress = this.getResponseProperty(\"RequestIpAddress\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.masterPasswordHash = this.getResponseProperty(\"MasterPasswordHash\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.requestApproved = this.getResponseProperty(\"RequestApproved\");\n    this.responseDate = this.getResponseProperty(\"ResponseDate\");\n\n    const requestDate = new Date(this.creationDate);\n    const requestDateUTC = Date.UTC(\n      requestDate.getUTCFullYear(),\n      requestDate.getUTCMonth(),\n      requestDate.getDate(),\n      requestDate.getUTCHours(),\n      requestDate.getUTCMinutes(),\n      requestDate.getUTCSeconds(),\n      requestDate.getUTCMilliseconds(),\n    );\n\n    const dateNow = new Date(Date.now());\n    const dateNowUTC = Date.UTC(\n      dateNow.getUTCFullYear(),\n      dateNow.getUTCMonth(),\n      dateNow.getDate(),\n      dateNow.getUTCHours(),\n      dateNow.getUTCMinutes(),\n      dateNow.getUTCSeconds(),\n      dateNow.getUTCMilliseconds(),\n    );\n\n    this.isExpired = dateNowUTC - requestDateUTC >= RequestTimeOut;\n    this.isAnswered = this.requestApproved != null && this.responseDate != null;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class DeviceVerificationResponse extends BaseResponse {\n  isDeviceVerificationSectionEnabled: boolean;\n  unknownDeviceVerificationEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.isDeviceVerificationSectionEnabled = this.getResponseProperty(\n      \"IsDeviceVerificationSectionEnabled\",\n    );\n    this.unknownDeviceVerificationEnabled = this.getResponseProperty(\n      \"UnknownDeviceVerificationEnabled\",\n    );\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class KeyConnectorUserKeyResponse extends BaseResponse {\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { KdfType } from \"../../../platform/enums\";\n\nexport class PreloginResponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.kdfMemory = this.getResponseProperty(\"KdfMemory\");\n    this.kdfParallelism = this.getResponseProperty(\"KdfParallelism\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { ICaptchaProtectedResponse } from \"./captcha-protected.response\";\n\nexport class RegisterResponse extends BaseResponse implements ICaptchaProtectedResponse {\n  captchaBypassToken: string;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaBypassToken = this.getResponseProperty(\"CaptchaBypassToken\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class SsoPreValidateResponse extends BaseResponse {\n  token: string;\n\n  constructor(response: any) {\n    super(response);\n    this.token = this.getResponseProperty(\"Token\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorAuthenticatorResponse extends BaseResponse {\n  enabled: boolean;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorDuoResponse extends BaseResponse {\n  enabled: boolean;\n  host: string;\n  secretKey: string;\n  integrationKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.host = this.getResponseProperty(\"Host\");\n    this.secretKey = this.getResponseProperty(\"SecretKey\");\n    this.integrationKey = this.getResponseProperty(\"IntegrationKey\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorEmailResponse extends BaseResponse {\n  enabled: boolean;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { TwoFactorProviderType } from \"../../enums/two-factor-provider-type\";\n\nexport class TwoFactorProviderResponse extends BaseResponse {\n  enabled: boolean;\n  type: TwoFactorProviderType;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorRecoverResponse extends BaseResponse {\n  code: string;\n\n  constructor(response: any) {\n    super(response);\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { Utils } from \"../../../platform/misc/utils\";\n\nexport class TwoFactorWebAuthnResponse extends BaseResponse {\n  enabled: boolean;\n  keys: KeyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const keys = this.getResponseProperty(\"Keys\");\n    this.keys = keys == null ? null : keys.map((k: any) => new KeyResponse(k));\n  }\n}\n\nexport class KeyResponse extends BaseResponse {\n  name: string;\n  id: number;\n  migrated: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n    this.migrated = this.getResponseProperty(\"Migrated\");\n  }\n}\n\nexport class ChallengeResponse extends BaseResponse implements PublicKeyCredentialCreationOptions {\n  attestation?: AttestationConveyancePreference;\n  authenticatorSelection?: AuthenticatorSelectionCriteria;\n  challenge: BufferSource;\n  excludeCredentials?: PublicKeyCredentialDescriptor[];\n  extensions?: AuthenticationExtensionsClientInputs;\n  pubKeyCredParams: PublicKeyCredentialParameters[];\n  rp: PublicKeyCredentialRpEntity;\n  timeout?: number;\n  user: PublicKeyCredentialUserEntity;\n\n  constructor(response: any) {\n    super(response);\n    this.attestation = this.getResponseProperty(\"attestation\");\n    this.authenticatorSelection = this.getResponseProperty(\"authenticatorSelection\");\n    this.challenge = Utils.fromUrlB64ToArray(this.getResponseProperty(\"challenge\"));\n    this.excludeCredentials = this.getResponseProperty(\"excludeCredentials\").map((c: any) => {\n      c.id = Utils.fromUrlB64ToArray(c.id).buffer;\n      return c;\n    });\n    this.extensions = this.getResponseProperty(\"extensions\");\n    this.pubKeyCredParams = this.getResponseProperty(\"pubKeyCredParams\");\n    this.rp = this.getResponseProperty(\"rp\");\n    this.timeout = this.getResponseProperty(\"timeout\");\n\n    const user = this.getResponseProperty(\"user\");\n    user.id = Utils.fromUrlB64ToArray(user.id);\n\n    this.user = user;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorYubiKeyResponse extends BaseResponse {\n  enabled: boolean;\n  key1: string;\n  key2: string;\n  key3: string;\n  key4: string;\n  key5: string;\n  nfc: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key1 = this.getResponseProperty(\"Key1\");\n    this.key2 = this.getResponseProperty(\"Key2\");\n    this.key3 = this.getResponseProperty(\"Key3\");\n    this.key4 = this.getResponseProperty(\"Key4\");\n    this.key5 = this.getResponseProperty(\"Key5\");\n    this.nfc = this.getResponseProperty(\"Nfc\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { PaymentMethodType, TransactionType } from \"../../enums\";\n\nexport class BillingResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n\n  get hasNoHistory() {\n    return this.invoices.length == 0 && this.transactions.length == 0;\n  }\n}\n\nexport class BillingSourceResponse extends BaseResponse {\n  type: PaymentMethodType;\n  cardBrand: string;\n  description: string;\n  needsVerification: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.cardBrand = this.getResponseProperty(\"CardBrand\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.needsVerification = this.getResponseProperty(\"NeedsVerification\");\n  }\n}\n\nexport class BillingInvoiceResponse extends BaseResponse {\n  url: string;\n  pdfUrl: string;\n  number: string;\n  paid: boolean;\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.url = this.getResponseProperty(\"Url\");\n    this.pdfUrl = this.getResponseProperty(\"PdfUrl\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.paid = this.getResponseProperty(\"Paid\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n\nexport class BillingTransactionResponse extends BaseResponse {\n  createdDate: string;\n  amount: number;\n  refunded: boolean;\n  partiallyRefunded: boolean;\n  refundedAmount: number;\n  type: TransactionType;\n  paymentMethodType: PaymentMethodType;\n  details: string;\n\n  constructor(response: any) {\n    super(response);\n    this.createdDate = this.getResponseProperty(\"CreatedDate\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.refunded = this.getResponseProperty(\"Refunded\");\n    this.partiallyRefunded = this.getResponseProperty(\"PartiallyRefunded\");\n    this.refundedAmount = this.getResponseProperty(\"RefundedAmount\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.paymentMethodType = this.getResponseProperty(\"PaymentMethodType\");\n    this.details = this.getResponseProperty(\"Details\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { BillingInvoiceResponse, BillingTransactionResponse } from \"./billing.response\";\n\nexport class BillingHistoryResponse extends BaseResponse {\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n\n  get hasNoHistory() {\n    return this.invoices.length == 0 && this.transactions.length == 0;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { BillingSourceResponse } from \"./billing.response\";\n\nexport class BillingPaymentResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n  }\n}\n","import { ProductType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { OrganizationUserStatusType, OrganizationUserType, ProviderType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\n\nexport class ProfileOrganizationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  key: string;\n  hasPublicAndPrivateKeys: boolean;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n  limitCollectionCreationDeletion: boolean;\n  allowAdminAccessToAllCollectionItems: boolean;\n  flexibleCollections: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.usePolicies = this.getResponseProperty(\"UsePolicies\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useSso = this.getResponseProperty(\"UseSso\");\n    this.useKeyConnector = this.getResponseProperty(\"UseKeyConnector\") ?? false;\n    this.useScim = this.getResponseProperty(\"UseScim\") ?? false;\n    this.useCustomPermissions = this.getResponseProperty(\"UseCustomPermissions\") ?? false;\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.useSecretsManager = this.getResponseProperty(\"UseSecretsManager\");\n    this.usePasswordManager = this.getResponseProperty(\"UsePasswordManager\");\n    this.useActivateAutofillPolicy = this.getResponseProperty(\"UseActivateAutofillPolicy\");\n    this.selfHost = this.getResponseProperty(\"SelfHost\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.ssoBound = this.getResponseProperty(\"SsoBound\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.providerName = this.getResponseProperty(\"ProviderName\");\n    this.providerType = this.getResponseProperty(\"ProviderType\");\n    this.familySponsorshipFriendlyName = this.getResponseProperty(\"FamilySponsorshipFriendlyName\");\n    this.familySponsorshipAvailable = this.getResponseProperty(\"FamilySponsorshipAvailable\");\n    this.planProductType = this.getResponseProperty(\"PlanProductType\");\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\") ?? false;\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    const familySponsorshipLastSyncDateString = this.getResponseProperty(\n      \"FamilySponsorshipLastSyncDate\",\n    );\n    if (familySponsorshipLastSyncDateString) {\n      this.familySponsorshipLastSyncDate = new Date(familySponsorshipLastSyncDateString);\n    }\n    const familySponsorshipValidUntilString = this.getResponseProperty(\n      \"FamilySponsorshipValidUntil\",\n    );\n    if (familySponsorshipValidUntilString) {\n      this.familySponsorshipValidUntil = new Date(familySponsorshipValidUntilString);\n    }\n    this.familySponsorshipToDelete = this.getResponseProperty(\"FamilySponsorshipToDelete\");\n    this.accessSecretsManager = this.getResponseProperty(\"AccessSecretsManager\");\n    this.limitCollectionCreationDeletion = this.getResponseProperty(\n      \"LimitCollectionCreationDeletion\",\n    );\n    this.allowAdminAccessToAllCollectionItems = this.getResponseProperty(\n      \"AllowAdminAccessToAllCollectionItems\",\n    );\n    this.flexibleCollections = this.getResponseProperty(\"FlexibleCollections\");\n  }\n}\n","import { ProfileOrganizationResponse } from \"./profile-organization.response\";\n\nexport class ProfileProviderOrganizationResponse extends ProfileOrganizationResponse {\n  constructor(response: any) {\n    super(response);\n    this.keyConnectorEnabled = false;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { ProviderUserStatusType, ProviderUserType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\n\nexport class ProfileProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  key: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  permissions: PermissionsApi;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n  }\n}\n","import { ProfileOrganizationResponse } from \"../../admin-console/models/response/profile-organization.response\";\nimport { ProfileProviderOrganizationResponse } from \"../../admin-console/models/response/profile-provider-organization.response\";\nimport { ProfileProviderResponse } from \"../../admin-console/models/response/profile-provider.response\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class ProfileResponse extends BaseResponse {\n  id: string;\n  name: string;\n  email: string;\n  emailVerified: boolean;\n  masterPasswordHint: string;\n  premiumPersonally: boolean;\n  premiumFromOrganization: boolean;\n  culture: string;\n  twoFactorEnabled: boolean;\n  key: string;\n  avatarColor: string;\n  creationDate: string;\n  privateKey: string;\n  securityStamp: string;\n  forcePasswordReset: boolean;\n  usesKeyConnector: boolean;\n  organizations: ProfileOrganizationResponse[] = [];\n  providers: ProfileProviderResponse[] = [];\n  providerOrganizations: ProfileProviderOrganizationResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.emailVerified = this.getResponseProperty(\"EmailVerified\");\n    this.masterPasswordHint = this.getResponseProperty(\"MasterPasswordHint\");\n    this.premiumPersonally = this.getResponseProperty(\"Premium\");\n    this.premiumFromOrganization = this.getResponseProperty(\"PremiumFromOrganization\");\n    this.culture = this.getResponseProperty(\"Culture\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.avatarColor = this.getResponseProperty(\"AvatarColor\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.securityStamp = this.getResponseProperty(\"SecurityStamp\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\") ?? false;\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n\n    const organizations = this.getResponseProperty(\"Organizations\");\n    if (organizations != null) {\n      this.organizations = organizations.map((o: any) => new ProfileOrganizationResponse(o));\n    }\n    const providers = this.getResponseProperty(\"Providers\");\n    if (providers != null) {\n      this.providers = providers.map((o: any) => new ProfileProviderResponse(o));\n    }\n    const providerOrganizations = this.getResponseProperty(\"ProviderOrganizations\");\n    if (providerOrganizations != null) {\n      this.providerOrganizations = providerOrganizations.map(\n        (o: any) => new ProfileProviderOrganizationResponse(o),\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { ProfileResponse } from \"../../../models/response/profile.response\";\n\nexport class PaymentResponse extends BaseResponse {\n  userProfile: ProfileResponse;\n  paymentIntentClientSecret: string;\n  success: boolean;\n\n  constructor(response: any) {\n    super(response);\n    const userProfile = this.getResponseProperty(\"UserProfile\");\n    if (userProfile != null) {\n      this.userProfile = new ProfileResponse(userProfile);\n    }\n    this.paymentIntentClientSecret = this.getResponseProperty(\"PaymentIntentClientSecret\");\n    this.success = this.getResponseProperty(\"Success\");\n  }\n}\n","import { ProductType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { PlanType } from \"../../enums\";\n\nexport class PlanResponse extends BaseResponse {\n  type: PlanType;\n  product: ProductType;\n  name: string;\n  isAnnual: boolean;\n  nameLocalizationKey: string;\n  descriptionLocalizationKey: string;\n  canBeUsedByBusiness: boolean;\n  trialPeriodDays: number;\n  hasSelfHost: boolean;\n  hasPolicies: boolean;\n  hasGroups: boolean;\n  hasDirectory: boolean;\n  hasEvents: boolean;\n  hasTotp: boolean;\n  has2fa: boolean;\n  hasApi: boolean;\n  hasSso: boolean;\n  hasResetPassword: boolean;\n  usersGetPremium: boolean;\n  upgradeSortOrder: number;\n  displaySortOrder: number;\n  legacyYear: number;\n  disabled: boolean;\n  PasswordManager: PasswordManagerPlanFeaturesResponse;\n  SecretsManager: SecretsManagerPlanFeaturesResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.product = this.getResponseProperty(\"Product\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.isAnnual = this.getResponseProperty(\"IsAnnual\");\n    this.nameLocalizationKey = this.getResponseProperty(\"NameLocalizationKey\");\n    this.descriptionLocalizationKey = this.getResponseProperty(\"DescriptionLocalizationKey\");\n    this.canBeUsedByBusiness = this.getResponseProperty(\"CanBeUsedByBusiness\");\n    this.trialPeriodDays = this.getResponseProperty(\"TrialPeriodDays\");\n    this.hasSelfHost = this.getResponseProperty(\"HasSelfHost\");\n    this.hasPolicies = this.getResponseProperty(\"HasPolicies\");\n    this.hasGroups = this.getResponseProperty(\"HasGroups\");\n    this.hasDirectory = this.getResponseProperty(\"HasDirectory\");\n    this.hasEvents = this.getResponseProperty(\"HasEvents\");\n    this.hasTotp = this.getResponseProperty(\"HasTotp\");\n    this.has2fa = this.getResponseProperty(\"Has2fa\");\n    this.hasApi = this.getResponseProperty(\"HasApi\");\n    this.hasSso = this.getResponseProperty(\"HasSso\");\n    this.hasResetPassword = this.getResponseProperty(\"HasResetPassword\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.upgradeSortOrder = this.getResponseProperty(\"UpgradeSortOrder\");\n    this.displaySortOrder = this.getResponseProperty(\"DisplaySortOrder\");\n    this.legacyYear = this.getResponseProperty(\"LegacyYear\");\n    this.disabled = this.getResponseProperty(\"Disabled\");\n    const passwordManager = this.getResponseProperty(\"PasswordManager\");\n    const secretsManager = this.getResponseProperty(\"SecretsManager\");\n    this.PasswordManager =\n      passwordManager == null ? null : new PasswordManagerPlanFeaturesResponse(passwordManager);\n    this.SecretsManager =\n      secretsManager == null ? null : new SecretsManagerPlanFeaturesResponse(secretsManager);\n  }\n}\n\nexport class SecretsManagerPlanFeaturesResponse extends BaseResponse {\n  // Seats\n  stripeSeatPlanId: string;\n  baseSeats: number;\n  basePrice: number;\n  seatPrice: number;\n  hasAdditionalSeatsOption: boolean;\n  maxAdditionalSeats: number;\n  maxSeats: number;\n\n  // Service accounts\n  stripeServiceAccountPlanId: string;\n  additionalPricePerServiceAccount: number;\n  baseServiceAccount: number;\n  maxServiceAccount: number;\n  hasAdditionalServiceAccountOption: boolean;\n  maxAdditionalServiceAccounts: number;\n\n  // Features\n  maxProjects: number;\n\n  constructor(response: any) {\n    super(response);\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.maxSeats = this.getResponseProperty(\"MaxSeats\");\n    this.stripeServiceAccountPlanId = this.getResponseProperty(\"StripeServiceAccountPlanId\");\n    this.additionalPricePerServiceAccount = this.getResponseProperty(\n      \"AdditionalPricePerServiceAccount\",\n    );\n    this.baseServiceAccount = this.getResponseProperty(\"BaseServiceAccount\");\n    this.maxServiceAccount = this.getResponseProperty(\"MaxServiceAccount\");\n    this.hasAdditionalServiceAccountOption = this.getResponseProperty(\n      \"HasAdditionalServiceAccountOption\",\n    );\n    this.maxAdditionalServiceAccounts = this.getResponseProperty(\"MaxAdditionalServiceAccounts\");\n    this.maxProjects = this.getResponseProperty(\"MaxProjects\");\n  }\n}\n\nexport class PasswordManagerPlanFeaturesResponse extends BaseResponse {\n  // Seats\n  stripePlanId: string;\n  stripeSeatPlanId: string;\n  stripePremiumAccessPlanId: string;\n  basePrice: number;\n  seatPrice: number;\n  premiumAccessOptionPrice: number;\n  baseSeats: number;\n  maxAdditionalSeats: number;\n  maxSeats: number;\n  hasPremiumAccessOption: boolean;\n\n  // Storage\n  additionalStoragePricePerGb: number;\n  stripeStoragePlanId: string;\n  baseStorageGb: number;\n  hasAdditionalStorageOption: boolean;\n  maxAdditionalStorage: number;\n  hasAdditionalSeatsOption: boolean;\n\n  // Feature\n  maxCollections: number;\n\n  constructor(response: any) {\n    super(response);\n    this.stripePlanId = this.getResponseProperty(\"StripePlanId\");\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.stripeStoragePlanId = this.getResponseProperty(\"StripeStoragePlanId\");\n    this.stripePremiumAccessPlanId = this.getResponseProperty(\"StripePremiumAccessPlanId\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.premiumAccessOptionPrice = this.getResponseProperty(\"PremiumAccessOptionPrice\");\n    this.maxSeats = this.getResponseProperty(\"MaxSeats\");\n    this.additionalStoragePricePerGb = this.getResponseProperty(\"AdditionalStoragePricePerGb\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.baseStorageGb = this.getResponseProperty(\"BaseStorageGb\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.hasAdditionalStorageOption = this.getResponseProperty(\"HasAdditionalStorageOption\");\n    this.maxAdditionalStorage = this.getResponseProperty(\"MaxAdditionalStorage\");\n    this.hasPremiumAccessOption = this.getResponseProperty(\"HasPremiumAccessOption\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class SubscriptionResponse extends BaseResponse {\n  storageName: string;\n  storageGb: number;\n  maxStorageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  license: any;\n  expiration: string;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.license = this.getResponseProperty(\"License\");\n    this.expiration = this.getResponseProperty(\"Expiration\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n  }\n}\n\nexport class BillingSubscriptionResponse extends BaseResponse {\n  trialStartDate: string;\n  trialEndDate: string;\n  periodStartDate: string;\n  periodEndDate: string;\n  cancelledDate: string;\n  cancelAtEndDate: boolean;\n  status: string;\n  cancelled: boolean;\n  items: BillingSubscriptionItemResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.trialStartDate = this.getResponseProperty(\"TrialStartDate\");\n    this.trialEndDate = this.getResponseProperty(\"TrialEndDate\");\n    this.periodStartDate = this.getResponseProperty(\"PeriodStartDate\");\n    this.periodEndDate = this.getResponseProperty(\"PeriodEndDate\");\n    this.cancelledDate = this.getResponseProperty(\"CancelledDate\");\n    this.cancelAtEndDate = this.getResponseProperty(\"CancelAtEndDate\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.cancelled = this.getResponseProperty(\"Cancelled\");\n    const items = this.getResponseProperty(\"Items\");\n    if (items != null) {\n      this.items = items.map((i: any) => new BillingSubscriptionItemResponse(i));\n    }\n  }\n}\n\nexport class BillingSubscriptionItemResponse extends BaseResponse {\n  productId: string;\n  name: string;\n  amount: number;\n  quantity: number;\n  interval: string;\n  sponsoredSubscriptionItem: boolean;\n  addonSubscriptionItem: boolean;\n  productName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.productId = this.getResponseProperty(\"ProductId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.quantity = this.getResponseProperty(\"Quantity\");\n    this.interval = this.getResponseProperty(\"Interval\");\n    this.sponsoredSubscriptionItem = this.getResponseProperty(\"SponsoredSubscriptionItem\");\n    this.addonSubscriptionItem = this.getResponseProperty(\"AddonSubscriptionItem\");\n  }\n}\n\nexport class BillingSubscriptionUpcomingInvoiceResponse extends BaseResponse {\n  date: string;\n  amount?: number;\n\n  constructor(response: any) {\n    super(response);\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TaxInfoResponse extends BaseResponse {\n  taxId: string;\n  taxIdType: string;\n  line1: string;\n  line2: string;\n  city: string;\n  state: string;\n  country: string;\n  postalCode: string;\n\n  constructor(response: any) {\n    super(response);\n    this.taxId = this.getResponseProperty(\"TaxIdNumber\");\n    this.taxIdType = this.getResponseProperty(\"TaxIdType\");\n    this.line1 = this.getResponseProperty(\"Line1\");\n    this.line2 = this.getResponseProperty(\"Line2\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TaxRateResponse extends BaseResponse {\n  id: string;\n  country: string;\n  state: string;\n  postalCode: string;\n  rate: number;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.rate = this.getResponseProperty(\"Rate\");\n  }\n}\n","export class CollectionBulkDeleteRequest {\n  ids: string[];\n\n  constructor(ids: string[]) {\n    this.ids = ids == null ? [] : ids;\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class BreachAccountResponse extends BaseResponse {\n  addedDate: string;\n  breachDate: string;\n  dataClasses: string[];\n  description: string;\n  domain: string;\n  isActive: boolean;\n  isVerified: boolean;\n  logoPath: string;\n  modifiedDate: string;\n  name: string;\n  pwnCount: number;\n  title: string;\n\n  constructor(response: any) {\n    super(response);\n    this.addedDate = this.getResponseProperty(\"AddedDate\");\n    this.breachDate = this.getResponseProperty(\"BreachDate\");\n    this.dataClasses = this.getResponseProperty(\"DataClasses\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.domain = this.getResponseProperty(\"Domain\");\n    this.isActive = this.getResponseProperty(\"IsActive\");\n    this.isVerified = this.getResponseProperty(\"IsVerified\");\n    this.logoPath = this.getResponseProperty(\"LogoPath\");\n    this.modifiedDate = this.getResponseProperty(\"ModifiedDate\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.pwnCount = this.getResponseProperty(\"PwnCount\");\n    this.title = this.getResponseProperty(\"Title\");\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class GlobalDomainResponse extends BaseResponse {\n  type: number;\n  domains: string[];\n  excluded: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.domains = this.getResponseProperty(\"Domains\");\n    this.excluded = this.getResponseProperty(\"Excluded\");\n  }\n}\n","import { BaseResponse } from \"./base.response\";\nimport { GlobalDomainResponse } from \"./global-domain.response\";\n\nexport class DomainsResponse extends BaseResponse {\n  equivalentDomains: string[][];\n  globalEquivalentDomains: GlobalDomainResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.equivalentDomains = this.getResponseProperty(\"EquivalentDomains\");\n    const globalEquivalentDomains = this.getResponseProperty(\"GlobalEquivalentDomains\");\n    if (globalEquivalentDomains != null) {\n      this.globalEquivalentDomains = globalEquivalentDomains.map(\n        (d: any) => new GlobalDomainResponse(d),\n      );\n    } else {\n      this.globalEquivalentDomains = [];\n    }\n  }\n}\n","import { DeviceType, EventSystemUser, EventType } from \"../../enums\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class EventResponse extends BaseResponse {\n  type: EventType;\n  userId: string;\n  organizationId: string;\n  providerId: string;\n  cipherId: string;\n  collectionId: string;\n  groupId: string;\n  policyId: string;\n  organizationUserId: string;\n  providerUserId: string;\n  providerOrganizationId: string;\n  actingUserId: string;\n  date: string;\n  deviceType: DeviceType;\n  ipAddress: string;\n  installationId: string;\n  systemUser: EventSystemUser;\n  domainName: string;\n  secretId: string;\n  serviceAccountId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.cipherId = this.getResponseProperty(\"CipherId\");\n    this.collectionId = this.getResponseProperty(\"CollectionId\");\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.policyId = this.getResponseProperty(\"PolicyId\");\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.providerUserId = this.getResponseProperty(\"ProviderUserId\");\n    this.providerOrganizationId = this.getResponseProperty(\"ProviderOrganizationId\");\n    this.actingUserId = this.getResponseProperty(\"ActingUserId\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.deviceType = this.getResponseProperty(\"DeviceType\");\n    this.ipAddress = this.getResponseProperty(\"IpAddress\");\n    this.installationId = this.getResponseProperty(\"InstallationId\");\n    this.systemUser = this.getResponseProperty(\"SystemUser\");\n    this.domainName = this.getResponseProperty(\"DomainName\");\n    this.secretId = this.getResponseProperty(\"SecretId\");\n    this.serviceAccountId = this.getResponseProperty(\"ServiceAccountId\");\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class UserKeyResponse extends BaseResponse {\n  userId: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { FileUploadType } from \"../../../platform/enums\";\n\nimport { CipherResponse } from \"./cipher.response\";\n\nexport class AttachmentUploadDataResponse extends BaseResponse {\n  attachmentId: string;\n  fileUploadType: FileUploadType;\n  cipherResponse: CipherResponse;\n  cipherMiniResponse: CipherResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.attachmentId = this.getResponseProperty(\"AttachmentId\");\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const cipherResponse = this.getResponseProperty(\"CipherResponse\");\n    const cipherMiniResponse = this.getResponseProperty(\"CipherMiniResponse\");\n    this.cipherResponse = cipherResponse == null ? null : new CipherResponse(cipherResponse);\n    this.cipherMiniResponse =\n      cipherMiniResponse == null ? null : new CipherResponse(cipherMiniResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class SendFileApi extends BaseResponse {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.id = this.getResponseProperty(\"Id\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class SendTextApi extends BaseResponse {\n  text: string;\n  hidden: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.text = this.getResponseProperty(\"Text\");\n    this.hidden = this.getResponseProperty(\"Hidden\") || false;\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { SendType } from \"../../enums/send-type\";\nimport { SendFileApi } from \"../api/send-file.api\";\nimport { SendTextApi } from \"../api/send-text.api\";\n\nexport class SendResponse extends BaseResponse {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disable: boolean;\n  hideEmail: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.accessId = this.getResponseProperty(\"AccessId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.maxAccessCount = this.getResponseProperty(\"MaxAccessCount\");\n    this.accessCount = this.getResponseProperty(\"AccessCount\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.deletionDate = this.getResponseProperty(\"DeletionDate\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.disable = this.getResponseProperty(\"Disabled\") || false;\n    this.hideEmail = this.getResponseProperty(\"HideEmail\") || false;\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class FolderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { PolicyResponse } from \"../../../admin-console/models/response/policy.response\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { DomainsResponse } from \"../../../models/response/domains.response\";\nimport { ProfileResponse } from \"../../../models/response/profile.response\";\nimport { SendResponse } from \"../../../tools/send/models/response/send.response\";\n\nimport { CipherResponse } from \"./cipher.response\";\nimport { CollectionDetailsResponse } from \"./collection.response\";\nimport { FolderResponse } from \"./folder.response\";\n\nexport class SyncResponse extends BaseResponse {\n  profile?: ProfileResponse;\n  folders: FolderResponse[] = [];\n  collections: CollectionDetailsResponse[] = [];\n  ciphers: CipherResponse[] = [];\n  domains?: DomainsResponse;\n  policies?: PolicyResponse[] = [];\n  sends: SendResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    const profile = this.getResponseProperty(\"Profile\");\n    if (profile != null) {\n      this.profile = new ProfileResponse(profile);\n    }\n\n    const folders = this.getResponseProperty(\"Folders\");\n    if (folders != null) {\n      this.folders = folders.map((f: any) => new FolderResponse(f));\n    }\n\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionDetailsResponse(c));\n    }\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n\n    const domains = this.getResponseProperty(\"Domains\");\n    if (domains != null) {\n      this.domains = new DomainsResponse(domains);\n    }\n\n    const policies = this.getResponseProperty(\"Policies\");\n    if (policies != null) {\n      this.policies = policies.map((p: any) => new PolicyResponse(p));\n    }\n\n    const sends = this.getResponseProperty(\"Sends\");\n    if (sends != null) {\n      this.sends = sends.map((s: any) => new SendResponse(s));\n    }\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { ApiService as ApiServiceAbstraction } from \"../abstractions/api.service\";\nimport { OrganizationConnectionType } from \"../admin-console/enums\";\nimport { OrganizationSponsorshipCreateRequest } from \"../admin-console/models/request/organization/organization-sponsorship-create.request\";\nimport { OrganizationSponsorshipRedeemRequest } from \"../admin-console/models/request/organization/organization-sponsorship-redeem.request\";\nimport { OrganizationConnectionRequest } from \"../admin-console/models/request/organization-connection.request\";\nimport { ProviderAddOrganizationRequest } from \"../admin-console/models/request/provider/provider-add-organization.request\";\nimport { ProviderOrganizationCreateRequest } from \"../admin-console/models/request/provider/provider-organization-create.request\";\nimport { ProviderSetupRequest } from \"../admin-console/models/request/provider/provider-setup.request\";\nimport { ProviderUpdateRequest } from \"../admin-console/models/request/provider/provider-update.request\";\nimport { ProviderUserAcceptRequest } from \"../admin-console/models/request/provider/provider-user-accept.request\";\nimport { ProviderUserBulkConfirmRequest } from \"../admin-console/models/request/provider/provider-user-bulk-confirm.request\";\nimport { ProviderUserBulkRequest } from \"../admin-console/models/request/provider/provider-user-bulk.request\";\nimport { ProviderUserConfirmRequest } from \"../admin-console/models/request/provider/provider-user-confirm.request\";\nimport { ProviderUserInviteRequest } from \"../admin-console/models/request/provider/provider-user-invite.request\";\nimport { ProviderUserUpdateRequest } from \"../admin-console/models/request/provider/provider-user-update.request\";\nimport { SelectionReadOnlyRequest } from \"../admin-console/models/request/selection-read-only.request\";\nimport {\n  OrganizationConnectionConfigApis,\n  OrganizationConnectionResponse,\n} from \"../admin-console/models/response/organization-connection.response\";\nimport { OrganizationExportResponse } from \"../admin-console/models/response/organization-export.response\";\nimport { OrganizationSponsorshipSyncStatusResponse } from \"../admin-console/models/response/organization-sponsorship-sync-status.response\";\nimport {\n  ProviderOrganizationOrganizationDetailsResponse,\n  ProviderOrganizationResponse,\n} from \"../admin-console/models/response/provider/provider-organization.response\";\nimport { ProviderUserBulkPublicKeyResponse } from \"../admin-console/models/response/provider/provider-user-bulk-public-key.response\";\nimport { ProviderUserBulkResponse } from \"../admin-console/models/response/provider/provider-user-bulk.response\";\nimport {\n  ProviderUserResponse,\n  ProviderUserUserDetailsResponse,\n} from \"../admin-console/models/response/provider/provider-user.response\";\nimport { ProviderResponse } from \"../admin-console/models/response/provider/provider.response\";\nimport { SelectionReadOnlyResponse } from \"../admin-console/models/response/selection-read-only.response\";\nimport { TokenService } from \"../auth/abstractions/token.service\";\nimport { CreateAuthRequest } from \"../auth/models/request/create-auth.request\";\nimport { DeviceVerificationRequest } from \"../auth/models/request/device-verification.request\";\nimport { EmailTokenRequest } from \"../auth/models/request/email-token.request\";\nimport { EmailRequest } from \"../auth/models/request/email.request\";\nimport { DeviceRequest } from \"../auth/models/request/identity-token/device.request\";\nimport { PasswordTokenRequest } from \"../auth/models/request/identity-token/password-token.request\";\nimport { SsoTokenRequest } from \"../auth/models/request/identity-token/sso-token.request\";\nimport { TokenTwoFactorRequest } from \"../auth/models/request/identity-token/token-two-factor.request\";\nimport { UserApiTokenRequest } from \"../auth/models/request/identity-token/user-api-token.request\";\nimport { WebAuthnLoginTokenRequest } from \"../auth/models/request/identity-token/webauthn-login-token.request\";\nimport { KeyConnectorUserKeyRequest } from \"../auth/models/request/key-connector-user-key.request\";\nimport { PasswordHintRequest } from \"../auth/models/request/password-hint.request\";\nimport { PasswordRequest } from \"../auth/models/request/password.request\";\nimport { PasswordlessAuthRequest } from \"../auth/models/request/passwordless-auth.request\";\nimport { SecretVerificationRequest } from \"../auth/models/request/secret-verification.request\";\nimport { SetKeyConnectorKeyRequest } from \"../auth/models/request/set-key-connector-key.request\";\nimport { SetPasswordRequest } from \"../auth/models/request/set-password.request\";\nimport { TwoFactorEmailRequest } from \"../auth/models/request/two-factor-email.request\";\nimport { TwoFactorProviderRequest } from \"../auth/models/request/two-factor-provider.request\";\nimport { TwoFactorRecoveryRequest } from \"../auth/models/request/two-factor-recovery.request\";\nimport { UpdateProfileRequest } from \"../auth/models/request/update-profile.request\";\nimport { UpdateTempPasswordRequest } from \"../auth/models/request/update-temp-password.request\";\nimport { UpdateTwoFactorAuthenticatorRequest } from \"../auth/models/request/update-two-factor-authenticator.request\";\nimport { UpdateTwoFactorDuoRequest } from \"../auth/models/request/update-two-factor-duo.request\";\nimport { UpdateTwoFactorEmailRequest } from \"../auth/models/request/update-two-factor-email.request\";\nimport { UpdateTwoFactorWebAuthnDeleteRequest } from \"../auth/models/request/update-two-factor-web-authn-delete.request\";\nimport { UpdateTwoFactorWebAuthnRequest } from \"../auth/models/request/update-two-factor-web-authn.request\";\nimport { UpdateTwoFactorYubioOtpRequest } from \"../auth/models/request/update-two-factor-yubio-otp.request\";\nimport { ApiKeyResponse } from \"../auth/models/response/api-key.response\";\nimport { AuthRequestResponse } from \"../auth/models/response/auth-request.response\";\nimport { DeviceVerificationResponse } from \"../auth/models/response/device-verification.response\";\nimport { IdentityCaptchaResponse } from \"../auth/models/response/identity-captcha.response\";\nimport { IdentityTokenResponse } from \"../auth/models/response/identity-token.response\";\nimport { IdentityTwoFactorResponse } from \"../auth/models/response/identity-two-factor.response\";\nimport { KeyConnectorUserKeyResponse } from \"../auth/models/response/key-connector-user-key.response\";\nimport { MasterPasswordPolicyResponse } from \"../auth/models/response/master-password-policy.response\";\nimport { PreloginResponse } from \"../auth/models/response/prelogin.response\";\nimport { RegisterResponse } from \"../auth/models/response/register.response\";\nimport { SsoPreValidateResponse } from \"../auth/models/response/sso-pre-validate.response\";\nimport { TwoFactorAuthenticatorResponse } from \"../auth/models/response/two-factor-authenticator.response\";\nimport { TwoFactorDuoResponse } from \"../auth/models/response/two-factor-duo.response\";\nimport { TwoFactorEmailResponse } from \"../auth/models/response/two-factor-email.response\";\nimport { TwoFactorProviderResponse } from \"../auth/models/response/two-factor-provider.response\";\nimport { TwoFactorRecoverResponse } from \"../auth/models/response/two-factor-recover.response\";\nimport {\n  ChallengeResponse,\n  TwoFactorWebAuthnResponse,\n} from \"../auth/models/response/two-factor-web-authn.response\";\nimport { TwoFactorYubiKeyResponse } from \"../auth/models/response/two-factor-yubi-key.response\";\nimport { BitPayInvoiceRequest } from \"../billing/models/request/bit-pay-invoice.request\";\nimport { PaymentRequest } from \"../billing/models/request/payment.request\";\nimport { TaxInfoUpdateRequest } from \"../billing/models/request/tax-info-update.request\";\nimport { BillingHistoryResponse } from \"../billing/models/response/billing-history.response\";\nimport { BillingPaymentResponse } from \"../billing/models/response/billing-payment.response\";\nimport { PaymentResponse } from \"../billing/models/response/payment.response\";\nimport { PlanResponse } from \"../billing/models/response/plan.response\";\nimport { SubscriptionResponse } from \"../billing/models/response/subscription.response\";\nimport { TaxInfoResponse } from \"../billing/models/response/tax-info.response\";\nimport { TaxRateResponse } from \"../billing/models/response/tax-rate.response\";\nimport { DeviceType } from \"../enums\";\nimport { VaultTimeoutAction } from \"../enums/vault-timeout-action.enum\";\nimport { CollectionBulkDeleteRequest } from \"../models/request/collection-bulk-delete.request\";\nimport { DeleteRecoverRequest } from \"../models/request/delete-recover.request\";\nimport { EventRequest } from \"../models/request/event.request\";\nimport { KdfRequest } from \"../models/request/kdf.request\";\nimport { KeysRequest } from \"../models/request/keys.request\";\nimport { OrganizationImportRequest } from \"../models/request/organization-import.request\";\nimport { PreloginRequest } from \"../models/request/prelogin.request\";\nimport { RegisterRequest } from \"../models/request/register.request\";\nimport { StorageRequest } from \"../models/request/storage.request\";\nimport { UpdateAvatarRequest } from \"../models/request/update-avatar.request\";\nimport { UpdateDomainsRequest } from \"../models/request/update-domains.request\";\nimport { VerifyDeleteRecoverRequest } from \"../models/request/verify-delete-recover.request\";\nimport { VerifyEmailRequest } from \"../models/request/verify-email.request\";\nimport { BreachAccountResponse } from \"../models/response/breach-account.response\";\nimport { DomainsResponse } from \"../models/response/domains.response\";\nimport { ErrorResponse } from \"../models/response/error.response\";\nimport { EventResponse } from \"../models/response/event.response\";\nimport { ListResponse } from \"../models/response/list.response\";\nimport { ProfileResponse } from \"../models/response/profile.response\";\nimport { UserKeyResponse } from \"../models/response/user-key.response\";\nimport { AppIdService } from \"../platform/abstractions/app-id.service\";\nimport { EnvironmentService } from \"../platform/abstractions/environment.service\";\nimport { PlatformUtilsService } from \"../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../platform/abstractions/state.service\";\nimport { Utils } from \"../platform/misc/utils\";\nimport { AttachmentRequest } from \"../vault/models/request/attachment.request\";\nimport { CipherBulkDeleteRequest } from \"../vault/models/request/cipher-bulk-delete.request\";\nimport { CipherBulkMoveRequest } from \"../vault/models/request/cipher-bulk-move.request\";\nimport { CipherBulkRestoreRequest } from \"../vault/models/request/cipher-bulk-restore.request\";\nimport { CipherBulkShareRequest } from \"../vault/models/request/cipher-bulk-share.request\";\nimport { CipherCollectionsRequest } from \"../vault/models/request/cipher-collections.request\";\nimport { CipherCreateRequest } from \"../vault/models/request/cipher-create.request\";\nimport { CipherPartialRequest } from \"../vault/models/request/cipher-partial.request\";\nimport { CipherShareRequest } from \"../vault/models/request/cipher-share.request\";\nimport { CipherRequest } from \"../vault/models/request/cipher.request\";\nimport { CollectionRequest } from \"../vault/models/request/collection.request\";\nimport { AttachmentUploadDataResponse } from \"../vault/models/response/attachment-upload-data.response\";\nimport { AttachmentResponse } from \"../vault/models/response/attachment.response\";\nimport { CipherResponse } from \"../vault/models/response/cipher.response\";\nimport {\n  CollectionAccessDetailsResponse,\n  CollectionDetailsResponse,\n  CollectionResponse,\n} from \"../vault/models/response/collection.response\";\nimport { SyncResponse } from \"../vault/models/response/sync.response\";\n\n/**\n * @deprecated The `ApiService` class is deprecated and calls should be extracted into individual\n * api services. The `send` method is still allowed to be used within api services. For background\n * of this decision please read https://contributing.bitwarden.com/architecture/adr/refactor-api-service.\n */\nexport class ApiService implements ApiServiceAbstraction {\n  private device: DeviceType;\n  private deviceType: string;\n  private isWebClient = false;\n  private isDesktopClient = false;\n\n  constructor(\n    private tokenService: TokenService,\n    private platformUtilsService: PlatformUtilsService,\n    private environmentService: EnvironmentService,\n    private appIdService: AppIdService,\n    private stateService: StateService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private customUserAgent: string = null,\n  ) {\n    this.device = platformUtilsService.getDevice();\n    this.deviceType = this.device.toString();\n    this.isWebClient =\n      this.device === DeviceType.IEBrowser ||\n      this.device === DeviceType.ChromeBrowser ||\n      this.device === DeviceType.EdgeBrowser ||\n      this.device === DeviceType.FirefoxBrowser ||\n      this.device === DeviceType.OperaBrowser ||\n      this.device === DeviceType.SafariBrowser ||\n      this.device === DeviceType.UnknownBrowser ||\n      this.device === DeviceType.VivaldiBrowser;\n    this.isDesktopClient =\n      this.device === DeviceType.WindowsDesktop ||\n      this.device === DeviceType.MacOsDesktop ||\n      this.device === DeviceType.LinuxDesktop ||\n      this.device === DeviceType.WindowsCLI ||\n      this.device === DeviceType.MacOsCLI ||\n      this.device === DeviceType.LinuxCLI;\n  }\n\n  // Auth APIs\n\n  async postIdentityToken(\n    request:\n      | UserApiTokenRequest\n      | PasswordTokenRequest\n      | SsoTokenRequest\n      | WebAuthnLoginTokenRequest,\n  ): Promise<IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse> {\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    request.alterIdentityTokenHeaders(headers);\n\n    const identityToken =\n      request instanceof UserApiTokenRequest\n        ? request.toIdentityToken()\n        : request.toIdentityToken(this.platformUtilsService.getClientType());\n\n    const env = await firstValueFrom(this.environmentService.environment$);\n\n    const response = await this.fetch(\n      new Request(env.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify(identityToken),\n        credentials: await this.getCredentials(),\n        cache: \"no-store\",\n        headers: headers,\n        method: \"POST\",\n      }),\n    );\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    }\n\n    if (responseJson != null) {\n      if (response.status === 200) {\n        return new IdentityTokenResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.TwoFactorProviders2 &&\n        Object.keys(responseJson.TwoFactorProviders2).length\n      ) {\n        return new IdentityTwoFactorResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.HCaptcha_SiteKey &&\n        Object.keys(responseJson.HCaptcha_SiteKey).length\n      ) {\n        return new IdentityCaptchaResponse(responseJson);\n      }\n    }\n\n    return Promise.reject(new ErrorResponse(responseJson, response.status, true));\n  }\n\n  async refreshIdentityToken(): Promise<any> {\n    try {\n      await this.doAuthRefresh();\n    } catch (e) {\n      return Promise.reject(null);\n    }\n  }\n\n  // TODO: PM-3519: Create and move to AuthRequest Api service\n  async postAuthRequest(request: CreateAuthRequest): Promise<AuthRequestResponse> {\n    const r = await this.send(\"POST\", \"/auth-requests/\", request, false, true);\n    return new AuthRequestResponse(r);\n  }\n  async postAdminAuthRequest(request: CreateAuthRequest): Promise<AuthRequestResponse> {\n    const r = await this.send(\"POST\", \"/auth-requests/admin-request\", request, true, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async getAuthResponse(id: string, accessCode: string): Promise<AuthRequestResponse> {\n    const path = `/auth-requests/${id}/response?code=${accessCode}`;\n    const r = await this.send(\"GET\", path, null, false, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async getAuthRequest(id: string): Promise<AuthRequestResponse> {\n    const path = `/auth-requests/${id}`;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async putAuthRequest(id: string, request: PasswordlessAuthRequest): Promise<AuthRequestResponse> {\n    const path = `/auth-requests/${id}`;\n    const r = await this.send(\"PUT\", path, request, true, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async getAuthRequests(): Promise<ListResponse<AuthRequestResponse>> {\n    const path = `/auth-requests/`;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new ListResponse(r, AuthRequestResponse);\n  }\n\n  async getLastAuthRequest(): Promise<AuthRequestResponse> {\n    const requests = await this.getAuthRequests();\n    const activeRequests = requests.data.filter((m) => !m.isAnswered && !m.isExpired);\n    const lastRequest = activeRequests.sort((a: AuthRequestResponse, b: AuthRequestResponse) =>\n      a.creationDate.localeCompare(b.creationDate),\n    )[activeRequests.length - 1];\n    return lastRequest;\n  }\n\n  // Account APIs\n\n  async getProfile(): Promise<ProfileResponse> {\n    const r = await this.send(\"GET\", \"/accounts/profile\", null, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async getUserSubscription(): Promise<SubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/accounts/subscription\", null, true, true);\n    return new SubscriptionResponse(r);\n  }\n\n  async getTaxInfo(): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/accounts/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async putProfile(request: UpdateProfileRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/profile\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async putAvatar(request: UpdateAvatarRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/avatar\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  putTaxInfo(request: TaxInfoUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/tax\", request, true, false);\n  }\n\n  async postPrelogin(request: PreloginRequest): Promise<PreloginResponse> {\n    const env = await firstValueFrom(this.environmentService.environment$);\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/prelogin\",\n      request,\n      false,\n      true,\n      env.getIdentityUrl(),\n    );\n    return new PreloginResponse(r);\n  }\n\n  postEmailToken(request: EmailTokenRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email-token\", request, true, false);\n  }\n\n  postEmail(request: EmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email\", request, true, false);\n  }\n\n  postPassword(request: PasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password\", request, true, false);\n  }\n\n  setPassword(request: SetPasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-password\", request, true, false);\n  }\n\n  postSetKeyConnectorKey(request: SetKeyConnectorKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-key-connector-key\", request, true, false);\n  }\n\n  postSecurityStamp(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/security-stamp\", request, true, false);\n  }\n\n  async getAccountRevisionDate(): Promise<number> {\n    const r = await this.send(\"GET\", \"/accounts/revision-date\", null, true, true);\n    return r as number;\n  }\n\n  postPasswordHint(request: PasswordHintRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password-hint\", request, false, false);\n  }\n\n  async postRegister(request: RegisterRequest): Promise<RegisterResponse> {\n    const env = await firstValueFrom(this.environmentService.environment$);\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/register\",\n      request,\n      false,\n      true,\n      env.getIdentityUrl(),\n    );\n    return new RegisterResponse(r);\n  }\n\n  async postPremium(data: FormData): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/premium\", data, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postReinstatePremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/reinstate-premium\", null, true, false);\n  }\n\n  async postAccountStorage(request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postAccountPayment(request: PaymentRequest): Promise<void> {\n    return this.send(\"POST\", \"/accounts/payment\", request, true, false);\n  }\n\n  postAccountLicense(data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/accounts/license\", data, true, false);\n  }\n\n  postAccountKeys(request: KeysRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/keys\", request, true, false);\n  }\n\n  postAccountVerifyEmail(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email\", null, true, false);\n  }\n\n  postAccountVerifyEmailToken(request: VerifyEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email-token\", request, false, false);\n  }\n\n  postAccountVerifyPassword(\n    request: SecretVerificationRequest,\n  ): Promise<MasterPasswordPolicyResponse> {\n    return this.send(\"POST\", \"/accounts/verify-password\", request, true, true);\n  }\n\n  postAccountRecoverDelete(request: DeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover\", request, false, false);\n  }\n\n  postAccountRecoverDeleteToken(request: VerifyDeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover-token\", request, false, false);\n  }\n\n  postAccountKdf(request: KdfRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/kdf\", request, true, false);\n  }\n\n  async deleteSsoUser(organizationId: string): Promise<void> {\n    return this.send(\"DELETE\", \"/accounts/sso/\" + organizationId, null, true, false);\n  }\n\n  async getSsoUserIdentifier(): Promise<string> {\n    return this.send(\"GET\", \"/accounts/sso/user-identifier\", null, true, true);\n  }\n\n  async postUserApiKey(id: string, request: SecretVerificationRequest): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async postUserRotateApiKey(\n    id: string,\n    request: SecretVerificationRequest,\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/rotate-api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  putUpdateTempPassword(request: UpdateTempPasswordRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/update-temp-password\", request, true, false);\n  }\n\n  postConvertToKeyConnector(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/convert-to-key-connector\", null, true, false);\n  }\n\n  // Account Billing APIs\n\n  async getUserBillingHistory(): Promise<BillingHistoryResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/history\", null, true, true);\n    return new BillingHistoryResponse(r);\n  }\n\n  async getUserBillingPayment(): Promise<BillingPaymentResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/payment-method\", null, true, true);\n    return new BillingPaymentResponse(r);\n  }\n\n  // Cipher APIs\n\n  async getCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id, null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getFullCipherDetails(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/details\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCiphersOrganization(organizationId: string): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/organization-details?organizationId=\" + organizationId,\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, CipherResponse);\n  }\n\n  async postCipher(request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherCreate(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/create\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherAdmin(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipher(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id, request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putPartialCipher(id: string, request: CipherPartialRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/partial\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipherAdmin(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipher(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id, null, true, false);\n  }\n\n  deleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/admin\", null, true, false);\n  }\n\n  deleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers\", request, true, false);\n  }\n\n  deleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/admin\", request, true, false);\n  }\n\n  putMoveCiphers(request: CipherBulkMoveRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/move\", request, true, false);\n  }\n\n  async putShareCipher(id: string, request: CipherShareRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/share\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  putShareCiphers(request: CipherBulkShareRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/share\", request, true, false);\n  }\n\n  putCipherCollections(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections\", request, true, false);\n  }\n\n  putCipherCollectionsAdmin(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections-admin\", request, true, false);\n  }\n\n  postPurgeCiphers(\n    request: SecretVerificationRequest,\n    organizationId: string = null,\n  ): Promise<any> {\n    let path = \"/ciphers/purge\";\n    if (organizationId != null) {\n      path += \"?organizationId=\" + organizationId;\n    }\n    return this.send(\"POST\", path, request, true, false);\n  }\n\n  putDeleteCipher(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete\", null, true, false);\n  }\n\n  putDeleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete-admin\", null, true, false);\n  }\n\n  putDeleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete\", request, true, false);\n  }\n\n  putDeleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete-admin\", request, true, false);\n  }\n\n  async putRestoreCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore-admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreManyCiphers(\n    request: CipherBulkRestoreRequest,\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  async putRestoreManyCiphersAdmin(\n    request: CipherBulkRestoreRequest,\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore-admin\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  // Attachments APIs\n\n  async getAttachmentData(\n    cipherId: string,\n    attachmentId: string,\n    emergencyAccessId?: string,\n  ): Promise<AttachmentResponse> {\n    const path =\n      (emergencyAccessId != null ? \"/emergency-access/\" + emergencyAccessId + \"/\" : \"/ciphers/\") +\n      cipherId +\n      \"/attachment/\" +\n      attachmentId;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AttachmentResponse(r);\n  }\n\n  async postCipherAttachment(\n    id: string,\n    request: AttachmentRequest,\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/v2\", request, true, true);\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentAdminLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment-admin\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipherAttachment(id: string, attachmentId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, null, true, false);\n  }\n\n  deleteCipherAttachmentAdmin(id: string, attachmentId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/admin\",\n      null,\n      true,\n      false,\n    );\n  }\n\n  postShareCipherAttachment(\n    id: string,\n    attachmentId: string,\n    data: FormData,\n    organizationId: string,\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/share?organizationId=\" + organizationId,\n      data,\n      true,\n      false,\n    );\n  }\n\n  async renewAttachmentUploadUrl(\n    id: string,\n    attachmentId: string,\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/renew\",\n      null,\n      true,\n      true,\n    );\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  postAttachmentFile(id: string, attachmentId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, data, true, false);\n  }\n\n  // Collections APIs\n\n  async getCollectionAccessDetails(\n    organizationId: string,\n    id: string,\n  ): Promise<CollectionAccessDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/details\",\n      null,\n      true,\n      true,\n    );\n    return new CollectionAccessDetailsResponse(r);\n  }\n\n  async getUserCollections(): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\"GET\", \"/collections\", null, true, true);\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollections(organizationId: string): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getManyCollectionsWithAccessDetails(\n    organizationId: string,\n  ): Promise<ListResponse<CollectionAccessDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/details\",\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, CollectionAccessDetailsResponse);\n  }\n\n  async getCollectionUsers(\n    organizationId: string,\n    id: string,\n  ): Promise<SelectionReadOnlyResponse[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      null,\n      true,\n      true,\n    );\n    return r.map((dr: any) => new SelectionReadOnlyResponse(dr));\n  }\n\n  async postCollection(\n    organizationId: string,\n    request: CollectionRequest,\n  ): Promise<CollectionDetailsResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      request,\n      true,\n      true,\n    );\n    return new CollectionDetailsResponse(r);\n  }\n\n  async putCollection(\n    organizationId: string,\n    id: string,\n    request: CollectionRequest,\n  ): Promise<CollectionDetailsResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      request,\n      true,\n      true,\n    );\n    return new CollectionDetailsResponse(r);\n  }\n\n  async putCollectionUsers(\n    organizationId: string,\n    id: string,\n    request: SelectionReadOnlyRequest[],\n  ): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  deleteCollection(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      null,\n      true,\n      false,\n    );\n  }\n\n  deleteManyCollections(organizationId: string, collectionIds: string[]): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      new CollectionBulkDeleteRequest(collectionIds),\n      true,\n      false,\n    );\n  }\n\n  deleteCollectionUser(\n    organizationId: string,\n    id: string,\n    organizationUserId: string,\n  ): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false,\n    );\n  }\n\n  // Groups APIs\n\n  async getGroupUsers(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      null,\n      true,\n      true,\n    );\n    return r;\n  }\n\n  async putGroupUsers(organizationId: string, id: string, request: string[]): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  deleteGroupUser(organizationId: string, id: string, organizationUserId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false,\n    );\n  }\n\n  // Plan APIs\n\n  async getPlans(): Promise<ListResponse<PlanResponse>> {\n    const r = await this.send(\"GET\", \"/plans\", null, false, true);\n    return new ListResponse(r, PlanResponse);\n  }\n\n  async postPublicImportDirectory(request: OrganizationImportRequest): Promise<any> {\n    return this.send(\"POST\", \"/public/organization/import\", request, true, false);\n  }\n\n  async getTaxRates(): Promise<ListResponse<TaxRateResponse>> {\n    const r = await this.send(\"GET\", \"/plans/sales-tax-rates/\", null, true, true);\n    return new ListResponse(r, TaxRateResponse);\n  }\n\n  // Settings APIs\n\n  async getSettingsDomains(): Promise<DomainsResponse> {\n    const r = await this.send(\"GET\", \"/settings/domains\", null, true, true);\n    return new DomainsResponse(r);\n  }\n\n  async putSettingsDomains(request: UpdateDomainsRequest): Promise<DomainsResponse> {\n    const r = await this.send(\"PUT\", \"/settings/domains\", request, true, true);\n    return new DomainsResponse(r);\n  }\n\n  // Sync APIs\n\n  async getSync(): Promise<SyncResponse> {\n    const path = this.isDesktopClient || this.isWebClient ? \"/sync?excludeDomains=true\" : \"/sync\";\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new SyncResponse(r);\n  }\n\n  // Two-factor APIs\n\n  async getTwoFactorProviders(): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\"GET\", \"/two-factor\", null, true, true);\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorOrganizationProviders(\n    organizationId: string,\n  ): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/two-factor\",\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorAuthenticator(\n    request: SecretVerificationRequest,\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async getTwoFactorEmail(request: SecretVerificationRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async getTwoFactorDuo(request: SecretVerificationRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: SecretVerificationRequest,\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/two-factor/get-duo\",\n      request,\n      true,\n      true,\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorYubiKey(request: SecretVerificationRequest): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async getTwoFactorWebAuthn(\n    request: SecretVerificationRequest,\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async getTwoFactorWebAuthnChallenge(\n    request: SecretVerificationRequest,\n  ): Promise<ChallengeResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn-challenge\", request, true, true);\n    return new ChallengeResponse(r);\n  }\n\n  async getTwoFactorRecover(request: SecretVerificationRequest): Promise<TwoFactorRecoverResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-recover\", request, true, true);\n    return new TwoFactorRecoverResponse(r);\n  }\n\n  async putTwoFactorAuthenticator(\n    request: UpdateTwoFactorAuthenticatorRequest,\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async putTwoFactorEmail(request: UpdateTwoFactorEmailRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async putTwoFactorDuo(request: UpdateTwoFactorDuoRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: UpdateTwoFactorDuoRequest,\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/duo\",\n      request,\n      true,\n      true,\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorYubiKey(\n    request: UpdateTwoFactorYubioOtpRequest,\n  ): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async putTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnRequest,\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const response = request.deviceResponse.response as AuthenticatorAttestationResponse;\n    const data: any = Object.assign({}, request);\n\n    data.deviceResponse = {\n      id: request.deviceResponse.id,\n      rawId: btoa(request.deviceResponse.id),\n      type: request.deviceResponse.type,\n      extensions: request.deviceResponse.getClientExtensionResults(),\n      response: {\n        AttestationObject: Utils.fromBufferToB64(response.attestationObject),\n        clientDataJson: Utils.fromBufferToB64(response.clientDataJSON),\n      },\n    };\n\n    const r = await this.send(\"PUT\", \"/two-factor/webauthn\", data, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async deleteTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnDeleteRequest,\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"DELETE\", \"/two-factor/webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async putTwoFactorDisable(request: TwoFactorProviderRequest): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/disable\", request, true, true);\n    return new TwoFactorProviderResponse(r);\n  }\n\n  async putTwoFactorOrganizationDisable(\n    organizationId: string,\n    request: TwoFactorProviderRequest,\n  ): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/disable\",\n      request,\n      true,\n      true,\n    );\n    return new TwoFactorProviderResponse(r);\n  }\n\n  postTwoFactorRecover(request: TwoFactorRecoveryRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/recover\", request, false, false);\n  }\n\n  postTwoFactorEmailSetup(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email\", request, true, false);\n  }\n\n  postTwoFactorEmail(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email-login\", request, false, false);\n  }\n\n  async getDeviceVerificationSettings(): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/two-factor/get-device-verification-settings\",\n      null,\n      true,\n      true,\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  async putDeviceVerificationSettings(\n    request: DeviceVerificationRequest,\n  ): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/two-factor/device-verification-settings\",\n      request,\n      true,\n      true,\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  // Organization APIs\n\n  async getCloudCommunicationsEnabled(): Promise<boolean> {\n    const r = await this.send(\"GET\", \"/organizations/connections/enabled\", null, true, true);\n    return r as boolean;\n  }\n\n  async getOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    id: string,\n    type: OrganizationConnectionType,\n    configType: { new (response: any): TConfig },\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"GET\", `/organizations/connections/${id}/${type}`, null, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async createOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig },\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"POST\", \"/organizations/connections/\", request, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async updateOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig },\n    organizationConnectionId?: string,\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/connections/\" + organizationConnectionId,\n      request,\n      true,\n      true,\n    );\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async deleteOrganizationConnection(id: string): Promise<void> {\n    return this.send(\"DELETE\", \"/organizations/connections/\" + id, null, true, false);\n  }\n\n  // Provider APIs\n\n  async postProviderSetup(id: string, request: ProviderSetupRequest) {\n    const r = await this.send(\"POST\", \"/providers/\" + id + \"/setup\", request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async getProvider(id: string) {\n    const r = await this.send(\"GET\", \"/providers/\" + id, null, true, true);\n    return new ProviderResponse(r);\n  }\n\n  async putProvider(id: string, request: ProviderUpdateRequest) {\n    const r = await this.send(\"PUT\", \"/providers/\" + id, request, true, true);\n    return new ProviderResponse(r);\n  }\n\n  // Provider User APIs\n\n  async getProviderUsers(\n    providerId: string,\n  ): Promise<ListResponse<ProviderUserUserDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users\", null, true, true);\n    return new ListResponse(r, ProviderUserUserDetailsResponse);\n  }\n\n  async getProviderUser(providerId: string, id: string): Promise<ProviderUserResponse> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users/\" + id, null, true, true);\n    return new ProviderUserResponse(r);\n  }\n\n  postProviderUserInvite(providerId: string, request: ProviderUserInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/providers/\" + providerId + \"/users/invite\", request, true, false);\n  }\n\n  postProviderUserReinvite(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false,\n    );\n  }\n\n  async postManyProviderUserReinvite(\n    providerId: string,\n    request: ProviderUserBulkRequest,\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/reinvite\",\n      request,\n      true,\n      true,\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async postProviderUserBulkConfirm(\n    providerId: string,\n    request: ProviderUserBulkConfirmRequest,\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/confirm\",\n      request,\n      true,\n      true,\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async deleteManyProviderUsers(\n    providerId: string,\n    request: ProviderUserBulkRequest,\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\"DELETE\", \"/providers/\" + providerId + \"/users\", request, true, true);\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  postProviderUserAccept(\n    providerId: string,\n    id: string,\n    request: ProviderUserAcceptRequest,\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  postProviderUserConfirm(\n    providerId: string,\n    id: string,\n    request: ProviderUserConfirmRequest,\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  async postProviderUsersPublicKey(\n    providerId: string,\n    request: ProviderUserBulkRequest,\n  ): Promise<ListResponse<ProviderUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/public-keys\",\n      request,\n      true,\n      true,\n    );\n    return new ListResponse(r, ProviderUserBulkPublicKeyResponse);\n  }\n\n  putProviderUser(\n    providerId: string,\n    id: string,\n    request: ProviderUserUpdateRequest,\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/providers/\" + providerId + \"/users/\" + id, request, true, false);\n  }\n\n  deleteProviderUser(providerId: string, id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/providers/\" + providerId + \"/users/\" + id, null, true, false);\n  }\n\n  // Provider Organization APIs\n\n  async getProviderClients(\n    providerId: string,\n  ): Promise<ListResponse<ProviderOrganizationOrganizationDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/providers/\" + providerId + \"/organizations\",\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, ProviderOrganizationOrganizationDetailsResponse);\n  }\n\n  postProviderAddOrganization(\n    providerId: string,\n    request: ProviderAddOrganizationRequest,\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations/add\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  async postProviderCreateOrganization(\n    providerId: string,\n    request: ProviderOrganizationCreateRequest,\n  ): Promise<ProviderOrganizationResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations\",\n      request,\n      true,\n      true,\n    );\n    return new ProviderOrganizationResponse(r);\n  }\n\n  deleteProviderOrganization(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/providers/\" + providerId + \"/organizations/\" + id,\n      null,\n      true,\n      false,\n    );\n  }\n\n  // Event APIs\n\n  async getEvents(start: string, end: string, token: string): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/events\", start, end, token),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsCipher(\n    id: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/ciphers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganization(\n    id: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/organizations/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganizationUser(\n    organizationId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/organizations/\" + organizationId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token,\n      ),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProvider(\n    id: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/providers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProviderUser(\n    providerId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/providers/\" + providerId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token,\n      ),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async postEventsCollect(request: EventRequest[]): Promise<any> {\n    const authHeader = await this.getActiveBearerToken();\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n      Authorization: \"Bearer \" + authHeader,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    const env = await firstValueFrom(this.environmentService.environment$);\n    const response = await this.fetch(\n      new Request(env.getEventsUrl() + \"/collect\", {\n        cache: \"no-store\",\n        credentials: await this.getCredentials(),\n        method: \"POST\",\n        body: JSON.stringify(request),\n        headers: headers,\n      }),\n    );\n    if (response.status !== 200) {\n      return Promise.reject(\"Event post failed.\");\n    }\n  }\n\n  // User APIs\n\n  async getUserPublicKey(id: string): Promise<UserKeyResponse> {\n    const r = await this.send(\"GET\", \"/users/\" + id + \"/public-key\", null, true, true);\n    return new UserKeyResponse(r);\n  }\n\n  // HIBP APIs\n\n  async getHibpBreach(username: string): Promise<BreachAccountResponse[]> {\n    const r = await this.send(\"GET\", \"/hibp/breach?username=\" + username, null, true, true);\n    return r.map((a: any) => new BreachAccountResponse(a));\n  }\n\n  // Misc\n\n  async postBitPayInvoice(request: BitPayInvoiceRequest): Promise<string> {\n    const r = await this.send(\"POST\", \"/bitpay-invoice\", request, true, true);\n    return r as string;\n  }\n\n  async postSetupPayment(): Promise<string> {\n    const r = await this.send(\"POST\", \"/setup-payment\", null, true, true);\n    return r as string;\n  }\n\n  // Key Connector\n\n  async getMasterKeyFromKeyConnector(\n    keyConnectorUrl: string,\n  ): Promise<KeyConnectorUserKeyResponse> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n        }),\n      }),\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n\n    return new KeyConnectorUserKeyResponse(await response.json());\n  }\n\n  async postUserKeyToKeyConnector(\n    keyConnectorUrl: string,\n    request: KeyConnectorUserKeyRequest,\n  ): Promise<void> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"POST\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n        body: JSON.stringify(request),\n      }),\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getKeyConnectorAlive(keyConnectorUrl: string) {\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/alive\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n      }),\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getOrganizationExport(organizationId: string): Promise<OrganizationExportResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/export\",\n      null,\n      true,\n      true,\n    );\n    return new OrganizationExportResponse(r);\n  }\n\n  // Helpers\n\n  async getActiveBearerToken(): Promise<string> {\n    let accessToken = await this.tokenService.getAccessToken();\n    if (await this.tokenService.tokenNeedsRefresh()) {\n      await this.doAuthRefresh();\n      accessToken = await this.tokenService.getAccessToken();\n    }\n    return accessToken;\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    if (request.method === \"GET\") {\n      request.headers.set(\"Cache-Control\", \"no-store\");\n      request.headers.set(\"Pragma\", \"no-cache\");\n    }\n    request.headers.set(\"Bitwarden-Client-Name\", this.platformUtilsService.getClientType());\n    request.headers.set(\n      \"Bitwarden-Client-Version\",\n      await this.platformUtilsService.getApplicationVersionNumber(),\n    );\n    return this.nativeFetch(request);\n  }\n\n  nativeFetch(request: Request): Promise<Response> {\n    return fetch(request);\n  }\n\n  async preValidateSso(identifier: string): Promise<SsoPreValidateResponse> {\n    if (identifier == null || identifier === \"\") {\n      throw new Error(\"Organization Identifier was not provided.\");\n    }\n    const headers = new Headers({\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const env = await firstValueFrom(this.environmentService.environment$);\n    const path = `/sso/prevalidate?domainHint=${encodeURIComponent(identifier)}`;\n    const response = await this.fetch(\n      new Request(env.getIdentityUrl() + path, {\n        cache: \"no-store\",\n        credentials: await this.getCredentials(),\n        headers: headers,\n        method: \"GET\",\n      }),\n    );\n\n    if (response.status === 200) {\n      const body = await response.json();\n      return new SsoPreValidateResponse(body);\n    } else {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async postCreateSponsorship(\n    sponsoredOrgId: string,\n    request: OrganizationSponsorshipCreateRequest,\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoredOrgId +\n        \"/families-for-enterprise\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  async getSponsorshipSyncStatus(\n    sponsoredOrgId: string,\n  ): Promise<OrganizationSponsorshipSyncStatusResponse> {\n    const response = await this.send(\n      \"GET\",\n      \"/organization/sponsorship/\" + sponsoredOrgId + \"/sync-status\",\n      null,\n      true,\n      true,\n    );\n    return new OrganizationSponsorshipSyncStatusResponse(response);\n  }\n\n  async deleteRevokeSponsorship(sponsoringOrganizationId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoringOrganizationId,\n      null,\n      true,\n      false,\n    );\n  }\n\n  async deleteRemoveSponsorship(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/sponsored/\" + sponsoringOrgId,\n      null,\n      true,\n      false,\n    );\n  }\n\n  async postPreValidateSponsorshipToken(sponsorshipToken: string): Promise<boolean> {\n    const r = await this.send(\n      \"POST\",\n      \"/organization/sponsorship/validate-token?sponsorshipToken=\" +\n        encodeURIComponent(sponsorshipToken),\n      null,\n      true,\n      true,\n    );\n    return r as boolean;\n  }\n\n  async postRedeemSponsorship(\n    sponsorshipToken: string,\n    request: OrganizationSponsorshipRedeemRequest,\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/redeem?sponsorshipToken=\" + encodeURIComponent(sponsorshipToken),\n      request,\n      true,\n      false,\n    );\n  }\n\n  async postResendSponsorshipOffer(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" + sponsoringOrgId + \"/families-for-enterprise/resend\",\n      null,\n      true,\n      false,\n    );\n  }\n\n  protected async doAuthRefresh(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken != null && refreshToken !== \"\") {\n      return this.doRefreshToken();\n    }\n\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n    if (!Utils.isNullOrWhitespace(clientId) && !Utils.isNullOrWhitespace(clientSecret)) {\n      return this.doApiTokenRefresh();\n    }\n\n    throw new Error(\"Cannot refresh token, no refresh token or api keys are stored\");\n  }\n\n  protected async doRefreshToken(): Promise<void> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken == null || refreshToken === \"\") {\n      throw new Error();\n    }\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const env = await firstValueFrom(this.environmentService.environment$);\n    const decodedToken = await this.tokenService.decodeAccessToken();\n    const response = await this.fetch(\n      new Request(env.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify({\n          grant_type: \"refresh_token\",\n          client_id: decodedToken.client_id,\n          refresh_token: refreshToken,\n        }),\n        cache: \"no-store\",\n        credentials: await this.getCredentials(),\n        headers: headers,\n        method: \"POST\",\n      }),\n    );\n\n    if (response.status === 200) {\n      const responseJson = await response.json();\n      const tokenResponse = new IdentityTokenResponse(responseJson);\n\n      const vaultTimeoutAction = await this.stateService.getVaultTimeoutAction();\n      const vaultTimeout = await this.stateService.getVaultTimeout();\n\n      await this.tokenService.setTokens(\n        tokenResponse.accessToken,\n        vaultTimeoutAction as VaultTimeoutAction,\n        vaultTimeout,\n        tokenResponse.refreshToken,\n      );\n    } else {\n      const error = await this.handleError(response, true, true);\n      return Promise.reject(error);\n    }\n  }\n\n  protected async doApiTokenRefresh(): Promise<void> {\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const appId = await this.appIdService.getAppId();\n    const deviceRequest = new DeviceRequest(appId, this.platformUtilsService);\n    const tokenRequest = new UserApiTokenRequest(\n      clientId,\n      clientSecret,\n      new TokenTwoFactorRequest(),\n      deviceRequest,\n    );\n\n    const response = await this.postIdentityToken(tokenRequest);\n    if (!(response instanceof IdentityTokenResponse)) {\n      throw new Error(\"Invalid response received when refreshing api token\");\n    }\n\n    const vaultTimeoutAction = await this.stateService.getVaultTimeoutAction();\n    const vaultTimeout = await this.stateService.getVaultTimeout();\n\n    await this.tokenService.setAccessToken(\n      response.accessToken,\n      vaultTimeoutAction as VaultTimeoutAction,\n      vaultTimeout,\n    );\n  }\n\n  async send(\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n    path: string,\n    body: any,\n    authed: boolean,\n    hasResponse: boolean,\n    apiUrl?: string,\n    alterHeaders?: (headers: Headers) => void,\n  ): Promise<any> {\n    const env = await firstValueFrom(this.environmentService.environment$);\n    apiUrl = Utils.isNullOrWhitespace(apiUrl) ? env.getApiUrl() : apiUrl;\n\n    // Prevent directory traversal from malicious paths\n    const pathParts = path.split(\"?\");\n    const requestUrl =\n      apiUrl + Utils.normalizePath(pathParts[0]) + (pathParts.length > 1 ? `?${pathParts[1]}` : \"\");\n\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      credentials: await this.getCredentials(),\n      method: method,\n    };\n\n    if (authed) {\n      const authHeader = await this.getActiveBearerToken();\n      headers.set(\"Authorization\", \"Bearer \" + authHeader);\n    }\n    if (body != null) {\n      if (typeof body === \"string\") {\n        requestInit.body = body;\n        headers.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\n      } else if (typeof body === \"object\") {\n        if (body instanceof FormData) {\n          requestInit.body = body;\n        } else {\n          headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n          requestInit.body = JSON.stringify(body);\n        }\n      }\n    }\n    if (hasResponse) {\n      headers.set(\"Accept\", \"application/json\");\n    }\n    if (alterHeaders != null) {\n      alterHeaders(headers);\n    }\n\n    requestInit.headers = headers;\n    const response = await this.fetch(new Request(requestUrl, requestInit));\n\n    const responseType = response.headers.get(\"content-type\");\n    const responseIsJson = responseType != null && responseType.indexOf(\"application/json\") !== -1;\n    if (hasResponse && response.status === 200 && responseIsJson) {\n      const responseJson = await response.json();\n      return responseJson;\n    } else if (response.status !== 200) {\n      const error = await this.handleError(response, false, authed);\n      return Promise.reject(error);\n    }\n  }\n\n  private async handleError(\n    response: Response,\n    tokenError: boolean,\n    authed: boolean,\n  ): Promise<ErrorResponse> {\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    } else if (this.isTextResponse(response)) {\n      responseJson = { Message: await response.text() };\n    }\n\n    if (authed) {\n      if (\n        response.status === 401 ||\n        response.status === 403 ||\n        (tokenError &&\n          response.status === 400 &&\n          responseJson != null &&\n          responseJson.error === \"invalid_grant\")\n      ) {\n        await this.logoutCallback(true);\n        return null;\n      }\n    }\n\n    return new ErrorResponse(responseJson, response.status, tokenError);\n  }\n\n  private qsStringify(params: any): string {\n    return Object.keys(params)\n      .map((key) => {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n      })\n      .join(\"&\");\n  }\n\n  private async getCredentials(): Promise<RequestCredentials> {\n    const env = await firstValueFrom(this.environmentService.environment$);\n    if (!this.isWebClient || env.hasBaseUrl()) {\n      return \"include\";\n    }\n    return undefined;\n  }\n\n  private addEventParameters(base: string, start: string, end: string, token: string) {\n    if (start != null) {\n      base += \"?start=\" + start;\n    }\n    if (end != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"end=\" + end;\n    }\n    if (token != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"continuationToken=\" + token;\n    }\n    return base;\n  }\n\n  private isJsonResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"application/json\") > -1;\n  }\n\n  private isTextResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"text\") > -1;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"../abstractions/audit.service\";\nimport { BreachAccountResponse } from \"../models/response/breach-account.response\";\nimport { ErrorResponse } from \"../models/response/error.response\";\nimport { CryptoFunctionService } from \"../platform/abstractions/crypto-function.service\";\nimport { throttle } from \"../platform/misc/throttle\";\nimport { Utils } from \"../platform/misc/utils\";\n\nconst PwnedPasswordsApi = \"https://api.pwnedpasswords.com/range/\";\n\nexport class AuditService implements AuditServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private apiService: ApiService,\n  ) {}\n\n  @throttle(100, () => \"passwordLeaked\")\n  async passwordLeaked(password: string): Promise<number> {\n    const hashBytes = await this.cryptoFunctionService.hash(password, \"sha1\");\n    const hash = Utils.fromBufferToHex(hashBytes).toUpperCase();\n    const hashStart = hash.substr(0, 5);\n    const hashEnding = hash.substr(5);\n\n    const response = await this.apiService.nativeFetch(new Request(PwnedPasswordsApi + hashStart));\n    const leakedHashes = await response.text();\n    const match = leakedHashes.split(/\\r?\\n/).find((v) => {\n      return v.split(\":\")[0] === hashEnding;\n    });\n\n    return match != null ? parseInt(match.split(\":\")[1], 10) : 0;\n  }\n\n  async breachedAccounts(username: string): Promise<BreachAccountResponse[]> {\n    try {\n      return await this.apiService.getHibpBreach(username);\n    } catch (e) {\n      const error = e as ErrorResponse;\n      if (error.statusCode === 404) {\n        return [];\n      }\n      throw new Error();\n    }\n  }\n}\n","/**\n * Use as a Decorator on async functions, it will limit how many times the function can be\n * in-flight at a time.\n *\n * Calls beyond the limit will be queued, and run when one of the active calls finishes\n */\nexport function throttle(limit: number, throttleKey: (args: any[]) => string) {\n  return <T>(\n    target: any,\n    propertyKey: string | symbol,\n    descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>,\n  ) => {\n    const originalMethod: () => Promise<T> = descriptor.value;\n    const allThrottles = new Map<any, Map<string, (() => void)[]>>();\n\n    const getThrottles = (obj: any) => {\n      let throttles = allThrottles.get(obj);\n      if (throttles != null) {\n        return throttles;\n      }\n      throttles = new Map<string, (() => void)[]>();\n      allThrottles.set(obj, throttles);\n      return throttles;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const throttles = getThrottles(this);\n        const argsThrottleKey = throttleKey(args);\n        let queue = throttles.get(argsThrottleKey);\n        if (queue == null) {\n          queue = [];\n          throttles.set(argsThrottleKey, queue);\n        }\n\n        return new Promise<T>((resolve, reject) => {\n          const exec = () => {\n            const onFinally = () => {\n              queue.splice(queue.indexOf(exec), 1);\n              if (queue.length >= limit) {\n                queue[limit - 1]();\n              } else if (queue.length === 0) {\n                throttles.delete(argsThrottleKey);\n                if (throttles.size === 0) {\n                  allThrottles.delete(this);\n                }\n              }\n            };\n            originalMethod\n              .apply(this, args)\n              .then((val: any) => {\n                onFinally();\n                return val;\n              })\n              .catch((err: any) => {\n                onFinally();\n                throw err;\n              })\n              .then(resolve, reject);\n          };\n          queue.push(exec);\n          if (queue.length <= limit) {\n            exec();\n          }\n        });\n      },\n    };\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { EventType } from \"../../enums\";\n\nexport class EventData {\n  type: EventType;\n  cipherId: string;\n  date: string;\n  organizationId: string;\n\n  static fromJSON(obj: Jsonify<EventData>): EventData {\n    return Object.assign(new EventData(), obj);\n  }\n}\n","import { EventData } from \"../../models/data/event.data\";\nimport { KeyDefinition, EVENT_COLLECTION_DISK } from \"../../platform/state\";\n\nexport const EVENT_COLLECTION: KeyDefinition<EventData[]> = KeyDefinition.array<EventData>(\n  EVENT_COLLECTION_DISK,\n  \"events\",\n  {\n    deserializer: (s) => EventData.fromJSON(s),\n  },\n);\n","import { firstValueFrom, map, from, zip } from \"rxjs\";\n\nimport { EventCollectionService as EventCollectionServiceAbstraction } from \"../../abstractions/event/event-collection.service\";\nimport { EventUploadService } from \"../../abstractions/event/event-upload.service\";\nimport { OrganizationService } from \"../../admin-console/abstractions/organization/organization.service.abstraction\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { EventType } from \"../../enums\";\nimport { EventData } from \"../../models/data/event.data\";\nimport { StateProvider } from \"../../platform/state\";\nimport { CipherService } from \"../../vault/abstractions/cipher.service\";\n\nimport { EVENT_COLLECTION } from \"./key-definitions\";\n\nexport class EventCollectionService implements EventCollectionServiceAbstraction {\n  constructor(\n    private cipherService: CipherService,\n    private stateProvider: StateProvider,\n    private organizationService: OrganizationService,\n    private eventUploadService: EventUploadService,\n    private accountService: AccountService,\n  ) {}\n\n  /** Adds an event to the active user's event collection\n   *  @param eventType the event type to be added\n   *  @param cipherId if provided the id of the cipher involved in the event\n   *  @param uploadImmediately in some cases the recorded events should be uploaded right after being added\n   *  @param organizationId the organizationId involved in the event. If the cipherId is not provided an organizationId is required\n   */\n  async collect(\n    eventType: EventType,\n    cipherId: string = null,\n    uploadImmediately = false,\n    organizationId: string = null,\n  ): Promise<any> {\n    const userId = await firstValueFrom(this.stateProvider.activeUserId$);\n    const eventStore = this.stateProvider.getUser(userId, EVENT_COLLECTION);\n\n    if (!(await this.shouldUpdate(cipherId, organizationId))) {\n      return;\n    }\n\n    const event = new EventData();\n    event.type = eventType;\n    event.cipherId = cipherId;\n    event.date = new Date().toISOString();\n    event.organizationId = organizationId;\n\n    await eventStore.update((events) => {\n      events = events ?? [];\n      events.push(event);\n      return events;\n    });\n\n    if (uploadImmediately) {\n      await this.eventUploadService.uploadEvents();\n    }\n  }\n\n  /** Verifies if the event collection should be updated for the provided information\n   *  @param cipherId the cipher for the event\n   *  @param organizationId the organization for the event\n   */\n  private async shouldUpdate(\n    cipherId: string = null,\n    organizationId: string = null,\n  ): Promise<boolean> {\n    const orgIds$ = this.organizationService.organizations$.pipe(\n      map((orgs) => orgs?.filter((o) => o.useEvents)?.map((x) => x.id) ?? []),\n    );\n\n    const cipher$ = from(this.cipherService.get(cipherId));\n\n    const [accountInfo, orgIds, cipher] = await firstValueFrom(\n      zip(this.accountService.activeAccount$, orgIds$, cipher$),\n    );\n\n    // The user must be authorized\n    if (accountInfo.status != AuthenticationStatus.Unlocked) {\n      return false;\n    }\n\n    // User must have organizations assigned to them\n    if (orgIds == null || orgIds.length == 0) {\n      return false;\n    }\n\n    // If the cipher is null there must be an organization id provided\n    if (cipher == null && organizationId == null) {\n      return false;\n    }\n\n    // If the cipher is present it must be in the user's org list\n    if (cipher != null && !orgIds.includes(cipher?.organizationId)) {\n      return false;\n    }\n\n    // If the organization id is provided it must be in the user's org list\n    if (organizationId != null && !orgIds.includes(organizationId)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","import { EventType } from \"../../enums\";\n\nexport class EventRequest {\n  type: EventType;\n  cipherId: string;\n  date: string;\n  organizationId: string;\n}\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { EventUploadService as EventUploadServiceAbstraction } from \"../../abstractions/event/event-upload.service\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { EventData } from \"../../models/data/event.data\";\nimport { EventRequest } from \"../../models/request/event.request\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { StateProvider } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\n\nimport { EVENT_COLLECTION } from \"./key-definitions\";\n\nexport class EventUploadService implements EventUploadServiceAbstraction {\n  private inited = false;\n  constructor(\n    private apiService: ApiService,\n    private stateProvider: StateProvider,\n    private logService: LogService,\n    private accountService: AccountService,\n  ) {}\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.uploadEvents();\n      setInterval(() => this.uploadEvents(), 60 * 1000); // check every 60 seconds\n    }\n  }\n\n  /** Upload the event collection from state.\n   *  @param userId upload events for provided user. If not active user will be used.\n   */\n  async uploadEvents(userId?: UserId): Promise<void> {\n    if (!userId) {\n      userId = await firstValueFrom(this.stateProvider.activeUserId$);\n    }\n\n    // Get the auth status from the provided user or the active user\n    const userAuth$ = this.accountService.accounts$.pipe(\n      map((accounts) => accounts[userId]?.status === AuthenticationStatus.Unlocked),\n    );\n\n    const isAuthenticated = await firstValueFrom(userAuth$);\n    if (!isAuthenticated) {\n      return;\n    }\n\n    const eventCollection = await this.takeEvents(userId);\n\n    if (eventCollection == null || eventCollection.length === 0) {\n      return;\n    }\n    const request = eventCollection.map((e) => {\n      const req = new EventRequest();\n      req.type = e.type;\n      req.cipherId = e.cipherId;\n      req.date = e.date;\n      req.organizationId = e.organizationId;\n      return req;\n    });\n    try {\n      await this.apiService.postEventsCollect(request);\n    } catch (e) {\n      this.logService.error(e);\n      // Add the events back to state if there was an error and they were not uploaded.\n      await this.stateProvider.setUserState(EVENT_COLLECTION, eventCollection, userId);\n    }\n  }\n\n  /** Return user's events and then clear them from state\n   *  @param userId the user to grab and clear events for\n   */\n  private async takeEvents(userId: UserId): Promise<EventData[]> {\n    let taken = null;\n    await this.stateProvider.getUser(userId, EVENT_COLLECTION).update((current) => {\n      taken = current ?? [];\n      return [];\n    });\n\n    return taken;\n  }\n}\n","import { NotificationType } from \"../../enums\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class NotificationResponse extends BaseResponse {\n  contextId: string;\n  type: NotificationType;\n  payload: any;\n\n  constructor(response: any) {\n    super(response);\n    this.contextId = this.getResponseProperty(\"ContextId\");\n    this.type = this.getResponseProperty(\"Type\");\n\n    const payload = this.getResponseProperty(\"Payload\");\n    switch (this.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncCipherUpdate:\n      case NotificationType.SyncLoginDelete:\n        this.payload = new SyncCipherNotification(payload);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderDelete:\n      case NotificationType.SyncFolderUpdate:\n        this.payload = new SyncFolderNotification(payload);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncOrganizations:\n      case NotificationType.SyncOrgKeys:\n      case NotificationType.SyncSettings:\n      case NotificationType.LogOut:\n        this.payload = new UserNotification(payload);\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n      case NotificationType.SyncSendDelete:\n        this.payload = new SyncSendNotification(payload);\n        break;\n      case NotificationType.AuthRequest:\n      case NotificationType.AuthRequestResponse:\n        this.payload = new AuthRequestPushNotification(payload);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport class SyncCipherNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  organizationId: string;\n  collectionIds: string[];\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class SyncFolderNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class UserNotification extends BaseResponse {\n  userId: string;\n  date: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.date = new Date(this.getResponseProperty(\"Date\"));\n  }\n}\n\nexport class SyncSendNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class AuthRequestPushNotification extends BaseResponse {\n  id: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n","import * as signalR from \"@microsoft/signalr\";\nimport * as signalRMsgPack from \"@microsoft/signalr-protocol-msgpack\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"../abstractions/notifications.service\";\nimport { AuthService } from \"../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../auth/enums/authentication-status\";\nimport { NotificationType } from \"../enums\";\nimport {\n  NotificationResponse,\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notification.response\";\nimport { AppIdService } from \"../platform/abstractions/app-id.service\";\nimport { EnvironmentService } from \"../platform/abstractions/environment.service\";\nimport { LogService } from \"../platform/abstractions/log.service\";\nimport { MessagingService } from \"../platform/abstractions/messaging.service\";\nimport { StateService } from \"../platform/abstractions/state.service\";\nimport { SyncService } from \"../vault/abstractions/sync/sync.service.abstraction\";\n\nexport class NotificationsService implements NotificationsServiceAbstraction {\n  private signalrConnection: signalR.HubConnection;\n  private url: string;\n  private connected = false;\n  private inited = false;\n  private inactive = false;\n  private reconnectTimer: any = null;\n\n  constructor(\n    private logService: LogService,\n    private syncService: SyncService,\n    private appIdService: AppIdService,\n    private apiService: ApiService,\n    private environmentService: EnvironmentService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private stateService: StateService,\n    private authService: AuthService,\n    private messagingService: MessagingService,\n  ) {\n    this.environmentService.environment$.subscribe(() => {\n      if (!this.inited) {\n        return;\n      }\n\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.init();\n    });\n  }\n\n  async init(): Promise<void> {\n    this.inited = false;\n    this.url = (await firstValueFrom(this.environmentService.environment$)).getNotificationsUrl();\n\n    // Set notifications server URL to `https://-` to effectively disable communication\n    // with the notifications server from the client app\n    if (this.url === \"https://-\") {\n      return;\n    }\n\n    if (this.signalrConnection != null) {\n      this.signalrConnection.off(\"ReceiveMessage\");\n      this.signalrConnection.off(\"Heartbeat\");\n      await this.signalrConnection.stop();\n      this.connected = false;\n      this.signalrConnection = null;\n    }\n\n    this.signalrConnection = new signalR.HubConnectionBuilder()\n      .withUrl(this.url + \"/hub\", {\n        accessTokenFactory: () => this.apiService.getActiveBearerToken(),\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets,\n      })\n      .withHubProtocol(new signalRMsgPack.MessagePackHubProtocol() as signalR.IHubProtocol)\n      // .configureLogging(signalR.LogLevel.Trace)\n      .build();\n\n    this.signalrConnection.on(\"ReceiveMessage\", (data: any) =>\n      this.processNotification(new NotificationResponse(data)),\n    );\n    // eslint-disable-next-line\n    this.signalrConnection.on(\"Heartbeat\", (data: any) => {\n      /*console.log('Heartbeat!');*/\n    });\n    this.signalrConnection.onclose(() => {\n      this.connected = false;\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.reconnect(true);\n    });\n    this.inited = true;\n    if (await this.isAuthedAndUnlocked()) {\n      await this.reconnect(false);\n    }\n  }\n\n  async updateConnection(sync = false): Promise<void> {\n    if (!this.inited) {\n      return;\n    }\n    try {\n      if (await this.isAuthedAndUnlocked()) {\n        await this.reconnect(sync);\n      } else {\n        await this.signalrConnection.stop();\n      }\n    } catch (e) {\n      this.logService.error(e.toString());\n    }\n  }\n\n  async reconnectFromActivity(): Promise<void> {\n    this.inactive = false;\n    if (this.inited && !this.connected) {\n      await this.reconnect(true);\n    }\n  }\n\n  async disconnectFromInactivity(): Promise<void> {\n    this.inactive = true;\n    if (this.inited && this.connected) {\n      await this.signalrConnection.stop();\n    }\n  }\n\n  private async processNotification(notification: NotificationResponse) {\n    const appId = await this.appIdService.getAppId();\n    if (notification == null || notification.contextId === appId) {\n      return;\n    }\n\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    const payloadUserId = notification.payload.userId || notification.payload.UserId;\n    const myUserId = await this.stateService.getUserId();\n    if (isAuthenticated && payloadUserId != null && payloadUserId !== myUserId) {\n      return;\n    }\n\n    switch (notification.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherUpdate:\n        await this.syncService.syncUpsertCipher(\n          notification.payload as SyncCipherNotification,\n          notification.type === NotificationType.SyncCipherUpdate,\n        );\n        break;\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncLoginDelete:\n        await this.syncService.syncDeleteCipher(notification.payload as SyncCipherNotification);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderUpdate:\n        await this.syncService.syncUpsertFolder(\n          notification.payload as SyncFolderNotification,\n          notification.type === NotificationType.SyncFolderUpdate,\n        );\n        break;\n      case NotificationType.SyncFolderDelete:\n        await this.syncService.syncDeleteFolder(notification.payload as SyncFolderNotification);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncSettings:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(false);\n        }\n        break;\n      case NotificationType.SyncOrganizations:\n        if (isAuthenticated) {\n          // An organization update may not have bumped the user's account revision date, so force a sync\n          await this.syncService.fullSync(true);\n        }\n        break;\n      case NotificationType.SyncOrgKeys:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(true);\n          // Stop so a reconnect can be made\n          await this.signalrConnection.stop();\n        }\n        break;\n      case NotificationType.LogOut:\n        if (isAuthenticated) {\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.logoutCallback(true);\n        }\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n        await this.syncService.syncUpsertSend(\n          notification.payload as SyncSendNotification,\n          notification.type === NotificationType.SyncSendUpdate,\n        );\n        break;\n      case NotificationType.SyncSendDelete:\n        await this.syncService.syncDeleteSend(notification.payload as SyncSendNotification);\n        break;\n      case NotificationType.AuthRequest:\n        if (await this.stateService.getApproveLoginRequests()) {\n          this.messagingService.send(\"openLoginApproval\", {\n            notificationId: notification.payload.id,\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async reconnect(sync: boolean) {\n    if (this.reconnectTimer != null) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    if (this.connected || !this.inited || this.inactive) {\n      return;\n    }\n    const authedAndUnlocked = await this.isAuthedAndUnlocked();\n    if (!authedAndUnlocked) {\n      return;\n    }\n\n    try {\n      await this.signalrConnection.start();\n      this.connected = true;\n      if (sync) {\n        await this.syncService.fullSync(false);\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    if (!this.connected) {\n      this.reconnectTimer = setTimeout(() => this.reconnect(sync), this.random(120000, 300000));\n    }\n  }\n\n  private async isAuthedAndUnlocked() {\n    const authStatus = await this.authService.getAuthStatus();\n    return authStatus >= AuthenticationStatus.Unlocked;\n  }\n\n  private random(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}\n","import * as lunr from \"lunr\";\n\nimport { SearchService as SearchServiceAbstraction } from \"../abstractions/search.service\";\nimport { UriMatchStrategy } from \"../models/domain/domain-service\";\nimport { I18nService } from \"../platform/abstractions/i18n.service\";\nimport { LogService } from \"../platform/abstractions/log.service\";\nimport { SendView } from \"../tools/send/models/view/send.view\";\nimport { FieldType } from \"../vault/enums\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\n\nexport class SearchService implements SearchServiceAbstraction {\n  private static registeredPipeline = false;\n\n  indexedEntityId?: string = null;\n  private indexing = false;\n  private index: lunr.Index = null;\n  private readonly immediateSearchLocales: string[] = [\"zh-CN\", \"zh-TW\", \"ja\", \"ko\", \"vi\"];\n  private readonly defaultSearchableMinLength: number = 2;\n  private searchableMinLength: number = this.defaultSearchableMinLength;\n\n  constructor(\n    private logService: LogService,\n    private i18nService: I18nService,\n  ) {\n    this.i18nService.locale$.subscribe((locale) => {\n      if (this.immediateSearchLocales.indexOf(locale) !== -1) {\n        this.searchableMinLength = 1;\n      } else {\n        this.searchableMinLength = this.defaultSearchableMinLength;\n      }\n    });\n\n    // Currently have to ensure this is only done a single time. Lunr allows you to register a function\n    // multiple times but they will add a warning message to the console. The way they do that breaks when ran on a service worker.\n    if (!SearchService.registeredPipeline) {\n      SearchService.registeredPipeline = true;\n      //register lunr pipeline function\n      lunr.Pipeline.registerFunction(this.normalizeAccentsPipelineFunction, \"normalizeAccents\");\n    }\n  }\n\n  clearIndex(): void {\n    this.indexedEntityId = null;\n    this.index = null;\n  }\n\n  isSearchable(query: string): boolean {\n    query = SearchService.normalizeSearchQuery(query);\n    const notSearchable =\n      query == null ||\n      (this.index == null && query.length < this.searchableMinLength) ||\n      (this.index != null && query.length < this.searchableMinLength && query.indexOf(\">\") !== 0);\n    return !notSearchable;\n  }\n\n  indexCiphers(ciphers: CipherView[], indexedEntityId?: string): void {\n    if (this.indexing) {\n      return;\n    }\n\n    this.indexing = true;\n    this.indexedEntityId = indexedEntityId;\n    this.index = null;\n    const builder = new lunr.Builder();\n    builder.pipeline.add(this.normalizeAccentsPipelineFunction);\n    builder.ref(\"id\");\n    builder.field(\"shortid\", { boost: 100, extractor: (c: CipherView) => c.id.substr(0, 8) });\n    builder.field(\"name\", {\n      boost: 10,\n    });\n    builder.field(\"subtitle\", {\n      boost: 5,\n      extractor: (c: CipherView) => {\n        if (c.subTitle != null && c.type === CipherType.Card) {\n          return c.subTitle.replace(/\\*/g, \"\");\n        }\n        return c.subTitle;\n      },\n    });\n    builder.field(\"notes\");\n    builder.field(\"login.username\", {\n      extractor: (c: CipherView) =>\n        c.type === CipherType.Login && c.login != null ? c.login.username : null,\n    });\n    builder.field(\"login.uris\", { boost: 2, extractor: (c: CipherView) => this.uriExtractor(c) });\n    builder.field(\"fields\", { extractor: (c: CipherView) => this.fieldExtractor(c, false) });\n    builder.field(\"fields_joined\", { extractor: (c: CipherView) => this.fieldExtractor(c, true) });\n    builder.field(\"attachments\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, false),\n    });\n    builder.field(\"attachments_joined\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, true),\n    });\n    builder.field(\"organizationid\", { extractor: (c: CipherView) => c.organizationId });\n    ciphers = ciphers || [];\n    ciphers.forEach((c) => builder.add(c));\n    this.index = builder.build();\n\n    this.indexing = false;\n\n    this.logService.info(\"Finished search indexing\");\n  }\n\n  async searchCiphers(\n    query: string,\n    filter: ((cipher: CipherView) => boolean) | ((cipher: CipherView) => boolean)[] = null,\n    ciphers: CipherView[],\n  ): Promise<CipherView[]> {\n    const results: CipherView[] = [];\n    if (query != null) {\n      query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    }\n    if (query === \"\") {\n      query = null;\n    }\n\n    if (ciphers == null) {\n      ciphers = [];\n    }\n\n    if (filter != null && Array.isArray(filter) && filter.length > 0) {\n      ciphers = ciphers.filter((c) => filter.every((f) => f == null || f(c)));\n    } else if (filter != null) {\n      ciphers = ciphers.filter(filter as (cipher: CipherView) => boolean);\n    }\n\n    if (!this.isSearchable(query)) {\n      return ciphers;\n    }\n\n    if (this.indexing) {\n      await new Promise((r) => setTimeout(r, 250));\n      if (this.indexing) {\n        await new Promise((r) => setTimeout(r, 500));\n      }\n    }\n\n    const index = this.getIndexForSearch();\n    if (index == null) {\n      // Fall back to basic search if index is not available\n      return this.searchCiphersBasic(ciphers, query);\n    }\n\n    const ciphersMap = new Map<string, CipherView>();\n    ciphers.forEach((c) => ciphersMap.set(c.id, c));\n\n    let searchResults: lunr.Index.Result[] = null;\n    const isQueryString = query != null && query.length > 1 && query.indexOf(\">\") === 0;\n    if (isQueryString) {\n      try {\n        searchResults = index.search(query.substr(1).trim());\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else {\n      const soWild = lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING;\n      searchResults = index.query((q) => {\n        lunr.tokenizer(query).forEach((token) => {\n          const t = token.toString();\n          q.term(t, { fields: [\"name\"], wildcard: soWild });\n          q.term(t, { fields: [\"subtitle\"], wildcard: soWild });\n          q.term(t, { fields: [\"login.uris\"], wildcard: soWild });\n          q.term(t, {});\n        });\n      });\n    }\n\n    if (searchResults != null) {\n      searchResults.forEach((r) => {\n        if (ciphersMap.has(r.ref)) {\n          results.push(ciphersMap.get(r.ref));\n        }\n      });\n    }\n    return results;\n  }\n\n  searchCiphersBasic(ciphers: CipherView[], query: string, deleted = false) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    return ciphers.filter((c) => {\n      if (deleted !== c.isDeleted) {\n        return false;\n      }\n      if (c.name != null && c.name.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (query.length >= 8 && c.id.startsWith(query)) {\n        return true;\n      }\n      if (c.subTitle != null && c.subTitle.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (\n        c.login &&\n        c.login.hasUris &&\n        c.login.uris.some((loginUri) => loginUri?.uri?.toLowerCase().indexOf(query) > -1)\n      ) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  searchSends(sends: SendView[], query: string) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLocaleLowerCase());\n    if (query === null) {\n      return sends;\n    }\n    const sendsMatched: SendView[] = [];\n    const lowPriorityMatched: SendView[] = [];\n    sends.forEach((s) => {\n      if (s.name != null && s.name.toLowerCase().indexOf(query) > -1) {\n        sendsMatched.push(s);\n      } else if (\n        query.length >= 8 &&\n        (s.id.startsWith(query) ||\n          s.accessId.toLocaleLowerCase().startsWith(query) ||\n          (s.file?.id != null && s.file.id.startsWith(query)))\n      ) {\n        lowPriorityMatched.push(s);\n      } else if (s.notes != null && s.notes.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.text?.text != null && s.text.text.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.file?.fileName != null && s.file.fileName.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      }\n    });\n    return sendsMatched.concat(lowPriorityMatched);\n  }\n\n  getIndexForSearch(): lunr.Index {\n    return this.index;\n  }\n\n  private fieldExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasFields) {\n      return null;\n    }\n    let fields: string[] = [];\n    c.fields.forEach((f) => {\n      if (f.name != null) {\n        fields.push(f.name);\n      }\n      if (f.type === FieldType.Text && f.value != null) {\n        fields.push(f.value);\n      }\n    });\n    fields = fields.filter((f) => f.trim() !== \"\");\n    if (fields.length === 0) {\n      return null;\n    }\n    return joined ? fields.join(\" \") : fields;\n  }\n\n  private attachmentExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasAttachments) {\n      return null;\n    }\n    let attachments: string[] = [];\n    c.attachments.forEach((a) => {\n      if (a != null && a.fileName != null) {\n        if (joined && a.fileName.indexOf(\".\") > -1) {\n          attachments.push(a.fileName.substr(0, a.fileName.lastIndexOf(\".\")));\n        } else {\n          attachments.push(a.fileName);\n        }\n      }\n    });\n    attachments = attachments.filter((f) => f.trim() !== \"\");\n    if (attachments.length === 0) {\n      return null;\n    }\n    return joined ? attachments.join(\" \") : attachments;\n  }\n\n  private uriExtractor(c: CipherView) {\n    if (c.type !== CipherType.Login || c.login == null || !c.login.hasUris) {\n      return null;\n    }\n    const uris: string[] = [];\n    c.login.uris.forEach((u) => {\n      if (u.uri == null || u.uri === \"\") {\n        return;\n      }\n      if (u.hostname != null) {\n        uris.push(u.hostname);\n        return;\n      }\n      let uri = u.uri;\n      if (u.match !== UriMatchStrategy.RegularExpression) {\n        const protocolIndex = uri.indexOf(\"://\");\n        if (protocolIndex > -1) {\n          uri = uri.substr(protocolIndex + 3);\n        }\n        const queryIndex = uri.search(/\\?|&|#/);\n        if (queryIndex > -1) {\n          uri = uri.substring(0, queryIndex);\n        }\n      }\n      uris.push(uri);\n    });\n    return uris.length > 0 ? uris : null;\n  }\n\n  private normalizeAccentsPipelineFunction(token: lunr.Token): any {\n    const searchableFields = [\"name\", \"login.username\", \"subtitle\", \"notes\"];\n    const fields = (token as any).metadata[\"fields\"];\n    const checkFields = fields.every((i: any) => searchableFields.includes(i));\n\n    if (checkFields) {\n      return SearchService.normalizeSearchQuery(token.toString());\n    }\n\n    return token;\n  }\n\n  // Remove accents/diacritics characters from text. This regex is equivalent to the Diacritic unicode property escape, i.e. it will match all diacritic characters.\n  static normalizeSearchQuery(query: string): string {\n    return query?.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  }\n}\n","import { defer, firstValueFrom } from \"rxjs\";\n\nimport { UserDecryptionOptionsServiceAbstraction } from \"@bitwarden/auth/common\";\n\nimport { VaultTimeoutSettingsService as VaultTimeoutSettingsServiceAbstraction } from \"../../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { PolicyService } from \"../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"../../admin-console/enums\";\nimport { TokenService } from \"../../auth/abstractions/token.service\";\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { BiometricStateService } from \"../../platform/biometrics/biometric-state.service\";\nimport { UserId } from \"../../types/guid\";\n\n/**\n * - DISABLED: No Pin set\n * - PERSISTENT: Pin is set and survives client reset\n * - TRANSIENT: Pin is set and requires password unlock after client reset\n */\nexport type PinLockType = \"DISABLED\" | \"PERSISTANT\" | \"TRANSIENT\";\n\nexport class VaultTimeoutSettingsService implements VaultTimeoutSettingsServiceAbstraction {\n  constructor(\n    private userDecryptionOptionsService: UserDecryptionOptionsServiceAbstraction,\n    private cryptoService: CryptoService,\n    private tokenService: TokenService,\n    private policyService: PolicyService,\n    private stateService: StateService,\n    private biometricStateService: BiometricStateService,\n  ) {}\n\n  async setVaultTimeoutOptions(timeout: number, action: VaultTimeoutAction): Promise<void> {\n    // We swap these tokens from being on disk for lock actions, and in memory for logout actions\n    // Get them here to set them to their new location after changing the timeout action and clearing if needed\n    const accessToken = await this.tokenService.getAccessToken();\n    const refreshToken = await this.tokenService.getRefreshToken();\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    await this.stateService.setVaultTimeout(timeout);\n\n    const currentAction = await this.stateService.getVaultTimeoutAction();\n\n    if (\n      (timeout != null || timeout === 0) &&\n      action === VaultTimeoutAction.LogOut &&\n      action !== currentAction\n    ) {\n      // if we have a vault timeout and the action is log out, reset tokens\n      await this.tokenService.clearTokens();\n    }\n\n    await this.stateService.setVaultTimeoutAction(action);\n\n    await this.tokenService.setTokens(accessToken, action, timeout, refreshToken, [\n      clientId,\n      clientSecret,\n    ]);\n\n    await this.cryptoService.refreshAdditionalKeys();\n  }\n\n  availableVaultTimeoutActions$(userId?: string) {\n    return defer(() => this.getAvailableVaultTimeoutActions(userId));\n  }\n\n  async isPinLockSet(userId?: string): Promise<PinLockType> {\n    // we can't check the protected pin for both because old accounts only\n    // used it for MP on Restart\n    const pinIsEnabled = !!(await this.stateService.getProtectedPin({ userId }));\n    const aUserKeyPinIsSet = !!(await this.stateService.getPinKeyEncryptedUserKey({ userId }));\n    const anOldUserKeyPinIsSet = !!(await this.stateService.getEncryptedPinProtected({ userId }));\n\n    if (aUserKeyPinIsSet || anOldUserKeyPinIsSet) {\n      return \"PERSISTANT\";\n    } else if (pinIsEnabled && !aUserKeyPinIsSet && !anOldUserKeyPinIsSet) {\n      return \"TRANSIENT\";\n    } else {\n      return \"DISABLED\";\n    }\n  }\n\n  async isBiometricLockSet(userId?: string): Promise<boolean> {\n    const biometricUnlockPromise =\n      userId == null\n        ? firstValueFrom(this.biometricStateService.biometricUnlockEnabled$)\n        : this.biometricStateService.getBiometricUnlockEnabled(userId as UserId);\n    return await biometricUnlockPromise;\n  }\n\n  async getVaultTimeout(userId?: UserId): Promise<number> {\n    const vaultTimeout = await this.stateService.getVaultTimeout({ userId });\n    const policies = await firstValueFrom(\n      this.policyService.getAll$(PolicyType.MaximumVaultTimeout, userId),\n    );\n\n    if (policies?.length) {\n      // Remove negative values, and ensure it's smaller than maximum allowed value according to policy\n      let timeout = Math.min(vaultTimeout, policies[0].data.minutes);\n\n      if (vaultTimeout == null || timeout < 0) {\n        timeout = policies[0].data.minutes;\n      }\n\n      // TODO @jlf0dev: Can we move this somwhere else? Maybe add it to the initialization process?\n      // ( Apparently I'm the one that reviewed the original PR that added this :) )\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      if (vaultTimeout !== timeout) {\n        await this.stateService.setVaultTimeout(timeout, { userId });\n      }\n\n      return timeout;\n    }\n\n    return vaultTimeout;\n  }\n\n  vaultTimeoutAction$(userId?: UserId) {\n    return defer(() => this.getVaultTimeoutAction(userId));\n  }\n\n  async getVaultTimeoutAction(userId?: UserId): Promise<VaultTimeoutAction> {\n    const availableActions = await this.getAvailableVaultTimeoutActions();\n    if (availableActions.length === 1) {\n      return availableActions[0];\n    }\n\n    const vaultTimeoutAction = await this.stateService.getVaultTimeoutAction({ userId: userId });\n    const policies = await firstValueFrom(\n      this.policyService.getAll$(PolicyType.MaximumVaultTimeout, userId),\n    );\n\n    if (policies?.length) {\n      const action = policies[0].data.action;\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      if (action && vaultTimeoutAction !== action) {\n        await this.stateService.setVaultTimeoutAction(action, { userId: userId });\n      }\n      if (action && availableActions.includes(action)) {\n        return action;\n      }\n    }\n\n    if (vaultTimeoutAction == null) {\n      // Depends on whether or not the user has a master password\n      const defaultValue = (await this.userHasMasterPassword(userId))\n        ? VaultTimeoutAction.Lock\n        : VaultTimeoutAction.LogOut;\n      // We really shouldn't need to set the value here, but multiple services relies on this value being correct.\n      await this.stateService.setVaultTimeoutAction(defaultValue, { userId: userId });\n      return defaultValue;\n    }\n\n    return vaultTimeoutAction === VaultTimeoutAction.LogOut\n      ? VaultTimeoutAction.LogOut\n      : VaultTimeoutAction.Lock;\n  }\n\n  private async getAvailableVaultTimeoutActions(userId?: string): Promise<VaultTimeoutAction[]> {\n    const availableActions = [VaultTimeoutAction.LogOut];\n\n    const canLock =\n      (await this.userHasMasterPassword(userId)) ||\n      (await this.isPinLockSet(userId)) !== \"DISABLED\" ||\n      (await this.isBiometricLockSet(userId));\n\n    if (canLock) {\n      availableActions.push(VaultTimeoutAction.Lock);\n    }\n\n    return availableActions;\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setEverBeenUnlocked(false, { userId: userId });\n    await this.cryptoService.clearPinKeys(userId);\n  }\n\n  private async userHasMasterPassword(userId: string): Promise<boolean> {\n    if (userId) {\n      const decryptionOptions = await firstValueFrom(\n        this.userDecryptionOptionsService.userDecryptionOptionsById$(userId),\n      );\n\n      if (decryptionOptions?.hasMasterPassword != undefined) {\n        return decryptionOptions.hasMasterPassword;\n      }\n    }\n    return await firstValueFrom(this.userDecryptionOptionsService.hasMasterPassword$);\n  }\n}\n","import { PolicyEvaluator } from \"../abstractions/policy-evaluator.abstraction\";\n\nimport { PasswordGenerationOptions } from \"./password-generation-options\";\nimport { PasswordGeneratorPolicy } from \"./password-generator-policy\";\n\nfunction initializeBoundaries() {\n  const length = Object.freeze({\n    min: 5,\n    max: 128,\n  });\n\n  const minDigits = Object.freeze({\n    min: 0,\n    max: 9,\n  });\n\n  const minSpecialCharacters = Object.freeze({\n    min: 0,\n    max: 9,\n  });\n\n  return Object.freeze({\n    length,\n    minDigits,\n    minSpecialCharacters,\n  });\n}\n\n/** Immutable default boundaries for password generation.\n * These are used when the policy does not override a value.\n */\nexport const DefaultBoundaries = initializeBoundaries();\n\ntype Boundary = {\n  readonly min: number;\n  readonly max: number;\n};\n\n/** Enforces policy for password generation.\n */\nexport class PasswordGeneratorOptionsEvaluator\n  implements PolicyEvaluator<PasswordGeneratorPolicy, PasswordGenerationOptions>\n{\n  // This design is not ideal, but it is a step towards a more robust password\n  // generator. Ideally, `sanitize` would be implemented on an options class,\n  // and `applyPolicy` would be implemented on a policy class, \"mise en place\".\n  //\n  // The current design of the password generator, unfortunately, would require\n  // a substantial rewrite to make this feasible. Hopefully this change can be\n  // applied when the password generator is ported to rust.\n\n  /** Boundaries for the password length. This is always large enough\n   * to accommodate the minimum number of digits and special characters.\n   */\n  readonly length: Boundary;\n\n  /** Boundaries for the minimum number of digits allowed in the password.\n   */\n  readonly minDigits: Boundary;\n\n  /** Boundaries for the minimum number of special characters allowed\n   *  in the password.\n   */\n  readonly minSpecialCharacters: Boundary;\n\n  /** Policy applied by the evaluator.\n   */\n  readonly policy: PasswordGeneratorPolicy;\n\n  /** Instantiates the evaluator.\n   * @param policy The policy applied by the evaluator. When this conflicts with\n   *               the defaults, the policy takes precedence.\n   */\n  constructor(policy: PasswordGeneratorPolicy) {\n    function createBoundary(value: number, defaultBoundary: Boundary): Boundary {\n      const boundary = {\n        min: Math.max(defaultBoundary.min, value),\n        max: Math.max(defaultBoundary.max, value),\n      };\n\n      return boundary;\n    }\n\n    this.policy = structuredClone(policy);\n    this.minDigits = createBoundary(policy.numberCount, DefaultBoundaries.minDigits);\n    this.minSpecialCharacters = createBoundary(\n      policy.specialCount,\n      DefaultBoundaries.minSpecialCharacters,\n    );\n\n    // the overall length should be at least as long as the sum of the minimums\n    const minConsistentLength = this.minDigits.min + this.minSpecialCharacters.min;\n    const minPolicyLength = policy.minLength > 0 ? policy.minLength : DefaultBoundaries.length.min;\n    const minLength = Math.max(minPolicyLength, minConsistentLength, DefaultBoundaries.length.min);\n\n    this.length = {\n      min: minLength,\n      max: Math.max(DefaultBoundaries.length.max, minLength),\n    };\n  }\n\n  /** {@link PolicyEvaluator.policyInEffect} */\n  get policyInEffect(): boolean {\n    const policies = [\n      this.policy.useUppercase,\n      this.policy.useLowercase,\n      this.policy.useNumbers,\n      this.policy.useSpecial,\n      this.policy.minLength > DefaultBoundaries.length.min,\n      this.policy.numberCount > DefaultBoundaries.minDigits.min,\n      this.policy.specialCount > DefaultBoundaries.minSpecialCharacters.min,\n    ];\n\n    return policies.includes(true);\n  }\n\n  /** {@link PolicyEvaluator.applyPolicy} */\n  applyPolicy(options: PasswordGenerationOptions): PasswordGenerationOptions {\n    function fitToBounds(value: number, boundaries: Boundary) {\n      const { min, max } = boundaries;\n\n      const withUpperBound = Math.min(value || 0, max);\n      const withLowerBound = Math.max(withUpperBound, min);\n\n      return withLowerBound;\n    }\n\n    // apply policy overrides\n    const uppercase = this.policy.useUppercase || options.uppercase || false;\n    const lowercase = this.policy.useLowercase || options.lowercase || false;\n\n    // these overrides can cascade numeric fields to boolean fields\n    const number = this.policy.useNumbers || options.number || options.minNumber > 0;\n    const special = this.policy.useSpecial || options.special || options.minSpecial > 0;\n\n    // apply boundaries; the boundaries can cascade boolean fields to numeric fields\n    const length = fitToBounds(options.length, this.length);\n    const minNumber = fitToBounds(options.minNumber, this.minDigits);\n    const minSpecial = fitToBounds(options.minSpecial, this.minSpecialCharacters);\n\n    return {\n      ...options,\n      length,\n      uppercase,\n      lowercase,\n      number,\n      minNumber,\n      special,\n      minSpecial,\n    };\n  }\n\n  /** {@link PolicyEvaluator.sanitize} */\n  sanitize(options: PasswordGenerationOptions): PasswordGenerationOptions {\n    function cascade(enabled: boolean, value: number): [boolean, number] {\n      const enabledResult = enabled ?? value > 0;\n      const valueResult = enabledResult ? value || 1 : 0;\n\n      return [enabledResult, valueResult];\n    }\n\n    const [lowercase, minLowercase] = cascade(options.lowercase, options.minLowercase);\n    const [uppercase, minUppercase] = cascade(options.uppercase, options.minUppercase);\n    const [number, minNumber] = cascade(options.number, options.minNumber);\n    const [special, minSpecial] = cascade(options.special, options.minSpecial);\n\n    // minimums can only increase the length\n    const minConsistentLength = minLowercase + minUppercase + minNumber + minSpecial;\n    const minLength = Math.max(minConsistentLength, this.length.min);\n    const length = Math.max(options.length ?? minLength, minLength);\n\n    return {\n      ...options,\n      length,\n      minLength,\n      lowercase,\n      minLowercase,\n      uppercase,\n      minUppercase,\n      number,\n      minNumber,\n      special,\n      minSpecial,\n    };\n  }\n}\n","import { DefaultBoundaries } from \"./password-generator-options-evaluator\";\n\n/** Request format for password credential generation.\n *  All members of this type may be `undefined` when the user is\n *  generating a passphrase.\n *\n * @remarks The name of this type is a bit of a misnomer. This type\n *          it is used with the \"password generator\" types. The name\n *          `PasswordGeneratorOptions` is already in use by legacy code.\n */\nexport type PasswordGenerationOptions = {\n  /** The length of the password selected by the user */\n  length?: number;\n\n  /** The minimum length of the password. This defaults to 5, and increases\n   * to ensure `minLength` is at least as large as the sum of the other minimums.\n   */\n  minLength?: number;\n\n  /** `true` when ambiguous characters may be included in the output.\n   *  `false` when ambiguous characters should not be included in the output.\n   */\n  ambiguous?: boolean;\n\n  /** `true` when uppercase ASCII characters should be included in the output\n   * This value defaults to `false.\n   */\n  uppercase?: boolean;\n\n  /** The minimum number of uppercase characters to include in the output.\n   *  The value is ignored when `uppercase` is `false`.\n   *  The value defaults to 1 when `uppercase` is `true`.\n   */\n  minUppercase?: number;\n\n  /** `true` when lowercase ASCII characters should be included in the output.\n   * This value defaults to `false`.\n   */\n  lowercase?: boolean;\n\n  /** The minimum number of lowercase characters to include in the output.\n   * The value defaults to 1 when `lowercase` is `true`.\n   * The value defaults to 0 when `lowercase` is `false`.\n   */\n  minLowercase?: number;\n\n  /** Whether or not to include ASCII digits in the output\n   * This value defaults to `true` when `minNumber` is at least 1.\n   * This value defaults to `false` when `minNumber` is less than 1.\n   */\n  number?: boolean;\n\n  /** The minimum number of digits to include in the output.\n   * The value defaults to 1 when `number` is `true`.\n   * The value defaults to 0 when `number` is `false`.\n   */\n  minNumber?: number;\n\n  /** Whether or not to include special characters in the output.\n   * This value defaults to `true` when `minSpecial` is at least 1.\n   * This value defaults to `false` when `minSpecial` is less than 1.\n   */\n  special?: boolean;\n\n  /** The minimum number of special characters to include in the output.\n   * This value defaults to 1 when `special` is `true`.\n   * This value defaults to 0 when `special` is `false`.\n   */\n  minSpecial?: number;\n};\n\n/** The default options for password generation. */\nexport const DefaultPasswordGenerationOptions: Partial<PasswordGenerationOptions> = Object.freeze({\n  length: 14,\n  minLength: DefaultBoundaries.length.min,\n  ambiguous: true,\n  uppercase: true,\n  lowercase: true,\n  number: true,\n  minNumber: 1,\n  special: false,\n  minSpecial: 0,\n});\n","import { GENERATOR_DISK, KeyDefinition } from \"../../platform/state\";\n\nimport { PassphraseGenerationOptions } from \"./passphrase/passphrase-generation-options\";\nimport { GeneratedPasswordHistory } from \"./password/generated-password-history\";\nimport { PasswordGenerationOptions } from \"./password/password-generation-options\";\nimport { CatchallGenerationOptions } from \"./username/catchall-generator-options\";\nimport { EffUsernameGenerationOptions } from \"./username/eff-username-generator-options\";\nimport {\n  ApiOptions,\n  EmailDomainOptions,\n  EmailPrefixOptions,\n  SelfHostedApiOptions,\n} from \"./username/options/forwarder-options\";\nimport { SubaddressGenerationOptions } from \"./username/subaddress-generator-options\";\n\n/** plaintext password generation options */\nexport const PASSWORD_SETTINGS = new KeyDefinition<PasswordGenerationOptions>(\n  GENERATOR_DISK,\n  \"passwordGeneratorSettings\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\n/** plaintext passphrase generation options */\nexport const PASSPHRASE_SETTINGS = new KeyDefinition<PassphraseGenerationOptions>(\n  GENERATOR_DISK,\n  \"passphraseGeneratorSettings\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\n/** plaintext username generation options */\nexport const EFF_USERNAME_SETTINGS = new KeyDefinition<EffUsernameGenerationOptions>(\n  GENERATOR_DISK,\n  \"effUsernameGeneratorSettings\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\n/** catchall email generation options */\nexport const CATCHALL_SETTINGS = new KeyDefinition<CatchallGenerationOptions>(\n  GENERATOR_DISK,\n  \"catchallGeneratorSettings\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\n/** email subaddress generation options */\nexport const SUBADDRESS_SETTINGS = new KeyDefinition<SubaddressGenerationOptions>(\n  GENERATOR_DISK,\n  \"subaddressGeneratorSettings\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\nexport const ADDY_IO_FORWARDER = new KeyDefinition<SelfHostedApiOptions & EmailDomainOptions>(\n  GENERATOR_DISK,\n  \"addyIoForwarder\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\nexport const DUCK_DUCK_GO_FORWARDER = new KeyDefinition<ApiOptions>(\n  GENERATOR_DISK,\n  \"duckDuckGoForwarder\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\nexport const FASTMAIL_FORWARDER = new KeyDefinition<ApiOptions & EmailPrefixOptions>(\n  GENERATOR_DISK,\n  \"fastmailForwarder\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\nexport const FIREFOX_RELAY_FORWARDER = new KeyDefinition<ApiOptions>(\n  GENERATOR_DISK,\n  \"firefoxRelayForwarder\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\nexport const FORWARD_EMAIL_FORWARDER = new KeyDefinition<ApiOptions & EmailDomainOptions>(\n  GENERATOR_DISK,\n  \"forwardEmailForwarder\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\nexport const SIMPLE_LOGIN_FORWARDER = new KeyDefinition<SelfHostedApiOptions>(\n  GENERATOR_DISK,\n  \"simpleLoginForwarder\",\n  {\n    deserializer: (value) => value,\n  },\n);\n\n/** encrypted password generation history */\nexport const ENCRYPTED_HISTORY = new KeyDefinition<GeneratedPasswordHistory>(\n  GENERATOR_DISK,\n  \"passwordGeneratorHistory\",\n  {\n    deserializer: (value) => value,\n  },\n);\n","/** Policy options enforced during password generation. */\nexport type PasswordGeneratorPolicy = {\n  /** The minimum length of generated passwords.\n   *  When this is less than or equal to zero, it is ignored.\n   *  If this is less than the total number of characters required by\n   *  the policy's other settings, then it is ignored.\n   */\n  minLength: number;\n\n  /** When this is true, an uppercase character must be part of\n   *  the generated password.\n   */\n  useUppercase: boolean;\n\n  /** When this is true, a lowercase character must be part of\n   *  the generated password.\n   */\n  useLowercase: boolean;\n\n  /** When this is true, at least one digit must be part of the generated\n   *  password.\n   */\n  useNumbers: boolean;\n\n  /** The quantity of digits to include in the generated password.\n   *  When this is less than or equal to zero, it is ignored.\n   */\n  numberCount: number;\n\n  /** When this is true, at least one digit must be part of the generated\n   *  password.\n   */\n  useSpecial: boolean;\n\n  /** The quantity of special characters to include in the generated\n   *  password. When this is less than or equal to zero, it is ignored.\n   */\n  specialCount: number;\n};\n\n/** The default options for password generation policy. */\nexport const DisabledPasswordGeneratorPolicy: PasswordGeneratorPolicy = Object.freeze({\n  minLength: 0,\n  useUppercase: false,\n  useLowercase: false,\n  useNumbers: false,\n  numberCount: 0,\n  useSpecial: false,\n  specialCount: 0,\n});\n","import Domain from \"../../../platform/models/domain/domain-base\";\n\n/** Enterprise policy for the password generator.\n * @see PolicyType.PasswordGenerator\n */\nexport class PasswordGeneratorPolicyOptions extends Domain {\n  /** The default kind of credential to generate */\n  defaultType: \"password\" | \"passphrase\" | \"\" = \"\";\n\n  /** The minimum length of generated passwords.\n   *  When this is less than or equal to zero, it is ignored.\n   *  If this is less than the total number of characters required by\n   *  the policy's other settings, then it is ignored.\n   *  This field is not used for passphrases.\n   */\n  minLength = 0;\n\n  /** When this is true, an uppercase character must be part of\n   *  the generated password.\n   *  This field is not used for passphrases.\n   */\n  useUppercase = false;\n\n  /** When this is true, a lowercase character must be part of\n   *  the generated password. This field is not used for passphrases.\n   */\n  useLowercase = false;\n\n  /** When this is true, at least one digit must be part of the generated\n   *  password. This field is not used for passphrases.\n   */\n  useNumbers = false;\n\n  /** The quantity of digits to include in the generated password.\n   *  When this is less than or equal to zero, it is ignored.\n   *  This field is not used for passphrases.\n   */\n  numberCount = 0;\n\n  /** When this is true, at least one digit must be part of the generated\n   *  password. This field is not used for passphrases.\n   */\n  useSpecial = false;\n\n  /** The quantity of special characters to include in the generated\n   *  password. When this is less than or equal to zero, it is ignored.\n   *  This field is not used for passphrases.\n   */\n  specialCount = 0;\n\n  /** The minimum number of words required by generated passphrases.\n   *  This field is not used for passwords.\n   */\n  minNumberWords = 0;\n\n  /** When this is true, the first letter of each word in the passphrase\n   *  is capitalized. This field is not used for passwords.\n   */\n  capitalize = false;\n\n  /** When this is true, a number is included within the passphrase.\n   *  This field is not used for passwords.\n   */\n  includeNumber = false;\n\n  /** Checks whether the policy affects the password generator.\n   * @returns True if at least one password or passphrase requirement has been set.\n   * If it returns False, then no requirements have been set and the policy should\n   * not be enforced.\n   */\n  inEffect() {\n    return (\n      this.defaultType !== \"\" ||\n      this.minLength > 0 ||\n      this.numberCount > 0 ||\n      this.specialCount > 0 ||\n      this.useUppercase ||\n      this.useLowercase ||\n      this.useNumbers ||\n      this.useSpecial ||\n      this.minNumberWords > 0 ||\n      this.capitalize ||\n      this.includeNumber\n    );\n  }\n\n  /** Creates a copy of the policy.\n   */\n  clone() {\n    const policy = new PasswordGeneratorPolicyOptions();\n    Object.assign(policy, this);\n    return policy;\n  }\n}\n","// EFF's Long Wordlist from https://www.eff.org/dice\nexport const EFFLongWordList = [\n  \"abacus\",\n  \"abdomen\",\n  \"abdominal\",\n  \"abide\",\n  \"abiding\",\n  \"ability\",\n  \"ablaze\",\n  \"able\",\n  \"abnormal\",\n  \"abrasion\",\n  \"abrasive\",\n  \"abreast\",\n  \"abridge\",\n  \"abroad\",\n  \"abruptly\",\n  \"absence\",\n  \"absentee\",\n  \"absently\",\n  \"absinthe\",\n  \"absolute\",\n  \"absolve\",\n  \"abstain\",\n  \"abstract\",\n  \"absurd\",\n  \"accent\",\n  \"acclaim\",\n  \"acclimate\",\n  \"accompany\",\n  \"account\",\n  \"accuracy\",\n  \"accurate\",\n  \"accustom\",\n  \"acetone\",\n  \"achiness\",\n  \"aching\",\n  \"acid\",\n  \"acorn\",\n  \"acquaint\",\n  \"acquire\",\n  \"acre\",\n  \"acrobat\",\n  \"acronym\",\n  \"acting\",\n  \"action\",\n  \"activate\",\n  \"activator\",\n  \"active\",\n  \"activism\",\n  \"activist\",\n  \"activity\",\n  \"actress\",\n  \"acts\",\n  \"acutely\",\n  \"acuteness\",\n  \"aeration\",\n  \"aerobics\",\n  \"aerosol\",\n  \"aerospace\",\n  \"afar\",\n  \"affair\",\n  \"affected\",\n  \"affecting\",\n  \"affection\",\n  \"affidavit\",\n  \"affiliate\",\n  \"affirm\",\n  \"affix\",\n  \"afflicted\",\n  \"affluent\",\n  \"afford\",\n  \"affront\",\n  \"aflame\",\n  \"afloat\",\n  \"aflutter\",\n  \"afoot\",\n  \"afraid\",\n  \"afterglow\",\n  \"afterlife\",\n  \"aftermath\",\n  \"aftermost\",\n  \"afternoon\",\n  \"aged\",\n  \"ageless\",\n  \"agency\",\n  \"agenda\",\n  \"agent\",\n  \"aggregate\",\n  \"aghast\",\n  \"agile\",\n  \"agility\",\n  \"aging\",\n  \"agnostic\",\n  \"agonize\",\n  \"agonizing\",\n  \"agony\",\n  \"agreeable\",\n  \"agreeably\",\n  \"agreed\",\n  \"agreeing\",\n  \"agreement\",\n  \"aground\",\n  \"ahead\",\n  \"ahoy\",\n  \"aide\",\n  \"aids\",\n  \"aim\",\n  \"ajar\",\n  \"alabaster\",\n  \"alarm\",\n  \"albatross\",\n  \"album\",\n  \"alfalfa\",\n  \"algebra\",\n  \"algorithm\",\n  \"alias\",\n  \"alibi\",\n  \"alienable\",\n  \"alienate\",\n  \"aliens\",\n  \"alike\",\n  \"alive\",\n  \"alkaline\",\n  \"alkalize\",\n  \"almanac\",\n  \"almighty\",\n  \"almost\",\n  \"aloe\",\n  \"aloft\",\n  \"aloha\",\n  \"alone\",\n  \"alongside\",\n  \"aloof\",\n  \"alphabet\",\n  \"alright\",\n  \"although\",\n  \"altitude\",\n  \"alto\",\n  \"aluminum\",\n  \"alumni\",\n  \"always\",\n  \"amaretto\",\n  \"amaze\",\n  \"amazingly\",\n  \"amber\",\n  \"ambiance\",\n  \"ambiguity\",\n  \"ambiguous\",\n  \"ambition\",\n  \"ambitious\",\n  \"ambulance\",\n  \"ambush\",\n  \"amendable\",\n  \"amendment\",\n  \"amends\",\n  \"amenity\",\n  \"amiable\",\n  \"amicably\",\n  \"amid\",\n  \"amigo\",\n  \"amino\",\n  \"amiss\",\n  \"ammonia\",\n  \"ammonium\",\n  \"amnesty\",\n  \"amniotic\",\n  \"among\",\n  \"amount\",\n  \"amperage\",\n  \"ample\",\n  \"amplifier\",\n  \"amplify\",\n  \"amply\",\n  \"amuck\",\n  \"amulet\",\n  \"amusable\",\n  \"amused\",\n  \"amusement\",\n  \"amuser\",\n  \"amusing\",\n  \"anaconda\",\n  \"anaerobic\",\n  \"anagram\",\n  \"anatomist\",\n  \"anatomy\",\n  \"anchor\",\n  \"anchovy\",\n  \"ancient\",\n  \"android\",\n  \"anemia\",\n  \"anemic\",\n  \"aneurism\",\n  \"anew\",\n  \"angelfish\",\n  \"angelic\",\n  \"anger\",\n  \"angled\",\n  \"angler\",\n  \"angles\",\n  \"angling\",\n  \"angrily\",\n  \"angriness\",\n  \"anguished\",\n  \"angular\",\n  \"animal\",\n  \"animate\",\n  \"animating\",\n  \"animation\",\n  \"animator\",\n  \"anime\",\n  \"animosity\",\n  \"ankle\",\n  \"annex\",\n  \"annotate\",\n  \"announcer\",\n  \"annoying\",\n  \"annually\",\n  \"annuity\",\n  \"anointer\",\n  \"another\",\n  \"answering\",\n  \"antacid\",\n  \"antarctic\",\n  \"anteater\",\n  \"antelope\",\n  \"antennae\",\n  \"anthem\",\n  \"anthill\",\n  \"anthology\",\n  \"antibody\",\n  \"antics\",\n  \"antidote\",\n  \"antihero\",\n  \"antiquely\",\n  \"antiques\",\n  \"antiquity\",\n  \"antirust\",\n  \"antitoxic\",\n  \"antitrust\",\n  \"antiviral\",\n  \"antivirus\",\n  \"antler\",\n  \"antonym\",\n  \"antsy\",\n  \"anvil\",\n  \"anybody\",\n  \"anyhow\",\n  \"anymore\",\n  \"anyone\",\n  \"anyplace\",\n  \"anything\",\n  \"anytime\",\n  \"anyway\",\n  \"anywhere\",\n  \"aorta\",\n  \"apache\",\n  \"apostle\",\n  \"appealing\",\n  \"appear\",\n  \"appease\",\n  \"appeasing\",\n  \"appendage\",\n  \"appendix\",\n  \"appetite\",\n  \"appetizer\",\n  \"applaud\",\n  \"applause\",\n  \"apple\",\n  \"appliance\",\n  \"applicant\",\n  \"applied\",\n  \"apply\",\n  \"appointee\",\n  \"appraisal\",\n  \"appraiser\",\n  \"apprehend\",\n  \"approach\",\n  \"approval\",\n  \"approve\",\n  \"apricot\",\n  \"april\",\n  \"apron\",\n  \"aptitude\",\n  \"aptly\",\n  \"aqua\",\n  \"aqueduct\",\n  \"arbitrary\",\n  \"arbitrate\",\n  \"ardently\",\n  \"area\",\n  \"arena\",\n  \"arguable\",\n  \"arguably\",\n  \"argue\",\n  \"arise\",\n  \"armadillo\",\n  \"armband\",\n  \"armchair\",\n  \"armed\",\n  \"armful\",\n  \"armhole\",\n  \"arming\",\n  \"armless\",\n  \"armoire\",\n  \"armored\",\n  \"armory\",\n  \"armrest\",\n  \"army\",\n  \"aroma\",\n  \"arose\",\n  \"around\",\n  \"arousal\",\n  \"arrange\",\n  \"array\",\n  \"arrest\",\n  \"arrival\",\n  \"arrive\",\n  \"arrogance\",\n  \"arrogant\",\n  \"arson\",\n  \"art\",\n  \"ascend\",\n  \"ascension\",\n  \"ascent\",\n  \"ascertain\",\n  \"ashamed\",\n  \"ashen\",\n  \"ashes\",\n  \"ashy\",\n  \"aside\",\n  \"askew\",\n  \"asleep\",\n  \"asparagus\",\n  \"aspect\",\n  \"aspirate\",\n  \"aspire\",\n  \"aspirin\",\n  \"astonish\",\n  \"astound\",\n  \"astride\",\n  \"astrology\",\n  \"astronaut\",\n  \"astronomy\",\n  \"astute\",\n  \"atlantic\",\n  \"atlas\",\n  \"atom\",\n  \"atonable\",\n  \"atop\",\n  \"atrium\",\n  \"atrocious\",\n  \"atrophy\",\n  \"attach\",\n  \"attain\",\n  \"attempt\",\n  \"attendant\",\n  \"attendee\",\n  \"attention\",\n  \"attentive\",\n  \"attest\",\n  \"attic\",\n  \"attire\",\n  \"attitude\",\n  \"attractor\",\n  \"attribute\",\n  \"atypical\",\n  \"auction\",\n  \"audacious\",\n  \"audacity\",\n  \"audible\",\n  \"audibly\",\n  \"audience\",\n  \"audio\",\n  \"audition\",\n  \"augmented\",\n  \"august\",\n  \"authentic\",\n  \"author\",\n  \"autism\",\n  \"autistic\",\n  \"autograph\",\n  \"automaker\",\n  \"automated\",\n  \"automatic\",\n  \"autopilot\",\n  \"available\",\n  \"avalanche\",\n  \"avatar\",\n  \"avenge\",\n  \"avenging\",\n  \"avenue\",\n  \"average\",\n  \"aversion\",\n  \"avert\",\n  \"aviation\",\n  \"aviator\",\n  \"avid\",\n  \"avoid\",\n  \"await\",\n  \"awaken\",\n  \"award\",\n  \"aware\",\n  \"awhile\",\n  \"awkward\",\n  \"awning\",\n  \"awoke\",\n  \"awry\",\n  \"axis\",\n  \"babble\",\n  \"babbling\",\n  \"babied\",\n  \"baboon\",\n  \"backache\",\n  \"backboard\",\n  \"backboned\",\n  \"backdrop\",\n  \"backed\",\n  \"backer\",\n  \"backfield\",\n  \"backfire\",\n  \"backhand\",\n  \"backing\",\n  \"backlands\",\n  \"backlash\",\n  \"backless\",\n  \"backlight\",\n  \"backlit\",\n  \"backlog\",\n  \"backpack\",\n  \"backpedal\",\n  \"backrest\",\n  \"backroom\",\n  \"backshift\",\n  \"backside\",\n  \"backslid\",\n  \"backspace\",\n  \"backspin\",\n  \"backstab\",\n  \"backstage\",\n  \"backtalk\",\n  \"backtrack\",\n  \"backup\",\n  \"backward\",\n  \"backwash\",\n  \"backwater\",\n  \"backyard\",\n  \"bacon\",\n  \"bacteria\",\n  \"bacterium\",\n  \"badass\",\n  \"badge\",\n  \"badland\",\n  \"badly\",\n  \"badness\",\n  \"baffle\",\n  \"baffling\",\n  \"bagel\",\n  \"bagful\",\n  \"baggage\",\n  \"bagged\",\n  \"baggie\",\n  \"bagginess\",\n  \"bagging\",\n  \"baggy\",\n  \"bagpipe\",\n  \"baguette\",\n  \"baked\",\n  \"bakery\",\n  \"bakeshop\",\n  \"baking\",\n  \"balance\",\n  \"balancing\",\n  \"balcony\",\n  \"balmy\",\n  \"balsamic\",\n  \"bamboo\",\n  \"banana\",\n  \"banish\",\n  \"banister\",\n  \"banjo\",\n  \"bankable\",\n  \"bankbook\",\n  \"banked\",\n  \"banker\",\n  \"banking\",\n  \"banknote\",\n  \"bankroll\",\n  \"banner\",\n  \"bannister\",\n  \"banshee\",\n  \"banter\",\n  \"barbecue\",\n  \"barbed\",\n  \"barbell\",\n  \"barber\",\n  \"barcode\",\n  \"barge\",\n  \"bargraph\",\n  \"barista\",\n  \"baritone\",\n  \"barley\",\n  \"barmaid\",\n  \"barman\",\n  \"barn\",\n  \"barometer\",\n  \"barrack\",\n  \"barracuda\",\n  \"barrel\",\n  \"barrette\",\n  \"barricade\",\n  \"barrier\",\n  \"barstool\",\n  \"bartender\",\n  \"barterer\",\n  \"bash\",\n  \"basically\",\n  \"basics\",\n  \"basil\",\n  \"basin\",\n  \"basis\",\n  \"basket\",\n  \"batboy\",\n  \"batch\",\n  \"bath\",\n  \"baton\",\n  \"bats\",\n  \"battalion\",\n  \"battered\",\n  \"battering\",\n  \"battery\",\n  \"batting\",\n  \"battle\",\n  \"bauble\",\n  \"bazooka\",\n  \"blabber\",\n  \"bladder\",\n  \"blade\",\n  \"blah\",\n  \"blame\",\n  \"blaming\",\n  \"blanching\",\n  \"blandness\",\n  \"blank\",\n  \"blaspheme\",\n  \"blasphemy\",\n  \"blast\",\n  \"blatancy\",\n  \"blatantly\",\n  \"blazer\",\n  \"blazing\",\n  \"bleach\",\n  \"bleak\",\n  \"bleep\",\n  \"blemish\",\n  \"blend\",\n  \"bless\",\n  \"blighted\",\n  \"blimp\",\n  \"bling\",\n  \"blinked\",\n  \"blinker\",\n  \"blinking\",\n  \"blinks\",\n  \"blip\",\n  \"blissful\",\n  \"blitz\",\n  \"blizzard\",\n  \"bloated\",\n  \"bloating\",\n  \"blob\",\n  \"blog\",\n  \"bloomers\",\n  \"blooming\",\n  \"blooper\",\n  \"blot\",\n  \"blouse\",\n  \"blubber\",\n  \"bluff\",\n  \"bluish\",\n  \"blunderer\",\n  \"blunt\",\n  \"blurb\",\n  \"blurred\",\n  \"blurry\",\n  \"blurt\",\n  \"blush\",\n  \"blustery\",\n  \"boaster\",\n  \"boastful\",\n  \"boasting\",\n  \"boat\",\n  \"bobbed\",\n  \"bobbing\",\n  \"bobble\",\n  \"bobcat\",\n  \"bobsled\",\n  \"bobtail\",\n  \"bodacious\",\n  \"body\",\n  \"bogged\",\n  \"boggle\",\n  \"bogus\",\n  \"boil\",\n  \"bok\",\n  \"bolster\",\n  \"bolt\",\n  \"bonanza\",\n  \"bonded\",\n  \"bonding\",\n  \"bondless\",\n  \"boned\",\n  \"bonehead\",\n  \"boneless\",\n  \"bonelike\",\n  \"boney\",\n  \"bonfire\",\n  \"bonnet\",\n  \"bonsai\",\n  \"bonus\",\n  \"bony\",\n  \"boogeyman\",\n  \"boogieman\",\n  \"book\",\n  \"boondocks\",\n  \"booted\",\n  \"booth\",\n  \"bootie\",\n  \"booting\",\n  \"bootlace\",\n  \"bootleg\",\n  \"boots\",\n  \"boozy\",\n  \"borax\",\n  \"boring\",\n  \"borough\",\n  \"borrower\",\n  \"borrowing\",\n  \"boss\",\n  \"botanical\",\n  \"botanist\",\n  \"botany\",\n  \"botch\",\n  \"both\",\n  \"bottle\",\n  \"bottling\",\n  \"bottom\",\n  \"bounce\",\n  \"bouncing\",\n  \"bouncy\",\n  \"bounding\",\n  \"boundless\",\n  \"bountiful\",\n  \"bovine\",\n  \"boxcar\",\n  \"boxer\",\n  \"boxing\",\n  \"boxlike\",\n  \"boxy\",\n  \"breach\",\n  \"breath\",\n  \"breeches\",\n  \"breeching\",\n  \"breeder\",\n  \"breeding\",\n  \"breeze\",\n  \"breezy\",\n  \"brethren\",\n  \"brewery\",\n  \"brewing\",\n  \"briar\",\n  \"bribe\",\n  \"brick\",\n  \"bride\",\n  \"bridged\",\n  \"brigade\",\n  \"bright\",\n  \"brilliant\",\n  \"brim\",\n  \"bring\",\n  \"brink\",\n  \"brisket\",\n  \"briskly\",\n  \"briskness\",\n  \"bristle\",\n  \"brittle\",\n  \"broadband\",\n  \"broadcast\",\n  \"broaden\",\n  \"broadly\",\n  \"broadness\",\n  \"broadside\",\n  \"broadways\",\n  \"broiler\",\n  \"broiling\",\n  \"broken\",\n  \"broker\",\n  \"bronchial\",\n  \"bronco\",\n  \"bronze\",\n  \"bronzing\",\n  \"brook\",\n  \"broom\",\n  \"brought\",\n  \"browbeat\",\n  \"brownnose\",\n  \"browse\",\n  \"browsing\",\n  \"bruising\",\n  \"brunch\",\n  \"brunette\",\n  \"brunt\",\n  \"brush\",\n  \"brussels\",\n  \"brute\",\n  \"brutishly\",\n  \"bubble\",\n  \"bubbling\",\n  \"bubbly\",\n  \"buccaneer\",\n  \"bucked\",\n  \"bucket\",\n  \"buckle\",\n  \"buckshot\",\n  \"buckskin\",\n  \"bucktooth\",\n  \"buckwheat\",\n  \"buddhism\",\n  \"buddhist\",\n  \"budding\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"buffed\",\n  \"buffer\",\n  \"buffing\",\n  \"buffoon\",\n  \"buggy\",\n  \"bulb\",\n  \"bulge\",\n  \"bulginess\",\n  \"bulgur\",\n  \"bulk\",\n  \"bulldog\",\n  \"bulldozer\",\n  \"bullfight\",\n  \"bullfrog\",\n  \"bullhorn\",\n  \"bullion\",\n  \"bullish\",\n  \"bullpen\",\n  \"bullring\",\n  \"bullseye\",\n  \"bullwhip\",\n  \"bully\",\n  \"bunch\",\n  \"bundle\",\n  \"bungee\",\n  \"bunion\",\n  \"bunkbed\",\n  \"bunkhouse\",\n  \"bunkmate\",\n  \"bunny\",\n  \"bunt\",\n  \"busboy\",\n  \"bush\",\n  \"busily\",\n  \"busload\",\n  \"bust\",\n  \"busybody\",\n  \"buzz\",\n  \"cabana\",\n  \"cabbage\",\n  \"cabbie\",\n  \"cabdriver\",\n  \"cable\",\n  \"caboose\",\n  \"cache\",\n  \"cackle\",\n  \"cacti\",\n  \"cactus\",\n  \"caddie\",\n  \"caddy\",\n  \"cadet\",\n  \"cadillac\",\n  \"cadmium\",\n  \"cage\",\n  \"cahoots\",\n  \"cake\",\n  \"calamari\",\n  \"calamity\",\n  \"calcium\",\n  \"calculate\",\n  \"calculus\",\n  \"caliber\",\n  \"calibrate\",\n  \"calm\",\n  \"caloric\",\n  \"calorie\",\n  \"calzone\",\n  \"camcorder\",\n  \"cameo\",\n  \"camera\",\n  \"camisole\",\n  \"camper\",\n  \"campfire\",\n  \"camping\",\n  \"campsite\",\n  \"campus\",\n  \"canal\",\n  \"canary\",\n  \"cancel\",\n  \"candied\",\n  \"candle\",\n  \"candy\",\n  \"cane\",\n  \"canine\",\n  \"canister\",\n  \"cannabis\",\n  \"canned\",\n  \"canning\",\n  \"cannon\",\n  \"cannot\",\n  \"canola\",\n  \"canon\",\n  \"canopener\",\n  \"canopy\",\n  \"canteen\",\n  \"canyon\",\n  \"capable\",\n  \"capably\",\n  \"capacity\",\n  \"cape\",\n  \"capillary\",\n  \"capital\",\n  \"capitol\",\n  \"capped\",\n  \"capricorn\",\n  \"capsize\",\n  \"capsule\",\n  \"caption\",\n  \"captivate\",\n  \"captive\",\n  \"captivity\",\n  \"capture\",\n  \"caramel\",\n  \"carat\",\n  \"caravan\",\n  \"carbon\",\n  \"cardboard\",\n  \"carded\",\n  \"cardiac\",\n  \"cardigan\",\n  \"cardinal\",\n  \"cardstock\",\n  \"carefully\",\n  \"caregiver\",\n  \"careless\",\n  \"caress\",\n  \"caretaker\",\n  \"cargo\",\n  \"caring\",\n  \"carless\",\n  \"carload\",\n  \"carmaker\",\n  \"carnage\",\n  \"carnation\",\n  \"carnival\",\n  \"carnivore\",\n  \"carol\",\n  \"carpenter\",\n  \"carpentry\",\n  \"carpool\",\n  \"carport\",\n  \"carried\",\n  \"carrot\",\n  \"carrousel\",\n  \"carry\",\n  \"cartel\",\n  \"cartload\",\n  \"carton\",\n  \"cartoon\",\n  \"cartridge\",\n  \"cartwheel\",\n  \"carve\",\n  \"carving\",\n  \"carwash\",\n  \"cascade\",\n  \"case\",\n  \"cash\",\n  \"casing\",\n  \"casino\",\n  \"casket\",\n  \"cassette\",\n  \"casually\",\n  \"casualty\",\n  \"catacomb\",\n  \"catalog\",\n  \"catalyst\",\n  \"catalyze\",\n  \"catapult\",\n  \"cataract\",\n  \"catatonic\",\n  \"catcall\",\n  \"catchable\",\n  \"catcher\",\n  \"catching\",\n  \"catchy\",\n  \"caterer\",\n  \"catering\",\n  \"catfight\",\n  \"catfish\",\n  \"cathedral\",\n  \"cathouse\",\n  \"catlike\",\n  \"catnap\",\n  \"catnip\",\n  \"catsup\",\n  \"cattail\",\n  \"cattishly\",\n  \"cattle\",\n  \"catty\",\n  \"catwalk\",\n  \"caucasian\",\n  \"caucus\",\n  \"causal\",\n  \"causation\",\n  \"cause\",\n  \"causing\",\n  \"cauterize\",\n  \"caution\",\n  \"cautious\",\n  \"cavalier\",\n  \"cavalry\",\n  \"caviar\",\n  \"cavity\",\n  \"cedar\",\n  \"celery\",\n  \"celestial\",\n  \"celibacy\",\n  \"celibate\",\n  \"celtic\",\n  \"cement\",\n  \"census\",\n  \"ceramics\",\n  \"ceremony\",\n  \"certainly\",\n  \"certainty\",\n  \"certified\",\n  \"certify\",\n  \"cesarean\",\n  \"cesspool\",\n  \"chafe\",\n  \"chaffing\",\n  \"chain\",\n  \"chair\",\n  \"chalice\",\n  \"challenge\",\n  \"chamber\",\n  \"chamomile\",\n  \"champion\",\n  \"chance\",\n  \"change\",\n  \"channel\",\n  \"chant\",\n  \"chaos\",\n  \"chaperone\",\n  \"chaplain\",\n  \"chapped\",\n  \"chaps\",\n  \"chapter\",\n  \"character\",\n  \"charbroil\",\n  \"charcoal\",\n  \"charger\",\n  \"charging\",\n  \"chariot\",\n  \"charity\",\n  \"charm\",\n  \"charred\",\n  \"charter\",\n  \"charting\",\n  \"chase\",\n  \"chasing\",\n  \"chaste\",\n  \"chastise\",\n  \"chastity\",\n  \"chatroom\",\n  \"chatter\",\n  \"chatting\",\n  \"chatty\",\n  \"cheating\",\n  \"cheddar\",\n  \"cheek\",\n  \"cheer\",\n  \"cheese\",\n  \"cheesy\",\n  \"chef\",\n  \"chemicals\",\n  \"chemist\",\n  \"chemo\",\n  \"cherisher\",\n  \"cherub\",\n  \"chess\",\n  \"chest\",\n  \"chevron\",\n  \"chevy\",\n  \"chewable\",\n  \"chewer\",\n  \"chewing\",\n  \"chewy\",\n  \"chief\",\n  \"chihuahua\",\n  \"childcare\",\n  \"childhood\",\n  \"childish\",\n  \"childless\",\n  \"childlike\",\n  \"chili\",\n  \"chill\",\n  \"chimp\",\n  \"chip\",\n  \"chirping\",\n  \"chirpy\",\n  \"chitchat\",\n  \"chivalry\",\n  \"chive\",\n  \"chloride\",\n  \"chlorine\",\n  \"choice\",\n  \"chokehold\",\n  \"choking\",\n  \"chomp\",\n  \"chooser\",\n  \"choosing\",\n  \"choosy\",\n  \"chop\",\n  \"chosen\",\n  \"chowder\",\n  \"chowtime\",\n  \"chrome\",\n  \"chubby\",\n  \"chuck\",\n  \"chug\",\n  \"chummy\",\n  \"chump\",\n  \"chunk\",\n  \"churn\",\n  \"chute\",\n  \"cider\",\n  \"cilantro\",\n  \"cinch\",\n  \"cinema\",\n  \"cinnamon\",\n  \"circle\",\n  \"circling\",\n  \"circular\",\n  \"circulate\",\n  \"circus\",\n  \"citable\",\n  \"citadel\",\n  \"citation\",\n  \"citizen\",\n  \"citric\",\n  \"citrus\",\n  \"city\",\n  \"civic\",\n  \"civil\",\n  \"clad\",\n  \"claim\",\n  \"clambake\",\n  \"clammy\",\n  \"clamor\",\n  \"clamp\",\n  \"clamshell\",\n  \"clang\",\n  \"clanking\",\n  \"clapped\",\n  \"clapper\",\n  \"clapping\",\n  \"clarify\",\n  \"clarinet\",\n  \"clarity\",\n  \"clash\",\n  \"clasp\",\n  \"class\",\n  \"clatter\",\n  \"clause\",\n  \"clavicle\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clear\",\n  \"cleat\",\n  \"cleaver\",\n  \"cleft\",\n  \"clench\",\n  \"clergyman\",\n  \"clerical\",\n  \"clerk\",\n  \"clever\",\n  \"clicker\",\n  \"client\",\n  \"climate\",\n  \"climatic\",\n  \"cling\",\n  \"clinic\",\n  \"clinking\",\n  \"clip\",\n  \"clique\",\n  \"cloak\",\n  \"clobber\",\n  \"clock\",\n  \"clone\",\n  \"cloning\",\n  \"closable\",\n  \"closure\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"clover\",\n  \"clubbed\",\n  \"clubbing\",\n  \"clubhouse\",\n  \"clump\",\n  \"clumsily\",\n  \"clumsy\",\n  \"clunky\",\n  \"clustered\",\n  \"clutch\",\n  \"clutter\",\n  \"coach\",\n  \"coagulant\",\n  \"coastal\",\n  \"coaster\",\n  \"coasting\",\n  \"coastland\",\n  \"coastline\",\n  \"coat\",\n  \"coauthor\",\n  \"cobalt\",\n  \"cobbler\",\n  \"cobweb\",\n  \"cocoa\",\n  \"coconut\",\n  \"cod\",\n  \"coeditor\",\n  \"coerce\",\n  \"coexist\",\n  \"coffee\",\n  \"cofounder\",\n  \"cognition\",\n  \"cognitive\",\n  \"cogwheel\",\n  \"coherence\",\n  \"coherent\",\n  \"cohesive\",\n  \"coil\",\n  \"coke\",\n  \"cola\",\n  \"cold\",\n  \"coleslaw\",\n  \"coliseum\",\n  \"collage\",\n  \"collapse\",\n  \"collar\",\n  \"collected\",\n  \"collector\",\n  \"collide\",\n  \"collie\",\n  \"collision\",\n  \"colonial\",\n  \"colonist\",\n  \"colonize\",\n  \"colony\",\n  \"colossal\",\n  \"colt\",\n  \"coma\",\n  \"come\",\n  \"comfort\",\n  \"comfy\",\n  \"comic\",\n  \"coming\",\n  \"comma\",\n  \"commence\",\n  \"commend\",\n  \"comment\",\n  \"commerce\",\n  \"commode\",\n  \"commodity\",\n  \"commodore\",\n  \"common\",\n  \"commotion\",\n  \"commute\",\n  \"commuting\",\n  \"compacted\",\n  \"compacter\",\n  \"compactly\",\n  \"compactor\",\n  \"companion\",\n  \"company\",\n  \"compare\",\n  \"compel\",\n  \"compile\",\n  \"comply\",\n  \"component\",\n  \"composed\",\n  \"composer\",\n  \"composite\",\n  \"compost\",\n  \"composure\",\n  \"compound\",\n  \"compress\",\n  \"comprised\",\n  \"computer\",\n  \"computing\",\n  \"comrade\",\n  \"concave\",\n  \"conceal\",\n  \"conceded\",\n  \"concept\",\n  \"concerned\",\n  \"concert\",\n  \"conch\",\n  \"concierge\",\n  \"concise\",\n  \"conclude\",\n  \"concrete\",\n  \"concur\",\n  \"condense\",\n  \"condiment\",\n  \"condition\",\n  \"condone\",\n  \"conducive\",\n  \"conductor\",\n  \"conduit\",\n  \"cone\",\n  \"confess\",\n  \"confetti\",\n  \"confidant\",\n  \"confident\",\n  \"confider\",\n  \"confiding\",\n  \"configure\",\n  \"confined\",\n  \"confining\",\n  \"confirm\",\n  \"conflict\",\n  \"conform\",\n  \"confound\",\n  \"confront\",\n  \"confused\",\n  \"confusing\",\n  \"confusion\",\n  \"congenial\",\n  \"congested\",\n  \"congrats\",\n  \"congress\",\n  \"conical\",\n  \"conjoined\",\n  \"conjure\",\n  \"conjuror\",\n  \"connected\",\n  \"connector\",\n  \"consensus\",\n  \"consent\",\n  \"console\",\n  \"consoling\",\n  \"consonant\",\n  \"constable\",\n  \"constant\",\n  \"constrain\",\n  \"constrict\",\n  \"construct\",\n  \"consult\",\n  \"consumer\",\n  \"consuming\",\n  \"contact\",\n  \"container\",\n  \"contempt\",\n  \"contend\",\n  \"contented\",\n  \"contently\",\n  \"contents\",\n  \"contest\",\n  \"context\",\n  \"contort\",\n  \"contour\",\n  \"contrite\",\n  \"control\",\n  \"contusion\",\n  \"convene\",\n  \"convent\",\n  \"copartner\",\n  \"cope\",\n  \"copied\",\n  \"copier\",\n  \"copilot\",\n  \"coping\",\n  \"copious\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"cork\",\n  \"cornball\",\n  \"cornbread\",\n  \"corncob\",\n  \"cornea\",\n  \"corned\",\n  \"corner\",\n  \"cornfield\",\n  \"cornflake\",\n  \"cornhusk\",\n  \"cornmeal\",\n  \"cornstalk\",\n  \"corny\",\n  \"coronary\",\n  \"coroner\",\n  \"corporal\",\n  \"corporate\",\n  \"corral\",\n  \"correct\",\n  \"corridor\",\n  \"corrode\",\n  \"corroding\",\n  \"corrosive\",\n  \"corsage\",\n  \"corset\",\n  \"cortex\",\n  \"cosigner\",\n  \"cosmetics\",\n  \"cosmic\",\n  \"cosmos\",\n  \"cosponsor\",\n  \"cost\",\n  \"cottage\",\n  \"cotton\",\n  \"couch\",\n  \"cough\",\n  \"could\",\n  \"countable\",\n  \"countdown\",\n  \"counting\",\n  \"countless\",\n  \"country\",\n  \"county\",\n  \"courier\",\n  \"covenant\",\n  \"cover\",\n  \"coveted\",\n  \"coveting\",\n  \"coyness\",\n  \"cozily\",\n  \"coziness\",\n  \"cozy\",\n  \"crabbing\",\n  \"crabgrass\",\n  \"crablike\",\n  \"crabmeat\",\n  \"cradle\",\n  \"cradling\",\n  \"crafter\",\n  \"craftily\",\n  \"craftsman\",\n  \"craftwork\",\n  \"crafty\",\n  \"cramp\",\n  \"cranberry\",\n  \"crane\",\n  \"cranial\",\n  \"cranium\",\n  \"crank\",\n  \"crate\",\n  \"crave\",\n  \"craving\",\n  \"crawfish\",\n  \"crawlers\",\n  \"crawling\",\n  \"crayfish\",\n  \"crayon\",\n  \"crazed\",\n  \"crazily\",\n  \"craziness\",\n  \"crazy\",\n  \"creamed\",\n  \"creamer\",\n  \"creamlike\",\n  \"crease\",\n  \"creasing\",\n  \"creatable\",\n  \"create\",\n  \"creation\",\n  \"creative\",\n  \"creature\",\n  \"credible\",\n  \"credibly\",\n  \"credit\",\n  \"creed\",\n  \"creme\",\n  \"creole\",\n  \"crepe\",\n  \"crept\",\n  \"crescent\",\n  \"crested\",\n  \"cresting\",\n  \"crestless\",\n  \"crevice\",\n  \"crewless\",\n  \"crewman\",\n  \"crewmate\",\n  \"crib\",\n  \"cricket\",\n  \"cried\",\n  \"crier\",\n  \"crimp\",\n  \"crimson\",\n  \"cringe\",\n  \"cringing\",\n  \"crinkle\",\n  \"crinkly\",\n  \"crisped\",\n  \"crisping\",\n  \"crisply\",\n  \"crispness\",\n  \"crispy\",\n  \"criteria\",\n  \"critter\",\n  \"croak\",\n  \"crock\",\n  \"crook\",\n  \"croon\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crouton\",\n  \"crowbar\",\n  \"crowd\",\n  \"crown\",\n  \"crucial\",\n  \"crudely\",\n  \"crudeness\",\n  \"cruelly\",\n  \"cruelness\",\n  \"cruelty\",\n  \"crumb\",\n  \"crummiest\",\n  \"crummy\",\n  \"crumpet\",\n  \"crumpled\",\n  \"cruncher\",\n  \"crunching\",\n  \"crunchy\",\n  \"crusader\",\n  \"crushable\",\n  \"crushed\",\n  \"crusher\",\n  \"crushing\",\n  \"crust\",\n  \"crux\",\n  \"crying\",\n  \"cryptic\",\n  \"crystal\",\n  \"cubbyhole\",\n  \"cube\",\n  \"cubical\",\n  \"cubicle\",\n  \"cucumber\",\n  \"cuddle\",\n  \"cuddly\",\n  \"cufflink\",\n  \"culinary\",\n  \"culminate\",\n  \"culpable\",\n  \"culprit\",\n  \"cultivate\",\n  \"cultural\",\n  \"culture\",\n  \"cupbearer\",\n  \"cupcake\",\n  \"cupid\",\n  \"cupped\",\n  \"cupping\",\n  \"curable\",\n  \"curator\",\n  \"curdle\",\n  \"cure\",\n  \"curfew\",\n  \"curing\",\n  \"curled\",\n  \"curler\",\n  \"curliness\",\n  \"curling\",\n  \"curly\",\n  \"curry\",\n  \"curse\",\n  \"cursive\",\n  \"cursor\",\n  \"curtain\",\n  \"curtly\",\n  \"curtsy\",\n  \"curvature\",\n  \"curve\",\n  \"curvy\",\n  \"cushy\",\n  \"cusp\",\n  \"cussed\",\n  \"custard\",\n  \"custodian\",\n  \"custody\",\n  \"customary\",\n  \"customer\",\n  \"customize\",\n  \"customs\",\n  \"cut\",\n  \"cycle\",\n  \"cyclic\",\n  \"cycling\",\n  \"cyclist\",\n  \"cylinder\",\n  \"cymbal\",\n  \"cytoplasm\",\n  \"cytoplast\",\n  \"dab\",\n  \"dad\",\n  \"daffodil\",\n  \"dagger\",\n  \"daily\",\n  \"daintily\",\n  \"dainty\",\n  \"dairy\",\n  \"daisy\",\n  \"dallying\",\n  \"dance\",\n  \"dancing\",\n  \"dandelion\",\n  \"dander\",\n  \"dandruff\",\n  \"dandy\",\n  \"danger\",\n  \"dangle\",\n  \"dangling\",\n  \"daredevil\",\n  \"dares\",\n  \"daringly\",\n  \"darkened\",\n  \"darkening\",\n  \"darkish\",\n  \"darkness\",\n  \"darkroom\",\n  \"darling\",\n  \"darn\",\n  \"dart\",\n  \"darwinism\",\n  \"dash\",\n  \"dastardly\",\n  \"data\",\n  \"datebook\",\n  \"dating\",\n  \"daughter\",\n  \"daunting\",\n  \"dawdler\",\n  \"dawn\",\n  \"daybed\",\n  \"daybreak\",\n  \"daycare\",\n  \"daydream\",\n  \"daylight\",\n  \"daylong\",\n  \"dayroom\",\n  \"daytime\",\n  \"dazzler\",\n  \"dazzling\",\n  \"deacon\",\n  \"deafening\",\n  \"deafness\",\n  \"dealer\",\n  \"dealing\",\n  \"dealmaker\",\n  \"dealt\",\n  \"dean\",\n  \"debatable\",\n  \"debate\",\n  \"debating\",\n  \"debit\",\n  \"debrief\",\n  \"debtless\",\n  \"debtor\",\n  \"debug\",\n  \"debunk\",\n  \"decade\",\n  \"decaf\",\n  \"decal\",\n  \"decathlon\",\n  \"decay\",\n  \"deceased\",\n  \"deceit\",\n  \"deceiver\",\n  \"deceiving\",\n  \"december\",\n  \"decency\",\n  \"decent\",\n  \"deception\",\n  \"deceptive\",\n  \"decibel\",\n  \"decidable\",\n  \"decimal\",\n  \"decimeter\",\n  \"decipher\",\n  \"deck\",\n  \"declared\",\n  \"decline\",\n  \"decode\",\n  \"decompose\",\n  \"decorated\",\n  \"decorator\",\n  \"decoy\",\n  \"decrease\",\n  \"decree\",\n  \"dedicate\",\n  \"dedicator\",\n  \"deduce\",\n  \"deduct\",\n  \"deed\",\n  \"deem\",\n  \"deepen\",\n  \"deeply\",\n  \"deepness\",\n  \"deface\",\n  \"defacing\",\n  \"defame\",\n  \"default\",\n  \"defeat\",\n  \"defection\",\n  \"defective\",\n  \"defendant\",\n  \"defender\",\n  \"defense\",\n  \"defensive\",\n  \"deferral\",\n  \"deferred\",\n  \"defiance\",\n  \"defiant\",\n  \"defile\",\n  \"defiling\",\n  \"define\",\n  \"definite\",\n  \"deflate\",\n  \"deflation\",\n  \"deflator\",\n  \"deflected\",\n  \"deflector\",\n  \"defog\",\n  \"deforest\",\n  \"defraud\",\n  \"defrost\",\n  \"deftly\",\n  \"defuse\",\n  \"defy\",\n  \"degraded\",\n  \"degrading\",\n  \"degrease\",\n  \"degree\",\n  \"dehydrate\",\n  \"deity\",\n  \"dejected\",\n  \"delay\",\n  \"delegate\",\n  \"delegator\",\n  \"delete\",\n  \"deletion\",\n  \"delicacy\",\n  \"delicate\",\n  \"delicious\",\n  \"delighted\",\n  \"delirious\",\n  \"delirium\",\n  \"deliverer\",\n  \"delivery\",\n  \"delouse\",\n  \"delta\",\n  \"deluge\",\n  \"delusion\",\n  \"deluxe\",\n  \"demanding\",\n  \"demeaning\",\n  \"demeanor\",\n  \"demise\",\n  \"democracy\",\n  \"democrat\",\n  \"demote\",\n  \"demotion\",\n  \"demystify\",\n  \"denatured\",\n  \"deniable\",\n  \"denial\",\n  \"denim\",\n  \"denote\",\n  \"dense\",\n  \"density\",\n  \"dental\",\n  \"dentist\",\n  \"denture\",\n  \"deny\",\n  \"deodorant\",\n  \"deodorize\",\n  \"departed\",\n  \"departure\",\n  \"depict\",\n  \"deplete\",\n  \"depletion\",\n  \"deplored\",\n  \"deploy\",\n  \"deport\",\n  \"depose\",\n  \"depraved\",\n  \"depravity\",\n  \"deprecate\",\n  \"depress\",\n  \"deprive\",\n  \"depth\",\n  \"deputize\",\n  \"deputy\",\n  \"derail\",\n  \"deranged\",\n  \"derby\",\n  \"derived\",\n  \"desecrate\",\n  \"deserve\",\n  \"deserving\",\n  \"designate\",\n  \"designed\",\n  \"designer\",\n  \"designing\",\n  \"deskbound\",\n  \"desktop\",\n  \"deskwork\",\n  \"desolate\",\n  \"despair\",\n  \"despise\",\n  \"despite\",\n  \"destiny\",\n  \"destitute\",\n  \"destruct\",\n  \"detached\",\n  \"detail\",\n  \"detection\",\n  \"detective\",\n  \"detector\",\n  \"detention\",\n  \"detergent\",\n  \"detest\",\n  \"detonate\",\n  \"detonator\",\n  \"detoxify\",\n  \"detract\",\n  \"deuce\",\n  \"devalue\",\n  \"deviancy\",\n  \"deviant\",\n  \"deviate\",\n  \"deviation\",\n  \"deviator\",\n  \"device\",\n  \"devious\",\n  \"devotedly\",\n  \"devotee\",\n  \"devotion\",\n  \"devourer\",\n  \"devouring\",\n  \"devoutly\",\n  \"dexterity\",\n  \"dexterous\",\n  \"diabetes\",\n  \"diabetic\",\n  \"diabolic\",\n  \"diagnoses\",\n  \"diagnosis\",\n  \"diagram\",\n  \"dial\",\n  \"diameter\",\n  \"diaper\",\n  \"diaphragm\",\n  \"diary\",\n  \"dice\",\n  \"dicing\",\n  \"dictate\",\n  \"dictation\",\n  \"dictator\",\n  \"difficult\",\n  \"diffused\",\n  \"diffuser\",\n  \"diffusion\",\n  \"diffusive\",\n  \"dig\",\n  \"dilation\",\n  \"diligence\",\n  \"diligent\",\n  \"dill\",\n  \"dilute\",\n  \"dime\",\n  \"diminish\",\n  \"dimly\",\n  \"dimmed\",\n  \"dimmer\",\n  \"dimness\",\n  \"dimple\",\n  \"diner\",\n  \"dingbat\",\n  \"dinghy\",\n  \"dinginess\",\n  \"dingo\",\n  \"dingy\",\n  \"dining\",\n  \"dinner\",\n  \"diocese\",\n  \"dioxide\",\n  \"diploma\",\n  \"dipped\",\n  \"dipper\",\n  \"dipping\",\n  \"directed\",\n  \"direction\",\n  \"directive\",\n  \"directly\",\n  \"directory\",\n  \"direness\",\n  \"dirtiness\",\n  \"disabled\",\n  \"disagree\",\n  \"disallow\",\n  \"disarm\",\n  \"disarray\",\n  \"disaster\",\n  \"disband\",\n  \"disbelief\",\n  \"disburse\",\n  \"discard\",\n  \"discern\",\n  \"discharge\",\n  \"disclose\",\n  \"discolor\",\n  \"discount\",\n  \"discourse\",\n  \"discover\",\n  \"discuss\",\n  \"disdain\",\n  \"disengage\",\n  \"disfigure\",\n  \"disgrace\",\n  \"dish\",\n  \"disinfect\",\n  \"disjoin\",\n  \"disk\",\n  \"dislike\",\n  \"disliking\",\n  \"dislocate\",\n  \"dislodge\",\n  \"disloyal\",\n  \"dismantle\",\n  \"dismay\",\n  \"dismiss\",\n  \"dismount\",\n  \"disobey\",\n  \"disorder\",\n  \"disown\",\n  \"disparate\",\n  \"disparity\",\n  \"dispatch\",\n  \"dispense\",\n  \"dispersal\",\n  \"dispersed\",\n  \"disperser\",\n  \"displace\",\n  \"display\",\n  \"displease\",\n  \"disposal\",\n  \"dispose\",\n  \"disprove\",\n  \"dispute\",\n  \"disregard\",\n  \"disrupt\",\n  \"dissuade\",\n  \"distance\",\n  \"distant\",\n  \"distaste\",\n  \"distill\",\n  \"distinct\",\n  \"distort\",\n  \"distract\",\n  \"distress\",\n  \"district\",\n  \"distrust\",\n  \"ditch\",\n  \"ditto\",\n  \"ditzy\",\n  \"dividable\",\n  \"divided\",\n  \"dividend\",\n  \"dividers\",\n  \"dividing\",\n  \"divinely\",\n  \"diving\",\n  \"divinity\",\n  \"divisible\",\n  \"divisibly\",\n  \"division\",\n  \"divisive\",\n  \"divorcee\",\n  \"dizziness\",\n  \"dizzy\",\n  \"doable\",\n  \"docile\",\n  \"dock\",\n  \"doctrine\",\n  \"document\",\n  \"dodge\",\n  \"dodgy\",\n  \"doily\",\n  \"doing\",\n  \"dole\",\n  \"dollar\",\n  \"dollhouse\",\n  \"dollop\",\n  \"dolly\",\n  \"dolphin\",\n  \"domain\",\n  \"domelike\",\n  \"domestic\",\n  \"dominion\",\n  \"dominoes\",\n  \"donated\",\n  \"donation\",\n  \"donator\",\n  \"donor\",\n  \"donut\",\n  \"doodle\",\n  \"doorbell\",\n  \"doorframe\",\n  \"doorknob\",\n  \"doorman\",\n  \"doormat\",\n  \"doornail\",\n  \"doorpost\",\n  \"doorstep\",\n  \"doorstop\",\n  \"doorway\",\n  \"doozy\",\n  \"dork\",\n  \"dormitory\",\n  \"dorsal\",\n  \"dosage\",\n  \"dose\",\n  \"dotted\",\n  \"doubling\",\n  \"douche\",\n  \"dove\",\n  \"down\",\n  \"dowry\",\n  \"doze\",\n  \"drab\",\n  \"dragging\",\n  \"dragonfly\",\n  \"dragonish\",\n  \"dragster\",\n  \"drainable\",\n  \"drainage\",\n  \"drained\",\n  \"drainer\",\n  \"drainpipe\",\n  \"dramatic\",\n  \"dramatize\",\n  \"drank\",\n  \"drapery\",\n  \"drastic\",\n  \"draw\",\n  \"dreaded\",\n  \"dreadful\",\n  \"dreadlock\",\n  \"dreamboat\",\n  \"dreamily\",\n  \"dreamland\",\n  \"dreamless\",\n  \"dreamlike\",\n  \"dreamt\",\n  \"dreamy\",\n  \"drearily\",\n  \"dreary\",\n  \"drench\",\n  \"dress\",\n  \"drew\",\n  \"dribble\",\n  \"dried\",\n  \"drier\",\n  \"drift\",\n  \"driller\",\n  \"drilling\",\n  \"drinkable\",\n  \"drinking\",\n  \"dripping\",\n  \"drippy\",\n  \"drivable\",\n  \"driven\",\n  \"driver\",\n  \"driveway\",\n  \"driving\",\n  \"drizzle\",\n  \"drizzly\",\n  \"drone\",\n  \"drool\",\n  \"droop\",\n  \"drop-down\",\n  \"dropbox\",\n  \"dropkick\",\n  \"droplet\",\n  \"dropout\",\n  \"dropper\",\n  \"drove\",\n  \"drown\",\n  \"drowsily\",\n  \"drudge\",\n  \"drum\",\n  \"dry\",\n  \"dubbed\",\n  \"dubiously\",\n  \"duchess\",\n  \"duckbill\",\n  \"ducking\",\n  \"duckling\",\n  \"ducktail\",\n  \"ducky\",\n  \"duct\",\n  \"dude\",\n  \"duffel\",\n  \"dugout\",\n  \"duh\",\n  \"duke\",\n  \"duller\",\n  \"dullness\",\n  \"duly\",\n  \"dumping\",\n  \"dumpling\",\n  \"dumpster\",\n  \"duo\",\n  \"dupe\",\n  \"duplex\",\n  \"duplicate\",\n  \"duplicity\",\n  \"durable\",\n  \"durably\",\n  \"duration\",\n  \"duress\",\n  \"during\",\n  \"dusk\",\n  \"dust\",\n  \"dutiful\",\n  \"duty\",\n  \"duvet\",\n  \"dwarf\",\n  \"dweeb\",\n  \"dwelled\",\n  \"dweller\",\n  \"dwelling\",\n  \"dwindle\",\n  \"dwindling\",\n  \"dynamic\",\n  \"dynamite\",\n  \"dynasty\",\n  \"dyslexia\",\n  \"dyslexic\",\n  \"each\",\n  \"eagle\",\n  \"earache\",\n  \"eardrum\",\n  \"earflap\",\n  \"earful\",\n  \"earlobe\",\n  \"early\",\n  \"earmark\",\n  \"earmuff\",\n  \"earphone\",\n  \"earpiece\",\n  \"earplugs\",\n  \"earring\",\n  \"earshot\",\n  \"earthen\",\n  \"earthlike\",\n  \"earthling\",\n  \"earthly\",\n  \"earthworm\",\n  \"earthy\",\n  \"earwig\",\n  \"easeful\",\n  \"easel\",\n  \"easiest\",\n  \"easily\",\n  \"easiness\",\n  \"easing\",\n  \"eastbound\",\n  \"eastcoast\",\n  \"easter\",\n  \"eastward\",\n  \"eatable\",\n  \"eaten\",\n  \"eatery\",\n  \"eating\",\n  \"eats\",\n  \"ebay\",\n  \"ebony\",\n  \"ebook\",\n  \"ecard\",\n  \"eccentric\",\n  \"echo\",\n  \"eclair\",\n  \"eclipse\",\n  \"ecologist\",\n  \"ecology\",\n  \"economic\",\n  \"economist\",\n  \"economy\",\n  \"ecosphere\",\n  \"ecosystem\",\n  \"edge\",\n  \"edginess\",\n  \"edging\",\n  \"edgy\",\n  \"edition\",\n  \"editor\",\n  \"educated\",\n  \"education\",\n  \"educator\",\n  \"eel\",\n  \"effective\",\n  \"effects\",\n  \"efficient\",\n  \"effort\",\n  \"eggbeater\",\n  \"egging\",\n  \"eggnog\",\n  \"eggplant\",\n  \"eggshell\",\n  \"egomaniac\",\n  \"egotism\",\n  \"egotistic\",\n  \"either\",\n  \"eject\",\n  \"elaborate\",\n  \"elastic\",\n  \"elated\",\n  \"elbow\",\n  \"eldercare\",\n  \"elderly\",\n  \"eldest\",\n  \"electable\",\n  \"election\",\n  \"elective\",\n  \"elephant\",\n  \"elevate\",\n  \"elevating\",\n  \"elevation\",\n  \"elevator\",\n  \"eleven\",\n  \"elf\",\n  \"eligible\",\n  \"eligibly\",\n  \"eliminate\",\n  \"elite\",\n  \"elitism\",\n  \"elixir\",\n  \"elk\",\n  \"ellipse\",\n  \"elliptic\",\n  \"elm\",\n  \"elongated\",\n  \"elope\",\n  \"eloquence\",\n  \"eloquent\",\n  \"elsewhere\",\n  \"elude\",\n  \"elusive\",\n  \"elves\",\n  \"email\",\n  \"embargo\",\n  \"embark\",\n  \"embassy\",\n  \"embattled\",\n  \"embellish\",\n  \"ember\",\n  \"embezzle\",\n  \"emblaze\",\n  \"emblem\",\n  \"embody\",\n  \"embolism\",\n  \"emboss\",\n  \"embroider\",\n  \"emcee\",\n  \"emerald\",\n  \"emergency\",\n  \"emission\",\n  \"emit\",\n  \"emote\",\n  \"emoticon\",\n  \"emotion\",\n  \"empathic\",\n  \"empathy\",\n  \"emperor\",\n  \"emphases\",\n  \"emphasis\",\n  \"emphasize\",\n  \"emphatic\",\n  \"empirical\",\n  \"employed\",\n  \"employee\",\n  \"employer\",\n  \"emporium\",\n  \"empower\",\n  \"emptier\",\n  \"emptiness\",\n  \"empty\",\n  \"emu\",\n  \"enable\",\n  \"enactment\",\n  \"enamel\",\n  \"enchanted\",\n  \"enchilada\",\n  \"encircle\",\n  \"enclose\",\n  \"enclosure\",\n  \"encode\",\n  \"encore\",\n  \"encounter\",\n  \"encourage\",\n  \"encroach\",\n  \"encrust\",\n  \"encrypt\",\n  \"endanger\",\n  \"endeared\",\n  \"endearing\",\n  \"ended\",\n  \"ending\",\n  \"endless\",\n  \"endnote\",\n  \"endocrine\",\n  \"endorphin\",\n  \"endorse\",\n  \"endowment\",\n  \"endpoint\",\n  \"endurable\",\n  \"endurance\",\n  \"enduring\",\n  \"energetic\",\n  \"energize\",\n  \"energy\",\n  \"enforced\",\n  \"enforcer\",\n  \"engaged\",\n  \"engaging\",\n  \"engine\",\n  \"engorge\",\n  \"engraved\",\n  \"engraver\",\n  \"engraving\",\n  \"engross\",\n  \"engulf\",\n  \"enhance\",\n  \"enigmatic\",\n  \"enjoyable\",\n  \"enjoyably\",\n  \"enjoyer\",\n  \"enjoying\",\n  \"enjoyment\",\n  \"enlarged\",\n  \"enlarging\",\n  \"enlighten\",\n  \"enlisted\",\n  \"enquirer\",\n  \"enrage\",\n  \"enrich\",\n  \"enroll\",\n  \"enslave\",\n  \"ensnare\",\n  \"ensure\",\n  \"entail\",\n  \"entangled\",\n  \"entering\",\n  \"entertain\",\n  \"enticing\",\n  \"entire\",\n  \"entitle\",\n  \"entity\",\n  \"entomb\",\n  \"entourage\",\n  \"entrap\",\n  \"entree\",\n  \"entrench\",\n  \"entrust\",\n  \"entryway\",\n  \"entwine\",\n  \"enunciate\",\n  \"envelope\",\n  \"enviable\",\n  \"enviably\",\n  \"envious\",\n  \"envision\",\n  \"envoy\",\n  \"envy\",\n  \"enzyme\",\n  \"epic\",\n  \"epidemic\",\n  \"epidermal\",\n  \"epidermis\",\n  \"epidural\",\n  \"epilepsy\",\n  \"epileptic\",\n  \"epilogue\",\n  \"epiphany\",\n  \"episode\",\n  \"equal\",\n  \"equate\",\n  \"equation\",\n  \"equator\",\n  \"equinox\",\n  \"equipment\",\n  \"equity\",\n  \"equivocal\",\n  \"eradicate\",\n  \"erasable\",\n  \"erased\",\n  \"eraser\",\n  \"erasure\",\n  \"ergonomic\",\n  \"errand\",\n  \"errant\",\n  \"erratic\",\n  \"error\",\n  \"erupt\",\n  \"escalate\",\n  \"escalator\",\n  \"escapable\",\n  \"escapade\",\n  \"escapist\",\n  \"escargot\",\n  \"eskimo\",\n  \"esophagus\",\n  \"espionage\",\n  \"espresso\",\n  \"esquire\",\n  \"essay\",\n  \"essence\",\n  \"essential\",\n  \"establish\",\n  \"estate\",\n  \"esteemed\",\n  \"estimate\",\n  \"estimator\",\n  \"estranged\",\n  \"estrogen\",\n  \"etching\",\n  \"eternal\",\n  \"eternity\",\n  \"ethanol\",\n  \"ether\",\n  \"ethically\",\n  \"ethics\",\n  \"euphemism\",\n  \"evacuate\",\n  \"evacuee\",\n  \"evade\",\n  \"evaluate\",\n  \"evaluator\",\n  \"evaporate\",\n  \"evasion\",\n  \"evasive\",\n  \"even\",\n  \"everglade\",\n  \"evergreen\",\n  \"everybody\",\n  \"everyday\",\n  \"everyone\",\n  \"evict\",\n  \"evidence\",\n  \"evident\",\n  \"evil\",\n  \"evoke\",\n  \"evolution\",\n  \"evolve\",\n  \"exact\",\n  \"exalted\",\n  \"example\",\n  \"excavate\",\n  \"excavator\",\n  \"exceeding\",\n  \"exception\",\n  \"excess\",\n  \"exchange\",\n  \"excitable\",\n  \"exciting\",\n  \"exclaim\",\n  \"exclude\",\n  \"excluding\",\n  \"exclusion\",\n  \"exclusive\",\n  \"excretion\",\n  \"excretory\",\n  \"excursion\",\n  \"excusable\",\n  \"excusably\",\n  \"excuse\",\n  \"exemplary\",\n  \"exemplify\",\n  \"exemption\",\n  \"exerciser\",\n  \"exert\",\n  \"exes\",\n  \"exfoliate\",\n  \"exhale\",\n  \"exhaust\",\n  \"exhume\",\n  \"exile\",\n  \"existing\",\n  \"exit\",\n  \"exodus\",\n  \"exonerate\",\n  \"exorcism\",\n  \"exorcist\",\n  \"expand\",\n  \"expanse\",\n  \"expansion\",\n  \"expansive\",\n  \"expectant\",\n  \"expedited\",\n  \"expediter\",\n  \"expel\",\n  \"expend\",\n  \"expenses\",\n  \"expensive\",\n  \"expert\",\n  \"expire\",\n  \"expiring\",\n  \"explain\",\n  \"expletive\",\n  \"explicit\",\n  \"explode\",\n  \"exploit\",\n  \"explore\",\n  \"exploring\",\n  \"exponent\",\n  \"exporter\",\n  \"exposable\",\n  \"expose\",\n  \"exposure\",\n  \"express\",\n  \"expulsion\",\n  \"exquisite\",\n  \"extended\",\n  \"extending\",\n  \"extent\",\n  \"extenuate\",\n  \"exterior\",\n  \"external\",\n  \"extinct\",\n  \"extortion\",\n  \"extradite\",\n  \"extras\",\n  \"extrovert\",\n  \"extrude\",\n  \"extruding\",\n  \"exuberant\",\n  \"fable\",\n  \"fabric\",\n  \"fabulous\",\n  \"facebook\",\n  \"facecloth\",\n  \"facedown\",\n  \"faceless\",\n  \"facelift\",\n  \"faceplate\",\n  \"faceted\",\n  \"facial\",\n  \"facility\",\n  \"facing\",\n  \"facsimile\",\n  \"faction\",\n  \"factoid\",\n  \"factor\",\n  \"factsheet\",\n  \"factual\",\n  \"faculty\",\n  \"fade\",\n  \"fading\",\n  \"failing\",\n  \"falcon\",\n  \"fall\",\n  \"false\",\n  \"falsify\",\n  \"fame\",\n  \"familiar\",\n  \"family\",\n  \"famine\",\n  \"famished\",\n  \"fanatic\",\n  \"fancied\",\n  \"fanciness\",\n  \"fancy\",\n  \"fanfare\",\n  \"fang\",\n  \"fanning\",\n  \"fantasize\",\n  \"fantastic\",\n  \"fantasy\",\n  \"fascism\",\n  \"fastball\",\n  \"faster\",\n  \"fasting\",\n  \"fastness\",\n  \"faucet\",\n  \"favorable\",\n  \"favorably\",\n  \"favored\",\n  \"favoring\",\n  \"favorite\",\n  \"fax\",\n  \"feast\",\n  \"federal\",\n  \"fedora\",\n  \"feeble\",\n  \"feed\",\n  \"feel\",\n  \"feisty\",\n  \"feline\",\n  \"felt-tip\",\n  \"feminine\",\n  \"feminism\",\n  \"feminist\",\n  \"feminize\",\n  \"femur\",\n  \"fence\",\n  \"fencing\",\n  \"fender\",\n  \"ferment\",\n  \"fernlike\",\n  \"ferocious\",\n  \"ferocity\",\n  \"ferret\",\n  \"ferris\",\n  \"ferry\",\n  \"fervor\",\n  \"fester\",\n  \"festival\",\n  \"festive\",\n  \"festivity\",\n  \"fetal\",\n  \"fetch\",\n  \"fever\",\n  \"fiber\",\n  \"fiction\",\n  \"fiddle\",\n  \"fiddling\",\n  \"fidelity\",\n  \"fidgeting\",\n  \"fidgety\",\n  \"fifteen\",\n  \"fifth\",\n  \"fiftieth\",\n  \"fifty\",\n  \"figment\",\n  \"figure\",\n  \"figurine\",\n  \"filing\",\n  \"filled\",\n  \"filler\",\n  \"filling\",\n  \"film\",\n  \"filter\",\n  \"filth\",\n  \"filtrate\",\n  \"finale\",\n  \"finalist\",\n  \"finalize\",\n  \"finally\",\n  \"finance\",\n  \"financial\",\n  \"finch\",\n  \"fineness\",\n  \"finer\",\n  \"finicky\",\n  \"finished\",\n  \"finisher\",\n  \"finishing\",\n  \"finite\",\n  \"finless\",\n  \"finlike\",\n  \"fiscally\",\n  \"fit\",\n  \"five\",\n  \"flaccid\",\n  \"flagman\",\n  \"flagpole\",\n  \"flagship\",\n  \"flagstick\",\n  \"flagstone\",\n  \"flail\",\n  \"flakily\",\n  \"flaky\",\n  \"flame\",\n  \"flammable\",\n  \"flanked\",\n  \"flanking\",\n  \"flannels\",\n  \"flap\",\n  \"flaring\",\n  \"flashback\",\n  \"flashbulb\",\n  \"flashcard\",\n  \"flashily\",\n  \"flashing\",\n  \"flashy\",\n  \"flask\",\n  \"flatbed\",\n  \"flatfoot\",\n  \"flatly\",\n  \"flatness\",\n  \"flatten\",\n  \"flattered\",\n  \"flatterer\",\n  \"flattery\",\n  \"flattop\",\n  \"flatware\",\n  \"flatworm\",\n  \"flavored\",\n  \"flavorful\",\n  \"flavoring\",\n  \"flaxseed\",\n  \"fled\",\n  \"fleshed\",\n  \"fleshy\",\n  \"flick\",\n  \"flier\",\n  \"flight\",\n  \"flinch\",\n  \"fling\",\n  \"flint\",\n  \"flip\",\n  \"flirt\",\n  \"float\",\n  \"flock\",\n  \"flogging\",\n  \"flop\",\n  \"floral\",\n  \"florist\",\n  \"floss\",\n  \"flounder\",\n  \"flyable\",\n  \"flyaway\",\n  \"flyer\",\n  \"flying\",\n  \"flyover\",\n  \"flypaper\",\n  \"foam\",\n  \"foe\",\n  \"fog\",\n  \"foil\",\n  \"folic\",\n  \"folk\",\n  \"follicle\",\n  \"follow\",\n  \"fondling\",\n  \"fondly\",\n  \"fondness\",\n  \"fondue\",\n  \"font\",\n  \"food\",\n  \"fool\",\n  \"footage\",\n  \"football\",\n  \"footbath\",\n  \"footboard\",\n  \"footer\",\n  \"footgear\",\n  \"foothill\",\n  \"foothold\",\n  \"footing\",\n  \"footless\",\n  \"footman\",\n  \"footnote\",\n  \"footpad\",\n  \"footpath\",\n  \"footprint\",\n  \"footrest\",\n  \"footsie\",\n  \"footsore\",\n  \"footwear\",\n  \"footwork\",\n  \"fossil\",\n  \"foster\",\n  \"founder\",\n  \"founding\",\n  \"fountain\",\n  \"fox\",\n  \"foyer\",\n  \"fraction\",\n  \"fracture\",\n  \"fragile\",\n  \"fragility\",\n  \"fragment\",\n  \"fragrance\",\n  \"fragrant\",\n  \"frail\",\n  \"frame\",\n  \"framing\",\n  \"frantic\",\n  \"fraternal\",\n  \"frayed\",\n  \"fraying\",\n  \"frays\",\n  \"freckled\",\n  \"freckles\",\n  \"freebase\",\n  \"freebee\",\n  \"freebie\",\n  \"freedom\",\n  \"freefall\",\n  \"freehand\",\n  \"freeing\",\n  \"freeload\",\n  \"freely\",\n  \"freemason\",\n  \"freeness\",\n  \"freestyle\",\n  \"freeware\",\n  \"freeway\",\n  \"freewill\",\n  \"freezable\",\n  \"freezing\",\n  \"freight\",\n  \"french\",\n  \"frenzied\",\n  \"frenzy\",\n  \"frequency\",\n  \"frequent\",\n  \"fresh\",\n  \"fretful\",\n  \"fretted\",\n  \"friction\",\n  \"friday\",\n  \"fridge\",\n  \"fried\",\n  \"friend\",\n  \"frighten\",\n  \"frightful\",\n  \"frigidity\",\n  \"frigidly\",\n  \"frill\",\n  \"fringe\",\n  \"frisbee\",\n  \"frisk\",\n  \"fritter\",\n  \"frivolous\",\n  \"frolic\",\n  \"from\",\n  \"front\",\n  \"frostbite\",\n  \"frosted\",\n  \"frostily\",\n  \"frosting\",\n  \"frostlike\",\n  \"frosty\",\n  \"froth\",\n  \"frown\",\n  \"frozen\",\n  \"fructose\",\n  \"frugality\",\n  \"frugally\",\n  \"fruit\",\n  \"frustrate\",\n  \"frying\",\n  \"gab\",\n  \"gaffe\",\n  \"gag\",\n  \"gainfully\",\n  \"gaining\",\n  \"gains\",\n  \"gala\",\n  \"gallantly\",\n  \"galleria\",\n  \"gallery\",\n  \"galley\",\n  \"gallon\",\n  \"gallows\",\n  \"gallstone\",\n  \"galore\",\n  \"galvanize\",\n  \"gambling\",\n  \"game\",\n  \"gaming\",\n  \"gamma\",\n  \"gander\",\n  \"gangly\",\n  \"gangrene\",\n  \"gangway\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"gargle\",\n  \"garland\",\n  \"garlic\",\n  \"garment\",\n  \"garnet\",\n  \"garnish\",\n  \"garter\",\n  \"gas\",\n  \"gatherer\",\n  \"gathering\",\n  \"gating\",\n  \"gauging\",\n  \"gauntlet\",\n  \"gauze\",\n  \"gave\",\n  \"gawk\",\n  \"gazing\",\n  \"gear\",\n  \"gecko\",\n  \"geek\",\n  \"geiger\",\n  \"gem\",\n  \"gender\",\n  \"generic\",\n  \"generous\",\n  \"genetics\",\n  \"genre\",\n  \"gentile\",\n  \"gentleman\",\n  \"gently\",\n  \"gents\",\n  \"geography\",\n  \"geologic\",\n  \"geologist\",\n  \"geology\",\n  \"geometric\",\n  \"geometry\",\n  \"geranium\",\n  \"gerbil\",\n  \"geriatric\",\n  \"germicide\",\n  \"germinate\",\n  \"germless\",\n  \"germproof\",\n  \"gestate\",\n  \"gestation\",\n  \"gesture\",\n  \"getaway\",\n  \"getting\",\n  \"getup\",\n  \"giant\",\n  \"gibberish\",\n  \"giblet\",\n  \"giddily\",\n  \"giddiness\",\n  \"giddy\",\n  \"gift\",\n  \"gigabyte\",\n  \"gigahertz\",\n  \"gigantic\",\n  \"giggle\",\n  \"giggling\",\n  \"giggly\",\n  \"gigolo\",\n  \"gilled\",\n  \"gills\",\n  \"gimmick\",\n  \"girdle\",\n  \"giveaway\",\n  \"given\",\n  \"giver\",\n  \"giving\",\n  \"gizmo\",\n  \"gizzard\",\n  \"glacial\",\n  \"glacier\",\n  \"glade\",\n  \"gladiator\",\n  \"gladly\",\n  \"glamorous\",\n  \"glamour\",\n  \"glance\",\n  \"glancing\",\n  \"glandular\",\n  \"glare\",\n  \"glaring\",\n  \"glass\",\n  \"glaucoma\",\n  \"glazing\",\n  \"gleaming\",\n  \"gleeful\",\n  \"glider\",\n  \"gliding\",\n  \"glimmer\",\n  \"glimpse\",\n  \"glisten\",\n  \"glitch\",\n  \"glitter\",\n  \"glitzy\",\n  \"gloater\",\n  \"gloating\",\n  \"gloomily\",\n  \"gloomy\",\n  \"glorified\",\n  \"glorifier\",\n  \"glorify\",\n  \"glorious\",\n  \"glory\",\n  \"gloss\",\n  \"glove\",\n  \"glowing\",\n  \"glowworm\",\n  \"glucose\",\n  \"glue\",\n  \"gluten\",\n  \"glutinous\",\n  \"glutton\",\n  \"gnarly\",\n  \"gnat\",\n  \"goal\",\n  \"goatskin\",\n  \"goes\",\n  \"goggles\",\n  \"going\",\n  \"goldfish\",\n  \"goldmine\",\n  \"goldsmith\",\n  \"golf\",\n  \"goliath\",\n  \"gonad\",\n  \"gondola\",\n  \"gone\",\n  \"gong\",\n  \"good\",\n  \"gooey\",\n  \"goofball\",\n  \"goofiness\",\n  \"goofy\",\n  \"google\",\n  \"goon\",\n  \"gopher\",\n  \"gore\",\n  \"gorged\",\n  \"gorgeous\",\n  \"gory\",\n  \"gosling\",\n  \"gossip\",\n  \"gothic\",\n  \"gotten\",\n  \"gout\",\n  \"gown\",\n  \"grab\",\n  \"graceful\",\n  \"graceless\",\n  \"gracious\",\n  \"gradation\",\n  \"graded\",\n  \"grader\",\n  \"gradient\",\n  \"grading\",\n  \"gradually\",\n  \"graduate\",\n  \"graffiti\",\n  \"grafted\",\n  \"grafting\",\n  \"grain\",\n  \"granddad\",\n  \"grandkid\",\n  \"grandly\",\n  \"grandma\",\n  \"grandpa\",\n  \"grandson\",\n  \"granite\",\n  \"granny\",\n  \"granola\",\n  \"grant\",\n  \"granular\",\n  \"grape\",\n  \"graph\",\n  \"grapple\",\n  \"grappling\",\n  \"grasp\",\n  \"grass\",\n  \"gratified\",\n  \"gratify\",\n  \"grating\",\n  \"gratitude\",\n  \"gratuity\",\n  \"gravel\",\n  \"graveness\",\n  \"graves\",\n  \"graveyard\",\n  \"gravitate\",\n  \"gravity\",\n  \"gravy\",\n  \"gray\",\n  \"grazing\",\n  \"greasily\",\n  \"greedily\",\n  \"greedless\",\n  \"greedy\",\n  \"green\",\n  \"greeter\",\n  \"greeting\",\n  \"grew\",\n  \"greyhound\",\n  \"grid\",\n  \"grief\",\n  \"grievance\",\n  \"grieving\",\n  \"grievous\",\n  \"grill\",\n  \"grimace\",\n  \"grimacing\",\n  \"grime\",\n  \"griminess\",\n  \"grimy\",\n  \"grinch\",\n  \"grinning\",\n  \"grip\",\n  \"gristle\",\n  \"grit\",\n  \"groggily\",\n  \"groggy\",\n  \"groin\",\n  \"groom\",\n  \"groove\",\n  \"grooving\",\n  \"groovy\",\n  \"grope\",\n  \"ground\",\n  \"grouped\",\n  \"grout\",\n  \"grove\",\n  \"grower\",\n  \"growing\",\n  \"growl\",\n  \"grub\",\n  \"grudge\",\n  \"grudging\",\n  \"grueling\",\n  \"gruffly\",\n  \"grumble\",\n  \"grumbling\",\n  \"grumbly\",\n  \"grumpily\",\n  \"grunge\",\n  \"grunt\",\n  \"guacamole\",\n  \"guidable\",\n  \"guidance\",\n  \"guide\",\n  \"guiding\",\n  \"guileless\",\n  \"guise\",\n  \"gulf\",\n  \"gullible\",\n  \"gully\",\n  \"gulp\",\n  \"gumball\",\n  \"gumdrop\",\n  \"gumminess\",\n  \"gumming\",\n  \"gummy\",\n  \"gurgle\",\n  \"gurgling\",\n  \"guru\",\n  \"gush\",\n  \"gusto\",\n  \"gusty\",\n  \"gutless\",\n  \"guts\",\n  \"gutter\",\n  \"guy\",\n  \"guzzler\",\n  \"gyration\",\n  \"habitable\",\n  \"habitant\",\n  \"habitat\",\n  \"habitual\",\n  \"hacked\",\n  \"hacker\",\n  \"hacking\",\n  \"hacksaw\",\n  \"had\",\n  \"haggler\",\n  \"haiku\",\n  \"half\",\n  \"halogen\",\n  \"halt\",\n  \"halved\",\n  \"halves\",\n  \"hamburger\",\n  \"hamlet\",\n  \"hammock\",\n  \"hamper\",\n  \"hamster\",\n  \"hamstring\",\n  \"handbag\",\n  \"handball\",\n  \"handbook\",\n  \"handbrake\",\n  \"handcart\",\n  \"handclap\",\n  \"handclasp\",\n  \"handcraft\",\n  \"handcuff\",\n  \"handed\",\n  \"handful\",\n  \"handgrip\",\n  \"handgun\",\n  \"handheld\",\n  \"handiness\",\n  \"handiwork\",\n  \"handlebar\",\n  \"handled\",\n  \"handler\",\n  \"handling\",\n  \"handmade\",\n  \"handoff\",\n  \"handpick\",\n  \"handprint\",\n  \"handrail\",\n  \"handsaw\",\n  \"handset\",\n  \"handsfree\",\n  \"handshake\",\n  \"handstand\",\n  \"handwash\",\n  \"handwork\",\n  \"handwoven\",\n  \"handwrite\",\n  \"handyman\",\n  \"hangnail\",\n  \"hangout\",\n  \"hangover\",\n  \"hangup\",\n  \"hankering\",\n  \"hankie\",\n  \"hanky\",\n  \"haphazard\",\n  \"happening\",\n  \"happier\",\n  \"happiest\",\n  \"happily\",\n  \"happiness\",\n  \"happy\",\n  \"harbor\",\n  \"hardcopy\",\n  \"hardcore\",\n  \"hardcover\",\n  \"harddisk\",\n  \"hardened\",\n  \"hardener\",\n  \"hardening\",\n  \"hardhat\",\n  \"hardhead\",\n  \"hardiness\",\n  \"hardly\",\n  \"hardness\",\n  \"hardship\",\n  \"hardware\",\n  \"hardwired\",\n  \"hardwood\",\n  \"hardy\",\n  \"harmful\",\n  \"harmless\",\n  \"harmonica\",\n  \"harmonics\",\n  \"harmonize\",\n  \"harmony\",\n  \"harness\",\n  \"harpist\",\n  \"harsh\",\n  \"harvest\",\n  \"hash\",\n  \"hassle\",\n  \"haste\",\n  \"hastily\",\n  \"hastiness\",\n  \"hasty\",\n  \"hatbox\",\n  \"hatchback\",\n  \"hatchery\",\n  \"hatchet\",\n  \"hatching\",\n  \"hatchling\",\n  \"hate\",\n  \"hatless\",\n  \"hatred\",\n  \"haunt\",\n  \"haven\",\n  \"hazard\",\n  \"hazelnut\",\n  \"hazily\",\n  \"haziness\",\n  \"hazing\",\n  \"hazy\",\n  \"headache\",\n  \"headband\",\n  \"headboard\",\n  \"headcount\",\n  \"headdress\",\n  \"headed\",\n  \"header\",\n  \"headfirst\",\n  \"headgear\",\n  \"heading\",\n  \"headlamp\",\n  \"headless\",\n  \"headlock\",\n  \"headphone\",\n  \"headpiece\",\n  \"headrest\",\n  \"headroom\",\n  \"headscarf\",\n  \"headset\",\n  \"headsman\",\n  \"headstand\",\n  \"headstone\",\n  \"headway\",\n  \"headwear\",\n  \"heap\",\n  \"heat\",\n  \"heave\",\n  \"heavily\",\n  \"heaviness\",\n  \"heaving\",\n  \"hedge\",\n  \"hedging\",\n  \"heftiness\",\n  \"hefty\",\n  \"helium\",\n  \"helmet\",\n  \"helper\",\n  \"helpful\",\n  \"helping\",\n  \"helpless\",\n  \"helpline\",\n  \"hemlock\",\n  \"hemstitch\",\n  \"hence\",\n  \"henchman\",\n  \"henna\",\n  \"herald\",\n  \"herbal\",\n  \"herbicide\",\n  \"herbs\",\n  \"heritage\",\n  \"hermit\",\n  \"heroics\",\n  \"heroism\",\n  \"herring\",\n  \"herself\",\n  \"hertz\",\n  \"hesitancy\",\n  \"hesitant\",\n  \"hesitate\",\n  \"hexagon\",\n  \"hexagram\",\n  \"hubcap\",\n  \"huddle\",\n  \"huddling\",\n  \"huff\",\n  \"hug\",\n  \"hula\",\n  \"hulk\",\n  \"hull\",\n  \"human\",\n  \"humble\",\n  \"humbling\",\n  \"humbly\",\n  \"humid\",\n  \"humiliate\",\n  \"humility\",\n  \"humming\",\n  \"hummus\",\n  \"humongous\",\n  \"humorist\",\n  \"humorless\",\n  \"humorous\",\n  \"humpback\",\n  \"humped\",\n  \"humvee\",\n  \"hunchback\",\n  \"hundredth\",\n  \"hunger\",\n  \"hungrily\",\n  \"hungry\",\n  \"hunk\",\n  \"hunter\",\n  \"hunting\",\n  \"huntress\",\n  \"huntsman\",\n  \"hurdle\",\n  \"hurled\",\n  \"hurler\",\n  \"hurling\",\n  \"hurray\",\n  \"hurricane\",\n  \"hurried\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hush\",\n  \"husked\",\n  \"huskiness\",\n  \"hut\",\n  \"hybrid\",\n  \"hydrant\",\n  \"hydrated\",\n  \"hydration\",\n  \"hydrogen\",\n  \"hydroxide\",\n  \"hyperlink\",\n  \"hypertext\",\n  \"hyphen\",\n  \"hypnoses\",\n  \"hypnosis\",\n  \"hypnotic\",\n  \"hypnotism\",\n  \"hypnotist\",\n  \"hypnotize\",\n  \"hypocrisy\",\n  \"hypocrite\",\n  \"ibuprofen\",\n  \"ice\",\n  \"iciness\",\n  \"icing\",\n  \"icky\",\n  \"icon\",\n  \"icy\",\n  \"idealism\",\n  \"idealist\",\n  \"idealize\",\n  \"ideally\",\n  \"idealness\",\n  \"identical\",\n  \"identify\",\n  \"identity\",\n  \"ideology\",\n  \"idiocy\",\n  \"idiom\",\n  \"idly\",\n  \"igloo\",\n  \"ignition\",\n  \"ignore\",\n  \"iguana\",\n  \"illicitly\",\n  \"illusion\",\n  \"illusive\",\n  \"image\",\n  \"imaginary\",\n  \"imagines\",\n  \"imaging\",\n  \"imbecile\",\n  \"imitate\",\n  \"imitation\",\n  \"immature\",\n  \"immerse\",\n  \"immersion\",\n  \"imminent\",\n  \"immobile\",\n  \"immodest\",\n  \"immorally\",\n  \"immortal\",\n  \"immovable\",\n  \"immovably\",\n  \"immunity\",\n  \"immunize\",\n  \"impaired\",\n  \"impale\",\n  \"impart\",\n  \"impatient\",\n  \"impeach\",\n  \"impeding\",\n  \"impending\",\n  \"imperfect\",\n  \"imperial\",\n  \"impish\",\n  \"implant\",\n  \"implement\",\n  \"implicate\",\n  \"implicit\",\n  \"implode\",\n  \"implosion\",\n  \"implosive\",\n  \"imply\",\n  \"impolite\",\n  \"important\",\n  \"importer\",\n  \"impose\",\n  \"imposing\",\n  \"impotence\",\n  \"impotency\",\n  \"impotent\",\n  \"impound\",\n  \"imprecise\",\n  \"imprint\",\n  \"imprison\",\n  \"impromptu\",\n  \"improper\",\n  \"improve\",\n  \"improving\",\n  \"improvise\",\n  \"imprudent\",\n  \"impulse\",\n  \"impulsive\",\n  \"impure\",\n  \"impurity\",\n  \"iodine\",\n  \"iodize\",\n  \"ion\",\n  \"ipad\",\n  \"iphone\",\n  \"ipod\",\n  \"irate\",\n  \"irk\",\n  \"iron\",\n  \"irregular\",\n  \"irrigate\",\n  \"irritable\",\n  \"irritably\",\n  \"irritant\",\n  \"irritate\",\n  \"islamic\",\n  \"islamist\",\n  \"isolated\",\n  \"isolating\",\n  \"isolation\",\n  \"isotope\",\n  \"issue\",\n  \"issuing\",\n  \"italicize\",\n  \"italics\",\n  \"item\",\n  \"itinerary\",\n  \"itunes\",\n  \"ivory\",\n  \"ivy\",\n  \"jab\",\n  \"jackal\",\n  \"jacket\",\n  \"jackknife\",\n  \"jackpot\",\n  \"jailbird\",\n  \"jailbreak\",\n  \"jailer\",\n  \"jailhouse\",\n  \"jalapeno\",\n  \"jam\",\n  \"janitor\",\n  \"january\",\n  \"jargon\",\n  \"jarring\",\n  \"jasmine\",\n  \"jaundice\",\n  \"jaunt\",\n  \"java\",\n  \"jawed\",\n  \"jawless\",\n  \"jawline\",\n  \"jaws\",\n  \"jaybird\",\n  \"jaywalker\",\n  \"jazz\",\n  \"jeep\",\n  \"jeeringly\",\n  \"jellied\",\n  \"jelly\",\n  \"jersey\",\n  \"jester\",\n  \"jet\",\n  \"jiffy\",\n  \"jigsaw\",\n  \"jimmy\",\n  \"jingle\",\n  \"jingling\",\n  \"jinx\",\n  \"jitters\",\n  \"jittery\",\n  \"job\",\n  \"jockey\",\n  \"jockstrap\",\n  \"jogger\",\n  \"jogging\",\n  \"john\",\n  \"joining\",\n  \"jokester\",\n  \"jokingly\",\n  \"jolliness\",\n  \"jolly\",\n  \"jolt\",\n  \"jot\",\n  \"jovial\",\n  \"joyfully\",\n  \"joylessly\",\n  \"joyous\",\n  \"joyride\",\n  \"joystick\",\n  \"jubilance\",\n  \"jubilant\",\n  \"judge\",\n  \"judgingly\",\n  \"judicial\",\n  \"judiciary\",\n  \"judo\",\n  \"juggle\",\n  \"juggling\",\n  \"jugular\",\n  \"juice\",\n  \"juiciness\",\n  \"juicy\",\n  \"jujitsu\",\n  \"jukebox\",\n  \"july\",\n  \"jumble\",\n  \"jumbo\",\n  \"jump\",\n  \"junction\",\n  \"juncture\",\n  \"june\",\n  \"junior\",\n  \"juniper\",\n  \"junkie\",\n  \"junkman\",\n  \"junkyard\",\n  \"jurist\",\n  \"juror\",\n  \"jury\",\n  \"justice\",\n  \"justifier\",\n  \"justify\",\n  \"justly\",\n  \"justness\",\n  \"juvenile\",\n  \"kabob\",\n  \"kangaroo\",\n  \"karaoke\",\n  \"karate\",\n  \"karma\",\n  \"kebab\",\n  \"keenly\",\n  \"keenness\",\n  \"keep\",\n  \"keg\",\n  \"kelp\",\n  \"kennel\",\n  \"kept\",\n  \"kerchief\",\n  \"kerosene\",\n  \"kettle\",\n  \"kick\",\n  \"kiln\",\n  \"kilobyte\",\n  \"kilogram\",\n  \"kilometer\",\n  \"kilowatt\",\n  \"kilt\",\n  \"kimono\",\n  \"kindle\",\n  \"kindling\",\n  \"kindly\",\n  \"kindness\",\n  \"kindred\",\n  \"kinetic\",\n  \"kinfolk\",\n  \"king\",\n  \"kinship\",\n  \"kinsman\",\n  \"kinswoman\",\n  \"kissable\",\n  \"kisser\",\n  \"kissing\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kitty\",\n  \"kiwi\",\n  \"kleenex\",\n  \"knapsack\",\n  \"knee\",\n  \"knelt\",\n  \"knickers\",\n  \"knoll\",\n  \"koala\",\n  \"kooky\",\n  \"kosher\",\n  \"krypton\",\n  \"kudos\",\n  \"kung\",\n  \"labored\",\n  \"laborer\",\n  \"laboring\",\n  \"laborious\",\n  \"labrador\",\n  \"ladder\",\n  \"ladies\",\n  \"ladle\",\n  \"ladybug\",\n  \"ladylike\",\n  \"lagged\",\n  \"lagging\",\n  \"lagoon\",\n  \"lair\",\n  \"lake\",\n  \"lance\",\n  \"landed\",\n  \"landfall\",\n  \"landfill\",\n  \"landing\",\n  \"landlady\",\n  \"landless\",\n  \"landline\",\n  \"landlord\",\n  \"landmark\",\n  \"landmass\",\n  \"landmine\",\n  \"landowner\",\n  \"landscape\",\n  \"landside\",\n  \"landslide\",\n  \"language\",\n  \"lankiness\",\n  \"lanky\",\n  \"lantern\",\n  \"lapdog\",\n  \"lapel\",\n  \"lapped\",\n  \"lapping\",\n  \"laptop\",\n  \"lard\",\n  \"large\",\n  \"lark\",\n  \"lash\",\n  \"lasso\",\n  \"last\",\n  \"latch\",\n  \"late\",\n  \"lather\",\n  \"latitude\",\n  \"latrine\",\n  \"latter\",\n  \"latticed\",\n  \"launch\",\n  \"launder\",\n  \"laundry\",\n  \"laurel\",\n  \"lavender\",\n  \"lavish\",\n  \"laxative\",\n  \"lazily\",\n  \"laziness\",\n  \"lazy\",\n  \"lecturer\",\n  \"left\",\n  \"legacy\",\n  \"legal\",\n  \"legend\",\n  \"legged\",\n  \"leggings\",\n  \"legible\",\n  \"legibly\",\n  \"legislate\",\n  \"lego\",\n  \"legroom\",\n  \"legume\",\n  \"legwarmer\",\n  \"legwork\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"lent\",\n  \"leotard\",\n  \"lesser\",\n  \"letdown\",\n  \"lethargic\",\n  \"lethargy\",\n  \"letter\",\n  \"lettuce\",\n  \"level\",\n  \"leverage\",\n  \"levers\",\n  \"levitate\",\n  \"levitator\",\n  \"liability\",\n  \"liable\",\n  \"liberty\",\n  \"librarian\",\n  \"library\",\n  \"licking\",\n  \"licorice\",\n  \"lid\",\n  \"life\",\n  \"lifter\",\n  \"lifting\",\n  \"liftoff\",\n  \"ligament\",\n  \"likely\",\n  \"likeness\",\n  \"likewise\",\n  \"liking\",\n  \"lilac\",\n  \"lilly\",\n  \"lily\",\n  \"limb\",\n  \"limeade\",\n  \"limelight\",\n  \"limes\",\n  \"limit\",\n  \"limping\",\n  \"limpness\",\n  \"line\",\n  \"lingo\",\n  \"linguini\",\n  \"linguist\",\n  \"lining\",\n  \"linked\",\n  \"linoleum\",\n  \"linseed\",\n  \"lint\",\n  \"lion\",\n  \"lip\",\n  \"liquefy\",\n  \"liqueur\",\n  \"liquid\",\n  \"lisp\",\n  \"list\",\n  \"litigate\",\n  \"litigator\",\n  \"litmus\",\n  \"litter\",\n  \"little\",\n  \"livable\",\n  \"lived\",\n  \"lively\",\n  \"liver\",\n  \"livestock\",\n  \"lividly\",\n  \"living\",\n  \"lizard\",\n  \"lubricant\",\n  \"lubricate\",\n  \"lucid\",\n  \"luckily\",\n  \"luckiness\",\n  \"luckless\",\n  \"lucrative\",\n  \"ludicrous\",\n  \"lugged\",\n  \"lukewarm\",\n  \"lullaby\",\n  \"lumber\",\n  \"luminance\",\n  \"luminous\",\n  \"lumpiness\",\n  \"lumping\",\n  \"lumpish\",\n  \"lunacy\",\n  \"lunar\",\n  \"lunchbox\",\n  \"luncheon\",\n  \"lunchroom\",\n  \"lunchtime\",\n  \"lung\",\n  \"lurch\",\n  \"lure\",\n  \"luridness\",\n  \"lurk\",\n  \"lushly\",\n  \"lushness\",\n  \"luster\",\n  \"lustfully\",\n  \"lustily\",\n  \"lustiness\",\n  \"lustrous\",\n  \"lusty\",\n  \"luxurious\",\n  \"luxury\",\n  \"lying\",\n  \"lyrically\",\n  \"lyricism\",\n  \"lyricist\",\n  \"lyrics\",\n  \"macarena\",\n  \"macaroni\",\n  \"macaw\",\n  \"mace\",\n  \"machine\",\n  \"machinist\",\n  \"magazine\",\n  \"magenta\",\n  \"maggot\",\n  \"magical\",\n  \"magician\",\n  \"magma\",\n  \"magnesium\",\n  \"magnetic\",\n  \"magnetism\",\n  \"magnetize\",\n  \"magnifier\",\n  \"magnify\",\n  \"magnitude\",\n  \"magnolia\",\n  \"mahogany\",\n  \"maimed\",\n  \"majestic\",\n  \"majesty\",\n  \"majorette\",\n  \"majority\",\n  \"makeover\",\n  \"maker\",\n  \"makeshift\",\n  \"making\",\n  \"malformed\",\n  \"malt\",\n  \"mama\",\n  \"mammal\",\n  \"mammary\",\n  \"mammogram\",\n  \"manager\",\n  \"managing\",\n  \"manatee\",\n  \"mandarin\",\n  \"mandate\",\n  \"mandatory\",\n  \"mandolin\",\n  \"manger\",\n  \"mangle\",\n  \"mango\",\n  \"mangy\",\n  \"manhandle\",\n  \"manhole\",\n  \"manhood\",\n  \"manhunt\",\n  \"manicotti\",\n  \"manicure\",\n  \"manifesto\",\n  \"manila\",\n  \"mankind\",\n  \"manlike\",\n  \"manliness\",\n  \"manly\",\n  \"manmade\",\n  \"manned\",\n  \"mannish\",\n  \"manor\",\n  \"manpower\",\n  \"mantis\",\n  \"mantra\",\n  \"manual\",\n  \"many\",\n  \"map\",\n  \"marathon\",\n  \"marauding\",\n  \"marbled\",\n  \"marbles\",\n  \"marbling\",\n  \"march\",\n  \"mardi\",\n  \"margarine\",\n  \"margarita\",\n  \"margin\",\n  \"marigold\",\n  \"marina\",\n  \"marine\",\n  \"marital\",\n  \"maritime\",\n  \"marlin\",\n  \"marmalade\",\n  \"maroon\",\n  \"married\",\n  \"marrow\",\n  \"marry\",\n  \"marshland\",\n  \"marshy\",\n  \"marsupial\",\n  \"marvelous\",\n  \"marxism\",\n  \"mascot\",\n  \"masculine\",\n  \"mashed\",\n  \"mashing\",\n  \"massager\",\n  \"masses\",\n  \"massive\",\n  \"mastiff\",\n  \"matador\",\n  \"matchbook\",\n  \"matchbox\",\n  \"matcher\",\n  \"matching\",\n  \"matchless\",\n  \"material\",\n  \"maternal\",\n  \"maternity\",\n  \"math\",\n  \"mating\",\n  \"matriarch\",\n  \"matrimony\",\n  \"matrix\",\n  \"matron\",\n  \"matted\",\n  \"matter\",\n  \"maturely\",\n  \"maturing\",\n  \"maturity\",\n  \"mauve\",\n  \"maverick\",\n  \"maximize\",\n  \"maximum\",\n  \"maybe\",\n  \"mayday\",\n  \"mayflower\",\n  \"moaner\",\n  \"moaning\",\n  \"mobile\",\n  \"mobility\",\n  \"mobilize\",\n  \"mobster\",\n  \"mocha\",\n  \"mocker\",\n  \"mockup\",\n  \"modified\",\n  \"modify\",\n  \"modular\",\n  \"modulator\",\n  \"module\",\n  \"moisten\",\n  \"moistness\",\n  \"moisture\",\n  \"molar\",\n  \"molasses\",\n  \"mold\",\n  \"molecular\",\n  \"molecule\",\n  \"molehill\",\n  \"mollusk\",\n  \"mom\",\n  \"monastery\",\n  \"monday\",\n  \"monetary\",\n  \"monetize\",\n  \"moneybags\",\n  \"moneyless\",\n  \"moneywise\",\n  \"mongoose\",\n  \"mongrel\",\n  \"monitor\",\n  \"monkhood\",\n  \"monogamy\",\n  \"monogram\",\n  \"monologue\",\n  \"monopoly\",\n  \"monorail\",\n  \"monotone\",\n  \"monotype\",\n  \"monoxide\",\n  \"monsieur\",\n  \"monsoon\",\n  \"monstrous\",\n  \"monthly\",\n  \"monument\",\n  \"moocher\",\n  \"moodiness\",\n  \"moody\",\n  \"mooing\",\n  \"moonbeam\",\n  \"mooned\",\n  \"moonlight\",\n  \"moonlike\",\n  \"moonlit\",\n  \"moonrise\",\n  \"moonscape\",\n  \"moonshine\",\n  \"moonstone\",\n  \"moonwalk\",\n  \"mop\",\n  \"morale\",\n  \"morality\",\n  \"morally\",\n  \"morbidity\",\n  \"morbidly\",\n  \"morphine\",\n  \"morphing\",\n  \"morse\",\n  \"mortality\",\n  \"mortally\",\n  \"mortician\",\n  \"mortified\",\n  \"mortify\",\n  \"mortuary\",\n  \"mosaic\",\n  \"mossy\",\n  \"most\",\n  \"mothball\",\n  \"mothproof\",\n  \"motion\",\n  \"motivate\",\n  \"motivator\",\n  \"motive\",\n  \"motocross\",\n  \"motor\",\n  \"motto\",\n  \"mountable\",\n  \"mountain\",\n  \"mounted\",\n  \"mounting\",\n  \"mourner\",\n  \"mournful\",\n  \"mouse\",\n  \"mousiness\",\n  \"moustache\",\n  \"mousy\",\n  \"mouth\",\n  \"movable\",\n  \"move\",\n  \"movie\",\n  \"moving\",\n  \"mower\",\n  \"mowing\",\n  \"much\",\n  \"muck\",\n  \"mud\",\n  \"mug\",\n  \"mulberry\",\n  \"mulch\",\n  \"mule\",\n  \"mulled\",\n  \"mullets\",\n  \"multiple\",\n  \"multiply\",\n  \"multitask\",\n  \"multitude\",\n  \"mumble\",\n  \"mumbling\",\n  \"mumbo\",\n  \"mummified\",\n  \"mummify\",\n  \"mummy\",\n  \"mumps\",\n  \"munchkin\",\n  \"mundane\",\n  \"municipal\",\n  \"muppet\",\n  \"mural\",\n  \"murkiness\",\n  \"murky\",\n  \"murmuring\",\n  \"muscular\",\n  \"museum\",\n  \"mushily\",\n  \"mushiness\",\n  \"mushroom\",\n  \"mushy\",\n  \"music\",\n  \"musket\",\n  \"muskiness\",\n  \"musky\",\n  \"mustang\",\n  \"mustard\",\n  \"muster\",\n  \"mustiness\",\n  \"musty\",\n  \"mutable\",\n  \"mutate\",\n  \"mutation\",\n  \"mute\",\n  \"mutilated\",\n  \"mutilator\",\n  \"mutiny\",\n  \"mutt\",\n  \"mutual\",\n  \"muzzle\",\n  \"myself\",\n  \"myspace\",\n  \"mystified\",\n  \"mystify\",\n  \"myth\",\n  \"nacho\",\n  \"nag\",\n  \"nail\",\n  \"name\",\n  \"naming\",\n  \"nanny\",\n  \"nanometer\",\n  \"nape\",\n  \"napkin\",\n  \"napped\",\n  \"napping\",\n  \"nappy\",\n  \"narrow\",\n  \"nastily\",\n  \"nastiness\",\n  \"national\",\n  \"native\",\n  \"nativity\",\n  \"natural\",\n  \"nature\",\n  \"naturist\",\n  \"nautical\",\n  \"navigate\",\n  \"navigator\",\n  \"navy\",\n  \"nearby\",\n  \"nearest\",\n  \"nearly\",\n  \"nearness\",\n  \"neatly\",\n  \"neatness\",\n  \"nebula\",\n  \"nebulizer\",\n  \"nectar\",\n  \"negate\",\n  \"negation\",\n  \"negative\",\n  \"neglector\",\n  \"negligee\",\n  \"negligent\",\n  \"negotiate\",\n  \"nemeses\",\n  \"nemesis\",\n  \"neon\",\n  \"nephew\",\n  \"nerd\",\n  \"nervous\",\n  \"nervy\",\n  \"nest\",\n  \"net\",\n  \"neurology\",\n  \"neuron\",\n  \"neurosis\",\n  \"neurotic\",\n  \"neuter\",\n  \"neutron\",\n  \"never\",\n  \"next\",\n  \"nibble\",\n  \"nickname\",\n  \"nicotine\",\n  \"niece\",\n  \"nifty\",\n  \"nimble\",\n  \"nimbly\",\n  \"nineteen\",\n  \"ninetieth\",\n  \"ninja\",\n  \"nintendo\",\n  \"ninth\",\n  \"nuclear\",\n  \"nuclei\",\n  \"nucleus\",\n  \"nugget\",\n  \"nullify\",\n  \"number\",\n  \"numbing\",\n  \"numbly\",\n  \"numbness\",\n  \"numeral\",\n  \"numerate\",\n  \"numerator\",\n  \"numeric\",\n  \"numerous\",\n  \"nuptials\",\n  \"nursery\",\n  \"nursing\",\n  \"nurture\",\n  \"nutcase\",\n  \"nutlike\",\n  \"nutmeg\",\n  \"nutrient\",\n  \"nutshell\",\n  \"nuttiness\",\n  \"nutty\",\n  \"nuzzle\",\n  \"nylon\",\n  \"oaf\",\n  \"oak\",\n  \"oasis\",\n  \"oat\",\n  \"obedience\",\n  \"obedient\",\n  \"obituary\",\n  \"object\",\n  \"obligate\",\n  \"obliged\",\n  \"oblivion\",\n  \"oblivious\",\n  \"oblong\",\n  \"obnoxious\",\n  \"oboe\",\n  \"obscure\",\n  \"obscurity\",\n  \"observant\",\n  \"observer\",\n  \"observing\",\n  \"obsessed\",\n  \"obsession\",\n  \"obsessive\",\n  \"obsolete\",\n  \"obstacle\",\n  \"obstinate\",\n  \"obstruct\",\n  \"obtain\",\n  \"obtrusive\",\n  \"obtuse\",\n  \"obvious\",\n  \"occultist\",\n  \"occupancy\",\n  \"occupant\",\n  \"occupier\",\n  \"occupy\",\n  \"ocean\",\n  \"ocelot\",\n  \"octagon\",\n  \"octane\",\n  \"october\",\n  \"octopus\",\n  \"ogle\",\n  \"oil\",\n  \"oink\",\n  \"ointment\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympics\",\n  \"omega\",\n  \"omen\",\n  \"ominous\",\n  \"omission\",\n  \"omit\",\n  \"omnivore\",\n  \"onboard\",\n  \"oncoming\",\n  \"ongoing\",\n  \"onion\",\n  \"online\",\n  \"onlooker\",\n  \"only\",\n  \"onscreen\",\n  \"onset\",\n  \"onshore\",\n  \"onslaught\",\n  \"onstage\",\n  \"onto\",\n  \"onward\",\n  \"onyx\",\n  \"oops\",\n  \"ooze\",\n  \"oozy\",\n  \"opacity\",\n  \"opal\",\n  \"open\",\n  \"operable\",\n  \"operate\",\n  \"operating\",\n  \"operation\",\n  \"operative\",\n  \"operator\",\n  \"opium\",\n  \"opossum\",\n  \"opponent\",\n  \"oppose\",\n  \"opposing\",\n  \"opposite\",\n  \"oppressed\",\n  \"oppressor\",\n  \"opt\",\n  \"opulently\",\n  \"osmosis\",\n  \"other\",\n  \"otter\",\n  \"ouch\",\n  \"ought\",\n  \"ounce\",\n  \"outage\",\n  \"outback\",\n  \"outbid\",\n  \"outboard\",\n  \"outbound\",\n  \"outbreak\",\n  \"outburst\",\n  \"outcast\",\n  \"outclass\",\n  \"outcome\",\n  \"outdated\",\n  \"outdoors\",\n  \"outer\",\n  \"outfield\",\n  \"outfit\",\n  \"outflank\",\n  \"outgoing\",\n  \"outgrow\",\n  \"outhouse\",\n  \"outing\",\n  \"outlast\",\n  \"outlet\",\n  \"outline\",\n  \"outlook\",\n  \"outlying\",\n  \"outmatch\",\n  \"outmost\",\n  \"outnumber\",\n  \"outplayed\",\n  \"outpost\",\n  \"outpour\",\n  \"output\",\n  \"outrage\",\n  \"outrank\",\n  \"outreach\",\n  \"outright\",\n  \"outscore\",\n  \"outsell\",\n  \"outshine\",\n  \"outshoot\",\n  \"outsider\",\n  \"outskirts\",\n  \"outsmart\",\n  \"outsource\",\n  \"outspoken\",\n  \"outtakes\",\n  \"outthink\",\n  \"outward\",\n  \"outweigh\",\n  \"outwit\",\n  \"oval\",\n  \"ovary\",\n  \"oven\",\n  \"overact\",\n  \"overall\",\n  \"overarch\",\n  \"overbid\",\n  \"overbill\",\n  \"overbite\",\n  \"overblown\",\n  \"overboard\",\n  \"overbook\",\n  \"overbuilt\",\n  \"overcast\",\n  \"overcoat\",\n  \"overcome\",\n  \"overcook\",\n  \"overcrowd\",\n  \"overdraft\",\n  \"overdrawn\",\n  \"overdress\",\n  \"overdrive\",\n  \"overdue\",\n  \"overeager\",\n  \"overeater\",\n  \"overexert\",\n  \"overfed\",\n  \"overfeed\",\n  \"overfill\",\n  \"overflow\",\n  \"overfull\",\n  \"overgrown\",\n  \"overhand\",\n  \"overhang\",\n  \"overhaul\",\n  \"overhead\",\n  \"overhear\",\n  \"overheat\",\n  \"overhung\",\n  \"overjoyed\",\n  \"overkill\",\n  \"overlabor\",\n  \"overlaid\",\n  \"overlap\",\n  \"overlay\",\n  \"overload\",\n  \"overlook\",\n  \"overlord\",\n  \"overlying\",\n  \"overnight\",\n  \"overpass\",\n  \"overpay\",\n  \"overplant\",\n  \"overplay\",\n  \"overpower\",\n  \"overprice\",\n  \"overrate\",\n  \"overreach\",\n  \"overreact\",\n  \"override\",\n  \"overripe\",\n  \"overrule\",\n  \"overrun\",\n  \"overshoot\",\n  \"overshot\",\n  \"oversight\",\n  \"oversized\",\n  \"oversleep\",\n  \"oversold\",\n  \"overspend\",\n  \"overstate\",\n  \"overstay\",\n  \"overstep\",\n  \"overstock\",\n  \"overstuff\",\n  \"oversweet\",\n  \"overtake\",\n  \"overthrow\",\n  \"overtime\",\n  \"overtly\",\n  \"overtone\",\n  \"overture\",\n  \"overturn\",\n  \"overuse\",\n  \"overvalue\",\n  \"overview\",\n  \"overwrite\",\n  \"owl\",\n  \"oxford\",\n  \"oxidant\",\n  \"oxidation\",\n  \"oxidize\",\n  \"oxidizing\",\n  \"oxygen\",\n  \"oxymoron\",\n  \"oyster\",\n  \"ozone\",\n  \"paced\",\n  \"pacemaker\",\n  \"pacific\",\n  \"pacifier\",\n  \"pacifism\",\n  \"pacifist\",\n  \"pacify\",\n  \"padded\",\n  \"padding\",\n  \"paddle\",\n  \"paddling\",\n  \"padlock\",\n  \"pagan\",\n  \"pager\",\n  \"paging\",\n  \"pajamas\",\n  \"palace\",\n  \"palatable\",\n  \"palm\",\n  \"palpable\",\n  \"palpitate\",\n  \"paltry\",\n  \"pampered\",\n  \"pamperer\",\n  \"pampers\",\n  \"pamphlet\",\n  \"panama\",\n  \"pancake\",\n  \"pancreas\",\n  \"panda\",\n  \"pandemic\",\n  \"pang\",\n  \"panhandle\",\n  \"panic\",\n  \"panning\",\n  \"panorama\",\n  \"panoramic\",\n  \"panther\",\n  \"pantomime\",\n  \"pantry\",\n  \"pants\",\n  \"pantyhose\",\n  \"paparazzi\",\n  \"papaya\",\n  \"paper\",\n  \"paprika\",\n  \"papyrus\",\n  \"parabola\",\n  \"parachute\",\n  \"parade\",\n  \"paradox\",\n  \"paragraph\",\n  \"parakeet\",\n  \"paralegal\",\n  \"paralyses\",\n  \"paralysis\",\n  \"paralyze\",\n  \"paramedic\",\n  \"parameter\",\n  \"paramount\",\n  \"parasail\",\n  \"parasite\",\n  \"parasitic\",\n  \"parcel\",\n  \"parched\",\n  \"parchment\",\n  \"pardon\",\n  \"parish\",\n  \"parka\",\n  \"parking\",\n  \"parkway\",\n  \"parlor\",\n  \"parmesan\",\n  \"parole\",\n  \"parrot\",\n  \"parsley\",\n  \"parsnip\",\n  \"partake\",\n  \"parted\",\n  \"parting\",\n  \"partition\",\n  \"partly\",\n  \"partner\",\n  \"partridge\",\n  \"party\",\n  \"passable\",\n  \"passably\",\n  \"passage\",\n  \"passcode\",\n  \"passenger\",\n  \"passerby\",\n  \"passing\",\n  \"passion\",\n  \"passive\",\n  \"passivism\",\n  \"passover\",\n  \"passport\",\n  \"password\",\n  \"pasta\",\n  \"pasted\",\n  \"pastel\",\n  \"pastime\",\n  \"pastor\",\n  \"pastrami\",\n  \"pasture\",\n  \"pasty\",\n  \"patchwork\",\n  \"patchy\",\n  \"paternal\",\n  \"paternity\",\n  \"path\",\n  \"patience\",\n  \"patient\",\n  \"patio\",\n  \"patriarch\",\n  \"patriot\",\n  \"patrol\",\n  \"patronage\",\n  \"patronize\",\n  \"pauper\",\n  \"pavement\",\n  \"paver\",\n  \"pavestone\",\n  \"pavilion\",\n  \"paving\",\n  \"pawing\",\n  \"payable\",\n  \"payback\",\n  \"paycheck\",\n  \"payday\",\n  \"payee\",\n  \"payer\",\n  \"paying\",\n  \"payment\",\n  \"payphone\",\n  \"payroll\",\n  \"pebble\",\n  \"pebbly\",\n  \"pecan\",\n  \"pectin\",\n  \"peculiar\",\n  \"peddling\",\n  \"pediatric\",\n  \"pedicure\",\n  \"pedigree\",\n  \"pedometer\",\n  \"pegboard\",\n  \"pelican\",\n  \"pellet\",\n  \"pelt\",\n  \"pelvis\",\n  \"penalize\",\n  \"penalty\",\n  \"pencil\",\n  \"pendant\",\n  \"pending\",\n  \"penholder\",\n  \"penknife\",\n  \"pennant\",\n  \"penniless\",\n  \"penny\",\n  \"penpal\",\n  \"pension\",\n  \"pentagon\",\n  \"pentagram\",\n  \"pep\",\n  \"perceive\",\n  \"percent\",\n  \"perch\",\n  \"percolate\",\n  \"perennial\",\n  \"perfected\",\n  \"perfectly\",\n  \"perfume\",\n  \"periscope\",\n  \"perish\",\n  \"perjurer\",\n  \"perjury\",\n  \"perkiness\",\n  \"perky\",\n  \"perm\",\n  \"peroxide\",\n  \"perpetual\",\n  \"perplexed\",\n  \"persecute\",\n  \"persevere\",\n  \"persuaded\",\n  \"persuader\",\n  \"pesky\",\n  \"peso\",\n  \"pessimism\",\n  \"pessimist\",\n  \"pester\",\n  \"pesticide\",\n  \"petal\",\n  \"petite\",\n  \"petition\",\n  \"petri\",\n  \"petroleum\",\n  \"petted\",\n  \"petticoat\",\n  \"pettiness\",\n  \"petty\",\n  \"petunia\",\n  \"phantom\",\n  \"phobia\",\n  \"phoenix\",\n  \"phonebook\",\n  \"phoney\",\n  \"phonics\",\n  \"phoniness\",\n  \"phony\",\n  \"phosphate\",\n  \"photo\",\n  \"phrase\",\n  \"phrasing\",\n  \"placard\",\n  \"placate\",\n  \"placidly\",\n  \"plank\",\n  \"planner\",\n  \"plant\",\n  \"plasma\",\n  \"plaster\",\n  \"plastic\",\n  \"plated\",\n  \"platform\",\n  \"plating\",\n  \"platinum\",\n  \"platonic\",\n  \"platter\",\n  \"platypus\",\n  \"plausible\",\n  \"plausibly\",\n  \"playable\",\n  \"playback\",\n  \"player\",\n  \"playful\",\n  \"playgroup\",\n  \"playhouse\",\n  \"playing\",\n  \"playlist\",\n  \"playmaker\",\n  \"playmate\",\n  \"playoff\",\n  \"playpen\",\n  \"playroom\",\n  \"playset\",\n  \"plaything\",\n  \"playtime\",\n  \"plaza\",\n  \"pleading\",\n  \"pleat\",\n  \"pledge\",\n  \"plentiful\",\n  \"plenty\",\n  \"plethora\",\n  \"plexiglas\",\n  \"pliable\",\n  \"plod\",\n  \"plop\",\n  \"plot\",\n  \"plow\",\n  \"ploy\",\n  \"pluck\",\n  \"plug\",\n  \"plunder\",\n  \"plunging\",\n  \"plural\",\n  \"plus\",\n  \"plutonium\",\n  \"plywood\",\n  \"poach\",\n  \"pod\",\n  \"poem\",\n  \"poet\",\n  \"pogo\",\n  \"pointed\",\n  \"pointer\",\n  \"pointing\",\n  \"pointless\",\n  \"pointy\",\n  \"poise\",\n  \"poison\",\n  \"poker\",\n  \"poking\",\n  \"polar\",\n  \"police\",\n  \"policy\",\n  \"polio\",\n  \"polish\",\n  \"politely\",\n  \"polka\",\n  \"polo\",\n  \"polyester\",\n  \"polygon\",\n  \"polygraph\",\n  \"polymer\",\n  \"poncho\",\n  \"pond\",\n  \"pony\",\n  \"popcorn\",\n  \"pope\",\n  \"poplar\",\n  \"popper\",\n  \"poppy\",\n  \"popsicle\",\n  \"populace\",\n  \"popular\",\n  \"populate\",\n  \"porcupine\",\n  \"pork\",\n  \"porous\",\n  \"porridge\",\n  \"portable\",\n  \"portal\",\n  \"portfolio\",\n  \"porthole\",\n  \"portion\",\n  \"portly\",\n  \"portside\",\n  \"poser\",\n  \"posh\",\n  \"posing\",\n  \"possible\",\n  \"possibly\",\n  \"possum\",\n  \"postage\",\n  \"postal\",\n  \"postbox\",\n  \"postcard\",\n  \"posted\",\n  \"poster\",\n  \"posting\",\n  \"postnasal\",\n  \"posture\",\n  \"postwar\",\n  \"pouch\",\n  \"pounce\",\n  \"pouncing\",\n  \"pound\",\n  \"pouring\",\n  \"pout\",\n  \"powdered\",\n  \"powdering\",\n  \"powdery\",\n  \"power\",\n  \"powwow\",\n  \"pox\",\n  \"praising\",\n  \"prance\",\n  \"prancing\",\n  \"pranker\",\n  \"prankish\",\n  \"prankster\",\n  \"prayer\",\n  \"praying\",\n  \"preacher\",\n  \"preaching\",\n  \"preachy\",\n  \"preamble\",\n  \"precinct\",\n  \"precise\",\n  \"precision\",\n  \"precook\",\n  \"precut\",\n  \"predator\",\n  \"predefine\",\n  \"predict\",\n  \"preface\",\n  \"prefix\",\n  \"preflight\",\n  \"preformed\",\n  \"pregame\",\n  \"pregnancy\",\n  \"pregnant\",\n  \"preheated\",\n  \"prelaunch\",\n  \"prelaw\",\n  \"prelude\",\n  \"premiere\",\n  \"premises\",\n  \"premium\",\n  \"prenatal\",\n  \"preoccupy\",\n  \"preorder\",\n  \"prepaid\",\n  \"prepay\",\n  \"preplan\",\n  \"preppy\",\n  \"preschool\",\n  \"prescribe\",\n  \"preseason\",\n  \"preset\",\n  \"preshow\",\n  \"president\",\n  \"presoak\",\n  \"press\",\n  \"presume\",\n  \"presuming\",\n  \"preteen\",\n  \"pretended\",\n  \"pretender\",\n  \"pretense\",\n  \"pretext\",\n  \"pretty\",\n  \"pretzel\",\n  \"prevail\",\n  \"prevalent\",\n  \"prevent\",\n  \"preview\",\n  \"previous\",\n  \"prewar\",\n  \"prewashed\",\n  \"prideful\",\n  \"pried\",\n  \"primal\",\n  \"primarily\",\n  \"primary\",\n  \"primate\",\n  \"primer\",\n  \"primp\",\n  \"princess\",\n  \"print\",\n  \"prior\",\n  \"prism\",\n  \"prison\",\n  \"prissy\",\n  \"pristine\",\n  \"privacy\",\n  \"private\",\n  \"privatize\",\n  \"prize\",\n  \"proactive\",\n  \"probable\",\n  \"probably\",\n  \"probation\",\n  \"probe\",\n  \"probing\",\n  \"probiotic\",\n  \"problem\",\n  \"procedure\",\n  \"process\",\n  \"proclaim\",\n  \"procreate\",\n  \"procurer\",\n  \"prodigal\",\n  \"prodigy\",\n  \"produce\",\n  \"product\",\n  \"profane\",\n  \"profanity\",\n  \"professed\",\n  \"professor\",\n  \"profile\",\n  \"profound\",\n  \"profusely\",\n  \"progeny\",\n  \"prognosis\",\n  \"program\",\n  \"progress\",\n  \"projector\",\n  \"prologue\",\n  \"prolonged\",\n  \"promenade\",\n  \"prominent\",\n  \"promoter\",\n  \"promotion\",\n  \"prompter\",\n  \"promptly\",\n  \"prone\",\n  \"prong\",\n  \"pronounce\",\n  \"pronto\",\n  \"proofing\",\n  \"proofread\",\n  \"proofs\",\n  \"propeller\",\n  \"properly\",\n  \"property\",\n  \"proponent\",\n  \"proposal\",\n  \"propose\",\n  \"props\",\n  \"prorate\",\n  \"protector\",\n  \"protegee\",\n  \"proton\",\n  \"prototype\",\n  \"protozoan\",\n  \"protract\",\n  \"protrude\",\n  \"proud\",\n  \"provable\",\n  \"proved\",\n  \"proven\",\n  \"provided\",\n  \"provider\",\n  \"providing\",\n  \"province\",\n  \"proving\",\n  \"provoke\",\n  \"provoking\",\n  \"provolone\",\n  \"prowess\",\n  \"prowler\",\n  \"prowling\",\n  \"proximity\",\n  \"proxy\",\n  \"prozac\",\n  \"prude\",\n  \"prudishly\",\n  \"prune\",\n  \"pruning\",\n  \"pry\",\n  \"psychic\",\n  \"public\",\n  \"publisher\",\n  \"pucker\",\n  \"pueblo\",\n  \"pug\",\n  \"pull\",\n  \"pulmonary\",\n  \"pulp\",\n  \"pulsate\",\n  \"pulse\",\n  \"pulverize\",\n  \"puma\",\n  \"pumice\",\n  \"pummel\",\n  \"punch\",\n  \"punctual\",\n  \"punctuate\",\n  \"punctured\",\n  \"pungent\",\n  \"punisher\",\n  \"punk\",\n  \"pupil\",\n  \"puppet\",\n  \"puppy\",\n  \"purchase\",\n  \"pureblood\",\n  \"purebred\",\n  \"purely\",\n  \"pureness\",\n  \"purgatory\",\n  \"purge\",\n  \"purging\",\n  \"purifier\",\n  \"purify\",\n  \"purist\",\n  \"puritan\",\n  \"purity\",\n  \"purple\",\n  \"purplish\",\n  \"purposely\",\n  \"purr\",\n  \"purse\",\n  \"pursuable\",\n  \"pursuant\",\n  \"pursuit\",\n  \"purveyor\",\n  \"pushcart\",\n  \"pushchair\",\n  \"pusher\",\n  \"pushiness\",\n  \"pushing\",\n  \"pushover\",\n  \"pushpin\",\n  \"pushup\",\n  \"pushy\",\n  \"putdown\",\n  \"putt\",\n  \"puzzle\",\n  \"puzzling\",\n  \"pyramid\",\n  \"pyromania\",\n  \"python\",\n  \"quack\",\n  \"quadrant\",\n  \"quail\",\n  \"quaintly\",\n  \"quake\",\n  \"quaking\",\n  \"qualified\",\n  \"qualifier\",\n  \"qualify\",\n  \"quality\",\n  \"qualm\",\n  \"quantum\",\n  \"quarrel\",\n  \"quarry\",\n  \"quartered\",\n  \"quarterly\",\n  \"quarters\",\n  \"quartet\",\n  \"quench\",\n  \"query\",\n  \"quicken\",\n  \"quickly\",\n  \"quickness\",\n  \"quicksand\",\n  \"quickstep\",\n  \"quiet\",\n  \"quill\",\n  \"quilt\",\n  \"quintet\",\n  \"quintuple\",\n  \"quirk\",\n  \"quit\",\n  \"quiver\",\n  \"quizzical\",\n  \"quotable\",\n  \"quotation\",\n  \"quote\",\n  \"rabid\",\n  \"race\",\n  \"racing\",\n  \"racism\",\n  \"rack\",\n  \"racoon\",\n  \"radar\",\n  \"radial\",\n  \"radiance\",\n  \"radiantly\",\n  \"radiated\",\n  \"radiation\",\n  \"radiator\",\n  \"radio\",\n  \"radish\",\n  \"raffle\",\n  \"raft\",\n  \"rage\",\n  \"ragged\",\n  \"raging\",\n  \"ragweed\",\n  \"raider\",\n  \"railcar\",\n  \"railing\",\n  \"railroad\",\n  \"railway\",\n  \"raisin\",\n  \"rake\",\n  \"raking\",\n  \"rally\",\n  \"ramble\",\n  \"rambling\",\n  \"ramp\",\n  \"ramrod\",\n  \"ranch\",\n  \"rancidity\",\n  \"random\",\n  \"ranged\",\n  \"ranger\",\n  \"ranging\",\n  \"ranked\",\n  \"ranking\",\n  \"ransack\",\n  \"ranting\",\n  \"rants\",\n  \"rare\",\n  \"rarity\",\n  \"rascal\",\n  \"rash\",\n  \"rasping\",\n  \"ravage\",\n  \"raven\",\n  \"ravine\",\n  \"raving\",\n  \"ravioli\",\n  \"ravishing\",\n  \"reabsorb\",\n  \"reach\",\n  \"reacquire\",\n  \"reaction\",\n  \"reactive\",\n  \"reactor\",\n  \"reaffirm\",\n  \"ream\",\n  \"reanalyze\",\n  \"reappear\",\n  \"reapply\",\n  \"reappoint\",\n  \"reapprove\",\n  \"rearrange\",\n  \"rearview\",\n  \"reason\",\n  \"reassign\",\n  \"reassure\",\n  \"reattach\",\n  \"reawake\",\n  \"rebalance\",\n  \"rebate\",\n  \"rebel\",\n  \"rebirth\",\n  \"reboot\",\n  \"reborn\",\n  \"rebound\",\n  \"rebuff\",\n  \"rebuild\",\n  \"rebuilt\",\n  \"reburial\",\n  \"rebuttal\",\n  \"recall\",\n  \"recant\",\n  \"recapture\",\n  \"recast\",\n  \"recede\",\n  \"recent\",\n  \"recess\",\n  \"recharger\",\n  \"recipient\",\n  \"recital\",\n  \"recite\",\n  \"reckless\",\n  \"reclaim\",\n  \"recliner\",\n  \"reclining\",\n  \"recluse\",\n  \"reclusive\",\n  \"recognize\",\n  \"recoil\",\n  \"recollect\",\n  \"recolor\",\n  \"reconcile\",\n  \"reconfirm\",\n  \"reconvene\",\n  \"recopy\",\n  \"record\",\n  \"recount\",\n  \"recoup\",\n  \"recovery\",\n  \"recreate\",\n  \"rectal\",\n  \"rectangle\",\n  \"rectified\",\n  \"rectify\",\n  \"recycled\",\n  \"recycler\",\n  \"recycling\",\n  \"reemerge\",\n  \"reenact\",\n  \"reenter\",\n  \"reentry\",\n  \"reexamine\",\n  \"referable\",\n  \"referee\",\n  \"reference\",\n  \"refill\",\n  \"refinance\",\n  \"refined\",\n  \"refinery\",\n  \"refining\",\n  \"refinish\",\n  \"reflected\",\n  \"reflector\",\n  \"reflex\",\n  \"reflux\",\n  \"refocus\",\n  \"refold\",\n  \"reforest\",\n  \"reformat\",\n  \"reformed\",\n  \"reformer\",\n  \"reformist\",\n  \"refract\",\n  \"refrain\",\n  \"refreeze\",\n  \"refresh\",\n  \"refried\",\n  \"refueling\",\n  \"refund\",\n  \"refurbish\",\n  \"refurnish\",\n  \"refusal\",\n  \"refuse\",\n  \"refusing\",\n  \"refutable\",\n  \"refute\",\n  \"regain\",\n  \"regalia\",\n  \"regally\",\n  \"reggae\",\n  \"regime\",\n  \"region\",\n  \"register\",\n  \"registrar\",\n  \"registry\",\n  \"regress\",\n  \"regretful\",\n  \"regroup\",\n  \"regular\",\n  \"regulate\",\n  \"regulator\",\n  \"rehab\",\n  \"reheat\",\n  \"rehire\",\n  \"rehydrate\",\n  \"reimburse\",\n  \"reissue\",\n  \"reiterate\",\n  \"rejoice\",\n  \"rejoicing\",\n  \"rejoin\",\n  \"rekindle\",\n  \"relapse\",\n  \"relapsing\",\n  \"relatable\",\n  \"related\",\n  \"relation\",\n  \"relative\",\n  \"relax\",\n  \"relay\",\n  \"relearn\",\n  \"release\",\n  \"relenting\",\n  \"reliable\",\n  \"reliably\",\n  \"reliance\",\n  \"reliant\",\n  \"relic\",\n  \"relieve\",\n  \"relieving\",\n  \"relight\",\n  \"relish\",\n  \"relive\",\n  \"reload\",\n  \"relocate\",\n  \"relock\",\n  \"reluctant\",\n  \"rely\",\n  \"remake\",\n  \"remark\",\n  \"remarry\",\n  \"rematch\",\n  \"remedial\",\n  \"remedy\",\n  \"remember\",\n  \"reminder\",\n  \"remindful\",\n  \"remission\",\n  \"remix\",\n  \"remnant\",\n  \"remodeler\",\n  \"remold\",\n  \"remorse\",\n  \"remote\",\n  \"removable\",\n  \"removal\",\n  \"removed\",\n  \"remover\",\n  \"removing\",\n  \"rename\",\n  \"renderer\",\n  \"rendering\",\n  \"rendition\",\n  \"renegade\",\n  \"renewable\",\n  \"renewably\",\n  \"renewal\",\n  \"renewed\",\n  \"renounce\",\n  \"renovate\",\n  \"renovator\",\n  \"rentable\",\n  \"rental\",\n  \"rented\",\n  \"renter\",\n  \"reoccupy\",\n  \"reoccur\",\n  \"reopen\",\n  \"reorder\",\n  \"repackage\",\n  \"repacking\",\n  \"repaint\",\n  \"repair\",\n  \"repave\",\n  \"repaying\",\n  \"repayment\",\n  \"repeal\",\n  \"repeated\",\n  \"repeater\",\n  \"repent\",\n  \"rephrase\",\n  \"replace\",\n  \"replay\",\n  \"replica\",\n  \"reply\",\n  \"reporter\",\n  \"repose\",\n  \"repossess\",\n  \"repost\",\n  \"repressed\",\n  \"reprimand\",\n  \"reprint\",\n  \"reprise\",\n  \"reproach\",\n  \"reprocess\",\n  \"reproduce\",\n  \"reprogram\",\n  \"reps\",\n  \"reptile\",\n  \"reptilian\",\n  \"repugnant\",\n  \"repulsion\",\n  \"repulsive\",\n  \"repurpose\",\n  \"reputable\",\n  \"reputably\",\n  \"request\",\n  \"require\",\n  \"requisite\",\n  \"reroute\",\n  \"rerun\",\n  \"resale\",\n  \"resample\",\n  \"rescuer\",\n  \"reseal\",\n  \"research\",\n  \"reselect\",\n  \"reseller\",\n  \"resemble\",\n  \"resend\",\n  \"resent\",\n  \"reset\",\n  \"reshape\",\n  \"reshoot\",\n  \"reshuffle\",\n  \"residence\",\n  \"residency\",\n  \"resident\",\n  \"residual\",\n  \"residue\",\n  \"resigned\",\n  \"resilient\",\n  \"resistant\",\n  \"resisting\",\n  \"resize\",\n  \"resolute\",\n  \"resolved\",\n  \"resonant\",\n  \"resonate\",\n  \"resort\",\n  \"resource\",\n  \"respect\",\n  \"resubmit\",\n  \"result\",\n  \"resume\",\n  \"resupply\",\n  \"resurface\",\n  \"resurrect\",\n  \"retail\",\n  \"retainer\",\n  \"retaining\",\n  \"retake\",\n  \"retaliate\",\n  \"retention\",\n  \"rethink\",\n  \"retinal\",\n  \"retired\",\n  \"retiree\",\n  \"retiring\",\n  \"retold\",\n  \"retool\",\n  \"retorted\",\n  \"retouch\",\n  \"retrace\",\n  \"retract\",\n  \"retrain\",\n  \"retread\",\n  \"retreat\",\n  \"retrial\",\n  \"retrieval\",\n  \"retriever\",\n  \"retry\",\n  \"return\",\n  \"retying\",\n  \"retype\",\n  \"reunion\",\n  \"reunite\",\n  \"reusable\",\n  \"reuse\",\n  \"reveal\",\n  \"reveler\",\n  \"revenge\",\n  \"revenue\",\n  \"reverb\",\n  \"revered\",\n  \"reverence\",\n  \"reverend\",\n  \"reversal\",\n  \"reverse\",\n  \"reversing\",\n  \"reversion\",\n  \"revert\",\n  \"revisable\",\n  \"revise\",\n  \"revision\",\n  \"revisit\",\n  \"revivable\",\n  \"revival\",\n  \"reviver\",\n  \"reviving\",\n  \"revocable\",\n  \"revoke\",\n  \"revolt\",\n  \"revolver\",\n  \"revolving\",\n  \"reward\",\n  \"rewash\",\n  \"rewind\",\n  \"rewire\",\n  \"reword\",\n  \"rework\",\n  \"rewrap\",\n  \"rewrite\",\n  \"rhyme\",\n  \"ribbon\",\n  \"ribcage\",\n  \"rice\",\n  \"riches\",\n  \"richly\",\n  \"richness\",\n  \"rickety\",\n  \"ricotta\",\n  \"riddance\",\n  \"ridden\",\n  \"ride\",\n  \"riding\",\n  \"rifling\",\n  \"rift\",\n  \"rigging\",\n  \"rigid\",\n  \"rigor\",\n  \"rimless\",\n  \"rimmed\",\n  \"rind\",\n  \"rink\",\n  \"rinse\",\n  \"rinsing\",\n  \"riot\",\n  \"ripcord\",\n  \"ripeness\",\n  \"ripening\",\n  \"ripping\",\n  \"ripple\",\n  \"rippling\",\n  \"riptide\",\n  \"rise\",\n  \"rising\",\n  \"risk\",\n  \"risotto\",\n  \"ritalin\",\n  \"ritzy\",\n  \"rival\",\n  \"riverbank\",\n  \"riverbed\",\n  \"riverboat\",\n  \"riverside\",\n  \"riveter\",\n  \"riveting\",\n  \"roamer\",\n  \"roaming\",\n  \"roast\",\n  \"robbing\",\n  \"robe\",\n  \"robin\",\n  \"robotics\",\n  \"robust\",\n  \"rockband\",\n  \"rocker\",\n  \"rocket\",\n  \"rockfish\",\n  \"rockiness\",\n  \"rocking\",\n  \"rocklike\",\n  \"rockslide\",\n  \"rockstar\",\n  \"rocky\",\n  \"rogue\",\n  \"roman\",\n  \"romp\",\n  \"rope\",\n  \"roping\",\n  \"roster\",\n  \"rosy\",\n  \"rotten\",\n  \"rotting\",\n  \"rotunda\",\n  \"roulette\",\n  \"rounding\",\n  \"roundish\",\n  \"roundness\",\n  \"roundup\",\n  \"roundworm\",\n  \"routine\",\n  \"routing\",\n  \"rover\",\n  \"roving\",\n  \"royal\",\n  \"rubbed\",\n  \"rubber\",\n  \"rubbing\",\n  \"rubble\",\n  \"rubdown\",\n  \"ruby\",\n  \"ruckus\",\n  \"rudder\",\n  \"rug\",\n  \"ruined\",\n  \"rule\",\n  \"rumble\",\n  \"rumbling\",\n  \"rummage\",\n  \"rumor\",\n  \"runaround\",\n  \"rundown\",\n  \"runner\",\n  \"running\",\n  \"runny\",\n  \"runt\",\n  \"runway\",\n  \"rupture\",\n  \"rural\",\n  \"ruse\",\n  \"rush\",\n  \"rust\",\n  \"rut\",\n  \"sabbath\",\n  \"sabotage\",\n  \"sacrament\",\n  \"sacred\",\n  \"sacrifice\",\n  \"sadden\",\n  \"saddlebag\",\n  \"saddled\",\n  \"saddling\",\n  \"sadly\",\n  \"sadness\",\n  \"safari\",\n  \"safeguard\",\n  \"safehouse\",\n  \"safely\",\n  \"safeness\",\n  \"saffron\",\n  \"saga\",\n  \"sage\",\n  \"sagging\",\n  \"saggy\",\n  \"said\",\n  \"saint\",\n  \"sake\",\n  \"salad\",\n  \"salami\",\n  \"salaried\",\n  \"salary\",\n  \"saline\",\n  \"salon\",\n  \"saloon\",\n  \"salsa\",\n  \"salt\",\n  \"salutary\",\n  \"salute\",\n  \"salvage\",\n  \"salvaging\",\n  \"salvation\",\n  \"same\",\n  \"sample\",\n  \"sampling\",\n  \"sanction\",\n  \"sanctity\",\n  \"sanctuary\",\n  \"sandal\",\n  \"sandbag\",\n  \"sandbank\",\n  \"sandbar\",\n  \"sandblast\",\n  \"sandbox\",\n  \"sanded\",\n  \"sandfish\",\n  \"sanding\",\n  \"sandlot\",\n  \"sandpaper\",\n  \"sandpit\",\n  \"sandstone\",\n  \"sandstorm\",\n  \"sandworm\",\n  \"sandy\",\n  \"sanitary\",\n  \"sanitizer\",\n  \"sank\",\n  \"santa\",\n  \"sapling\",\n  \"sappiness\",\n  \"sappy\",\n  \"sarcasm\",\n  \"sarcastic\",\n  \"sardine\",\n  \"sash\",\n  \"sasquatch\",\n  \"sassy\",\n  \"satchel\",\n  \"satiable\",\n  \"satin\",\n  \"satirical\",\n  \"satisfied\",\n  \"satisfy\",\n  \"saturate\",\n  \"saturday\",\n  \"sauciness\",\n  \"saucy\",\n  \"sauna\",\n  \"savage\",\n  \"savanna\",\n  \"saved\",\n  \"savings\",\n  \"savior\",\n  \"savor\",\n  \"saxophone\",\n  \"say\",\n  \"scabbed\",\n  \"scabby\",\n  \"scalded\",\n  \"scalding\",\n  \"scale\",\n  \"scaling\",\n  \"scallion\",\n  \"scallop\",\n  \"scalping\",\n  \"scam\",\n  \"scandal\",\n  \"scanner\",\n  \"scanning\",\n  \"scant\",\n  \"scapegoat\",\n  \"scarce\",\n  \"scarcity\",\n  \"scarecrow\",\n  \"scared\",\n  \"scarf\",\n  \"scarily\",\n  \"scariness\",\n  \"scarring\",\n  \"scary\",\n  \"scavenger\",\n  \"scenic\",\n  \"schedule\",\n  \"schematic\",\n  \"scheme\",\n  \"scheming\",\n  \"schilling\",\n  \"schnapps\",\n  \"scholar\",\n  \"science\",\n  \"scientist\",\n  \"scion\",\n  \"scoff\",\n  \"scolding\",\n  \"scone\",\n  \"scoop\",\n  \"scooter\",\n  \"scope\",\n  \"scorch\",\n  \"scorebook\",\n  \"scorecard\",\n  \"scored\",\n  \"scoreless\",\n  \"scorer\",\n  \"scoring\",\n  \"scorn\",\n  \"scorpion\",\n  \"scotch\",\n  \"scoundrel\",\n  \"scoured\",\n  \"scouring\",\n  \"scouting\",\n  \"scouts\",\n  \"scowling\",\n  \"scrabble\",\n  \"scraggly\",\n  \"scrambled\",\n  \"scrambler\",\n  \"scrap\",\n  \"scratch\",\n  \"scrawny\",\n  \"screen\",\n  \"scribble\",\n  \"scribe\",\n  \"scribing\",\n  \"scrimmage\",\n  \"script\",\n  \"scroll\",\n  \"scrooge\",\n  \"scrounger\",\n  \"scrubbed\",\n  \"scrubber\",\n  \"scruffy\",\n  \"scrunch\",\n  \"scrutiny\",\n  \"scuba\",\n  \"scuff\",\n  \"sculptor\",\n  \"sculpture\",\n  \"scurvy\",\n  \"scuttle\",\n  \"secluded\",\n  \"secluding\",\n  \"seclusion\",\n  \"second\",\n  \"secrecy\",\n  \"secret\",\n  \"sectional\",\n  \"sector\",\n  \"secular\",\n  \"securely\",\n  \"security\",\n  \"sedan\",\n  \"sedate\",\n  \"sedation\",\n  \"sedative\",\n  \"sediment\",\n  \"seduce\",\n  \"seducing\",\n  \"segment\",\n  \"seismic\",\n  \"seizing\",\n  \"seldom\",\n  \"selected\",\n  \"selection\",\n  \"selective\",\n  \"selector\",\n  \"self\",\n  \"seltzer\",\n  \"semantic\",\n  \"semester\",\n  \"semicolon\",\n  \"semifinal\",\n  \"seminar\",\n  \"semisoft\",\n  \"semisweet\",\n  \"senate\",\n  \"senator\",\n  \"send\",\n  \"senior\",\n  \"senorita\",\n  \"sensation\",\n  \"sensitive\",\n  \"sensitize\",\n  \"sensually\",\n  \"sensuous\",\n  \"sepia\",\n  \"september\",\n  \"septic\",\n  \"septum\",\n  \"sequel\",\n  \"sequence\",\n  \"sequester\",\n  \"series\",\n  \"sermon\",\n  \"serotonin\",\n  \"serpent\",\n  \"serrated\",\n  \"serve\",\n  \"service\",\n  \"serving\",\n  \"sesame\",\n  \"sessions\",\n  \"setback\",\n  \"setting\",\n  \"settle\",\n  \"settling\",\n  \"setup\",\n  \"sevenfold\",\n  \"seventeen\",\n  \"seventh\",\n  \"seventy\",\n  \"severity\",\n  \"shabby\",\n  \"shack\",\n  \"shaded\",\n  \"shadily\",\n  \"shadiness\",\n  \"shading\",\n  \"shadow\",\n  \"shady\",\n  \"shaft\",\n  \"shakable\",\n  \"shakily\",\n  \"shakiness\",\n  \"shaking\",\n  \"shaky\",\n  \"shale\",\n  \"shallot\",\n  \"shallow\",\n  \"shame\",\n  \"shampoo\",\n  \"shamrock\",\n  \"shank\",\n  \"shanty\",\n  \"shape\",\n  \"shaping\",\n  \"share\",\n  \"sharpener\",\n  \"sharper\",\n  \"sharpie\",\n  \"sharply\",\n  \"sharpness\",\n  \"shawl\",\n  \"sheath\",\n  \"shed\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shelter\",\n  \"shelve\",\n  \"shelving\",\n  \"sherry\",\n  \"shield\",\n  \"shifter\",\n  \"shifting\",\n  \"shiftless\",\n  \"shifty\",\n  \"shimmer\",\n  \"shimmy\",\n  \"shindig\",\n  \"shine\",\n  \"shingle\",\n  \"shininess\",\n  \"shining\",\n  \"shiny\",\n  \"ship\",\n  \"shirt\",\n  \"shivering\",\n  \"shock\",\n  \"shone\",\n  \"shoplift\",\n  \"shopper\",\n  \"shopping\",\n  \"shoptalk\",\n  \"shore\",\n  \"shortage\",\n  \"shortcake\",\n  \"shortcut\",\n  \"shorten\",\n  \"shorter\",\n  \"shorthand\",\n  \"shortlist\",\n  \"shortly\",\n  \"shortness\",\n  \"shorts\",\n  \"shortwave\",\n  \"shorty\",\n  \"shout\",\n  \"shove\",\n  \"showbiz\",\n  \"showcase\",\n  \"showdown\",\n  \"shower\",\n  \"showgirl\",\n  \"showing\",\n  \"showman\",\n  \"shown\",\n  \"showoff\",\n  \"showpiece\",\n  \"showplace\",\n  \"showroom\",\n  \"showy\",\n  \"shrank\",\n  \"shrapnel\",\n  \"shredder\",\n  \"shredding\",\n  \"shrewdly\",\n  \"shriek\",\n  \"shrill\",\n  \"shrimp\",\n  \"shrine\",\n  \"shrink\",\n  \"shrivel\",\n  \"shrouded\",\n  \"shrubbery\",\n  \"shrubs\",\n  \"shrug\",\n  \"shrunk\",\n  \"shucking\",\n  \"shudder\",\n  \"shuffle\",\n  \"shuffling\",\n  \"shun\",\n  \"shush\",\n  \"shut\",\n  \"shy\",\n  \"siamese\",\n  \"siberian\",\n  \"sibling\",\n  \"siding\",\n  \"sierra\",\n  \"siesta\",\n  \"sift\",\n  \"sighing\",\n  \"silenced\",\n  \"silencer\",\n  \"silent\",\n  \"silica\",\n  \"silicon\",\n  \"silk\",\n  \"silliness\",\n  \"silly\",\n  \"silo\",\n  \"silt\",\n  \"silver\",\n  \"similarly\",\n  \"simile\",\n  \"simmering\",\n  \"simple\",\n  \"simplify\",\n  \"simply\",\n  \"sincere\",\n  \"sincerity\",\n  \"singer\",\n  \"singing\",\n  \"single\",\n  \"singular\",\n  \"sinister\",\n  \"sinless\",\n  \"sinner\",\n  \"sinuous\",\n  \"sip\",\n  \"siren\",\n  \"sister\",\n  \"sitcom\",\n  \"sitter\",\n  \"sitting\",\n  \"situated\",\n  \"situation\",\n  \"sixfold\",\n  \"sixteen\",\n  \"sixth\",\n  \"sixties\",\n  \"sixtieth\",\n  \"sixtyfold\",\n  \"sizable\",\n  \"sizably\",\n  \"size\",\n  \"sizing\",\n  \"sizzle\",\n  \"sizzling\",\n  \"skater\",\n  \"skating\",\n  \"skedaddle\",\n  \"skeletal\",\n  \"skeleton\",\n  \"skeptic\",\n  \"sketch\",\n  \"skewed\",\n  \"skewer\",\n  \"skid\",\n  \"skied\",\n  \"skier\",\n  \"skies\",\n  \"skiing\",\n  \"skilled\",\n  \"skillet\",\n  \"skillful\",\n  \"skimmed\",\n  \"skimmer\",\n  \"skimming\",\n  \"skimpily\",\n  \"skincare\",\n  \"skinhead\",\n  \"skinless\",\n  \"skinning\",\n  \"skinny\",\n  \"skintight\",\n  \"skipper\",\n  \"skipping\",\n  \"skirmish\",\n  \"skirt\",\n  \"skittle\",\n  \"skydiver\",\n  \"skylight\",\n  \"skyline\",\n  \"skype\",\n  \"skyrocket\",\n  \"skyward\",\n  \"slab\",\n  \"slacked\",\n  \"slacker\",\n  \"slacking\",\n  \"slackness\",\n  \"slacks\",\n  \"slain\",\n  \"slam\",\n  \"slander\",\n  \"slang\",\n  \"slapping\",\n  \"slapstick\",\n  \"slashed\",\n  \"slashing\",\n  \"slate\",\n  \"slather\",\n  \"slaw\",\n  \"sled\",\n  \"sleek\",\n  \"sleep\",\n  \"sleet\",\n  \"sleeve\",\n  \"slept\",\n  \"sliceable\",\n  \"sliced\",\n  \"slicer\",\n  \"slicing\",\n  \"slick\",\n  \"slider\",\n  \"slideshow\",\n  \"sliding\",\n  \"slighted\",\n  \"slighting\",\n  \"slightly\",\n  \"slimness\",\n  \"slimy\",\n  \"slinging\",\n  \"slingshot\",\n  \"slinky\",\n  \"slip\",\n  \"slit\",\n  \"sliver\",\n  \"slobbery\",\n  \"slogan\",\n  \"sloped\",\n  \"sloping\",\n  \"sloppily\",\n  \"sloppy\",\n  \"slot\",\n  \"slouching\",\n  \"slouchy\",\n  \"sludge\",\n  \"slug\",\n  \"slum\",\n  \"slurp\",\n  \"slush\",\n  \"sly\",\n  \"small\",\n  \"smartly\",\n  \"smartness\",\n  \"smasher\",\n  \"smashing\",\n  \"smashup\",\n  \"smell\",\n  \"smelting\",\n  \"smile\",\n  \"smilingly\",\n  \"smirk\",\n  \"smite\",\n  \"smith\",\n  \"smitten\",\n  \"smock\",\n  \"smog\",\n  \"smoked\",\n  \"smokeless\",\n  \"smokiness\",\n  \"smoking\",\n  \"smoky\",\n  \"smolder\",\n  \"smooth\",\n  \"smother\",\n  \"smudge\",\n  \"smudgy\",\n  \"smuggler\",\n  \"smuggling\",\n  \"smugly\",\n  \"smugness\",\n  \"snack\",\n  \"snagged\",\n  \"snaking\",\n  \"snap\",\n  \"snare\",\n  \"snarl\",\n  \"snazzy\",\n  \"sneak\",\n  \"sneer\",\n  \"sneeze\",\n  \"sneezing\",\n  \"snide\",\n  \"sniff\",\n  \"snippet\",\n  \"snipping\",\n  \"snitch\",\n  \"snooper\",\n  \"snooze\",\n  \"snore\",\n  \"snoring\",\n  \"snorkel\",\n  \"snort\",\n  \"snout\",\n  \"snowbird\",\n  \"snowboard\",\n  \"snowbound\",\n  \"snowcap\",\n  \"snowdrift\",\n  \"snowdrop\",\n  \"snowfall\",\n  \"snowfield\",\n  \"snowflake\",\n  \"snowiness\",\n  \"snowless\",\n  \"snowman\",\n  \"snowplow\",\n  \"snowshoe\",\n  \"snowstorm\",\n  \"snowsuit\",\n  \"snowy\",\n  \"snub\",\n  \"snuff\",\n  \"snuggle\",\n  \"snugly\",\n  \"snugness\",\n  \"speak\",\n  \"spearfish\",\n  \"spearhead\",\n  \"spearman\",\n  \"spearmint\",\n  \"species\",\n  \"specimen\",\n  \"specked\",\n  \"speckled\",\n  \"specks\",\n  \"spectacle\",\n  \"spectator\",\n  \"spectrum\",\n  \"speculate\",\n  \"speech\",\n  \"speed\",\n  \"spellbind\",\n  \"speller\",\n  \"spelling\",\n  \"spendable\",\n  \"spender\",\n  \"spending\",\n  \"spent\",\n  \"spew\",\n  \"sphere\",\n  \"spherical\",\n  \"sphinx\",\n  \"spider\",\n  \"spied\",\n  \"spiffy\",\n  \"spill\",\n  \"spilt\",\n  \"spinach\",\n  \"spinal\",\n  \"spindle\",\n  \"spinner\",\n  \"spinning\",\n  \"spinout\",\n  \"spinster\",\n  \"spiny\",\n  \"spiral\",\n  \"spirited\",\n  \"spiritism\",\n  \"spirits\",\n  \"spiritual\",\n  \"splashed\",\n  \"splashing\",\n  \"splashy\",\n  \"splatter\",\n  \"spleen\",\n  \"splendid\",\n  \"splendor\",\n  \"splice\",\n  \"splicing\",\n  \"splinter\",\n  \"splotchy\",\n  \"splurge\",\n  \"spoilage\",\n  \"spoiled\",\n  \"spoiler\",\n  \"spoiling\",\n  \"spoils\",\n  \"spoken\",\n  \"spokesman\",\n  \"sponge\",\n  \"spongy\",\n  \"sponsor\",\n  \"spoof\",\n  \"spookily\",\n  \"spooky\",\n  \"spool\",\n  \"spoon\",\n  \"spore\",\n  \"sporting\",\n  \"sports\",\n  \"sporty\",\n  \"spotless\",\n  \"spotlight\",\n  \"spotted\",\n  \"spotter\",\n  \"spotting\",\n  \"spotty\",\n  \"spousal\",\n  \"spouse\",\n  \"spout\",\n  \"sprain\",\n  \"sprang\",\n  \"sprawl\",\n  \"spray\",\n  \"spree\",\n  \"sprig\",\n  \"spring\",\n  \"sprinkled\",\n  \"sprinkler\",\n  \"sprint\",\n  \"sprite\",\n  \"sprout\",\n  \"spruce\",\n  \"sprung\",\n  \"spry\",\n  \"spud\",\n  \"spur\",\n  \"sputter\",\n  \"spyglass\",\n  \"squabble\",\n  \"squad\",\n  \"squall\",\n  \"squander\",\n  \"squash\",\n  \"squatted\",\n  \"squatter\",\n  \"squatting\",\n  \"squeak\",\n  \"squealer\",\n  \"squealing\",\n  \"squeamish\",\n  \"squeegee\",\n  \"squeeze\",\n  \"squeezing\",\n  \"squid\",\n  \"squiggle\",\n  \"squiggly\",\n  \"squint\",\n  \"squire\",\n  \"squirt\",\n  \"squishier\",\n  \"squishy\",\n  \"stability\",\n  \"stabilize\",\n  \"stable\",\n  \"stack\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"staging\",\n  \"stagnant\",\n  \"stagnate\",\n  \"stainable\",\n  \"stained\",\n  \"staining\",\n  \"stainless\",\n  \"stalemate\",\n  \"staleness\",\n  \"stalling\",\n  \"stallion\",\n  \"stamina\",\n  \"stammer\",\n  \"stamp\",\n  \"stand\",\n  \"stank\",\n  \"staple\",\n  \"stapling\",\n  \"starboard\",\n  \"starch\",\n  \"stardom\",\n  \"stardust\",\n  \"starfish\",\n  \"stargazer\",\n  \"staring\",\n  \"stark\",\n  \"starless\",\n  \"starlet\",\n  \"starlight\",\n  \"starlit\",\n  \"starring\",\n  \"starry\",\n  \"starship\",\n  \"starter\",\n  \"starting\",\n  \"startle\",\n  \"startling\",\n  \"startup\",\n  \"starved\",\n  \"starving\",\n  \"stash\",\n  \"state\",\n  \"static\",\n  \"statistic\",\n  \"statue\",\n  \"stature\",\n  \"status\",\n  \"statute\",\n  \"statutory\",\n  \"staunch\",\n  \"stays\",\n  \"steadfast\",\n  \"steadier\",\n  \"steadily\",\n  \"steadying\",\n  \"steam\",\n  \"steed\",\n  \"steep\",\n  \"steerable\",\n  \"steering\",\n  \"steersman\",\n  \"stegosaur\",\n  \"stellar\",\n  \"stem\",\n  \"stench\",\n  \"stencil\",\n  \"step\",\n  \"stereo\",\n  \"sterile\",\n  \"sterility\",\n  \"sterilize\",\n  \"sterling\",\n  \"sternness\",\n  \"sternum\",\n  \"stew\",\n  \"stick\",\n  \"stiffen\",\n  \"stiffly\",\n  \"stiffness\",\n  \"stifle\",\n  \"stifling\",\n  \"stillness\",\n  \"stilt\",\n  \"stimulant\",\n  \"stimulate\",\n  \"stimuli\",\n  \"stimulus\",\n  \"stinger\",\n  \"stingily\",\n  \"stinging\",\n  \"stingray\",\n  \"stingy\",\n  \"stinking\",\n  \"stinky\",\n  \"stipend\",\n  \"stipulate\",\n  \"stir\",\n  \"stitch\",\n  \"stock\",\n  \"stoic\",\n  \"stoke\",\n  \"stole\",\n  \"stomp\",\n  \"stonewall\",\n  \"stoneware\",\n  \"stonework\",\n  \"stoning\",\n  \"stony\",\n  \"stood\",\n  \"stooge\",\n  \"stool\",\n  \"stoop\",\n  \"stoplight\",\n  \"stoppable\",\n  \"stoppage\",\n  \"stopped\",\n  \"stopper\",\n  \"stopping\",\n  \"stopwatch\",\n  \"storable\",\n  \"storage\",\n  \"storeroom\",\n  \"storewide\",\n  \"storm\",\n  \"stout\",\n  \"stove\",\n  \"stowaway\",\n  \"stowing\",\n  \"straddle\",\n  \"straggler\",\n  \"strained\",\n  \"strainer\",\n  \"straining\",\n  \"strangely\",\n  \"stranger\",\n  \"strangle\",\n  \"strategic\",\n  \"strategy\",\n  \"stratus\",\n  \"straw\",\n  \"stray\",\n  \"streak\",\n  \"stream\",\n  \"street\",\n  \"strength\",\n  \"strenuous\",\n  \"strep\",\n  \"stress\",\n  \"stretch\",\n  \"strewn\",\n  \"stricken\",\n  \"strict\",\n  \"stride\",\n  \"strife\",\n  \"strike\",\n  \"striking\",\n  \"strive\",\n  \"striving\",\n  \"strobe\",\n  \"strode\",\n  \"stroller\",\n  \"strongbox\",\n  \"strongly\",\n  \"strongman\",\n  \"struck\",\n  \"structure\",\n  \"strudel\",\n  \"struggle\",\n  \"strum\",\n  \"strung\",\n  \"strut\",\n  \"stubbed\",\n  \"stubble\",\n  \"stubbly\",\n  \"stubborn\",\n  \"stucco\",\n  \"stuck\",\n  \"student\",\n  \"studied\",\n  \"studio\",\n  \"study\",\n  \"stuffed\",\n  \"stuffing\",\n  \"stuffy\",\n  \"stumble\",\n  \"stumbling\",\n  \"stump\",\n  \"stung\",\n  \"stunned\",\n  \"stunner\",\n  \"stunning\",\n  \"stunt\",\n  \"stupor\",\n  \"sturdily\",\n  \"sturdy\",\n  \"styling\",\n  \"stylishly\",\n  \"stylist\",\n  \"stylized\",\n  \"stylus\",\n  \"suave\",\n  \"subarctic\",\n  \"subatomic\",\n  \"subdivide\",\n  \"subdued\",\n  \"subduing\",\n  \"subfloor\",\n  \"subgroup\",\n  \"subheader\",\n  \"subject\",\n  \"sublease\",\n  \"sublet\",\n  \"sublevel\",\n  \"sublime\",\n  \"submarine\",\n  \"submerge\",\n  \"submersed\",\n  \"submitter\",\n  \"subpanel\",\n  \"subpar\",\n  \"subplot\",\n  \"subprime\",\n  \"subscribe\",\n  \"subscript\",\n  \"subsector\",\n  \"subside\",\n  \"subsiding\",\n  \"subsidize\",\n  \"subsidy\",\n  \"subsoil\",\n  \"subsonic\",\n  \"substance\",\n  \"subsystem\",\n  \"subtext\",\n  \"subtitle\",\n  \"subtly\",\n  \"subtotal\",\n  \"subtract\",\n  \"subtype\",\n  \"suburb\",\n  \"subway\",\n  \"subwoofer\",\n  \"subzero\",\n  \"succulent\",\n  \"such\",\n  \"suction\",\n  \"sudden\",\n  \"sudoku\",\n  \"suds\",\n  \"sufferer\",\n  \"suffering\",\n  \"suffice\",\n  \"suffix\",\n  \"suffocate\",\n  \"suffrage\",\n  \"sugar\",\n  \"suggest\",\n  \"suing\",\n  \"suitable\",\n  \"suitably\",\n  \"suitcase\",\n  \"suitor\",\n  \"sulfate\",\n  \"sulfide\",\n  \"sulfite\",\n  \"sulfur\",\n  \"sulk\",\n  \"sullen\",\n  \"sulphate\",\n  \"sulphuric\",\n  \"sultry\",\n  \"superbowl\",\n  \"superglue\",\n  \"superhero\",\n  \"superior\",\n  \"superjet\",\n  \"superman\",\n  \"supermom\",\n  \"supernova\",\n  \"supervise\",\n  \"supper\",\n  \"supplier\",\n  \"supply\",\n  \"support\",\n  \"supremacy\",\n  \"supreme\",\n  \"surcharge\",\n  \"surely\",\n  \"sureness\",\n  \"surface\",\n  \"surfacing\",\n  \"surfboard\",\n  \"surfer\",\n  \"surgery\",\n  \"surgical\",\n  \"surging\",\n  \"surname\",\n  \"surpass\",\n  \"surplus\",\n  \"surprise\",\n  \"surreal\",\n  \"surrender\",\n  \"surrogate\",\n  \"surround\",\n  \"survey\",\n  \"survival\",\n  \"survive\",\n  \"surviving\",\n  \"survivor\",\n  \"sushi\",\n  \"suspect\",\n  \"suspend\",\n  \"suspense\",\n  \"sustained\",\n  \"sustainer\",\n  \"swab\",\n  \"swaddling\",\n  \"swagger\",\n  \"swampland\",\n  \"swan\",\n  \"swapping\",\n  \"swarm\",\n  \"sway\",\n  \"swear\",\n  \"sweat\",\n  \"sweep\",\n  \"swell\",\n  \"swept\",\n  \"swerve\",\n  \"swifter\",\n  \"swiftly\",\n  \"swiftness\",\n  \"swimmable\",\n  \"swimmer\",\n  \"swimming\",\n  \"swimsuit\",\n  \"swimwear\",\n  \"swinger\",\n  \"swinging\",\n  \"swipe\",\n  \"swirl\",\n  \"switch\",\n  \"swivel\",\n  \"swizzle\",\n  \"swooned\",\n  \"swoop\",\n  \"swoosh\",\n  \"swore\",\n  \"sworn\",\n  \"swung\",\n  \"sycamore\",\n  \"sympathy\",\n  \"symphonic\",\n  \"symphony\",\n  \"symptom\",\n  \"synapse\",\n  \"syndrome\",\n  \"synergy\",\n  \"synopses\",\n  \"synopsis\",\n  \"synthesis\",\n  \"synthetic\",\n  \"syrup\",\n  \"system\",\n  \"t-shirt\",\n  \"tabasco\",\n  \"tabby\",\n  \"tableful\",\n  \"tables\",\n  \"tablet\",\n  \"tableware\",\n  \"tabloid\",\n  \"tackiness\",\n  \"tacking\",\n  \"tackle\",\n  \"tackling\",\n  \"tacky\",\n  \"taco\",\n  \"tactful\",\n  \"tactical\",\n  \"tactics\",\n  \"tactile\",\n  \"tactless\",\n  \"tadpole\",\n  \"taekwondo\",\n  \"tag\",\n  \"tainted\",\n  \"take\",\n  \"taking\",\n  \"talcum\",\n  \"talisman\",\n  \"tall\",\n  \"talon\",\n  \"tamale\",\n  \"tameness\",\n  \"tamer\",\n  \"tamper\",\n  \"tank\",\n  \"tanned\",\n  \"tannery\",\n  \"tanning\",\n  \"tantrum\",\n  \"tapeless\",\n  \"tapered\",\n  \"tapering\",\n  \"tapestry\",\n  \"tapioca\",\n  \"tapping\",\n  \"taps\",\n  \"tarantula\",\n  \"target\",\n  \"tarmac\",\n  \"tarnish\",\n  \"tarot\",\n  \"tartar\",\n  \"tartly\",\n  \"tartness\",\n  \"task\",\n  \"tassel\",\n  \"taste\",\n  \"tastiness\",\n  \"tasting\",\n  \"tasty\",\n  \"tattered\",\n  \"tattle\",\n  \"tattling\",\n  \"tattoo\",\n  \"taunt\",\n  \"tavern\",\n  \"thank\",\n  \"that\",\n  \"thaw\",\n  \"theater\",\n  \"theatrics\",\n  \"thee\",\n  \"theft\",\n  \"theme\",\n  \"theology\",\n  \"theorize\",\n  \"thermal\",\n  \"thermos\",\n  \"thesaurus\",\n  \"these\",\n  \"thesis\",\n  \"thespian\",\n  \"thicken\",\n  \"thicket\",\n  \"thickness\",\n  \"thieving\",\n  \"thievish\",\n  \"thigh\",\n  \"thimble\",\n  \"thing\",\n  \"think\",\n  \"thinly\",\n  \"thinner\",\n  \"thinness\",\n  \"thinning\",\n  \"thirstily\",\n  \"thirsting\",\n  \"thirsty\",\n  \"thirteen\",\n  \"thirty\",\n  \"thong\",\n  \"thorn\",\n  \"those\",\n  \"thousand\",\n  \"thrash\",\n  \"thread\",\n  \"threaten\",\n  \"threefold\",\n  \"thrift\",\n  \"thrill\",\n  \"thrive\",\n  \"thriving\",\n  \"throat\",\n  \"throbbing\",\n  \"throng\",\n  \"throttle\",\n  \"throwaway\",\n  \"throwback\",\n  \"thrower\",\n  \"throwing\",\n  \"thud\",\n  \"thumb\",\n  \"thumping\",\n  \"thursday\",\n  \"thus\",\n  \"thwarting\",\n  \"thyself\",\n  \"tiara\",\n  \"tibia\",\n  \"tidal\",\n  \"tidbit\",\n  \"tidiness\",\n  \"tidings\",\n  \"tidy\",\n  \"tiger\",\n  \"tighten\",\n  \"tightly\",\n  \"tightness\",\n  \"tightrope\",\n  \"tightwad\",\n  \"tigress\",\n  \"tile\",\n  \"tiling\",\n  \"till\",\n  \"tilt\",\n  \"timid\",\n  \"timing\",\n  \"timothy\",\n  \"tinderbox\",\n  \"tinfoil\",\n  \"tingle\",\n  \"tingling\",\n  \"tingly\",\n  \"tinker\",\n  \"tinkling\",\n  \"tinsel\",\n  \"tinsmith\",\n  \"tint\",\n  \"tinwork\",\n  \"tiny\",\n  \"tipoff\",\n  \"tipped\",\n  \"tipper\",\n  \"tipping\",\n  \"tiptoeing\",\n  \"tiptop\",\n  \"tiring\",\n  \"tissue\",\n  \"trace\",\n  \"tracing\",\n  \"track\",\n  \"traction\",\n  \"tractor\",\n  \"trade\",\n  \"trading\",\n  \"tradition\",\n  \"traffic\",\n  \"tragedy\",\n  \"trailing\",\n  \"trailside\",\n  \"train\",\n  \"traitor\",\n  \"trance\",\n  \"tranquil\",\n  \"transfer\",\n  \"transform\",\n  \"translate\",\n  \"transpire\",\n  \"transport\",\n  \"transpose\",\n  \"trapdoor\",\n  \"trapeze\",\n  \"trapezoid\",\n  \"trapped\",\n  \"trapper\",\n  \"trapping\",\n  \"traps\",\n  \"trash\",\n  \"travel\",\n  \"traverse\",\n  \"travesty\",\n  \"tray\",\n  \"treachery\",\n  \"treading\",\n  \"treadmill\",\n  \"treason\",\n  \"treat\",\n  \"treble\",\n  \"tree\",\n  \"trekker\",\n  \"tremble\",\n  \"trembling\",\n  \"tremor\",\n  \"trench\",\n  \"trend\",\n  \"trespass\",\n  \"triage\",\n  \"trial\",\n  \"triangle\",\n  \"tribesman\",\n  \"tribunal\",\n  \"tribune\",\n  \"tributary\",\n  \"tribute\",\n  \"triceps\",\n  \"trickery\",\n  \"trickily\",\n  \"tricking\",\n  \"trickle\",\n  \"trickster\",\n  \"tricky\",\n  \"tricolor\",\n  \"tricycle\",\n  \"trident\",\n  \"tried\",\n  \"trifle\",\n  \"trifocals\",\n  \"trillion\",\n  \"trilogy\",\n  \"trimester\",\n  \"trimmer\",\n  \"trimming\",\n  \"trimness\",\n  \"trinity\",\n  \"trio\",\n  \"tripod\",\n  \"tripping\",\n  \"triumph\",\n  \"trivial\",\n  \"trodden\",\n  \"trolling\",\n  \"trombone\",\n  \"trophy\",\n  \"tropical\",\n  \"tropics\",\n  \"trouble\",\n  \"troubling\",\n  \"trough\",\n  \"trousers\",\n  \"trout\",\n  \"trowel\",\n  \"truce\",\n  \"truck\",\n  \"truffle\",\n  \"trump\",\n  \"trunks\",\n  \"trustable\",\n  \"trustee\",\n  \"trustful\",\n  \"trusting\",\n  \"trustless\",\n  \"truth\",\n  \"try\",\n  \"tubby\",\n  \"tubeless\",\n  \"tubular\",\n  \"tucking\",\n  \"tuesday\",\n  \"tug\",\n  \"tuition\",\n  \"tulip\",\n  \"tumble\",\n  \"tumbling\",\n  \"tummy\",\n  \"turban\",\n  \"turbine\",\n  \"turbofan\",\n  \"turbojet\",\n  \"turbulent\",\n  \"turf\",\n  \"turkey\",\n  \"turmoil\",\n  \"turret\",\n  \"turtle\",\n  \"tusk\",\n  \"tutor\",\n  \"tutu\",\n  \"tux\",\n  \"tweak\",\n  \"tweed\",\n  \"tweet\",\n  \"tweezers\",\n  \"twelve\",\n  \"twentieth\",\n  \"twenty\",\n  \"twerp\",\n  \"twice\",\n  \"twiddle\",\n  \"twiddling\",\n  \"twig\",\n  \"twilight\",\n  \"twine\",\n  \"twins\",\n  \"twirl\",\n  \"twistable\",\n  \"twisted\",\n  \"twister\",\n  \"twisting\",\n  \"twisty\",\n  \"twitch\",\n  \"twitter\",\n  \"tycoon\",\n  \"tying\",\n  \"tyke\",\n  \"udder\",\n  \"ultimate\",\n  \"ultimatum\",\n  \"ultra\",\n  \"umbilical\",\n  \"umbrella\",\n  \"umpire\",\n  \"unabashed\",\n  \"unable\",\n  \"unadorned\",\n  \"unadvised\",\n  \"unafraid\",\n  \"unaired\",\n  \"unaligned\",\n  \"unaltered\",\n  \"unarmored\",\n  \"unashamed\",\n  \"unaudited\",\n  \"unawake\",\n  \"unaware\",\n  \"unbaked\",\n  \"unbalance\",\n  \"unbeaten\",\n  \"unbend\",\n  \"unbent\",\n  \"unbiased\",\n  \"unbitten\",\n  \"unblended\",\n  \"unblessed\",\n  \"unblock\",\n  \"unbolted\",\n  \"unbounded\",\n  \"unboxed\",\n  \"unbraided\",\n  \"unbridle\",\n  \"unbroken\",\n  \"unbuckled\",\n  \"unbundle\",\n  \"unburned\",\n  \"unbutton\",\n  \"uncanny\",\n  \"uncapped\",\n  \"uncaring\",\n  \"uncertain\",\n  \"unchain\",\n  \"unchanged\",\n  \"uncharted\",\n  \"uncheck\",\n  \"uncivil\",\n  \"unclad\",\n  \"unclaimed\",\n  \"unclamped\",\n  \"unclasp\",\n  \"uncle\",\n  \"unclip\",\n  \"uncloak\",\n  \"unclog\",\n  \"unclothed\",\n  \"uncoated\",\n  \"uncoiled\",\n  \"uncolored\",\n  \"uncombed\",\n  \"uncommon\",\n  \"uncooked\",\n  \"uncork\",\n  \"uncorrupt\",\n  \"uncounted\",\n  \"uncouple\",\n  \"uncouth\",\n  \"uncover\",\n  \"uncross\",\n  \"uncrown\",\n  \"uncrushed\",\n  \"uncured\",\n  \"uncurious\",\n  \"uncurled\",\n  \"uncut\",\n  \"undamaged\",\n  \"undated\",\n  \"undaunted\",\n  \"undead\",\n  \"undecided\",\n  \"undefined\",\n  \"underage\",\n  \"underarm\",\n  \"undercoat\",\n  \"undercook\",\n  \"undercut\",\n  \"underdog\",\n  \"underdone\",\n  \"underfed\",\n  \"underfeed\",\n  \"underfoot\",\n  \"undergo\",\n  \"undergrad\",\n  \"underhand\",\n  \"underline\",\n  \"underling\",\n  \"undermine\",\n  \"undermost\",\n  \"underpaid\",\n  \"underpass\",\n  \"underpay\",\n  \"underrate\",\n  \"undertake\",\n  \"undertone\",\n  \"undertook\",\n  \"undertow\",\n  \"underuse\",\n  \"underwear\",\n  \"underwent\",\n  \"underwire\",\n  \"undesired\",\n  \"undiluted\",\n  \"undivided\",\n  \"undocked\",\n  \"undoing\",\n  \"undone\",\n  \"undrafted\",\n  \"undress\",\n  \"undrilled\",\n  \"undusted\",\n  \"undying\",\n  \"unearned\",\n  \"unearth\",\n  \"unease\",\n  \"uneasily\",\n  \"uneasy\",\n  \"uneatable\",\n  \"uneaten\",\n  \"unedited\",\n  \"unelected\",\n  \"unending\",\n  \"unengaged\",\n  \"unenvied\",\n  \"unequal\",\n  \"unethical\",\n  \"uneven\",\n  \"unexpired\",\n  \"unexposed\",\n  \"unfailing\",\n  \"unfair\",\n  \"unfasten\",\n  \"unfazed\",\n  \"unfeeling\",\n  \"unfiled\",\n  \"unfilled\",\n  \"unfitted\",\n  \"unfitting\",\n  \"unfixable\",\n  \"unfixed\",\n  \"unflawed\",\n  \"unfocused\",\n  \"unfold\",\n  \"unfounded\",\n  \"unframed\",\n  \"unfreeze\",\n  \"unfrosted\",\n  \"unfrozen\",\n  \"unfunded\",\n  \"unglazed\",\n  \"ungloved\",\n  \"unglue\",\n  \"ungodly\",\n  \"ungraded\",\n  \"ungreased\",\n  \"unguarded\",\n  \"unguided\",\n  \"unhappily\",\n  \"unhappy\",\n  \"unharmed\",\n  \"unhealthy\",\n  \"unheard\",\n  \"unhearing\",\n  \"unheated\",\n  \"unhelpful\",\n  \"unhidden\",\n  \"unhinge\",\n  \"unhitched\",\n  \"unholy\",\n  \"unhook\",\n  \"unicorn\",\n  \"unicycle\",\n  \"unified\",\n  \"unifier\",\n  \"uniformed\",\n  \"uniformly\",\n  \"unify\",\n  \"unimpeded\",\n  \"uninjured\",\n  \"uninstall\",\n  \"uninsured\",\n  \"uninvited\",\n  \"union\",\n  \"uniquely\",\n  \"unisexual\",\n  \"unison\",\n  \"unissued\",\n  \"unit\",\n  \"universal\",\n  \"universe\",\n  \"unjustly\",\n  \"unkempt\",\n  \"unkind\",\n  \"unknotted\",\n  \"unknowing\",\n  \"unknown\",\n  \"unlaced\",\n  \"unlatch\",\n  \"unlawful\",\n  \"unleaded\",\n  \"unlearned\",\n  \"unleash\",\n  \"unless\",\n  \"unleveled\",\n  \"unlighted\",\n  \"unlikable\",\n  \"unlimited\",\n  \"unlined\",\n  \"unlinked\",\n  \"unlisted\",\n  \"unlit\",\n  \"unlivable\",\n  \"unloaded\",\n  \"unloader\",\n  \"unlocked\",\n  \"unlocking\",\n  \"unlovable\",\n  \"unloved\",\n  \"unlovely\",\n  \"unloving\",\n  \"unluckily\",\n  \"unlucky\",\n  \"unmade\",\n  \"unmanaged\",\n  \"unmanned\",\n  \"unmapped\",\n  \"unmarked\",\n  \"unmasked\",\n  \"unmasking\",\n  \"unmatched\",\n  \"unmindful\",\n  \"unmixable\",\n  \"unmixed\",\n  \"unmolded\",\n  \"unmoral\",\n  \"unmovable\",\n  \"unmoved\",\n  \"unmoving\",\n  \"unnamable\",\n  \"unnamed\",\n  \"unnatural\",\n  \"unneeded\",\n  \"unnerve\",\n  \"unnerving\",\n  \"unnoticed\",\n  \"unopened\",\n  \"unopposed\",\n  \"unpack\",\n  \"unpadded\",\n  \"unpaid\",\n  \"unpainted\",\n  \"unpaired\",\n  \"unpaved\",\n  \"unpeeled\",\n  \"unpicked\",\n  \"unpiloted\",\n  \"unpinned\",\n  \"unplanned\",\n  \"unplanted\",\n  \"unpleased\",\n  \"unpledged\",\n  \"unplowed\",\n  \"unplug\",\n  \"unpopular\",\n  \"unproven\",\n  \"unquote\",\n  \"unranked\",\n  \"unrated\",\n  \"unraveled\",\n  \"unreached\",\n  \"unread\",\n  \"unreal\",\n  \"unreeling\",\n  \"unrefined\",\n  \"unrelated\",\n  \"unrented\",\n  \"unrest\",\n  \"unretired\",\n  \"unrevised\",\n  \"unrigged\",\n  \"unripe\",\n  \"unrivaled\",\n  \"unroasted\",\n  \"unrobed\",\n  \"unroll\",\n  \"unruffled\",\n  \"unruly\",\n  \"unrushed\",\n  \"unsaddle\",\n  \"unsafe\",\n  \"unsaid\",\n  \"unsalted\",\n  \"unsaved\",\n  \"unsavory\",\n  \"unscathed\",\n  \"unscented\",\n  \"unscrew\",\n  \"unsealed\",\n  \"unseated\",\n  \"unsecured\",\n  \"unseeing\",\n  \"unseemly\",\n  \"unseen\",\n  \"unselect\",\n  \"unselfish\",\n  \"unsent\",\n  \"unsettled\",\n  \"unshackle\",\n  \"unshaken\",\n  \"unshaved\",\n  \"unshaven\",\n  \"unsheathe\",\n  \"unshipped\",\n  \"unsightly\",\n  \"unsigned\",\n  \"unskilled\",\n  \"unsliced\",\n  \"unsmooth\",\n  \"unsnap\",\n  \"unsocial\",\n  \"unsoiled\",\n  \"unsold\",\n  \"unsolved\",\n  \"unsorted\",\n  \"unspoiled\",\n  \"unspoken\",\n  \"unstable\",\n  \"unstaffed\",\n  \"unstamped\",\n  \"unsteady\",\n  \"unsterile\",\n  \"unstirred\",\n  \"unstitch\",\n  \"unstopped\",\n  \"unstuck\",\n  \"unstuffed\",\n  \"unstylish\",\n  \"unsubtle\",\n  \"unsubtly\",\n  \"unsuited\",\n  \"unsure\",\n  \"unsworn\",\n  \"untagged\",\n  \"untainted\",\n  \"untaken\",\n  \"untamed\",\n  \"untangled\",\n  \"untapped\",\n  \"untaxed\",\n  \"unthawed\",\n  \"unthread\",\n  \"untidy\",\n  \"untie\",\n  \"until\",\n  \"untimed\",\n  \"untimely\",\n  \"untitled\",\n  \"untoasted\",\n  \"untold\",\n  \"untouched\",\n  \"untracked\",\n  \"untrained\",\n  \"untreated\",\n  \"untried\",\n  \"untrimmed\",\n  \"untrue\",\n  \"untruth\",\n  \"unturned\",\n  \"untwist\",\n  \"untying\",\n  \"unusable\",\n  \"unused\",\n  \"unusual\",\n  \"unvalued\",\n  \"unvaried\",\n  \"unvarying\",\n  \"unveiled\",\n  \"unveiling\",\n  \"unvented\",\n  \"unviable\",\n  \"unvisited\",\n  \"unvocal\",\n  \"unwanted\",\n  \"unwarlike\",\n  \"unwary\",\n  \"unwashed\",\n  \"unwatched\",\n  \"unweave\",\n  \"unwed\",\n  \"unwelcome\",\n  \"unwell\",\n  \"unwieldy\",\n  \"unwilling\",\n  \"unwind\",\n  \"unwired\",\n  \"unwitting\",\n  \"unwomanly\",\n  \"unworldly\",\n  \"unworn\",\n  \"unworried\",\n  \"unworthy\",\n  \"unwound\",\n  \"unwoven\",\n  \"unwrapped\",\n  \"unwritten\",\n  \"unzip\",\n  \"upbeat\",\n  \"upchuck\",\n  \"upcoming\",\n  \"upcountry\",\n  \"update\",\n  \"upfront\",\n  \"upgrade\",\n  \"upheaval\",\n  \"upheld\",\n  \"uphill\",\n  \"uphold\",\n  \"uplifted\",\n  \"uplifting\",\n  \"upload\",\n  \"upon\",\n  \"upper\",\n  \"upright\",\n  \"uprising\",\n  \"upriver\",\n  \"uproar\",\n  \"uproot\",\n  \"upscale\",\n  \"upside\",\n  \"upstage\",\n  \"upstairs\",\n  \"upstart\",\n  \"upstate\",\n  \"upstream\",\n  \"upstroke\",\n  \"upswing\",\n  \"uptake\",\n  \"uptight\",\n  \"uptown\",\n  \"upturned\",\n  \"upward\",\n  \"upwind\",\n  \"uranium\",\n  \"urban\",\n  \"urchin\",\n  \"urethane\",\n  \"urgency\",\n  \"urgent\",\n  \"urging\",\n  \"urologist\",\n  \"urology\",\n  \"usable\",\n  \"usage\",\n  \"useable\",\n  \"used\",\n  \"uselessly\",\n  \"user\",\n  \"usher\",\n  \"usual\",\n  \"utensil\",\n  \"utility\",\n  \"utilize\",\n  \"utmost\",\n  \"utopia\",\n  \"utter\",\n  \"vacancy\",\n  \"vacant\",\n  \"vacate\",\n  \"vacation\",\n  \"vagabond\",\n  \"vagrancy\",\n  \"vagrantly\",\n  \"vaguely\",\n  \"vagueness\",\n  \"valiant\",\n  \"valid\",\n  \"valium\",\n  \"valley\",\n  \"valuables\",\n  \"value\",\n  \"vanilla\",\n  \"vanish\",\n  \"vanity\",\n  \"vanquish\",\n  \"vantage\",\n  \"vaporizer\",\n  \"variable\",\n  \"variably\",\n  \"varied\",\n  \"variety\",\n  \"various\",\n  \"varmint\",\n  \"varnish\",\n  \"varsity\",\n  \"varying\",\n  \"vascular\",\n  \"vaseline\",\n  \"vastly\",\n  \"vastness\",\n  \"veal\",\n  \"vegan\",\n  \"veggie\",\n  \"vehicular\",\n  \"velcro\",\n  \"velocity\",\n  \"velvet\",\n  \"vendetta\",\n  \"vending\",\n  \"vendor\",\n  \"veneering\",\n  \"vengeful\",\n  \"venomous\",\n  \"ventricle\",\n  \"venture\",\n  \"venue\",\n  \"venus\",\n  \"verbalize\",\n  \"verbally\",\n  \"verbose\",\n  \"verdict\",\n  \"verify\",\n  \"verse\",\n  \"version\",\n  \"versus\",\n  \"vertebrae\",\n  \"vertical\",\n  \"vertigo\",\n  \"very\",\n  \"vessel\",\n  \"vest\",\n  \"veteran\",\n  \"veto\",\n  \"vexingly\",\n  \"viability\",\n  \"viable\",\n  \"vibes\",\n  \"vice\",\n  \"vicinity\",\n  \"victory\",\n  \"video\",\n  \"viewable\",\n  \"viewer\",\n  \"viewing\",\n  \"viewless\",\n  \"viewpoint\",\n  \"vigorous\",\n  \"village\",\n  \"villain\",\n  \"vindicate\",\n  \"vineyard\",\n  \"vintage\",\n  \"violate\",\n  \"violation\",\n  \"violator\",\n  \"violet\",\n  \"violin\",\n  \"viper\",\n  \"viral\",\n  \"virtual\",\n  \"virtuous\",\n  \"virus\",\n  \"visa\",\n  \"viscosity\",\n  \"viscous\",\n  \"viselike\",\n  \"visible\",\n  \"visibly\",\n  \"vision\",\n  \"visiting\",\n  \"visitor\",\n  \"visor\",\n  \"vista\",\n  \"vitality\",\n  \"vitalize\",\n  \"vitally\",\n  \"vitamins\",\n  \"vivacious\",\n  \"vividly\",\n  \"vividness\",\n  \"vixen\",\n  \"vocalist\",\n  \"vocalize\",\n  \"vocally\",\n  \"vocation\",\n  \"voice\",\n  \"voicing\",\n  \"void\",\n  \"volatile\",\n  \"volley\",\n  \"voltage\",\n  \"volumes\",\n  \"voter\",\n  \"voting\",\n  \"voucher\",\n  \"vowed\",\n  \"vowel\",\n  \"voyage\",\n  \"wackiness\",\n  \"wad\",\n  \"wafer\",\n  \"waffle\",\n  \"waged\",\n  \"wager\",\n  \"wages\",\n  \"waggle\",\n  \"wagon\",\n  \"wake\",\n  \"waking\",\n  \"walk\",\n  \"walmart\",\n  \"walnut\",\n  \"walrus\",\n  \"waltz\",\n  \"wand\",\n  \"wannabe\",\n  \"wanted\",\n  \"wanting\",\n  \"wasabi\",\n  \"washable\",\n  \"washbasin\",\n  \"washboard\",\n  \"washbowl\",\n  \"washcloth\",\n  \"washday\",\n  \"washed\",\n  \"washer\",\n  \"washhouse\",\n  \"washing\",\n  \"washout\",\n  \"washroom\",\n  \"washstand\",\n  \"washtub\",\n  \"wasp\",\n  \"wasting\",\n  \"watch\",\n  \"water\",\n  \"waviness\",\n  \"waving\",\n  \"wavy\",\n  \"whacking\",\n  \"whacky\",\n  \"wham\",\n  \"wharf\",\n  \"wheat\",\n  \"whenever\",\n  \"whiff\",\n  \"whimsical\",\n  \"whinny\",\n  \"whiny\",\n  \"whisking\",\n  \"whoever\",\n  \"whole\",\n  \"whomever\",\n  \"whoopee\",\n  \"whooping\",\n  \"whoops\",\n  \"why\",\n  \"wick\",\n  \"widely\",\n  \"widen\",\n  \"widget\",\n  \"widow\",\n  \"width\",\n  \"wieldable\",\n  \"wielder\",\n  \"wife\",\n  \"wifi\",\n  \"wikipedia\",\n  \"wildcard\",\n  \"wildcat\",\n  \"wilder\",\n  \"wildfire\",\n  \"wildfowl\",\n  \"wildland\",\n  \"wildlife\",\n  \"wildly\",\n  \"wildness\",\n  \"willed\",\n  \"willfully\",\n  \"willing\",\n  \"willow\",\n  \"willpower\",\n  \"wilt\",\n  \"wimp\",\n  \"wince\",\n  \"wincing\",\n  \"wind\",\n  \"wing\",\n  \"winking\",\n  \"winner\",\n  \"winnings\",\n  \"winter\",\n  \"wipe\",\n  \"wired\",\n  \"wireless\",\n  \"wiring\",\n  \"wiry\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"wisplike\",\n  \"wispy\",\n  \"wistful\",\n  \"wizard\",\n  \"wobble\",\n  \"wobbling\",\n  \"wobbly\",\n  \"wok\",\n  \"wolf\",\n  \"wolverine\",\n  \"womanhood\",\n  \"womankind\",\n  \"womanless\",\n  \"womanlike\",\n  \"womanly\",\n  \"womb\",\n  \"woof\",\n  \"wooing\",\n  \"wool\",\n  \"woozy\",\n  \"word\",\n  \"work\",\n  \"worried\",\n  \"worrier\",\n  \"worrisome\",\n  \"worry\",\n  \"worsening\",\n  \"worshiper\",\n  \"worst\",\n  \"wound\",\n  \"woven\",\n  \"wow\",\n  \"wrangle\",\n  \"wrath\",\n  \"wreath\",\n  \"wreckage\",\n  \"wrecker\",\n  \"wrecking\",\n  \"wrench\",\n  \"wriggle\",\n  \"wriggly\",\n  \"wrinkle\",\n  \"wrinkly\",\n  \"wrist\",\n  \"writing\",\n  \"written\",\n  \"wrongdoer\",\n  \"wronged\",\n  \"wrongful\",\n  \"wrongly\",\n  \"wrongness\",\n  \"wrought\",\n  \"xbox\",\n  \"xerox\",\n  \"yahoo\",\n  \"yam\",\n  \"yanking\",\n  \"yapping\",\n  \"yard\",\n  \"yarn\",\n  \"yeah\",\n  \"yearbook\",\n  \"yearling\",\n  \"yearly\",\n  \"yearning\",\n  \"yeast\",\n  \"yelling\",\n  \"yelp\",\n  \"yen\",\n  \"yesterday\",\n  \"yiddish\",\n  \"yield\",\n  \"yin\",\n  \"yippee\",\n  \"yo-yo\",\n  \"yodel\",\n  \"yoga\",\n  \"yogurt\",\n  \"yonder\",\n  \"yoyo\",\n  \"yummy\",\n  \"zap\",\n  \"zealous\",\n  \"zebra\",\n  \"zen\",\n  \"zeppelin\",\n  \"zero\",\n  \"zestfully\",\n  \"zesty\",\n  \"zigzagged\",\n  \"zipfile\",\n  \"zipping\",\n  \"zippy\",\n  \"zips\",\n  \"zit\",\n  \"zodiac\",\n  \"zombie\",\n  \"zone\",\n  \"zoning\",\n  \"zookeeper\",\n  \"zoologist\",\n  \"zoology\",\n  \"zoom\",\n];\n","/** Request format for passphrase credential generation.\n *  The members of this type may be `undefined` when the user is\n *  generating a password.\n */\nexport type PassphraseGenerationOptions = {\n  /** The number of words to include in the passphrase.\n   * This value defaults to 3.\n   */\n  numWords?: number;\n\n  /** The ASCII separator character to use between words in the passphrase.\n   * This value defaults to a dash.\n   * If multiple characters appear in the string, only the first character is used.\n   */\n  wordSeparator?: string;\n\n  /** `true` when the first character of every word should be capitalized.\n   * This value defaults to `false`.\n   */\n  capitalize?: boolean;\n\n  /** `true` when a number should be included in the passphrase.\n   * This value defaults to `false`.\n   */\n  includeNumber?: boolean;\n};\n\n/** The default options for passphrase generation. */\nexport const DefaultPassphraseGenerationOptions: Partial<PassphraseGenerationOptions> =\n  Object.freeze({\n    numWords: 3,\n    wordSeparator: \"-\",\n    capitalize: false,\n    includeNumber: false,\n  });\n","import { PolicyEvaluator } from \"../abstractions/policy-evaluator.abstraction\";\n\nimport {\n  DefaultPassphraseGenerationOptions,\n  PassphraseGenerationOptions,\n} from \"./passphrase-generation-options\";\nimport { PassphraseGeneratorPolicy } from \"./passphrase-generator-policy\";\n\ntype Boundary = {\n  readonly min: number;\n  readonly max: number;\n};\n\nfunction initializeBoundaries() {\n  const numWords = Object.freeze({\n    min: 3,\n    max: 20,\n  });\n\n  return Object.freeze({\n    numWords,\n  });\n}\n\n/** Immutable default boundaries for passphrase generation.\n * These are used when the policy does not override a value.\n */\nexport const DefaultBoundaries = initializeBoundaries();\n\n/** Enforces policy for passphrase generation options.\n */\nexport class PassphraseGeneratorOptionsEvaluator\n  implements PolicyEvaluator<PassphraseGeneratorPolicy, PassphraseGenerationOptions>\n{\n  // This design is not ideal, but it is a step towards a more robust passphrase\n  // generator. Ideally, `sanitize` would be implemented on an options class,\n  // and `applyPolicy` would be implemented on a policy class, \"mise en place\".\n  //\n  // The current design of the passphrase generator, unfortunately, would require\n  // a substantial rewrite to make this feasible. Hopefully this change can be\n  // applied when the passphrase generator is ported to rust.\n\n  /** Policy applied by the evaluator.\n   */\n  readonly policy: PassphraseGeneratorPolicy;\n\n  /** Boundaries for the number of words allowed in the password.\n   */\n  readonly numWords: Boundary;\n\n  /** Instantiates the evaluator.\n   * @param policy The policy applied by the evaluator. When this conflicts with\n   *               the defaults, the policy takes precedence.\n   */\n  constructor(policy: PassphraseGeneratorPolicy) {\n    function createBoundary(value: number, defaultBoundary: Boundary): Boundary {\n      const boundary = {\n        min: Math.max(defaultBoundary.min, value),\n        max: Math.max(defaultBoundary.max, value),\n      };\n\n      return boundary;\n    }\n\n    this.policy = structuredClone(policy);\n    this.numWords = createBoundary(policy.minNumberWords, DefaultBoundaries.numWords);\n  }\n\n  /** {@link PolicyEvaluator.policyInEffect} */\n  get policyInEffect(): boolean {\n    const policies = [\n      this.policy.capitalize,\n      this.policy.includeNumber,\n      this.policy.minNumberWords > DefaultBoundaries.numWords.min,\n    ];\n\n    return policies.includes(true);\n  }\n\n  /** Apply policy to the input options.\n   *  @param options The options to build from. These options are not altered.\n   *  @returns A new password generation request with policy applied.\n   */\n  applyPolicy(options: PassphraseGenerationOptions): PassphraseGenerationOptions {\n    function fitToBounds(value: number, boundaries: Boundary) {\n      const { min, max } = boundaries;\n\n      const withUpperBound = Math.min(value ?? boundaries.min, max);\n      const withLowerBound = Math.max(withUpperBound, min);\n\n      return withLowerBound;\n    }\n\n    // apply policy overrides\n    const capitalize = this.policy.capitalize || options.capitalize || false;\n    const includeNumber = this.policy.includeNumber || options.includeNumber || false;\n\n    // apply boundaries\n    const numWords = fitToBounds(options.numWords, this.numWords);\n\n    return {\n      ...options,\n      numWords,\n      capitalize,\n      includeNumber,\n    };\n  }\n\n  /** Ensures internal options consistency.\n   *  @param options The options to cascade. These options are not altered.\n   *  @returns A passphrase generation request with cascade applied.\n   */\n  sanitize(options: PassphraseGenerationOptions): PassphraseGenerationOptions {\n    // ensure words are separated by a single character or the empty string\n    const wordSeparator =\n      options.wordSeparator === \"\"\n        ? \"\"\n        : options.wordSeparator?.[0] ?? DefaultPassphraseGenerationOptions.wordSeparator;\n\n    return {\n      ...options,\n      wordSeparator,\n    };\n  }\n}\n","export class GeneratedPasswordHistory {\n  password: string;\n  date: number;\n\n  constructor(password: string, date: number) {\n    this.password = password;\n    this.date = date;\n  }\n}\n","import { PolicyService } from \"../../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"../../../admin-console/enums\";\nimport { PasswordGeneratorPolicyOptions } from \"../../../admin-console/models/domain/password-generator-policy-options\";\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { EFFLongWordList } from \"../../../platform/misc/wordlist\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { PassphraseGeneratorOptionsEvaluator } from \"../passphrase/passphrase-generator-options-evaluator\";\n\nimport { GeneratedPasswordHistory } from \"./generated-password-history\";\nimport { PasswordGenerationServiceAbstraction } from \"./password-generation.service.abstraction\";\nimport { PasswordGeneratorOptions } from \"./password-generator-options\";\nimport { PasswordGeneratorOptionsEvaluator } from \"./password-generator-options-evaluator\";\n\nconst DefaultOptions: PasswordGeneratorOptions = {\n  length: 14,\n  minLength: 5,\n  ambiguous: false,\n  number: true,\n  minNumber: 1,\n  uppercase: true,\n  minUppercase: 0,\n  lowercase: true,\n  minLowercase: 0,\n  special: false,\n  minSpecial: 0,\n  type: \"password\",\n  numWords: 3,\n  wordSeparator: \"-\",\n  capitalize: false,\n  includeNumber: false,\n};\n\nconst DefaultPolicy = new PasswordGeneratorPolicyOptions();\n\nconst MaxPasswordsInHistory = 100;\n\nexport class PasswordGenerationService implements PasswordGenerationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private policyService: PolicyService,\n    private stateService: StateService,\n  ) {}\n\n  async generatePassword(options: PasswordGeneratorOptions): Promise<string> {\n    if ((options.type ?? DefaultOptions.type) === \"passphrase\") {\n      return this.generatePassphrase({ ...DefaultOptions, ...options });\n    }\n\n    const evaluator = new PasswordGeneratorOptionsEvaluator(DefaultPolicy);\n    const o = evaluator.sanitize({ ...DefaultOptions, ...options });\n\n    const positions: string[] = [];\n    if (o.lowercase && o.minLowercase > 0) {\n      for (let i = 0; i < o.minLowercase; i++) {\n        positions.push(\"l\");\n      }\n    }\n    if (o.uppercase && o.minUppercase > 0) {\n      for (let i = 0; i < o.minUppercase; i++) {\n        positions.push(\"u\");\n      }\n    }\n    if (o.number && o.minNumber > 0) {\n      for (let i = 0; i < o.minNumber; i++) {\n        positions.push(\"n\");\n      }\n    }\n    if (o.special && o.minSpecial > 0) {\n      for (let i = 0; i < o.minSpecial; i++) {\n        positions.push(\"s\");\n      }\n    }\n    while (positions.length < o.length) {\n      positions.push(\"a\");\n    }\n\n    // shuffle\n    await this.shuffleArray(positions);\n\n    // build out the char sets\n    let allCharSet = \"\";\n\n    let lowercaseCharSet = \"abcdefghijkmnopqrstuvwxyz\";\n    if (o.ambiguous) {\n      lowercaseCharSet += \"l\";\n    }\n    if (o.lowercase) {\n      allCharSet += lowercaseCharSet;\n    }\n\n    let uppercaseCharSet = \"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n    if (o.ambiguous) {\n      uppercaseCharSet += \"IO\";\n    }\n    if (o.uppercase) {\n      allCharSet += uppercaseCharSet;\n    }\n\n    let numberCharSet = \"23456789\";\n    if (o.ambiguous) {\n      numberCharSet += \"01\";\n    }\n    if (o.number) {\n      allCharSet += numberCharSet;\n    }\n\n    const specialCharSet = \"!@#$%^&*\";\n    if (o.special) {\n      allCharSet += specialCharSet;\n    }\n\n    let password = \"\";\n    for (let i = 0; i < o.length; i++) {\n      let positionChars: string;\n      switch (positions[i]) {\n        case \"l\":\n          positionChars = lowercaseCharSet;\n          break;\n        case \"u\":\n          positionChars = uppercaseCharSet;\n          break;\n        case \"n\":\n          positionChars = numberCharSet;\n          break;\n        case \"s\":\n          positionChars = specialCharSet;\n          break;\n        case \"a\":\n          positionChars = allCharSet;\n          break;\n        default:\n          break;\n      }\n\n      const randomCharIndex = await this.cryptoService.randomNumber(0, positionChars.length - 1);\n      password += positionChars.charAt(randomCharIndex);\n    }\n\n    return password;\n  }\n\n  async generatePassphrase(options: PasswordGeneratorOptions): Promise<string> {\n    const evaluator = new PassphraseGeneratorOptionsEvaluator(DefaultPolicy);\n    const o = evaluator.sanitize({ ...DefaultOptions, ...options });\n\n    if (o.numWords == null || o.numWords <= 2) {\n      o.numWords = DefaultOptions.numWords;\n    }\n    if (o.capitalize == null) {\n      o.capitalize = false;\n    }\n    if (o.includeNumber == null) {\n      o.includeNumber = false;\n    }\n\n    const listLength = EFFLongWordList.length - 1;\n    const wordList = new Array(o.numWords);\n    for (let i = 0; i < o.numWords; i++) {\n      const wordIndex = await this.cryptoService.randomNumber(0, listLength);\n      if (o.capitalize) {\n        wordList[i] = this.capitalize(EFFLongWordList[wordIndex]);\n      } else {\n        wordList[i] = EFFLongWordList[wordIndex];\n      }\n    }\n\n    if (o.includeNumber) {\n      await this.appendRandomNumberToRandomWord(wordList);\n    }\n    return wordList.join(o.wordSeparator);\n  }\n\n  async getOptions(): Promise<[PasswordGeneratorOptions, PasswordGeneratorPolicyOptions]> {\n    let options = await this.stateService.getPasswordGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setPasswordGenerationOptions(options);\n    const enforcedOptions = await this.enforcePasswordGeneratorPoliciesOnOptions(options);\n    options = enforcedOptions[0];\n    return [options, enforcedOptions[1]];\n  }\n\n  async enforcePasswordGeneratorPoliciesOnOptions(\n    options: PasswordGeneratorOptions,\n  ): Promise<[PasswordGeneratorOptions, PasswordGeneratorPolicyOptions]> {\n    let policy = await this.getPasswordGeneratorPolicyOptions();\n    policy = policy ?? new PasswordGeneratorPolicyOptions();\n\n    // Force default type if password/passphrase selected via policy\n    if (policy.defaultType === \"password\" || policy.defaultType === \"passphrase\") {\n      options.type = policy.defaultType;\n    }\n\n    const evaluator =\n      options.type == \"password\"\n        ? new PasswordGeneratorOptionsEvaluator(policy)\n        : new PassphraseGeneratorOptionsEvaluator(policy);\n\n    // Ensure the options to pass the current rules\n    const withPolicy = evaluator.applyPolicy(options);\n    const sanitized = evaluator.sanitize(withPolicy);\n\n    // callers assume this function updates the options parameter\n    const result = Object.assign(options, sanitized);\n    return [result, policy];\n  }\n\n  async getPasswordGeneratorPolicyOptions(): Promise<PasswordGeneratorPolicyOptions> {\n    const policies = await this.policyService?.getAll(PolicyType.PasswordGenerator);\n    let enforcedOptions: PasswordGeneratorPolicyOptions = null;\n\n    if (policies == null || policies.length === 0) {\n      return enforcedOptions;\n    }\n\n    policies.forEach((currentPolicy) => {\n      if (!currentPolicy.enabled || currentPolicy.data == null) {\n        return;\n      }\n\n      if (enforcedOptions == null) {\n        enforcedOptions = new PasswordGeneratorPolicyOptions();\n      }\n\n      // Password wins in multi-org collisions\n      if (currentPolicy.data.defaultType != null && enforcedOptions.defaultType !== \"password\") {\n        enforcedOptions.defaultType = currentPolicy.data.defaultType;\n      }\n\n      if (\n        currentPolicy.data.minLength != null &&\n        currentPolicy.data.minLength > enforcedOptions.minLength\n      ) {\n        enforcedOptions.minLength = currentPolicy.data.minLength;\n      }\n\n      if (currentPolicy.data.useUpper) {\n        enforcedOptions.useUppercase = true;\n      }\n\n      if (currentPolicy.data.useLower) {\n        enforcedOptions.useLowercase = true;\n      }\n\n      if (currentPolicy.data.useNumbers) {\n        enforcedOptions.useNumbers = true;\n      }\n\n      if (\n        currentPolicy.data.minNumbers != null &&\n        currentPolicy.data.minNumbers > enforcedOptions.numberCount\n      ) {\n        enforcedOptions.numberCount = currentPolicy.data.minNumbers;\n      }\n\n      if (currentPolicy.data.useSpecial) {\n        enforcedOptions.useSpecial = true;\n      }\n\n      if (\n        currentPolicy.data.minSpecial != null &&\n        currentPolicy.data.minSpecial > enforcedOptions.specialCount\n      ) {\n        enforcedOptions.specialCount = currentPolicy.data.minSpecial;\n      }\n\n      if (\n        currentPolicy.data.minNumberWords != null &&\n        currentPolicy.data.minNumberWords > enforcedOptions.minNumberWords\n      ) {\n        enforcedOptions.minNumberWords = currentPolicy.data.minNumberWords;\n      }\n\n      if (currentPolicy.data.capitalize) {\n        enforcedOptions.capitalize = true;\n      }\n\n      if (currentPolicy.data.includeNumber) {\n        enforcedOptions.includeNumber = true;\n      }\n    });\n\n    return enforcedOptions;\n  }\n\n  async saveOptions(options: PasswordGeneratorOptions) {\n    await this.stateService.setPasswordGenerationOptions(options);\n  }\n\n  async getHistory(): Promise<GeneratedPasswordHistory[]> {\n    const hasKey = await this.cryptoService.hasUserKey();\n    if (!hasKey) {\n      return new Array<GeneratedPasswordHistory>();\n    }\n\n    if ((await this.stateService.getDecryptedPasswordGenerationHistory()) == null) {\n      const encrypted = await this.stateService.getEncryptedPasswordGenerationHistory();\n      const decrypted = await this.decryptHistory(encrypted);\n      await this.stateService.setDecryptedPasswordGenerationHistory(decrypted);\n    }\n\n    const passwordGenerationHistory =\n      await this.stateService.getDecryptedPasswordGenerationHistory();\n    return passwordGenerationHistory != null\n      ? passwordGenerationHistory\n      : new Array<GeneratedPasswordHistory>();\n  }\n\n  async addHistory(password: string): Promise<void> {\n    // Cannot add new history if no key is available\n    const hasKey = await this.cryptoService.hasUserKey();\n    if (!hasKey) {\n      return;\n    }\n\n    const currentHistory = await this.getHistory();\n\n    // Prevent duplicates\n    if (this.matchesPrevious(password, currentHistory)) {\n      return;\n    }\n\n    currentHistory.unshift(new GeneratedPasswordHistory(password, Date.now()));\n\n    // Remove old items.\n    if (currentHistory.length > MaxPasswordsInHistory) {\n      currentHistory.pop();\n    }\n\n    const newHistory = await this.encryptHistory(currentHistory);\n    await this.stateService.setDecryptedPasswordGenerationHistory(currentHistory);\n    return await this.stateService.setEncryptedPasswordGenerationHistory(newHistory);\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.stateService.setEncryptedPasswordGenerationHistory(null, { userId: userId });\n    await this.stateService.setDecryptedPasswordGenerationHistory(null, { userId: userId });\n  }\n\n  normalizeOptions(\n    options: PasswordGeneratorOptions,\n    enforcedPolicyOptions: PasswordGeneratorPolicyOptions,\n  ) {\n    const evaluator =\n      options.type == \"password\"\n        ? new PasswordGeneratorOptionsEvaluator(enforcedPolicyOptions)\n        : new PassphraseGeneratorOptionsEvaluator(enforcedPolicyOptions);\n\n    const evaluatedOptions = evaluator.applyPolicy(options);\n    const santizedOptions = evaluator.sanitize(evaluatedOptions);\n\n    // callers assume this function updates the options parameter\n    Object.assign(options, santizedOptions);\n\n    return options;\n  }\n\n  private capitalize(str: string) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  private async appendRandomNumberToRandomWord(wordList: string[]) {\n    if (wordList == null || wordList.length <= 0) {\n      return;\n    }\n    const index = await this.cryptoService.randomNumber(0, wordList.length - 1);\n    const num = await this.cryptoService.randomNumber(0, 9);\n    wordList[index] = wordList[index] + num;\n  }\n\n  private async encryptHistory(\n    history: GeneratedPasswordHistory[],\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const encrypted = await this.cryptoService.encrypt(item.password);\n      return new GeneratedPasswordHistory(encrypted.encryptedString, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private async decryptHistory(\n    history: GeneratedPasswordHistory[],\n  ): Promise<GeneratedPasswordHistory[]> {\n    if (history == null || history.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    const promises = history.map(async (item) => {\n      const decrypted = await this.cryptoService.decryptToUtf8(new EncString(item.password));\n      return new GeneratedPasswordHistory(decrypted, item.date);\n    });\n\n    return await Promise.all(promises);\n  }\n\n  private matchesPrevious(password: string, history: GeneratedPasswordHistory[]): boolean {\n    if (history == null || history.length === 0) {\n      return false;\n    }\n\n    return history[history.length - 1].password === password;\n  }\n\n  // ref: https://stackoverflow.com/a/12646864/1090359\n  private async shuffleArray(array: string[]) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = await this.cryptoService.randomNumber(0, i);\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class AnonAddyForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid addy.io API token.\";\n    }\n    if (options.anonaddy?.domain == null || options.anonaddy.domain === \"\") {\n      throw \"Invalid addy.io domain.\";\n    }\n    if (options.anonaddy?.baseUrl == null || options.anonaddy.baseUrl === \"\") {\n      throw \"Invalid addy.io url.\";\n    }\n\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n        \"X-Requested-With\": \"XMLHttpRequest\",\n      }),\n    };\n    const url = options.anonaddy.baseUrl + \"/api/v1/aliases\";\n    requestInit.body = JSON.stringify({\n      domain: options.anonaddy.domain,\n      description:\n        (options.website != null ? \"Website: \" + options.website + \". \" : \"\") +\n        \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.data?.email;\n    }\n    if (response.status === 401) {\n      throw \"Invalid addy.io API token.\";\n    }\n    if (response?.statusText != null) {\n      throw \"addy.io error:\\n\" + response.statusText;\n    }\n    throw \"Unknown addy.io error occurred.\";\n  }\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class DuckDuckGoForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid DuckDuckGo API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://quack.duckduckgo.com/api/email/addresses\";\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      if (json.address) {\n        return `${json.address}@duck.com`;\n      }\n    } else if (response.status === 401) {\n      throw \"Invalid DuckDuckGo API token.\";\n    }\n    throw \"Unknown DuckDuckGo error occurred.\";\n  }\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class FastmailForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid Fastmail API token.\";\n    }\n\n    const accountId = await this.getAccountId(apiService, options);\n    if (accountId == null || accountId === \"\") {\n      throw \"Unable to obtain Fastmail masked email account ID.\";\n    }\n\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://api.fastmail.com/jmap/api/\";\n    requestInit.body = JSON.stringify({\n      using: [\"https://www.fastmail.com/dev/maskedemail\", \"urn:ietf:params:jmap:core\"],\n      methodCalls: [\n        [\n          \"MaskedEmail/set\",\n          {\n            accountId: accountId,\n            create: {\n              \"new-masked-email\": {\n                state: \"enabled\",\n                description: \"\",\n                forDomain: options.website,\n                emailPrefix: options.fastmail.prefix,\n              },\n            },\n          },\n          \"0\",\n        ],\n      ],\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200) {\n      const json = await response.json();\n      if (\n        json.methodResponses != null &&\n        json.methodResponses.length > 0 &&\n        json.methodResponses[0].length > 0\n      ) {\n        if (json.methodResponses[0][0] === \"MaskedEmail/set\") {\n          if (json.methodResponses[0][1]?.created?.[\"new-masked-email\"] != null) {\n            return json.methodResponses[0][1]?.created?.[\"new-masked-email\"]?.email;\n          }\n          if (json.methodResponses[0][1]?.notCreated?.[\"new-masked-email\"] != null) {\n            throw (\n              \"Fastmail error: \" +\n              json.methodResponses[0][1]?.notCreated?.[\"new-masked-email\"]?.description\n            );\n          }\n        } else if (json.methodResponses[0][0] === \"error\") {\n          throw \"Fastmail error: \" + json.methodResponses[0][1]?.description;\n        }\n      }\n    }\n    if (response.status === 401 || response.status === 403) {\n      throw \"Invalid Fastmail API token.\";\n    }\n    throw \"Unknown Fastmail error occurred.\";\n  }\n\n  private async getAccountId(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      method: \"GET\",\n      headers: new Headers({\n        Authorization: \"Bearer \" + options.apiKey,\n      }),\n    };\n    const url = \"https://api.fastmail.com/.well-known/jmap\";\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200) {\n      const json = await response.json();\n      if (json.primaryAccounts != null) {\n        return json.primaryAccounts[\"https://www.fastmail.com/dev/maskedemail\"];\n      }\n    }\n    return null;\n  }\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class FirefoxRelayForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Token \" + options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = \"https://relay.firefox.com/api/v1/relayaddresses/\";\n    requestInit.body = JSON.stringify({\n      enabled: true,\n      generated_for: options.website,\n      description:\n        (options.website != null ? options.website + \" - \" : \"\") + \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.full_address;\n    }\n    if (response.status === 401) {\n      throw \"Invalid Firefox Relay API token.\";\n    }\n    throw \"Unknown Firefox Relay error occurred.\";\n  }\n}\n","export class ForwarderOptions {\n  apiKey: string;\n  website: string;\n  fastmail = new FastmailForwarderOptions();\n  anonaddy = new AnonAddyForwarderOptions();\n  forwardemail = new ForwardEmailForwarderOptions();\n  simplelogin = new SimpleLoginForwarderOptions();\n}\n\nexport class FastmailForwarderOptions {\n  prefix: string;\n}\n\nexport class AnonAddyForwarderOptions {\n  domain: string;\n  baseUrl: string;\n}\n\nexport class ForwardEmailForwarderOptions {\n  domain: string;\n}\n\nexport class SimpleLoginForwarderOptions {\n  baseUrl: string;\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class SimpleLoginForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authentication: options.apiKey,\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    let url = options.simplelogin.baseUrl + \"/api/alias/random/new\";\n    if (options.website != null) {\n      url += \"?hostname=\" + options.website;\n    }\n    requestInit.body = JSON.stringify({\n      note:\n        (options.website != null ? \"Website: \" + options.website + \". \" : \"\") +\n        \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json.alias;\n    }\n    if (response.status === 401) {\n      throw \"Invalid SimpleLogin API key.\";\n    }\n    const json = await response.json();\n    if (json?.error != null) {\n      throw \"SimpleLogin error:\" + json.error;\n    }\n    throw \"Unknown SimpleLogin error occurred.\";\n  }\n}\n","import { ApiService } from \"../../../../abstractions/api.service\";\nimport { Utils } from \"../../../../platform/misc/utils\";\n\nimport { Forwarder } from \"./forwarder\";\nimport { ForwarderOptions } from \"./forwarder-options\";\n\nexport class ForwardEmailForwarder implements Forwarder {\n  async generate(apiService: ApiService, options: ForwarderOptions): Promise<string> {\n    if (options.apiKey == null || options.apiKey === \"\") {\n      throw \"Invalid Forward Email API key.\";\n    }\n    if (options.forwardemail?.domain == null || options.forwardemail.domain === \"\") {\n      throw \"Invalid Forward Email domain.\";\n    }\n    const requestInit: RequestInit = {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        Authorization: \"Basic \" + Utils.fromUtf8ToB64(options.apiKey + \":\"),\n        \"Content-Type\": \"application/json\",\n      }),\n    };\n    const url = `https://api.forwardemail.net/v1/domains/${options.forwardemail.domain}/aliases`;\n    requestInit.body = JSON.stringify({\n      labels: options.website,\n      description:\n        (options.website != null ? \"Website: \" + options.website + \". \" : \"\") +\n        \"Generated by Bitwarden.\",\n    });\n    const request = new Request(url, requestInit);\n    const response = await apiService.nativeFetch(request);\n    if (response.status === 200 || response.status === 201) {\n      const json = await response.json();\n      return json?.name + \"@\" + (json?.domain?.name || options.forwardemail.domain);\n    }\n    if (response.status === 401) {\n      throw \"Invalid Forward Email API key.\";\n    }\n    const json = await response.json();\n    if (json?.message != null) {\n      throw \"Forward Email error:\\n\" + json.message;\n    }\n    if (json?.error != null) {\n      throw \"Forward Email error:\\n\" + json.error;\n    }\n    throw \"Unknown Forward Email error occurred.\";\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { EFFLongWordList } from \"../../../platform/misc/wordlist\";\n\nimport {\n  AnonAddyForwarder,\n  DuckDuckGoForwarder,\n  FastmailForwarder,\n  FirefoxRelayForwarder,\n  ForwardEmailForwarder,\n  Forwarder,\n  ForwarderOptions,\n  SimpleLoginForwarder,\n} from \"./email-forwarders\";\nimport { UsernameGeneratorOptions } from \"./username-generation-options\";\nimport { UsernameGenerationServiceAbstraction } from \"./username-generation.service.abstraction\";\n\nconst DefaultOptions: UsernameGeneratorOptions = {\n  type: \"word\",\n  wordCapitalize: true,\n  wordIncludeNumber: true,\n  subaddressType: \"random\",\n  catchallType: \"random\",\n  forwardedService: \"\",\n  forwardedAnonAddyDomain: \"anonaddy.me\",\n  forwardedAnonAddyBaseUrl: \"https://app.addy.io\",\n  forwardedForwardEmailDomain: \"hideaddress.net\",\n  forwardedSimpleLoginBaseUrl: \"https://app.simplelogin.io\",\n};\n\nexport class UsernameGenerationService implements UsernameGenerationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private stateService: StateService,\n    private apiService: ApiService,\n  ) {}\n\n  generateUsername(options: UsernameGeneratorOptions): Promise<string> {\n    if (options.type === \"catchall\") {\n      return this.generateCatchall(options);\n    } else if (options.type === \"subaddress\") {\n      return this.generateSubaddress(options);\n    } else if (options.type === \"forwarded\") {\n      return this.generateForwarded(options);\n    } else {\n      return this.generateWord(options);\n    }\n  }\n\n  async generateWord(options: UsernameGeneratorOptions): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.wordCapitalize == null) {\n      o.wordCapitalize = true;\n    }\n    if (o.wordIncludeNumber == null) {\n      o.wordIncludeNumber = true;\n    }\n\n    const wordIndex = await this.cryptoService.randomNumber(0, EFFLongWordList.length - 1);\n    let word = EFFLongWordList[wordIndex];\n    if (o.wordCapitalize) {\n      word = word.charAt(0).toUpperCase() + word.slice(1);\n    }\n    if (o.wordIncludeNumber) {\n      const num = await this.cryptoService.randomNumber(1, 9999);\n      word = word + this.zeroPad(num.toString(), 4);\n    }\n    return word;\n  }\n\n  async generateSubaddress(options: UsernameGeneratorOptions): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    const subaddressEmail = o.subaddressEmail;\n    if (subaddressEmail == null || subaddressEmail.length < 3) {\n      return o.subaddressEmail;\n    }\n    const atIndex = subaddressEmail.indexOf(\"@\");\n    if (atIndex < 1 || atIndex >= subaddressEmail.length - 1) {\n      return subaddressEmail;\n    }\n    if (o.subaddressType == null) {\n      o.subaddressType = \"random\";\n    }\n\n    const emailBeginning = subaddressEmail.substr(0, atIndex);\n    const emailEnding = subaddressEmail.substr(atIndex + 1, subaddressEmail.length);\n\n    let subaddressString = \"\";\n    if (o.subaddressType === \"random\") {\n      subaddressString = await this.randomString(8);\n    } else if (o.subaddressType === \"website-name\") {\n      subaddressString = o.website;\n    }\n    return emailBeginning + \"+\" + subaddressString + \"@\" + emailEnding;\n  }\n\n  async generateCatchall(options: UsernameGeneratorOptions): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.catchallDomain == null || o.catchallDomain === \"\") {\n      return null;\n    }\n    if (o.catchallType == null) {\n      o.catchallType = \"random\";\n    }\n\n    let startString = \"\";\n    if (o.catchallType === \"random\") {\n      startString = await this.randomString(8);\n    } else if (o.catchallType === \"website-name\") {\n      startString = o.website;\n    }\n    return startString + \"@\" + o.catchallDomain;\n  }\n\n  async generateForwarded(options: UsernameGeneratorOptions): Promise<string> {\n    const o = Object.assign({}, DefaultOptions, options);\n\n    if (o.forwardedService == null) {\n      return null;\n    }\n\n    let forwarder: Forwarder = null;\n    const forwarderOptions = new ForwarderOptions();\n    forwarderOptions.website = o.website;\n    if (o.forwardedService === \"simplelogin\") {\n      forwarder = new SimpleLoginForwarder();\n      forwarderOptions.apiKey = o.forwardedSimpleLoginApiKey;\n      forwarderOptions.simplelogin.baseUrl = o.forwardedSimpleLoginBaseUrl;\n    } else if (o.forwardedService === \"anonaddy\") {\n      forwarder = new AnonAddyForwarder();\n      forwarderOptions.apiKey = o.forwardedAnonAddyApiToken;\n      forwarderOptions.anonaddy.domain = o.forwardedAnonAddyDomain;\n      forwarderOptions.anonaddy.baseUrl = o.forwardedAnonAddyBaseUrl;\n    } else if (o.forwardedService === \"firefoxrelay\") {\n      forwarder = new FirefoxRelayForwarder();\n      forwarderOptions.apiKey = o.forwardedFirefoxApiToken;\n    } else if (o.forwardedService === \"fastmail\") {\n      forwarder = new FastmailForwarder();\n      forwarderOptions.apiKey = o.forwardedFastmailApiToken;\n    } else if (o.forwardedService === \"duckduckgo\") {\n      forwarder = new DuckDuckGoForwarder();\n      forwarderOptions.apiKey = o.forwardedDuckDuckGoToken;\n    } else if (o.forwardedService === \"forwardemail\") {\n      forwarder = new ForwardEmailForwarder();\n      forwarderOptions.apiKey = o.forwardedForwardEmailApiToken;\n      forwarderOptions.forwardemail.domain = o.forwardedForwardEmailDomain;\n    }\n\n    if (forwarder == null) {\n      return null;\n    }\n\n    return forwarder.generate(this.apiService, forwarderOptions);\n  }\n\n  async getOptions(): Promise<UsernameGeneratorOptions> {\n    let options = await this.stateService.getUsernameGenerationOptions();\n    if (options == null) {\n      options = Object.assign({}, DefaultOptions);\n    } else {\n      options = Object.assign({}, DefaultOptions, options);\n    }\n    await this.stateService.setUsernameGenerationOptions(options);\n    return options;\n  }\n\n  async saveOptions(options: UsernameGeneratorOptions) {\n    await this.stateService.setUsernameGenerationOptions(options);\n  }\n\n  private async randomString(length: number) {\n    let str = \"\";\n    const charSet = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n    for (let i = 0; i < length; i++) {\n      const randomCharIndex = await this.cryptoService.randomNumber(0, charSet.length - 1);\n      str += charSet.charAt(randomCharIndex);\n    }\n    return str;\n  }\n\n  // ref: https://stackoverflow.com/a/10073788\n  private zeroPad(number: string, width: number) {\n    return number.length >= width\n      ? number\n      : new Array(width - number.length + 1).join(\"0\") + number;\n  }\n}\n","export enum SendType {\n  Text = 0,\n  File = 1,\n}\n","import * as zxcvbn from \"zxcvbn\";\n\nimport { PasswordStrengthServiceAbstraction } from \"./password-strength.service.abstraction\";\n\nexport class PasswordStrengthService implements PasswordStrengthServiceAbstraction {\n  /**\n   * Calculates a password strength score using zxcvbn.\n   * @param password The password to calculate the strength of.\n   * @param emailInput An unparsed email address to use as user input.\n   * @param userInputs An array of additional user inputs to use when calculating the strength.\n   */\n  getPasswordStrength(\n    password: string,\n    emailInput: string = null,\n    userInputs: string[] = null,\n  ): zxcvbn.ZXCVBNResult {\n    if (password == null || password.length === 0) {\n      return null;\n    }\n    const globalUserInputs = [\n      \"bitwarden\",\n      \"bit\",\n      \"warden\",\n      ...(userInputs ?? []),\n      ...this.emailToUserInputs(emailInput),\n    ];\n    // Use a hash set to get rid of any duplicate user inputs\n    const finalUserInputs = Array.from(new Set(globalUserInputs));\n    const result = zxcvbn(password, finalUserInputs);\n    return result;\n  }\n\n  /**\n   * Convert an email address into a list of user inputs for zxcvbn by\n   * taking the local part of the email address and splitting it into words.\n   * @param email\n   * @private\n   */\n  private emailToUserInputs(email: string): string[] {\n    if (email == null || email.length === 0) {\n      return [];\n    }\n    const atPosition = email.indexOf(\"@\");\n    if (atPosition < 0) {\n      return [];\n    }\n    return email\n      .substring(0, atPosition)\n      .trim()\n      .toLowerCase()\n      .split(/[^A-Za-z0-9]/);\n  }\n}\n","import { SendFileApi } from \"../api/send-file.api\";\n\nexport class SendFileData {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data?: SendFileApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.id = data.id;\n    this.fileName = data.fileName;\n    this.size = data.size;\n    this.sizeName = data.sizeName;\n  }\n}\n","import { SendTextApi } from \"../api/send-text.api\";\n\nexport class SendTextData {\n  text: string;\n  hidden: boolean;\n\n  constructor(data?: SendTextApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.text = data.text;\n    this.hidden = data.hidden;\n  }\n}\n","import { SendType } from \"../../enums/send-type\";\nimport { SendResponse } from \"../response/send.response\";\n\nimport { SendFileData } from \"./send-file.data\";\nimport { SendTextData } from \"./send-text.data\";\n\nexport class SendData {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileData;\n  text: SendTextData;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(response?: SendResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.accessId = response.accessId;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.key = response.key;\n    this.maxAccessCount = response.maxAccessCount;\n    this.accessCount = response.accessCount;\n    this.revisionDate = response.revisionDate;\n    this.expirationDate = response.expirationDate;\n    this.deletionDate = response.deletionDate;\n    this.password = response.password;\n    this.disabled = response.disable;\n    this.hideEmail = response.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextData(response.text);\n        break;\n      case SendType.File:\n        this.file = new SendFileData(response.file);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { SendType } from \"../../enums/send-type\";\nimport { SendFileApi } from \"../api/send-file.api\";\nimport { SendTextApi } from \"../api/send-text.api\";\nimport { Send } from \"../domain/send\";\n\nexport class SendRequest {\n  type: SendType;\n  fileLength?: number;\n  name: string;\n  notes: string;\n  key: string;\n  maxAccessCount?: number;\n  expirationDate: string;\n  deletionDate: string;\n  text: SendTextApi;\n  file: SendFileApi;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(send: Send, fileLength?: number) {\n    this.type = send.type;\n    this.fileLength = fileLength;\n    this.name = send.name ? send.name.encryptedString : null;\n    this.notes = send.notes ? send.notes.encryptedString : null;\n    this.maxAccessCount = send.maxAccessCount;\n    this.expirationDate = send.expirationDate != null ? send.expirationDate.toISOString() : null;\n    this.deletionDate = send.deletionDate != null ? send.deletionDate.toISOString() : null;\n    this.key = send.key != null ? send.key.encryptedString : null;\n    this.password = send.password;\n    this.disabled = send.disabled;\n    this.hideEmail = send.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextApi();\n        this.text.text = send.text.text != null ? send.text.text.encryptedString : null;\n        this.text.hidden = send.text.hidden;\n        break;\n      case SendType.File:\n        this.file = new SendFileApi();\n        this.file.fileName = send.file.fileName != null ? send.file.fileName.encryptedString : null;\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { SendType } from \"../../enums/send-type\";\nimport { SendFileApi } from \"../api/send-file.api\";\nimport { SendTextApi } from \"../api/send-text.api\";\n\nexport class SendAccessResponse extends BaseResponse {\n  id: string;\n  type: SendType;\n  name: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  expirationDate: Date;\n  creatorIdentifier: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.creatorIdentifier = this.getResponseProperty(\"CreatorIdentifier\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class SendFileDownloadDataResponse extends BaseResponse {\n  id: string = null;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { FileUploadType } from \"../../../../platform/enums\";\n\nimport { SendResponse } from \"./send.response\";\n\nexport class SendFileUploadDataResponse extends BaseResponse {\n  fileUploadType: FileUploadType;\n  sendResponse: SendResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const sendResponse = this.getResponseProperty(\"SendResponse\");\n    this.sendResponse = sendResponse == null ? null : new SendResponse(sendResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { ErrorResponse } from \"../../../models/response/error.response\";\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport {\n  FileUploadApiMethods,\n  FileUploadService,\n} from \"../../../platform/abstractions/file-upload/file-upload.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncArrayBuffer } from \"../../../platform/models/domain/enc-array-buffer\";\nimport { SendType } from \"../enums/send-type\";\nimport { SendData } from \"../models/data/send.data\";\nimport { Send } from \"../models/domain/send\";\nimport { SendAccessRequest } from \"../models/request/send-access.request\";\nimport { SendRequest } from \"../models/request/send.request\";\nimport { SendAccessResponse } from \"../models/response/send-access.response\";\nimport { SendFileDownloadDataResponse } from \"../models/response/send-file-download-data.response\";\nimport { SendFileUploadDataResponse } from \"../models/response/send-file-upload-data.response\";\nimport { SendResponse } from \"../models/response/send.response\";\nimport { SendAccessView } from \"../models/view/send-access.view\";\n\nimport { SendApiService as SendApiServiceAbstraction } from \"./send-api.service.abstraction\";\nimport { InternalSendService } from \"./send.service.abstraction\";\n\nexport class SendApiService implements SendApiServiceAbstraction {\n  constructor(\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private sendService: InternalSendService,\n  ) {}\n\n  async getSend(id: string): Promise<SendResponse> {\n    const r = await this.apiService.send(\"GET\", \"/sends/\" + id, null, true, true);\n    return new SendResponse(r);\n  }\n\n  async postSendAccess(\n    id: string,\n    request: SendAccessRequest,\n    apiUrl?: string,\n  ): Promise<SendAccessResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", id);\n    };\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/sends/access/\" + id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader,\n    );\n    return new SendAccessResponse(r);\n  }\n\n  async getSendFileDownloadData(\n    send: SendAccessView,\n    request: SendAccessRequest,\n    apiUrl?: string,\n  ): Promise<SendFileDownloadDataResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", send.id);\n    };\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/sends/\" + send.id + \"/access/file/\" + send.file.id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader,\n    );\n    return new SendFileDownloadDataResponse(r);\n  }\n\n  async getSends(): Promise<ListResponse<SendResponse>> {\n    const r = await this.apiService.send(\"GET\", \"/sends\", null, true, true);\n    return new ListResponse(r, SendResponse);\n  }\n\n  async postSend(request: SendRequest): Promise<SendResponse> {\n    const r = await this.apiService.send(\"POST\", \"/sends\", request, true, true);\n    return new SendResponse(r);\n  }\n\n  async postFileTypeSend(request: SendRequest): Promise<SendFileUploadDataResponse> {\n    const r = await this.apiService.send(\"POST\", \"/sends/file/v2\", request, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  async renewSendFileUploadUrl(\n    sendId: string,\n    fileId: string,\n  ): Promise<SendFileUploadDataResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/sends/\" + sendId + \"/file/\" + fileId,\n      null,\n      true,\n      true,\n    );\n    return new SendFileUploadDataResponse(r);\n  }\n\n  postSendFile(sendId: string, fileId: string, data: FormData): Promise<any> {\n    return this.apiService.send(\"POST\", \"/sends/\" + sendId + \"/file/\" + fileId, data, true, false);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postSendFileLegacy(data: FormData): Promise<SendResponse> {\n    const r = await this.apiService.send(\"POST\", \"/sends/file\", data, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSend(id: string, request: SendRequest): Promise<SendResponse> {\n    const r = await this.apiService.send(\"PUT\", \"/sends/\" + id, request, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSendRemovePassword(id: string): Promise<SendResponse> {\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/sends/\" + id + \"/remove-password\",\n      null,\n      true,\n      true,\n    );\n    return new SendResponse(r);\n  }\n\n  deleteSend(id: string): Promise<any> {\n    return this.apiService.send(\"DELETE\", \"/sends/\" + id, null, true, false);\n  }\n\n  async save(sendData: [Send, EncArrayBuffer]): Promise<any> {\n    const response = await this.upload(sendData);\n\n    const data = new SendData(response);\n    await this.sendService.upsert(data);\n  }\n\n  async delete(id: string): Promise<any> {\n    await this.deleteSend(id);\n    await this.sendService.delete(id);\n  }\n\n  async removePassword(id: string): Promise<any> {\n    const response = await this.putSendRemovePassword(id);\n    const data = new SendData(response);\n    await this.sendService.upsert(data);\n  }\n\n  // Send File Upload methods\n\n  private async upload(sendData: [Send, EncArrayBuffer]): Promise<SendResponse> {\n    const request = new SendRequest(sendData[0], sendData[1]?.buffer.byteLength);\n    let response: SendResponse;\n    if (sendData[0].id == null) {\n      if (sendData[0].type === SendType.Text) {\n        response = await this.postSend(request);\n      } else {\n        try {\n          const uploadDataResponse = await this.postFileTypeSend(request);\n          response = uploadDataResponse.sendResponse;\n          await this.fileUploadService.upload(\n            uploadDataResponse,\n            sendData[0].file.fileName,\n            sendData[1],\n            this.generateMethods(uploadDataResponse, response),\n          );\n        } catch (e) {\n          if (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) {\n            response = await this.legacyServerSendFileUpload(sendData, request);\n          } else if (e instanceof ErrorResponse) {\n            throw new Error((e as ErrorResponse).getSingleMessage());\n          } else {\n            throw e;\n          }\n        }\n      }\n      sendData[0].id = response.id;\n      sendData[0].accessId = response.accessId;\n    } else {\n      response = await this.putSend(sendData[0].id, request);\n    }\n    return response;\n  }\n\n  private generateMethods(\n    uploadData: SendFileUploadDataResponse,\n    response: SendResponse,\n  ): FileUploadApiMethods {\n    return {\n      postDirect: this.generatePostDirectCallback(response),\n      renewFileUploadUrl: this.generateRenewFileUploadUrlCallback(response.id, response.file.id),\n      rollback: this.generateRollbackCallback(response.id),\n    };\n  }\n\n  private generatePostDirectCallback(sendResponse: SendResponse) {\n    return (data: FormData) => {\n      return this.postSendFile(sendResponse.id, sendResponse.file.id, data);\n    };\n  }\n\n  private generateRenewFileUploadUrlCallback(sendId: string, fileId: string) {\n    return async () => {\n      const renewResponse = await this.renewSendFileUploadUrl(sendId, fileId);\n      return renewResponse?.url;\n    };\n  }\n\n  private generateRollbackCallback(sendId: string) {\n    return () => {\n      return this.deleteSend(sendId);\n    };\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerSendFileUpload(\n    sendData: [Send, EncArrayBuffer],\n    request: SendRequest,\n  ): Promise<SendResponse> {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([sendData[1].buffer], { type: \"application/octet-stream\" });\n      fd.append(\"model\", JSON.stringify(request));\n      fd.append(\"data\", blob, sendData[0].file.fileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"model\", JSON.stringify(request));\n        fd.append(\n          \"data\",\n          Buffer.from(sendData[1].buffer) as any,\n          {\n            filepath: sendData[0].file.fileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any,\n        );\n      } else {\n        throw e;\n      }\n    }\n    return await this.postSendFileLegacy(fd);\n  }\n}\n","// required to avoid linting errors when there are no flags\n/* eslint-disable @typescript-eslint/ban-types */\nexport type SharedFlags = {\n  multithreadDecryption: boolean;\n  showPasswordless?: boolean;\n  enableCipherKeyEncryption?: boolean;\n};\n\n// required to avoid linting errors when there are no flags\n/* eslint-disable @typescript-eslint/ban-types */\nexport type SharedDevFlags = {\n  noopNotifications: boolean;\n};\n\nfunction getFlags<T>(envFlags: string | T): T {\n  if (typeof envFlags === \"string\") {\n    return JSON.parse(envFlags) as T;\n  } else {\n    return envFlags as T;\n  }\n}\n\n/**\n * Gets the value of a feature flag from environment.\n * All flags default to \"on\" (true).\n * Only use for shared code in `libs`, otherwise use the client-specific function.\n * @param flag The name of the feature flag to check\n * @returns The value of the flag\n */\nexport function flagEnabled<Flags extends SharedFlags>(flag: keyof Flags): boolean {\n  const flags = getFlags<Flags>(process.env.FLAGS);\n  return flags[flag] == null || !!flags[flag];\n}\n\n/**\n * Gets the value of a dev flag from environment.\n * Will always return false unless in development.\n * Only use for shared code in `libs`, otherwise use the client-specific function.\n * @param flag The name of the dev flag to check\n * @returns The value of the flag\n */\nexport function devFlagEnabled<DevFlags extends SharedDevFlags>(flag: keyof DevFlags): boolean {\n  if (process.env.ENV !== \"development\") {\n    return false;\n  }\n\n  const devFlags = getFlags<DevFlags>(process.env.DEV_FLAGS);\n  return devFlags?.[flag] == null ? false : !!devFlags[flag];\n}\n\n/**\n * Gets the value of a dev flag from environment.\n * Will always return false unless in development.\n * @param flag The name of the dev flag to check\n * @returns The value of the flag\n * @throws Error if the flag is not enabled\n */\nexport function devFlagValue<DevFlags extends SharedDevFlags>(\n  flag: keyof DevFlags,\n): DevFlags[keyof DevFlags] {\n  if (!devFlagEnabled(flag)) {\n    throw new Error(`This method should not be called, it is protected by a disabled dev flag.`);\n  }\n\n  const devFlags = getFlags<DevFlags>(process.env.DEV_FLAGS);\n  return devFlags[flag];\n}\n","/**\n * Use as a Decorator on async functions, it will prevent multiple 'active' calls as the same time\n *\n * If a promise was returned from a previous call to this function, that hasn't yet resolved it will\n * be returned, instead of calling the original function again\n *\n * Results are not cached, once the promise has returned, the next call will result in a fresh call\n *\n * Read more at https://github.com/bitwarden/jslib/pull/7\n */\nexport function sequentialize(cacheKey: (args: any[]) => string) {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod: () => Promise<any> = descriptor.value;\n    const caches = new Map<any, Map<string, Promise<any>>>();\n\n    const getCache = (obj: any) => {\n      let cache = caches.get(obj);\n      if (cache != null) {\n        return cache;\n      }\n      cache = new Map<string, Promise<any>>();\n      caches.set(obj, cache);\n      return cache;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const cache = getCache(this);\n        const argsCacheKey = cacheKey(args);\n        let response = cache.get(argsCacheKey);\n        if (response != null) {\n          return response;\n        }\n\n        const onFinally = () => {\n          cache.delete(argsCacheKey);\n          if (cache.size === 0) {\n            caches.delete(this);\n          }\n        };\n        response = originalMethod\n          .apply(this, args)\n          .then((val: any) => {\n            onFinally();\n            return val;\n          })\n          .catch((err: any) => {\n            onFinally();\n            throw err;\n          });\n\n        cache.set(argsCacheKey, response);\n        return response;\n      },\n    };\n  };\n}\n","import { CipherView } from \"../view/cipher.view\";\n\nconst CacheTTL = 3000;\n\nexport class SortedCiphersCache {\n  private readonly sortedCiphersByUrl: Map<string, Ciphers> = new Map<string, Ciphers>();\n  private readonly timeouts: Map<string, any> = new Map<string, any>();\n\n  constructor(private readonly comparator: (a: CipherView, b: CipherView) => number) {}\n\n  isCached(url: string) {\n    return this.sortedCiphersByUrl.has(url);\n  }\n\n  addCiphers(url: string, ciphers: CipherView[]) {\n    ciphers.sort(this.comparator);\n    this.sortedCiphersByUrl.set(url, new Ciphers(ciphers));\n    this.resetTimer(url);\n  }\n\n  getLastUsed(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastUsed() : null;\n  }\n\n  getLastLaunched(url: string) {\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastLaunched() : null;\n  }\n\n  getNext(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getNext() : null;\n  }\n\n  updateLastUsedIndex(url: string) {\n    if (this.isCached(url)) {\n      this.sortedCiphersByUrl.get(url).updateLastUsedIndex();\n    }\n  }\n\n  clear() {\n    this.sortedCiphersByUrl.clear();\n    this.timeouts.clear();\n  }\n\n  private resetTimer(url: string) {\n    clearTimeout(this.timeouts.get(url));\n    this.timeouts.set(\n      url,\n      setTimeout(() => {\n        this.sortedCiphersByUrl.delete(url);\n        this.timeouts.delete(url);\n      }, CacheTTL),\n    );\n  }\n}\n\nclass Ciphers {\n  lastUsedIndex = -1;\n\n  constructor(private readonly ciphers: CipherView[]) {}\n\n  getLastUsed() {\n    this.lastUsedIndex = Math.max(this.lastUsedIndex, 0);\n    return this.ciphers[this.lastUsedIndex];\n  }\n\n  getLastLaunched() {\n    const usedCiphers = this.ciphers.filter((cipher) => cipher.localData?.lastLaunched);\n    const sortedCiphers = usedCiphers.sort(\n      (x, y) => y.localData.lastLaunched.valueOf() - x.localData.lastLaunched.valueOf(),\n    );\n    return sortedCiphers[0];\n  }\n\n  getNextIndex() {\n    return (this.lastUsedIndex + 1) % this.ciphers.length;\n  }\n\n  getNext() {\n    return this.ciphers[this.getNextIndex()];\n  }\n\n  updateLastUsedIndex() {\n    this.lastUsedIndex = this.getNextIndex();\n  }\n}\n","export class CipherBulkDeleteRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class CipherBulkMoveRequest {\n  ids: string[];\n  folderId: string;\n\n  constructor(ids: string[], folderId: string) {\n    this.ids = ids == null ? [] : ids;\n    this.folderId = folderId;\n  }\n}\n","export class CipherBulkRestoreRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class AttachmentRequest {\n  fileName: string;\n  key: string;\n  fileSize: number;\n  adminRequest: boolean;\n}\n","import { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CardApi } from \"../api/card.api\";\nimport { Fido2CredentialApi } from \"../api/fido2-credential.api\";\nimport { FieldApi } from \"../api/field.api\";\nimport { IdentityApi } from \"../api/identity.api\";\nimport { LoginUriApi } from \"../api/login-uri.api\";\nimport { LoginApi } from \"../api/login.api\";\nimport { SecureNoteApi } from \"../api/secure-note.api\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentRequest } from \"./attachment.request\";\nimport { PasswordHistoryRequest } from \"./password-history.request\";\n\nexport class CipherRequest {\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  name: string;\n  notes: string;\n  favorite: boolean;\n  login: LoginApi;\n  secureNote: SecureNoteApi;\n  card: CardApi;\n  identity: IdentityApi;\n  fields: FieldApi[];\n  passwordHistory: PasswordHistoryRequest[];\n  // Deprecated, remove at some point and rename attachments2 to attachments\n  attachments: { [id: string]: string };\n  attachments2: { [id: string]: AttachmentRequest };\n  lastKnownRevisionDate: Date;\n  reprompt: CipherRepromptType;\n  key: string;\n\n  constructor(cipher: Cipher) {\n    this.type = cipher.type;\n    this.folderId = cipher.folderId;\n    this.organizationId = cipher.organizationId;\n    this.name = cipher.name ? cipher.name.encryptedString : null;\n    this.notes = cipher.notes ? cipher.notes.encryptedString : null;\n    this.favorite = cipher.favorite;\n    this.lastKnownRevisionDate = cipher.revisionDate;\n    this.reprompt = cipher.reprompt;\n    this.key = cipher.key?.encryptedString;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginApi();\n        this.login.uris =\n          cipher.login.uris?.map((u) => {\n            const uri = new LoginUriApi();\n            uri.uri = u.uri != null ? u.uri.encryptedString : null;\n            uri.match = u.match != null ? u.match : null;\n            uri.uriChecksum = u.uriChecksum != null ? u.uriChecksum.encryptedString : null;\n            return uri;\n          }) ?? [];\n        this.login.username = cipher.login.username ? cipher.login.username.encryptedString : null;\n        this.login.password = cipher.login.password ? cipher.login.password.encryptedString : null;\n        this.login.passwordRevisionDate =\n          cipher.login.passwordRevisionDate != null\n            ? cipher.login.passwordRevisionDate.toISOString()\n            : null;\n        this.login.totp = cipher.login.totp ? cipher.login.totp.encryptedString : null;\n        this.login.autofillOnPageLoad = cipher.login.autofillOnPageLoad;\n\n        if (cipher.login.fido2Credentials != null) {\n          this.login.fido2Credentials = cipher.login.fido2Credentials.map((key) => {\n            const keyApi = new Fido2CredentialApi();\n            keyApi.credentialId =\n              key.credentialId != null ? key.credentialId.encryptedString : null;\n            keyApi.keyType =\n              key.keyType != null ? (key.keyType.encryptedString as \"public-key\") : null;\n            keyApi.keyAlgorithm =\n              key.keyAlgorithm != null ? (key.keyAlgorithm.encryptedString as \"ECDSA\") : null;\n            keyApi.keyCurve =\n              key.keyCurve != null ? (key.keyCurve.encryptedString as \"P-256\") : null;\n            keyApi.keyValue = key.keyValue != null ? key.keyValue.encryptedString : null;\n            keyApi.rpId = key.rpId != null ? key.rpId.encryptedString : null;\n            keyApi.rpName = key.rpName != null ? key.rpName.encryptedString : null;\n            keyApi.counter = key.counter != null ? key.counter.encryptedString : null;\n            keyApi.userHandle = key.userHandle != null ? key.userHandle.encryptedString : null;\n            keyApi.userName = key.userName != null ? key.userName.encryptedString : null;\n            keyApi.userDisplayName =\n              key.userDisplayName != null ? key.userDisplayName.encryptedString : null;\n            keyApi.discoverable =\n              key.discoverable != null ? key.discoverable.encryptedString : null;\n            keyApi.creationDate = key.creationDate != null ? key.creationDate.toISOString() : null;\n            return keyApi;\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteApi();\n        this.secureNote.type = cipher.secureNote.type;\n        break;\n      case CipherType.Card:\n        this.card = new CardApi();\n        this.card.cardholderName =\n          cipher.card.cardholderName != null ? cipher.card.cardholderName.encryptedString : null;\n        this.card.brand = cipher.card.brand != null ? cipher.card.brand.encryptedString : null;\n        this.card.number = cipher.card.number != null ? cipher.card.number.encryptedString : null;\n        this.card.expMonth =\n          cipher.card.expMonth != null ? cipher.card.expMonth.encryptedString : null;\n        this.card.expYear =\n          cipher.card.expYear != null ? cipher.card.expYear.encryptedString : null;\n        this.card.code = cipher.card.code != null ? cipher.card.code.encryptedString : null;\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityApi();\n        this.identity.title =\n          cipher.identity.title != null ? cipher.identity.title.encryptedString : null;\n        this.identity.firstName =\n          cipher.identity.firstName != null ? cipher.identity.firstName.encryptedString : null;\n        this.identity.middleName =\n          cipher.identity.middleName != null ? cipher.identity.middleName.encryptedString : null;\n        this.identity.lastName =\n          cipher.identity.lastName != null ? cipher.identity.lastName.encryptedString : null;\n        this.identity.address1 =\n          cipher.identity.address1 != null ? cipher.identity.address1.encryptedString : null;\n        this.identity.address2 =\n          cipher.identity.address2 != null ? cipher.identity.address2.encryptedString : null;\n        this.identity.address3 =\n          cipher.identity.address3 != null ? cipher.identity.address3.encryptedString : null;\n        this.identity.city =\n          cipher.identity.city != null ? cipher.identity.city.encryptedString : null;\n        this.identity.state =\n          cipher.identity.state != null ? cipher.identity.state.encryptedString : null;\n        this.identity.postalCode =\n          cipher.identity.postalCode != null ? cipher.identity.postalCode.encryptedString : null;\n        this.identity.country =\n          cipher.identity.country != null ? cipher.identity.country.encryptedString : null;\n        this.identity.company =\n          cipher.identity.company != null ? cipher.identity.company.encryptedString : null;\n        this.identity.email =\n          cipher.identity.email != null ? cipher.identity.email.encryptedString : null;\n        this.identity.phone =\n          cipher.identity.phone != null ? cipher.identity.phone.encryptedString : null;\n        this.identity.ssn =\n          cipher.identity.ssn != null ? cipher.identity.ssn.encryptedString : null;\n        this.identity.username =\n          cipher.identity.username != null ? cipher.identity.username.encryptedString : null;\n        this.identity.passportNumber =\n          cipher.identity.passportNumber != null\n            ? cipher.identity.passportNumber.encryptedString\n            : null;\n        this.identity.licenseNumber =\n          cipher.identity.licenseNumber != null\n            ? cipher.identity.licenseNumber.encryptedString\n            : null;\n        break;\n      default:\n        break;\n    }\n\n    if (cipher.fields != null) {\n      this.fields = cipher.fields.map((f) => {\n        const field = new FieldApi();\n        field.type = f.type;\n        field.name = f.name ? f.name.encryptedString : null;\n        field.value = f.value ? f.value.encryptedString : null;\n        field.linkedId = f.linkedId;\n        return field;\n      });\n    }\n\n    if (cipher.passwordHistory != null) {\n      this.passwordHistory = [];\n      cipher.passwordHistory.forEach((ph) => {\n        this.passwordHistory.push({\n          lastUsedDate: ph.lastUsedDate,\n          password: ph.password ? ph.password.encryptedString : null,\n        });\n      });\n    }\n\n    if (cipher.attachments != null) {\n      this.attachments = {};\n      this.attachments2 = {};\n      cipher.attachments.forEach((attachment) => {\n        const fileName = attachment.fileName ? attachment.fileName.encryptedString : null;\n        this.attachments[attachment.id] = fileName;\n        const attachmentRequest = new AttachmentRequest();\n        attachmentRequest.fileName = fileName;\n        if (attachment.key != null) {\n          attachmentRequest.key = attachment.key.encryptedString;\n        }\n        this.attachments2[attachment.id] = attachmentRequest;\n      });\n    }\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipher.request\";\n\nexport class CipherWithIdRequest extends CipherRequest {\n  id: string;\n\n  constructor(cipher: Cipher) {\n    super(cipher);\n    this.id = cipher.id;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherWithIdRequest } from \"./cipher-with-id.request\";\n\nexport class CipherBulkShareRequest {\n  ciphers: CipherWithIdRequest[];\n  collectionIds: string[];\n\n  constructor(ciphers: Cipher[], collectionIds: string[]) {\n    if (ciphers != null) {\n      this.ciphers = [];\n      ciphers.forEach((c) => {\n        this.ciphers.push(new CipherWithIdRequest(c));\n      });\n    }\n    this.collectionIds = collectionIds;\n  }\n}\n","import { CipherId, CollectionId, OrganizationId } from \"../../../types/guid\";\n\nexport class CipherBulkUpdateCollectionsRequest {\n  organizationId: OrganizationId;\n  cipherIds: CipherId[];\n  collectionIds: CollectionId[];\n  removeCollections: boolean;\n  constructor(\n    organizationId: OrganizationId,\n    cipherIds: CipherId[],\n    collectionIds: CollectionId[],\n    removeCollections: boolean = false,\n  ) {\n    this.organizationId = organizationId;\n    this.cipherIds = cipherIds;\n    this.collectionIds = collectionIds;\n    this.removeCollections = removeCollections;\n  }\n}\n","export class CipherCollectionsRequest {\n  collectionIds: string[];\n\n  constructor(collectionIds: string[]) {\n    this.collectionIds = collectionIds == null ? [] : collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipher.request\";\n\nexport class CipherCreateRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nexport class CipherPartialRequest {\n  folderId: string;\n  favorite: boolean;\n\n  constructor(cipher: Cipher) {\n    this.folderId = cipher.folderId;\n    this.favorite = cipher.favorite;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipher.request\";\n\nexport class CipherShareRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\nimport { SemVer } from \"semver\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { SearchService } from \"../../abstractions/search.service\";\nimport { AutofillSettingsServiceAbstraction } from \"../../autofill/services/autofill-settings.service\";\nimport { DomainSettingsService } from \"../../autofill/services/domain-settings.service\";\nimport { UriMatchStrategySetting } from \"../../models/domain/domain-service\";\nimport { ErrorResponse } from \"../../models/response/error.response\";\nimport { ListResponse } from \"../../models/response/list.response\";\nimport { View } from \"../../models/view/view\";\nimport { ConfigServiceAbstraction } from \"../../platform/abstractions/config/config.service.abstraction\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { EncryptService } from \"../../platform/abstractions/encrypt.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { flagEnabled } from \"../../platform/misc/flags\";\nimport { sequentialize } from \"../../platform/misc/sequentialize\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport Domain from \"../../platform/models/domain/domain-base\";\nimport { EncArrayBuffer } from \"../../platform/models/domain/enc-array-buffer\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { CipherId, CollectionId, OrganizationId } from \"../../types/guid\";\nimport { OrgKey, UserKey } from \"../../types/key\";\nimport { CipherService as CipherServiceAbstraction } from \"../abstractions/cipher.service\";\nimport { CipherFileUploadService } from \"../abstractions/file-upload/cipher-file-upload.service\";\nimport { FieldType } from \"../enums\";\nimport { CipherType } from \"../enums/cipher-type\";\nimport { CipherData } from \"../models/data/cipher.data\";\nimport { Attachment } from \"../models/domain/attachment\";\nimport { Card } from \"../models/domain/card\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Fido2Credential } from \"../models/domain/fido2-credential\";\nimport { Field } from \"../models/domain/field\";\nimport { Identity } from \"../models/domain/identity\";\nimport { Login } from \"../models/domain/login\";\nimport { LoginUri } from \"../models/domain/login-uri\";\nimport { Password } from \"../models/domain/password\";\nimport { SecureNote } from \"../models/domain/secure-note\";\nimport { SortedCiphersCache } from \"../models/domain/sorted-ciphers-cache\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipher-bulk-delete.request\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipher-bulk-move.request\";\nimport { CipherBulkRestoreRequest } from \"../models/request/cipher-bulk-restore.request\";\nimport { CipherBulkShareRequest } from \"../models/request/cipher-bulk-share.request\";\nimport { CipherBulkUpdateCollectionsRequest } from \"../models/request/cipher-bulk-update-collections.request\";\nimport { CipherCollectionsRequest } from \"../models/request/cipher-collections.request\";\nimport { CipherCreateRequest } from \"../models/request/cipher-create.request\";\nimport { CipherPartialRequest } from \"../models/request/cipher-partial.request\";\nimport { CipherShareRequest } from \"../models/request/cipher-share.request\";\nimport { CipherRequest } from \"../models/request/cipher.request\";\nimport { CipherResponse } from \"../models/response/cipher.response\";\nimport { AttachmentView } from \"../models/view/attachment.view\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { FieldView } from \"../models/view/field.view\";\nimport { PasswordHistoryView } from \"../models/view/password-history.view\";\n\nconst CIPHER_KEY_ENC_MIN_SERVER_VER = new SemVer(\"2024.2.0\");\n\nexport class CipherService implements CipherServiceAbstraction {\n  private sortedCiphersCache: SortedCiphersCache = new SortedCiphersCache(\n    this.sortCiphersByLastUsed,\n  );\n\n  constructor(\n    private cryptoService: CryptoService,\n    private domainSettingsService: DomainSettingsService,\n    private apiService: ApiService,\n    private i18nService: I18nService,\n    private searchService: SearchService,\n    private stateService: StateService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private encryptService: EncryptService,\n    private cipherFileUploadService: CipherFileUploadService,\n    private configService: ConfigServiceAbstraction,\n  ) {}\n\n  async getDecryptedCipherCache(): Promise<CipherView[]> {\n    const decryptedCiphers = await this.stateService.getDecryptedCiphers();\n    return decryptedCiphers;\n  }\n\n  async setDecryptedCipherCache(value: CipherView[]) {\n    // Sometimes we might prematurely decrypt the vault and that will result in no ciphers\n    // if we cache it then we may accidentially return it when it's not right, we'd rather try decryption again.\n    // We still want to set null though, that is the indicator that the cache isn't valid and we should do decryption.\n    if (value == null || value.length !== 0) {\n      await this.stateService.setDecryptedCiphers(value);\n    }\n    if (this.searchService != null) {\n      if (value == null) {\n        this.searchService.clearIndex();\n      } else {\n        this.searchService.indexCiphers(value);\n      }\n    }\n  }\n\n  async clearCache(userId?: string): Promise<void> {\n    await this.clearDecryptedCiphersState(userId);\n  }\n\n  async encrypt(\n    model: CipherView,\n    keyForEncryption?: SymmetricCryptoKey,\n    keyForCipherKeyDecryption?: SymmetricCryptoKey,\n    originalCipher: Cipher = null,\n  ): Promise<Cipher> {\n    if (model.id != null) {\n      if (originalCipher == null) {\n        originalCipher = await this.get(model.id);\n      }\n      if (originalCipher != null) {\n        await this.updateModelfromExistingCipher(model, originalCipher);\n      }\n      this.adjustPasswordHistoryLength(model);\n    }\n\n    const cipher = new Cipher();\n    cipher.id = model.id;\n    cipher.folderId = model.folderId;\n    cipher.favorite = model.favorite;\n    cipher.organizationId = model.organizationId;\n    cipher.type = model.type;\n    cipher.collectionIds = model.collectionIds;\n    cipher.revisionDate = model.revisionDate;\n    cipher.reprompt = model.reprompt;\n    cipher.edit = model.edit;\n\n    if (await this.getCipherKeyEncryptionEnabled()) {\n      cipher.key = originalCipher?.key ?? null;\n      const userOrOrgKey = await this.getKeyForCipherKeyDecryption(cipher);\n      // The keyForEncryption is only used for encrypting the cipher key, not the cipher itself, since cipher key encryption is enabled.\n      // If the caller has provided a key for cipher key encryption, use it. Otherwise, use the user or org key.\n      keyForEncryption ||= userOrOrgKey;\n      // If the caller has provided a key for cipher key decryption, use it. Otherwise, use the user or org key.\n      keyForCipherKeyDecryption ||= userOrOrgKey;\n      return this.encryptCipherWithCipherKey(\n        model,\n        cipher,\n        keyForEncryption,\n        keyForCipherKeyDecryption,\n      );\n    } else {\n      if (keyForEncryption == null && cipher.organizationId != null) {\n        keyForEncryption = await this.cryptoService.getOrgKey(cipher.organizationId);\n        if (keyForEncryption == null) {\n          throw new Error(\"Cannot encrypt cipher for organization. No key.\");\n        }\n      }\n      // We want to ensure that the cipher key is null if cipher key encryption is disabled\n      // so that decryption uses the proper key.\n      cipher.key = null;\n      return this.encryptCipher(model, cipher, keyForEncryption);\n    }\n  }\n\n  async encryptAttachments(\n    attachmentsModel: AttachmentView[],\n    key: SymmetricCryptoKey,\n  ): Promise<Attachment[]> {\n    if (attachmentsModel == null || attachmentsModel.length === 0) {\n      return null;\n    }\n\n    const promises: Promise<any>[] = [];\n    const encAttachments: Attachment[] = [];\n    attachmentsModel.forEach(async (model) => {\n      const attachment = new Attachment();\n      attachment.id = model.id;\n      attachment.size = model.size;\n      attachment.sizeName = model.sizeName;\n      attachment.url = model.url;\n      const promise = this.encryptObjProperty(\n        model,\n        attachment,\n        {\n          fileName: null,\n        },\n        key,\n      ).then(async () => {\n        if (model.key != null) {\n          attachment.key = await this.cryptoService.encrypt(model.key.key, key);\n        }\n        encAttachments.push(attachment);\n      });\n      promises.push(promise);\n    });\n\n    await Promise.all(promises);\n    return encAttachments;\n  }\n\n  async encryptFields(fieldsModel: FieldView[], key: SymmetricCryptoKey): Promise<Field[]> {\n    if (!fieldsModel || !fieldsModel.length) {\n      return null;\n    }\n\n    const self = this;\n    const encFields: Field[] = [];\n    await fieldsModel.reduce(async (promise, field) => {\n      await promise;\n      const encField = await self.encryptField(field, key);\n      encFields.push(encField);\n    }, Promise.resolve());\n\n    return encFields;\n  }\n\n  async encryptField(fieldModel: FieldView, key: SymmetricCryptoKey): Promise<Field> {\n    const field = new Field();\n    field.type = fieldModel.type;\n    field.linkedId = fieldModel.linkedId;\n    // normalize boolean type field values\n    if (fieldModel.type === FieldType.Boolean && fieldModel.value !== \"true\") {\n      fieldModel.value = \"false\";\n    }\n\n    await this.encryptObjProperty(\n      fieldModel,\n      field,\n      {\n        name: null,\n        value: null,\n      },\n      key,\n    );\n\n    return field;\n  }\n\n  async encryptPasswordHistories(\n    phModels: PasswordHistoryView[],\n    key: SymmetricCryptoKey,\n  ): Promise<Password[]> {\n    if (!phModels || !phModels.length) {\n      return null;\n    }\n\n    const self = this;\n    const encPhs: Password[] = [];\n    await phModels.reduce(async (promise, ph) => {\n      await promise;\n      const encPh = await self.encryptPasswordHistory(ph, key);\n      encPhs.push(encPh);\n    }, Promise.resolve());\n\n    return encPhs;\n  }\n\n  async encryptPasswordHistory(\n    phModel: PasswordHistoryView,\n    key: SymmetricCryptoKey,\n  ): Promise<Password> {\n    const ph = new Password();\n    ph.lastUsedDate = phModel.lastUsedDate;\n\n    await this.encryptObjProperty(\n      phModel,\n      ph,\n      {\n        password: null,\n      },\n      key,\n    );\n\n    return ph;\n  }\n\n  async get(id: string): Promise<Cipher> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    const localData = await this.stateService.getLocalData();\n    return new Cipher(ciphers[id], localData ? localData[id] : null);\n  }\n\n  async getAll(): Promise<Cipher[]> {\n    const localData = await this.stateService.getLocalData();\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    const response: Cipher[] = [];\n    for (const id in ciphers) {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        response.push(new Cipher(ciphers[id], localData ? localData[id] : null));\n      }\n    }\n    return response;\n  }\n\n  @sequentialize(() => \"getAllDecrypted\")\n  async getAllDecrypted(): Promise<CipherView[]> {\n    if ((await this.getDecryptedCipherCache()) != null) {\n      await this.reindexCiphers();\n      return await this.getDecryptedCipherCache();\n    }\n\n    const ciphers = await this.getAll();\n    const orgKeys = await this.cryptoService.getOrgKeys();\n    const userKey = await this.cryptoService.getUserKeyWithLegacySupport();\n    if (Object.keys(orgKeys).length === 0 && userKey == null) {\n      // return early if there are no keys to decrypt with\n      return;\n    }\n\n    // Group ciphers by orgId or under 'null' for the user's ciphers\n    const grouped = ciphers.reduce(\n      (agg, c) => {\n        agg[c.organizationId] ??= [];\n        agg[c.organizationId].push(c);\n        return agg;\n      },\n      {} as Record<string, Cipher[]>,\n    );\n\n    const decCiphers = (\n      await Promise.all(\n        Object.entries(grouped).map(([orgId, groupedCiphers]) =>\n          this.encryptService.decryptItems(groupedCiphers, orgKeys[orgId] ?? userKey),\n        ),\n      )\n    )\n      .flat()\n      .sort(this.getLocaleSortingFunction());\n\n    await this.setDecryptedCipherCache(decCiphers);\n    return decCiphers;\n  }\n\n  private async reindexCiphers() {\n    const userId = await this.stateService.getUserId();\n    const reindexRequired =\n      this.searchService != null && (this.searchService.indexedEntityId ?? userId) !== userId;\n    if (reindexRequired) {\n      this.searchService.indexCiphers(await this.getDecryptedCipherCache(), userId);\n    }\n  }\n\n  async getAllDecryptedForGrouping(groupingId: string, folder = true): Promise<CipherView[]> {\n    const ciphers = await this.getAllDecrypted();\n\n    return ciphers.filter((cipher) => {\n      if (cipher.isDeleted) {\n        return false;\n      }\n      if (folder && cipher.folderId === groupingId) {\n        return true;\n      } else if (\n        !folder &&\n        cipher.collectionIds != null &&\n        cipher.collectionIds.indexOf(groupingId) > -1\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  async getAllDecryptedForUrl(\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch: UriMatchStrategySetting = null,\n  ): Promise<CipherView[]> {\n    if (url == null && includeOtherTypes == null) {\n      return Promise.resolve([]);\n    }\n\n    const equivalentDomains = await firstValueFrom(\n      this.domainSettingsService.getUrlEquivalentDomains(url),\n    );\n    const ciphers = await this.getAllDecrypted();\n    defaultMatch ??= await firstValueFrom(this.domainSettingsService.defaultUriMatchStrategy$);\n\n    return ciphers.filter((cipher) => {\n      const cipherIsLogin = cipher.type === CipherType.Login && cipher.login !== null;\n\n      if (cipher.deletedDate !== null) {\n        return false;\n      }\n\n      if (\n        Array.isArray(includeOtherTypes) &&\n        includeOtherTypes.includes(cipher.type) &&\n        !cipherIsLogin\n      ) {\n        return true;\n      }\n\n      if (cipherIsLogin) {\n        return cipher.login.matchesUri(url, equivalentDomains, defaultMatch);\n      }\n\n      return false;\n    });\n  }\n\n  async getAllFromApiForOrganization(organizationId: string): Promise<CipherView[]> {\n    const response = await this.apiService.getCiphersOrganization(organizationId);\n    return await this.decryptOrganizationCiphersResponse(response, organizationId);\n  }\n\n  async getManyFromApiForOrganization(organizationId: string): Promise<CipherView[]> {\n    const response = await this.apiService.send(\n      \"GET\",\n      \"/ciphers/organization-details/assigned?organizationId=\" + organizationId,\n      null,\n      true,\n      true,\n    );\n    return this.decryptOrganizationCiphersResponse(response, organizationId);\n  }\n\n  private async decryptOrganizationCiphersResponse(\n    response: ListResponse<CipherResponse>,\n    organizationId: string,\n  ): Promise<CipherView[]> {\n    if (response?.data == null || response.data.length < 1) {\n      return [];\n    }\n\n    const ciphers = response.data.map((cr) => new Cipher(new CipherData(cr)));\n    const key = await this.cryptoService.getOrgKey(organizationId);\n    const decCiphers = await this.encryptService.decryptItems(ciphers, key);\n\n    decCiphers.sort(this.getLocaleSortingFunction());\n    return decCiphers;\n  }\n\n  async getLastUsedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, true, false, autofillOnPageLoad);\n  }\n\n  async getLastLaunchedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, true, autofillOnPageLoad);\n  }\n\n  async getNextCipherForUrl(url: string): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, false, false);\n  }\n\n  updateLastUsedIndexForUrl(url: string) {\n    this.sortedCiphersCache.updateLastUsedIndex(url);\n  }\n\n  async updateLastUsedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastUsedDate = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async updateLastLaunchedDate(id: string): Promise<void> {\n    let ciphersLocalData = await this.stateService.getLocalData();\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    if (ciphersLocalData[id]) {\n      ciphersLocalData[id].lastLaunched = new Date().getTime();\n    } else {\n      ciphersLocalData[id] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.stateService.setLocalData(ciphersLocalData);\n\n    const decryptedCipherCache = await this.stateService.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id];\n        break;\n      }\n    }\n    await this.stateService.setDecryptedCiphers(decryptedCipherCache);\n  }\n\n  async saveNeverDomain(domain: string): Promise<void> {\n    if (domain == null) {\n      return;\n    }\n\n    let domains = await firstValueFrom(this.domainSettingsService.neverDomains$);\n    if (!domains) {\n      domains = {};\n    }\n    domains[domain] = null;\n    await this.domainSettingsService.setNeverDomains(domains);\n  }\n\n  async createWithServer(cipher: Cipher, orgAdmin?: boolean): Promise<any> {\n    let response: CipherResponse;\n    if (orgAdmin && cipher.organizationId != null) {\n      const request = new CipherCreateRequest(cipher);\n      response = await this.apiService.postCipherAdmin(request);\n    } else if (cipher.collectionIds != null) {\n      const request = new CipherCreateRequest(cipher);\n      response = await this.apiService.postCipherCreate(request);\n    } else {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.postCipher(request);\n    }\n    cipher.id = response.id;\n\n    const data = new CipherData(response, cipher.collectionIds);\n    await this.upsert(data);\n  }\n\n  async updateWithServer(cipher: Cipher, orgAdmin?: boolean, isNotClone?: boolean): Promise<any> {\n    let response: CipherResponse;\n    if (orgAdmin && isNotClone) {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipherAdmin(cipher.id, request);\n    } else if (cipher.edit) {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipher(cipher.id, request);\n    } else {\n      const request = new CipherPartialRequest(cipher);\n      response = await this.apiService.putPartialCipher(cipher.id, request);\n    }\n\n    const data = new CipherData(response, cipher.collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareWithServer(\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[],\n  ): Promise<any> {\n    const attachmentPromises: Promise<any>[] = [];\n    if (cipher.attachments != null) {\n      cipher.attachments.forEach((attachment) => {\n        if (attachment.key == null) {\n          attachmentPromises.push(\n            this.shareAttachmentWithServer(attachment, cipher.id, organizationId),\n          );\n        }\n      });\n    }\n    await Promise.all(attachmentPromises);\n\n    cipher.organizationId = organizationId;\n    cipher.collectionIds = collectionIds;\n    const encCipher = await this.encryptSharedCipher(cipher);\n    const request = new CipherShareRequest(encCipher);\n    const response = await this.apiService.putShareCipher(cipher.id, request);\n    const data = new CipherData(response, collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareManyWithServer(\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[],\n  ): Promise<any> {\n    const promises: Promise<any>[] = [];\n    const encCiphers: Cipher[] = [];\n    for (const cipher of ciphers) {\n      cipher.organizationId = organizationId;\n      cipher.collectionIds = collectionIds;\n      promises.push(\n        this.encryptSharedCipher(cipher).then((c) => {\n          encCiphers.push(c);\n        }),\n      );\n    }\n    await Promise.all(promises);\n    const request = new CipherBulkShareRequest(encCiphers, collectionIds);\n    try {\n      await this.apiService.putShareCiphers(request);\n    } catch (e) {\n      for (const cipher of ciphers) {\n        cipher.organizationId = null;\n        cipher.collectionIds = null;\n      }\n      throw e;\n    }\n    await this.upsert(encCiphers.map((c) => c.toCipherData()));\n  }\n\n  saveAttachmentWithServer(cipher: Cipher, unencryptedFile: any, admin = false): Promise<Cipher> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(unencryptedFile);\n      reader.onload = async (evt: any) => {\n        try {\n          const cData = await this.saveAttachmentRawWithServer(\n            cipher,\n            unencryptedFile.name,\n            evt.target.result,\n            admin,\n          );\n          resolve(cData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  async saveAttachmentRawWithServer(\n    cipher: Cipher,\n    filename: string,\n    data: Uint8Array,\n    admin = false,\n  ): Promise<Cipher> {\n    const encKey = await this.getKeyForCipherKeyDecryption(cipher);\n    const cipherKeyEncryptionEnabled = await this.getCipherKeyEncryptionEnabled();\n\n    const cipherEncKey =\n      cipherKeyEncryptionEnabled && cipher.key != null\n        ? (new SymmetricCryptoKey(\n            await this.encryptService.decryptToBytes(cipher.key, encKey),\n          ) as UserKey)\n        : encKey;\n\n    //if cipher key encryption is disabled but the item has an individual key,\n    //then we rollback to using the user key as the main key of encryption of the item\n    //in order to keep item and it's attachments with the same encryption level\n    if (cipher.key != null && !cipherKeyEncryptionEnabled) {\n      const model = await cipher.decrypt(await this.getKeyForCipherKeyDecryption(cipher));\n      cipher = await this.encrypt(model);\n      await this.updateWithServer(cipher);\n    }\n\n    const encFileName = await this.encryptService.encrypt(filename, cipherEncKey);\n\n    const dataEncKey = await this.cryptoService.makeDataEncKey(cipherEncKey);\n    const encData = await this.encryptService.encryptToBytes(new Uint8Array(data), dataEncKey[0]);\n\n    const response = await this.cipherFileUploadService.upload(\n      cipher,\n      encFileName,\n      encData,\n      admin,\n      dataEncKey,\n    );\n\n    const cData = new CipherData(response, cipher.collectionIds);\n    if (!admin) {\n      await this.upsert(cData);\n    }\n    return new Cipher(cData);\n  }\n\n  async saveCollectionsWithServer(cipher: Cipher): Promise<any> {\n    const request = new CipherCollectionsRequest(cipher.collectionIds);\n    await this.apiService.putCipherCollections(cipher.id, request);\n    const data = cipher.toCipherData();\n    await this.upsert(data);\n  }\n\n  /**\n   * Bulk update collections for many ciphers with the server\n   * @param orgId\n   * @param cipherIds\n   * @param collectionIds\n   * @param removeCollections - If true, the collectionIds will be removed from the ciphers, otherwise they will be added\n   */\n  async bulkUpdateCollectionsWithServer(\n    orgId: OrganizationId,\n    cipherIds: CipherId[],\n    collectionIds: CollectionId[],\n    removeCollections: boolean = false,\n  ): Promise<void> {\n    const request = new CipherBulkUpdateCollectionsRequest(\n      orgId,\n      cipherIds,\n      collectionIds,\n      removeCollections,\n    );\n\n    await this.apiService.send(\"POST\", \"/ciphers/bulk-collections\", request, true, false);\n\n    // Update the local state\n    const ciphers = await this.stateService.getEncryptedCiphers();\n\n    for (const id of cipherIds) {\n      const cipher = ciphers[id];\n      if (cipher) {\n        if (removeCollections) {\n          cipher.collectionIds = cipher.collectionIds?.filter(\n            (cid) => !collectionIds.includes(cid as CollectionId),\n          );\n        } else {\n          // Append to the collectionIds if it's not already there\n          cipher.collectionIds = [...new Set([...(cipher.collectionIds ?? []), ...collectionIds])];\n        }\n      }\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async upsert(cipher: CipherData | CipherData[]): Promise<any> {\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    if (cipher instanceof CipherData) {\n      const c = cipher as CipherData;\n      ciphers[c.id] = c;\n    } else {\n      (cipher as CipherData[]).forEach((c) => {\n        ciphers[c.id] = c;\n      });\n    }\n\n    await this.replace(ciphers);\n  }\n\n  async replace(ciphers: { [id: string]: CipherData }): Promise<any> {\n    await this.clearDecryptedCiphersState();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    await this.clearEncryptedCiphersState(userId);\n    await this.clearCache(userId);\n  }\n\n  async moveManyWithServer(ids: string[], folderId: string): Promise<any> {\n    await this.apiService.putMoveCiphers(new CipherBulkMoveRequest(ids, folderId));\n\n    let ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    ids.forEach((id) => {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        ciphers[id].folderId = folderId;\n      }\n    });\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (ciphers[id] == null) {\n        return;\n      }\n      delete ciphers[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete ciphers[i];\n      });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteWithServer(id: string, asAdmin = false): Promise<any> {\n    if (asAdmin) {\n      await this.apiService.deleteCipherAdmin(id);\n    } else {\n      await this.apiService.deleteCipher(id);\n    }\n\n    await this.delete(id);\n  }\n\n  async deleteManyWithServer(ids: string[], asAdmin = false): Promise<any> {\n    const request = new CipherBulkDeleteRequest(ids);\n    if (asAdmin) {\n      await this.apiService.deleteManyCiphersAdmin(request);\n    } else {\n      await this.apiService.deleteManyCiphers(request);\n    }\n    await this.delete(ids);\n  }\n\n  async deleteAttachment(id: string, attachmentId: string): Promise<void> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id) || ciphers[id].attachments == null) {\n      return;\n    }\n\n    for (let i = 0; i < ciphers[id].attachments.length; i++) {\n      if (ciphers[id].attachments[i].id === attachmentId) {\n        ciphers[id].attachments.splice(i, 1);\n      }\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async deleteAttachmentWithServer(id: string, attachmentId: string): Promise<void> {\n    try {\n      await this.apiService.deleteCipherAttachment(id, attachmentId);\n    } catch (e) {\n      return Promise.reject((e as ErrorResponse).getSingleMessage());\n    }\n    await this.deleteAttachment(id, attachmentId);\n  }\n\n  sortCiphersByLastUsed(a: CipherView, b: CipherView): number {\n    const aLastUsed =\n      a.localData && a.localData.lastUsedDate ? (a.localData.lastUsedDate as number) : null;\n    const bLastUsed =\n      b.localData && b.localData.lastUsedDate ? (b.localData.lastUsedDate as number) : null;\n\n    const bothNotNull = aLastUsed != null && bLastUsed != null;\n    if (bothNotNull && aLastUsed < bLastUsed) {\n      return 1;\n    }\n    if (aLastUsed != null && bLastUsed == null) {\n      return -1;\n    }\n\n    if (bothNotNull && aLastUsed > bLastUsed) {\n      return -1;\n    }\n    if (bLastUsed != null && aLastUsed == null) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  sortCiphersByLastUsedThenName(a: CipherView, b: CipherView): number {\n    const result = this.sortCiphersByLastUsed(a, b);\n    if (result !== 0) {\n      return result;\n    }\n\n    return this.getLocaleSortingFunction()(a, b);\n  }\n\n  getLocaleSortingFunction(): (a: CipherView, b: CipherView) => number {\n    return (a, b) => {\n      let aName = a.name;\n      let bName = b.name;\n\n      if (aName == null && bName != null) {\n        return -1;\n      }\n      if (aName != null && bName == null) {\n        return 1;\n      }\n      if (aName == null && bName == null) {\n        return 0;\n      }\n\n      const result = this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n\n      if (result !== 0 || a.type !== CipherType.Login || b.type !== CipherType.Login) {\n        return result;\n      }\n\n      if (a.login.username != null) {\n        aName += a.login.username;\n      }\n\n      if (b.login.username != null) {\n        bName += b.login.username;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n    };\n  }\n\n  async softDelete(id: string | string[]): Promise<any> {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const setDeletedDate = (cipherId: string) => {\n      if (ciphers[cipherId] == null) {\n        return;\n      }\n      ciphers[cipherId].deletedDate = new Date().toISOString();\n    };\n\n    if (typeof id === \"string\") {\n      setDeletedDate(id);\n    } else {\n      (id as string[]).forEach(setDeletedDate);\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async softDeleteWithServer(id: string, asAdmin = false): Promise<any> {\n    if (asAdmin) {\n      await this.apiService.putDeleteCipherAdmin(id);\n    } else {\n      await this.apiService.putDeleteCipher(id);\n    }\n\n    await this.softDelete(id);\n  }\n\n  async softDeleteManyWithServer(ids: string[], asAdmin = false): Promise<any> {\n    const request = new CipherBulkDeleteRequest(ids);\n    if (asAdmin) {\n      await this.apiService.putDeleteManyCiphersAdmin(request);\n    } else {\n      await this.apiService.putDeleteManyCiphers(request);\n    }\n\n    await this.softDelete(ids);\n  }\n\n  async restore(\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[],\n  ) {\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers == null) {\n      return;\n    }\n\n    const clearDeletedDate = (c: { id: string; revisionDate: string }) => {\n      if (ciphers[c.id] == null) {\n        return;\n      }\n      ciphers[c.id].deletedDate = null;\n      ciphers[c.id].revisionDate = c.revisionDate;\n    };\n\n    if (cipher.constructor.name === Array.name) {\n      (cipher as { id: string; revisionDate: string }[]).forEach(clearDeletedDate);\n    } else {\n      clearDeletedDate(cipher as { id: string; revisionDate: string });\n    }\n\n    await this.clearCache();\n    await this.stateService.setEncryptedCiphers(ciphers);\n  }\n\n  async restoreWithServer(id: string, asAdmin = false): Promise<any> {\n    let response;\n    if (asAdmin) {\n      response = await this.apiService.putRestoreCipherAdmin(id);\n    } else {\n      response = await this.apiService.putRestoreCipher(id);\n    }\n\n    await this.restore({ id: id, revisionDate: response.revisionDate });\n  }\n\n  async restoreManyWithServer(\n    ids: string[],\n    organizationId: string = null,\n    asAdmin = false,\n  ): Promise<void> {\n    let response;\n    if (asAdmin) {\n      const request = new CipherBulkRestoreRequest(ids, organizationId);\n      response = await this.apiService.putRestoreManyCiphersAdmin(request);\n    } else {\n      const request = new CipherBulkRestoreRequest(ids);\n      response = await this.apiService.putRestoreManyCiphers(request);\n    }\n\n    const restores: { id: string; revisionDate: string }[] = [];\n    for (const cipher of response.data) {\n      restores.push({ id: cipher.id, revisionDate: cipher.revisionDate });\n    }\n    await this.restore(restores);\n  }\n\n  async getKeyForCipherKeyDecryption(cipher: Cipher): Promise<UserKey | OrgKey> {\n    return (\n      (await this.cryptoService.getOrgKey(cipher.organizationId)) ||\n      ((await this.cryptoService.getUserKeyWithLegacySupport()) as UserKey)\n    );\n  }\n\n  // Helpers\n\n  // In the case of a cipher that is being shared with an organization, we want to decrypt the\n  // cipher key with the user's key and then re-encrypt it with the organization's key.\n  private async encryptSharedCipher(model: CipherView): Promise<Cipher> {\n    const keyForCipherKeyDecryption = await this.cryptoService.getUserKeyWithLegacySupport();\n    return await this.encrypt(model, null, keyForCipherKeyDecryption);\n  }\n\n  private async updateModelfromExistingCipher(\n    model: CipherView,\n    originalCipher: Cipher,\n  ): Promise<void> {\n    const existingCipher = await originalCipher.decrypt(\n      await this.getKeyForCipherKeyDecryption(originalCipher),\n    );\n    model.passwordHistory = existingCipher.passwordHistory || [];\n    if (model.type === CipherType.Login && existingCipher.type === CipherType.Login) {\n      if (\n        existingCipher.login.password != null &&\n        existingCipher.login.password !== \"\" &&\n        existingCipher.login.password !== model.login.password\n      ) {\n        const ph = new PasswordHistoryView();\n        ph.password = existingCipher.login.password;\n        ph.lastUsedDate = model.login.passwordRevisionDate = new Date();\n        model.passwordHistory.splice(0, 0, ph);\n      } else {\n        model.login.passwordRevisionDate = existingCipher.login.passwordRevisionDate;\n      }\n    }\n    if (existingCipher.hasFields) {\n      const existingHiddenFields = existingCipher.fields.filter(\n        (f) =>\n          f.type === FieldType.Hidden &&\n          f.name != null &&\n          f.name !== \"\" &&\n          f.value != null &&\n          f.value !== \"\",\n      );\n      const hiddenFields =\n        model.fields == null\n          ? []\n          : model.fields.filter(\n              (f) => f.type === FieldType.Hidden && f.name != null && f.name !== \"\",\n            );\n      existingHiddenFields.forEach((ef) => {\n        const matchedField = hiddenFields.find((f) => f.name === ef.name);\n        if (matchedField == null || matchedField.value !== ef.value) {\n          const ph = new PasswordHistoryView();\n          ph.password = ef.name + \": \" + ef.value;\n          ph.lastUsedDate = new Date();\n          model.passwordHistory.splice(0, 0, ph);\n        }\n      });\n    }\n  }\n\n  private adjustPasswordHistoryLength(model: CipherView) {\n    if (model.passwordHistory != null && model.passwordHistory.length === 0) {\n      model.passwordHistory = null;\n    } else if (model.passwordHistory != null && model.passwordHistory.length > 5) {\n      // only save last 5 history\n      model.passwordHistory = model.passwordHistory.slice(0, 5);\n    }\n  }\n\n  private async shareAttachmentWithServer(\n    attachmentView: AttachmentView,\n    cipherId: string,\n    organizationId: string,\n  ): Promise<any> {\n    const attachmentResponse = await this.apiService.nativeFetch(\n      new Request(attachmentView.url, { cache: \"no-store\" }),\n    );\n    if (attachmentResponse.status !== 200) {\n      throw Error(\"Failed to download attachment: \" + attachmentResponse.status.toString());\n    }\n\n    const encBuf = await EncArrayBuffer.fromResponse(attachmentResponse);\n    const decBuf = await this.cryptoService.decryptFromBytes(encBuf, null);\n\n    let encKey: UserKey | OrgKey;\n    encKey = await this.cryptoService.getOrgKey(organizationId);\n    encKey ||= (await this.cryptoService.getUserKeyWithLegacySupport()) as UserKey;\n\n    const dataEncKey = await this.cryptoService.makeDataEncKey(encKey);\n\n    const encFileName = await this.encryptService.encrypt(attachmentView.fileName, encKey);\n    const encData = await this.encryptService.encryptToBytes(new Uint8Array(decBuf), dataEncKey[0]);\n\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", dataEncKey[1].encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", dataEncKey[1].encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any,\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    try {\n      await this.apiService.postShareCipherAttachment(\n        cipherId,\n        attachmentView.id,\n        fd,\n        organizationId,\n      );\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n  }\n\n  private async encryptObjProperty<V extends View, D extends Domain>(\n    model: V,\n    obj: D,\n    map: any,\n    key: SymmetricCryptoKey,\n  ): Promise<void> {\n    const promises = [];\n    const self = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp, theObj) {\n        const p = Promise.resolve()\n          .then(() => {\n            const modelProp = (model as any)[map[theProp] || theProp];\n            if (modelProp && modelProp !== \"\") {\n              return self.cryptoService.encrypt(modelProp, key);\n            }\n            return null;\n          })\n          .then((val: EncString) => {\n            (theObj as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop, obj);\n    }\n\n    await Promise.all(promises);\n  }\n\n  private async encryptCipherData(cipher: Cipher, model: CipherView, key: SymmetricCryptoKey) {\n    switch (cipher.type) {\n      case CipherType.Login:\n        cipher.login = new Login();\n        cipher.login.passwordRevisionDate = model.login.passwordRevisionDate;\n        cipher.login.autofillOnPageLoad = model.login.autofillOnPageLoad;\n        await this.encryptObjProperty(\n          model.login,\n          cipher.login,\n          {\n            username: null,\n            password: null,\n            totp: null,\n          },\n          key,\n        );\n\n        if (model.login.uris != null) {\n          cipher.login.uris = [];\n          model.login.uris = model.login.uris.filter((u) => u.uri != null);\n          for (let i = 0; i < model.login.uris.length; i++) {\n            const loginUri = new LoginUri();\n            loginUri.match = model.login.uris[i].match;\n            await this.encryptObjProperty(\n              model.login.uris[i],\n              loginUri,\n              {\n                uri: null,\n              },\n              key,\n            );\n            const uriHash = await this.encryptService.hash(model.login.uris[i].uri, \"sha256\");\n            loginUri.uriChecksum = await this.cryptoService.encrypt(uriHash, key);\n            cipher.login.uris.push(loginUri);\n          }\n        }\n\n        if (model.login.fido2Credentials != null) {\n          cipher.login.fido2Credentials = await Promise.all(\n            model.login.fido2Credentials.map(async (viewKey) => {\n              const domainKey = new Fido2Credential();\n              await this.encryptObjProperty(\n                viewKey,\n                domainKey,\n                {\n                  credentialId: null,\n                  keyType: null,\n                  keyAlgorithm: null,\n                  keyCurve: null,\n                  keyValue: null,\n                  rpId: null,\n                  rpName: null,\n                  userHandle: null,\n                  userName: null,\n                  userDisplayName: null,\n                  origin: null,\n                },\n                key,\n              );\n              domainKey.counter = await this.cryptoService.encrypt(String(viewKey.counter), key);\n              domainKey.discoverable = await this.cryptoService.encrypt(\n                String(viewKey.discoverable),\n                key,\n              );\n              domainKey.creationDate = viewKey.creationDate;\n              return domainKey;\n            }),\n          );\n        }\n        return;\n      case CipherType.SecureNote:\n        cipher.secureNote = new SecureNote();\n        cipher.secureNote.type = model.secureNote.type;\n        return;\n      case CipherType.Card:\n        cipher.card = new Card();\n        await this.encryptObjProperty(\n          model.card,\n          cipher.card,\n          {\n            cardholderName: null,\n            brand: null,\n            number: null,\n            expMonth: null,\n            expYear: null,\n            code: null,\n          },\n          key,\n        );\n        return;\n      case CipherType.Identity:\n        cipher.identity = new Identity();\n        await this.encryptObjProperty(\n          model.identity,\n          cipher.identity,\n          {\n            title: null,\n            firstName: null,\n            middleName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            address3: null,\n            city: null,\n            state: null,\n            postalCode: null,\n            country: null,\n            company: null,\n            email: null,\n            phone: null,\n            ssn: null,\n            username: null,\n            passportNumber: null,\n            licenseNumber: null,\n          },\n          key,\n        );\n        return;\n      default:\n        throw new Error(\"Unknown cipher type.\");\n    }\n  }\n\n  private async getAutofillOnPageLoadDefault() {\n    return await firstValueFrom(this.autofillSettingsService.autofillOnPageLoadDefault$);\n  }\n\n  private async getCipherForUrl(\n    url: string,\n    lastUsed: boolean,\n    lastLaunched: boolean,\n    autofillOnPageLoad: boolean,\n  ): Promise<CipherView> {\n    const cacheKey = autofillOnPageLoad ? \"autofillOnPageLoad-\" + url : url;\n\n    if (!this.sortedCiphersCache.isCached(cacheKey)) {\n      let ciphers = await this.getAllDecryptedForUrl(url);\n      if (!ciphers) {\n        return null;\n      }\n\n      if (autofillOnPageLoad) {\n        const autofillOnPageLoadDefault = await this.getAutofillOnPageLoadDefault();\n\n        ciphers = ciphers.filter(\n          (cipher) =>\n            cipher.login.autofillOnPageLoad ||\n            (cipher.login.autofillOnPageLoad == null && autofillOnPageLoadDefault !== false),\n        );\n        if (ciphers.length === 0) {\n          return null;\n        }\n      }\n\n      this.sortedCiphersCache.addCiphers(cacheKey, ciphers);\n    }\n\n    if (lastLaunched) {\n      return this.sortedCiphersCache.getLastLaunched(cacheKey);\n    } else if (lastUsed) {\n      return this.sortedCiphersCache.getLastUsed(cacheKey);\n    } else {\n      return this.sortedCiphersCache.getNext(cacheKey);\n    }\n  }\n\n  private async clearEncryptedCiphersState(userId?: string) {\n    await this.stateService.setEncryptedCiphers(null, { userId: userId });\n  }\n\n  private async clearDecryptedCiphersState(userId?: string) {\n    await this.stateService.setDecryptedCiphers(null, { userId: userId });\n    this.clearSortedCiphers();\n  }\n\n  private clearSortedCiphers() {\n    this.sortedCiphersCache.clear();\n  }\n\n  private async encryptCipher(\n    model: CipherView,\n    cipher: Cipher,\n    key: SymmetricCryptoKey,\n  ): Promise<Cipher> {\n    await Promise.all([\n      this.encryptObjProperty(\n        model,\n        cipher,\n        {\n          name: null,\n          notes: null,\n        },\n        key,\n      ),\n      this.encryptCipherData(cipher, model, key),\n      this.encryptFields(model.fields, key).then((fields) => {\n        cipher.fields = fields;\n      }),\n      this.encryptPasswordHistories(model.passwordHistory, key).then((ph) => {\n        cipher.passwordHistory = ph;\n      }),\n      this.encryptAttachments(model.attachments, key).then((attachments) => {\n        cipher.attachments = attachments;\n      }),\n    ]);\n\n    return cipher;\n  }\n\n  private async encryptCipherWithCipherKey(\n    model: CipherView,\n    cipher: Cipher,\n    keyForCipherKeyEncryption: SymmetricCryptoKey,\n    keyForCipherKeyDecryption: SymmetricCryptoKey,\n  ): Promise<Cipher> {\n    // First, we get the key for cipher key encryption, in its decrypted form\n    let decryptedCipherKey: SymmetricCryptoKey;\n    if (cipher.key == null) {\n      decryptedCipherKey = await this.cryptoService.makeCipherKey();\n    } else {\n      decryptedCipherKey = new SymmetricCryptoKey(\n        await this.encryptService.decryptToBytes(cipher.key, keyForCipherKeyDecryption),\n      );\n    }\n\n    // Then, we have to encrypt the cipher key with the proper key.\n    cipher.key = await this.encryptService.encrypt(\n      decryptedCipherKey.key,\n      keyForCipherKeyEncryption,\n    );\n\n    // Finally, we can encrypt the cipher with the decrypted cipher key.\n    return this.encryptCipher(model, cipher, decryptedCipherKey);\n  }\n\n  private async getCipherKeyEncryptionEnabled(): Promise<boolean> {\n    return (\n      flagEnabled(\"enableCipherKeyEncryption\") &&\n      (await firstValueFrom(\n        this.configService.checkServerMeetsVersionRequirement$(CIPHER_KEY_ENC_MIN_SERVER_VER),\n      ))\n    );\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CollectionId, OrganizationId } from \"../../../types/guid\";\nimport { CollectionDetailsResponse } from \"../response/collection.response\";\n\nexport class CollectionData {\n  id: CollectionId;\n  organizationId: OrganizationId;\n  name: string;\n  externalId: string;\n  readOnly: boolean;\n  manage: boolean;\n  hidePasswords: boolean;\n\n  constructor(response: CollectionDetailsResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.name = response.name;\n    this.externalId = response.externalId;\n    this.readOnly = response.readOnly;\n    this.manage = response.manage;\n    this.hidePasswords = response.hidePasswords;\n  }\n\n  static fromJSON(obj: Jsonify<CollectionData>) {\n    return Object.assign(new CollectionData(new CollectionDetailsResponse({})), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Organization } from \"../../../admin-console/models/domain/organization\";\nimport { View } from \"../../../models/view/view\";\nimport { Collection } from \"../domain/collection\";\nimport { ITreeNodeObject } from \"../domain/tree-node\";\nimport { CollectionAccessDetailsResponse } from \"../response/collection.response\";\n\nexport const NestingDelimiter = \"/\";\n\nexport class CollectionView implements View, ITreeNodeObject {\n  id: string = null;\n  organizationId: string = null;\n  name: string = null;\n  externalId: string = null;\n  // readOnly applies to the items within a collection\n  readOnly: boolean = null;\n  hidePasswords: boolean = null;\n  manage: boolean = null;\n  assigned: boolean = null;\n\n  constructor(c?: Collection | CollectionAccessDetailsResponse) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.externalId = c.externalId;\n    if (c instanceof Collection) {\n      this.readOnly = c.readOnly;\n      this.hidePasswords = c.hidePasswords;\n      this.manage = c.manage;\n      this.assigned = true;\n    }\n    if (c instanceof CollectionAccessDetailsResponse) {\n      this.assigned = c.assigned;\n    }\n  }\n\n  canEditItems(org: Organization, v1FlexibleCollections: boolean): boolean {\n    if (org != null && org.id !== this.organizationId) {\n      throw new Error(\n        \"Id of the organization provided does not match the org id of the collection.\",\n      );\n    }\n\n    if (org?.flexibleCollections) {\n      return (\n        org?.canEditAllCiphers(v1FlexibleCollections) ||\n        this.manage ||\n        (this.assigned && !this.readOnly)\n      );\n    }\n\n    return org?.canEditAnyCollection || (org?.canEditAssignedCollections && this.assigned);\n  }\n\n  // For editing collection details, not the items within it.\n  canEdit(org: Organization): boolean {\n    if (org != null && org.id !== this.organizationId) {\n      throw new Error(\n        \"Id of the organization provided does not match the org id of the collection.\",\n      );\n    }\n\n    return org?.flexibleCollections\n      ? org?.canEditAnyCollection || this.manage\n      : org?.canEditAnyCollection || org?.canEditAssignedCollections;\n  }\n\n  // For deleting a collection, not the items within it.\n  canDelete(org: Organization): boolean {\n    if (org != null && org.id !== this.organizationId) {\n      throw new Error(\n        \"Id of the organization provided does not match the org id of the collection.\",\n      );\n    }\n\n    return org?.flexibleCollections\n      ? org?.canDeleteAnyCollection || (!org?.limitCollectionCreationDeletion && this.manage)\n      : org?.canDeleteAnyCollection || org?.canDeleteAssignedCollections;\n  }\n\n  static fromJSON(obj: Jsonify<CollectionView>) {\n    return Object.assign(new CollectionView(new Collection()), obj);\n  }\n}\n","import Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { CollectionData } from \"../data/collection.data\";\nimport { CollectionView } from \"../view/collection.view\";\n\nexport class Collection extends Domain {\n  id: string;\n  organizationId: string;\n  name: EncString;\n  externalId: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n  manage: boolean;\n\n  constructor(obj?: CollectionData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        name: null,\n        externalId: null,\n        readOnly: null,\n        hidePasswords: null,\n        manage: null,\n      },\n      [\"id\", \"organizationId\", \"externalId\", \"readOnly\", \"hidePasswords\", \"manage\"],\n    );\n  }\n\n  decrypt(): Promise<CollectionView> {\n    return this.decryptObj(\n      new CollectionView(this),\n      {\n        name: null,\n      },\n      this.organizationId,\n    );\n  }\n}\n","export class TreeNode<T extends ITreeNodeObject> {\n  node: T;\n  parent: TreeNode<T>;\n  children: TreeNode<T>[] = [];\n\n  constructor(node: T, parent: TreeNode<T>, name?: string, id?: string) {\n    this.parent = parent;\n    this.node = node;\n    if (name) {\n      this.node.name = name;\n    }\n    if (id) {\n      this.node.id = id;\n    }\n  }\n}\n\nexport interface ITreeNodeObject {\n  id: string;\n  name: string;\n}\n","import { ITreeNodeObject, TreeNode } from \"./models/domain/tree-node\";\n\nexport class ServiceUtils {\n  /**\n   * Recursively adds a node to nodeTree\n   * @param {TreeNode<ITreeNodeObject>[]} nodeTree - An array of TreeNodes that the node will be added to\n   * @param {number} partIndex - Index of the `parts` array that is being processed\n   * @param {string[]} parts - Array of strings that represent the path to the `obj` node\n   * @param {ITreeNodeObject} obj - The node to be added to the tree\n   * @param {ITreeNodeObject} parent - The parent node of the `obj` node\n   * @param {string} delimiter - The delimiter used to split the path string, will be used to combine the path for missing nodes\n   */\n  static nestedTraverse(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    partIndex: number,\n    parts: string[],\n    obj: ITreeNodeObject,\n    parent: TreeNode<ITreeNodeObject> | undefined,\n    delimiter: string,\n  ) {\n    if (parts.length <= partIndex) {\n      return;\n    }\n\n    const end: boolean = partIndex === parts.length - 1;\n    const partName: string = parts[partIndex];\n\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.name !== partName) {\n        continue;\n      }\n      if (end && nodeTree[i].node.id !== obj.id) {\n        // Another node exists with the same name as the node being added\n        nodeTree.push(new TreeNode(obj, parent, partName));\n        return;\n      }\n      // Move down the tree to the next level\n      ServiceUtils.nestedTraverse(\n        nodeTree[i].children,\n        partIndex + 1,\n        parts,\n        obj,\n        nodeTree[i],\n        delimiter,\n      );\n      return;\n    }\n\n    // If there's no node here with the same name...\n    if (nodeTree.filter((n) => n.node.name === partName).length === 0) {\n      // And we're at the end of the path given, add the node\n      if (end) {\n        nodeTree.push(new TreeNode(obj, parent, partName));\n        return;\n      }\n      // And we're not at the end of the path, combine the current name with the next name\n      // 1, *1.2, 1.2.1 becomes\n      // 1, *1.2/1.2.1\n      const newPartName = partName + delimiter + parts[partIndex + 1];\n      ServiceUtils.nestedTraverse(\n        nodeTree,\n        0,\n        [newPartName, ...parts.slice(partIndex + 2)],\n        obj,\n        parent,\n        delimiter,\n      );\n    }\n  }\n\n  /**\n   * Searches a tree for a node with a matching `id`\n   * @param {TreeNode<T>} nodeTree - A single TreeNode branch that will be searched\n   * @param {string} id - The id of the node to be found\n   * @returns {TreeNode<T>} The node with a matching `id`\n   */\n  static getTreeNodeObject<T extends ITreeNodeObject>(\n    nodeTree: TreeNode<T>,\n    id: string,\n  ): TreeNode<T> {\n    if (nodeTree.node.id === id) {\n      return nodeTree;\n    }\n    for (let i = 0; i < nodeTree.children.length; i++) {\n      if (nodeTree.children[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObject(nodeTree.children[i], id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Searches an array of tree nodes for a node with a matching `id`\n   * @param {TreeNode<T>} nodeTree - An array of TreeNode branches that will be searched\n   * @param {string} id - The id of the node to be found\n   * @returns {TreeNode<T>} The node with a matching `id`\n   */\n  static getTreeNodeObjectFromList<T extends ITreeNodeObject>(\n    nodeTree: TreeNode<T>[],\n    id: string,\n  ): TreeNode<T> {\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.id === id) {\n        return nodeTree[i];\n      } else if (nodeTree[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObjectFromList(nodeTree[i].children, id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n}\n","import { firstValueFrom, map, Observable } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport {\n  ActiveUserState,\n  KeyDefinition,\n  StateProvider,\n  COLLECTION_DATA,\n  DeriveDefinition,\n  DerivedState,\n} from \"../../platform/state\";\nimport { CollectionId, UserId } from \"../../types/guid\";\nimport { CollectionService as CollectionServiceAbstraction } from \"../../vault/abstractions/collection.service\";\nimport { CollectionData } from \"../models/data/collection.data\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/tree-node\";\nimport { CollectionView } from \"../models/view/collection.view\";\nimport { ServiceUtils } from \"../service-utils\";\n\nconst ENCRYPTED_COLLECTION_DATA_KEY = KeyDefinition.record<CollectionData, CollectionId>(\n  COLLECTION_DATA,\n  \"collections\",\n  {\n    deserializer: (jsonData: Jsonify<CollectionData>) => CollectionData.fromJSON(jsonData),\n  },\n);\n\nconst DECRYPTED_COLLECTION_DATA_KEY = DeriveDefinition.from<\n  Record<CollectionId, CollectionData>,\n  CollectionView[],\n  { collectionService: CollectionService }\n>(ENCRYPTED_COLLECTION_DATA_KEY, {\n  deserializer: (obj) => obj.map((collection) => CollectionView.fromJSON(collection)),\n  derive: async (collections: Record<CollectionId, CollectionData>, { collectionService }) => {\n    const data: Collection[] = [];\n    for (const id in collections ?? {}) {\n      const collectionId = id as CollectionId;\n      data.push(new Collection(collections[collectionId]));\n    }\n    return await collectionService.decryptMany(data);\n  },\n});\n\nconst NestingDelimiter = \"/\";\n\nexport class CollectionService implements CollectionServiceAbstraction {\n  private encryptedCollectionDataState: ActiveUserState<Record<CollectionId, CollectionData>>;\n  encryptedCollections$: Observable<Collection[]>;\n  private decryptedCollectionDataState: DerivedState<CollectionView[]>;\n  decryptedCollections$: Observable<CollectionView[]>;\n\n  decryptedCollectionViews$(ids: CollectionId[]): Observable<CollectionView[]> {\n    return this.decryptedCollections$.pipe(\n      map((collections) => collections.filter((c) => ids.includes(c.id as CollectionId))),\n    );\n  }\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    protected stateProvider: StateProvider,\n  ) {\n    this.encryptedCollectionDataState = this.stateProvider.getActive(ENCRYPTED_COLLECTION_DATA_KEY);\n    this.encryptedCollections$ = this.encryptedCollectionDataState.state$.pipe(\n      map((collections) => {\n        const response: Collection[] = [];\n        for (const id in collections ?? {}) {\n          response.push(new Collection(collections[id as CollectionId]));\n        }\n        return response;\n      }),\n    );\n\n    this.decryptedCollectionDataState = this.stateProvider.getDerived(\n      this.encryptedCollectionDataState.state$,\n      DECRYPTED_COLLECTION_DATA_KEY,\n      { collectionService: this },\n    );\n\n    this.decryptedCollections$ = this.decryptedCollectionDataState.state$;\n  }\n\n  async clearActiveUserCache(): Promise<void> {\n    await this.decryptedCollectionDataState.forceValue(null);\n  }\n\n  async encrypt(model: CollectionView): Promise<Collection> {\n    if (model.organizationId == null) {\n      throw new Error(\"Collection has no organization id.\");\n    }\n    const key = await this.cryptoService.getOrgKey(model.organizationId);\n    if (key == null) {\n      throw new Error(\"No key for this collection's organization.\");\n    }\n    const collection = new Collection();\n    collection.id = model.id;\n    collection.organizationId = model.organizationId;\n    collection.readOnly = model.readOnly;\n    collection.name = await this.cryptoService.encrypt(model.name, key);\n    return collection;\n  }\n\n  async decryptMany(collections: Collection[]): Promise<CollectionView[]> {\n    if (collections == null) {\n      return [];\n    }\n    const decCollections: CollectionView[] = [];\n    const promises: Promise<any>[] = [];\n    collections.forEach((collection) => {\n      promises.push(collection.decrypt().then((c) => decCollections.push(c)));\n    });\n    await Promise.all(promises);\n    return decCollections.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n  }\n\n  async get(id: string): Promise<Collection> {\n    return (\n      (await firstValueFrom(\n        this.encryptedCollections$.pipe(map((cs) => cs.find((c) => c.id === id))),\n      )) ?? null\n    );\n  }\n\n  async getAll(): Promise<Collection[]> {\n    return await firstValueFrom(this.encryptedCollections$);\n  }\n\n  async getAllDecrypted(): Promise<CollectionView[]> {\n    return await firstValueFrom(this.decryptedCollections$);\n  }\n\n  async getAllNested(collections: CollectionView[] = null): Promise<TreeNode<CollectionView>[]> {\n    if (collections == null) {\n      collections = await this.getAllDecrypted();\n    }\n    const nodes: TreeNode<CollectionView>[] = [];\n    collections.forEach((c) => {\n      const collectionCopy = new CollectionView();\n      collectionCopy.id = c.id;\n      collectionCopy.organizationId = c.organizationId;\n      const parts = c.name != null ? c.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, collectionCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  /**\n   * @deprecated August 30 2022: Moved to new Vault Filter Service\n   * Remove when Desktop and Browser are updated\n   */\n  async getNested(id: string): Promise<TreeNode<CollectionView>> {\n    const collections = await this.getAllNested();\n    return ServiceUtils.getTreeNodeObjectFromList(collections, id) as TreeNode<CollectionView>;\n  }\n\n  async upsert(toUpdate: CollectionData | CollectionData[]): Promise<void> {\n    if (toUpdate == null) {\n      return;\n    }\n    await this.encryptedCollectionDataState.update((collections) => {\n      if (collections == null) {\n        collections = {};\n      }\n      if (Array.isArray(toUpdate)) {\n        toUpdate.forEach((c) => {\n          collections[c.id] = c;\n        });\n      } else {\n        collections[toUpdate.id] = toUpdate;\n      }\n      return collections;\n    });\n  }\n\n  async replace(collections: Record<CollectionId, CollectionData>): Promise<void> {\n    await this.encryptedCollectionDataState.update(() => collections);\n  }\n\n  async clear(userId?: UserId): Promise<any> {\n    if (userId == null) {\n      await this.encryptedCollectionDataState.update(() => null);\n      await this.decryptedCollectionDataState.forceValue(null);\n    } else {\n      await this.stateProvider.getUser(userId, ENCRYPTED_COLLECTION_DATA_KEY).update(() => null);\n    }\n  }\n\n  async delete(id: CollectionId | CollectionId[]): Promise<any> {\n    await this.encryptedCollectionDataState.update((collections) => {\n      if (collections == null) {\n        collections = {};\n      }\n      if (typeof id === \"string\") {\n        delete collections[id];\n      } else {\n        (id as CollectionId[]).forEach((i) => {\n          delete collections[i];\n        });\n      }\n      return collections;\n    });\n  }\n}\n","/**\n * This class represents an abstraction of the WebAuthn Authenticator model as described by W3C:\n * https://www.w3.org/TR/webauthn-3/#sctn-authenticator-model\n *\n * The authenticator provides key management and cryptographic signatures.\n */\nexport abstract class Fido2AuthenticatorService {\n  /**\n   * Create and save a new credential as described in:\n   * https://www.w3.org/TR/webauthn-3/#sctn-op-make-cred\n   *\n   * @param params Parameters for creating a new credential\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the new credential and an attestation signature.\n   **/\n  makeCredential: (\n    params: Fido2AuthenticatorMakeCredentialsParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ) => Promise<Fido2AuthenticatorMakeCredentialResult>;\n\n  /**\n   * Generate an assertion using an existing credential as describe in:\n   * https://www.w3.org/TR/webauthn-3/#sctn-op-get-assertion\n   *\n   * @param params Parameters for generating an assertion\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the asserted credential and an assertion signature.\n   */\n  getAssertion: (\n    params: Fido2AuthenticatorGetAssertionParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ) => Promise<Fido2AuthenticatorGetAssertionResult>;\n}\n\nexport enum Fido2AlgorithmIdentifier {\n  ES256 = -7,\n  RS256 = -257,\n}\n\nexport enum Fido2AuthenticatorErrorCode {\n  Unknown = \"UnknownError\",\n  NotSupported = \"NotSupportedError\",\n  InvalidState = \"InvalidStateError\",\n  NotAllowed = \"NotAllowedError\",\n  Constraint = \"ConstraintError\",\n}\n\nexport class Fido2AuthenticatorError extends Error {\n  constructor(readonly errorCode: Fido2AuthenticatorErrorCode) {\n    super(errorCode);\n  }\n}\n\nexport interface PublicKeyCredentialDescriptor {\n  id: BufferSource;\n  transports?: (\"ble\" | \"hybrid\" | \"internal\" | \"nfc\" | \"usb\")[];\n  type: \"public-key\";\n}\n\n/**\n * Parameters for {@link Fido2AuthenticatorService.makeCredential}\n *\n * This interface represents the input parameters described in\n * https://www.w3.org/TR/webauthn-3/#sctn-op-make-cred\n */\nexport interface Fido2AuthenticatorMakeCredentialsParams {\n  /** The hash of the serialized client data, provided by the client. */\n  hash: BufferSource;\n  /** The Relying Party's PublicKeyCredentialRpEntity. */\n  rpEntity: {\n    name: string;\n    id?: string;\n  };\n  /** The user account’s PublicKeyCredentialUserEntity, containing the user handle given by the Relying Party. */\n  userEntity: {\n    id: BufferSource;\n    name?: string;\n    displayName?: string;\n    icon?: string;\n  };\n  /** A sequence of pairs of PublicKeyCredentialType and public key algorithms (COSEAlgorithmIdentifier) requested by the Relying Party. This sequence is ordered from most preferred to least preferred. The authenticator makes a best-effort to create the most preferred credential that it can. */\n  credTypesAndPubKeyAlgs: {\n    alg: number;\n    type: \"public-key\"; // not used\n  }[];\n  /** An OPTIONAL list of PublicKeyCredentialDescriptor objects provided by the Relying Party with the intention that, if any of these are known to the authenticator, it SHOULD NOT create a new credential. excludeCredentialDescriptorList contains a list of known credentials. */\n  excludeCredentialDescriptorList?: PublicKeyCredentialDescriptor[];\n  /** A map from extension identifiers to their authenticator extension inputs, created by the client based on the extensions requested by the Relying Party, if any. */\n  extensions?: {\n    appid?: string;\n    appidExclude?: string;\n    credProps?: boolean;\n    uvm?: boolean;\n  };\n  /** A Boolean value that indicates that individually-identifying attestation MAY be returned by the authenticator. */\n  enterpriseAttestationPossible?: boolean; // Ignored by bitwarden at the moment\n  /** The effective resident key requirement for credential creation, a Boolean value determined by the client. Resident is synonymous with discoverable. */\n  requireResidentKey: boolean;\n  requireUserVerification: boolean;\n  /** Forwarded to user interface */\n  fallbackSupported: boolean;\n  /** The constant Boolean value true. It is included here as a pseudo-parameter to simplify applying this abstract authenticator model to implementations that may wish to make a test of user presence optional although WebAuthn does not. */\n  // requireUserPresence: true; // Always required\n}\n\nexport interface Fido2AuthenticatorMakeCredentialResult {\n  credentialId: BufferSource;\n  attestationObject: BufferSource;\n  authData: BufferSource;\n  publicKey: BufferSource;\n  publicKeyAlgorithm: number;\n}\n\n/**\n * Parameters for {@link Fido2AuthenticatorService.getAssertion}\n\n * This interface represents the input parameters described in\n * https://www.w3.org/TR/webauthn-3/#sctn-op-get-assertion\n */\nexport interface Fido2AuthenticatorGetAssertionParams {\n  /** The caller’s RP ID, as determined by the user agent and the client. */\n  rpId: string;\n  /** The hash of the serialized client data, provided by the client. */\n  hash: BufferSource;\n  allowCredentialDescriptorList: PublicKeyCredentialDescriptor[];\n  /** The effective user verification requirement for assertion, a Boolean value provided by the client. */\n  requireUserVerification: boolean;\n  /** The constant Boolean value true. It is included here as a pseudo-parameter to simplify applying this abstract authenticator model to implementations that may wish to make a test of user presence optional although WebAuthn does not. */\n  // requireUserPresence: boolean; // Always required\n  extensions: unknown;\n  /** Forwarded to user interface */\n  fallbackSupported: boolean;\n}\n\nexport interface Fido2AuthenticatorGetAssertionResult {\n  selectedCredential: {\n    id: Uint8Array;\n    userHandle?: Uint8Array;\n  };\n  authenticatorData: Uint8Array;\n  signature: Uint8Array;\n}\n","/**\nThe MIT License (MIT)\n\nCopyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\nCopyright (c) 2020-present Aaron Huggins <ahuggins@aaronhuggins.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nExported from GitHub release version 0.4.0\n*/\n\n/* eslint-disable */\n/** @hidden */\nconst POW_2_24 = 5.960464477539063e-8;\n/** @hidden */\nconst POW_2_32 = 4294967296;\n/** @hidden */\nconst POW_2_53 = 9007199254740992;\n/** @hidden */\nconst DECODE_CHUNK_SIZE = 8192;\n\n/** @hidden */\nfunction objectIs(x: any, y: any) {\n  if (typeof Object.is === \"function\") return Object.is(x, y);\n\n  // SameValue algorithm\n  // Steps 1-5, 7-10\n  if (x === y) {\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  }\n\n  // Step 6.a: NaN == NaN\n  return x !== x && y !== y;\n}\n\n/** A function that extracts tagged values. */\ntype TaggedValueFunction = (value: any, tag: number) => TaggedValue;\n/** A function that extracts simple values. */\ntype SimpleValueFunction = (value: any) => SimpleValue;\n\n/** Convenience class for structuring a tagged value. */\nexport class TaggedValue {\n  constructor(value: any, tag: number) {\n    this.value = value;\n    this.tag = tag;\n  }\n\n  value: any;\n  tag: number;\n}\n\n/** Convenience class for structuring a simple value. */\nexport class SimpleValue {\n  constructor(value: any) {\n    this.value = value;\n  }\n\n  value: any;\n}\n\n/**\n * Converts a Concise Binary Object Representation (CBOR) buffer into an object.\n * @param {ArrayBuffer|SharedArrayBuffer} data - A valid CBOR buffer.\n * @param {Function} [tagger] - A function that extracts tagged values. This function is called for each member of the object.\n * @param {Function} [simpleValue] - A function that extracts simple values. This function is called for each member of the object.\n * @returns {any} The CBOR buffer converted to a JavaScript value.\n */\nexport function decode<T = any>(\n  data: ArrayBuffer | SharedArrayBuffer,\n  tagger?: TaggedValueFunction,\n  simpleValue?: SimpleValueFunction,\n): T {\n  let dataView = new DataView(data);\n  let ta = new Uint8Array(data);\n  let offset = 0;\n  let tagValueFunction: TaggedValueFunction = function (value: number, tag: number): any {\n    return new TaggedValue(value, tag);\n  };\n  let simpleValFunction: SimpleValueFunction = function (value: number): SimpleValue {\n    return undefined as unknown as SimpleValue;\n  };\n\n  if (typeof tagger === \"function\") tagValueFunction = tagger;\n  if (typeof simpleValue === \"function\") simpleValFunction = simpleValue;\n\n  function commitRead<T>(length: number, value: T): T {\n    offset += length;\n    return value;\n  }\n  function readArrayBuffer(length: number) {\n    return commitRead(length, new Uint8Array(data, offset, length));\n  }\n  function readFloat16() {\n    let tempArrayBuffer = new ArrayBuffer(4);\n    let tempDataView = new DataView(tempArrayBuffer);\n    let value = readUint16();\n\n    let sign = value & 0x8000;\n    let exponent = value & 0x7c00;\n    let fraction = value & 0x03ff;\n\n    if (exponent === 0x7c00) exponent = 0xff << 10;\n    else if (exponent !== 0) exponent += (127 - 15) << 10;\n    else if (fraction !== 0) return (sign ? -1 : 1) * fraction * POW_2_24;\n\n    tempDataView.setUint32(0, (sign << 16) | (exponent << 13) | (fraction << 13));\n    return tempDataView.getFloat32(0);\n  }\n  function readFloat32(): number {\n    return commitRead(4, dataView.getFloat32(offset));\n  }\n  function readFloat64(): number {\n    return commitRead(8, dataView.getFloat64(offset));\n  }\n  function readUint8(): number {\n    return commitRead(1, ta[offset]);\n  }\n  function readUint16(): number {\n    return commitRead(2, dataView.getUint16(offset));\n  }\n  function readUint32(): number {\n    return commitRead(4, dataView.getUint32(offset));\n  }\n  function readUint64(): number {\n    return readUint32() * POW_2_32 + readUint32();\n  }\n  function readBreak(): boolean {\n    if (ta[offset] !== 0xff) return false;\n    offset += 1;\n    return true;\n  }\n  function readLength(additionalInformation: number): number {\n    if (additionalInformation < 24) return additionalInformation;\n    if (additionalInformation === 24) return readUint8();\n    if (additionalInformation === 25) return readUint16();\n    if (additionalInformation === 26) return readUint32();\n    if (additionalInformation === 27) return readUint64();\n    if (additionalInformation === 31) return -1;\n    throw new Error(\"Invalid length encoding\");\n  }\n  function readIndefiniteStringLength(majorType: number): number {\n    let initialByte = readUint8();\n    if (initialByte === 0xff) return -1;\n    let length = readLength(initialByte & 0x1f);\n    if (length < 0 || initialByte >> 5 !== majorType)\n      throw new Error(\"Invalid indefinite length element\");\n    return length;\n  }\n\n  function appendUtf16Data(utf16data: number[], length: number) {\n    for (let i = 0; i < length; ++i) {\n      let value = readUint8();\n      if (value & 0x80) {\n        if (value < 0xe0) {\n          value = ((value & 0x1f) << 6) | (readUint8() & 0x3f);\n          length -= 1;\n        } else if (value < 0xf0) {\n          value = ((value & 0x0f) << 12) | ((readUint8() & 0x3f) << 6) | (readUint8() & 0x3f);\n          length -= 2;\n        } else {\n          value =\n            ((value & 0x0f) << 18) |\n            ((readUint8() & 0x3f) << 12) |\n            ((readUint8() & 0x3f) << 6) |\n            (readUint8() & 0x3f);\n          length -= 3;\n        }\n      }\n\n      if (value < 0x10000) {\n        utf16data.push(value);\n      } else {\n        value -= 0x10000;\n        utf16data.push(0xd800 | (value >> 10));\n        utf16data.push(0xdc00 | (value & 0x3ff));\n      }\n    }\n  }\n\n  function decodeItem(): any {\n    let initialByte = readUint8();\n    let majorType = initialByte >> 5;\n    let additionalInformation = initialByte & 0x1f;\n    let i;\n    let length;\n\n    if (majorType === 7) {\n      switch (additionalInformation) {\n        case 25:\n          return readFloat16();\n        case 26:\n          return readFloat32();\n        case 27:\n          return readFloat64();\n      }\n    }\n\n    length = readLength(additionalInformation);\n    if (length < 0 && (majorType < 2 || 6 < majorType)) throw new Error(\"Invalid length\");\n\n    switch (majorType) {\n      case 0:\n        return length;\n      case 1:\n        return -1 - length;\n      case 2:\n        if (length < 0) {\n          let elements = [];\n          let fullArrayLength = 0;\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            fullArrayLength += length;\n            elements.push(readArrayBuffer(length));\n          }\n          let fullArray = new Uint8Array(fullArrayLength);\n          let fullArrayOffset = 0;\n          for (i = 0; i < elements.length; ++i) {\n            fullArray.set(elements[i], fullArrayOffset);\n            fullArrayOffset += elements[i].length;\n          }\n          return fullArray;\n        }\n        return readArrayBuffer(length);\n      case 3:\n        let utf16data: number[] = [];\n        if (length < 0) {\n          while ((length = readIndefiniteStringLength(majorType)) >= 0)\n            appendUtf16Data(utf16data, length);\n        } else {\n          appendUtf16Data(utf16data, length);\n        }\n        let string = \"\";\n        for (i = 0; i < utf16data.length; i += DECODE_CHUNK_SIZE) {\n          string += String.fromCharCode.apply(null, utf16data.slice(i, i + DECODE_CHUNK_SIZE));\n        }\n        return string;\n      case 4:\n        let retArray;\n        if (length < 0) {\n          retArray = [];\n          while (!readBreak()) retArray.push(decodeItem());\n        } else {\n          retArray = new Array(length);\n          for (i = 0; i < length; ++i) retArray[i] = decodeItem();\n        }\n        return retArray;\n      case 5:\n        let retObject: any = {};\n        for (i = 0; i < length || (length < 0 && !readBreak()); ++i) {\n          let key = decodeItem();\n          retObject[key] = decodeItem();\n        }\n        return retObject;\n      case 6:\n        return tagValueFunction(decodeItem(), length);\n      case 7:\n        switch (length) {\n          case 20:\n            return false;\n          case 21:\n            return true;\n          case 22:\n            return null;\n          case 23:\n            return undefined;\n          default:\n            return simpleValFunction(length);\n        }\n    }\n  }\n\n  let ret = decodeItem();\n  if (offset !== data.byteLength) throw new Error(\"Remaining bytes\");\n  return ret;\n}\n\n/**\n * Converts a JavaScript value to a Concise Binary Object Representation (CBOR) buffer.\n * @param {any} value - A JavaScript value, usually an object or array, to be converted.\n * @returns {ArrayBuffer} The JavaScript value converted to CBOR format.\n */\nexport function encode<T = any>(value: T): ArrayBuffer {\n  let data = new ArrayBuffer(256);\n  let dataView = new DataView(data);\n  let byteView = new Uint8Array(data);\n  let lastLength: number;\n  let offset = 0;\n\n  function prepareWrite(length: number): DataView {\n    let newByteLength = data.byteLength;\n    let requiredLength = offset + length;\n    while (newByteLength < requiredLength) newByteLength <<= 1;\n    if (newByteLength !== data.byteLength) {\n      let oldDataView = dataView;\n      data = new ArrayBuffer(newByteLength);\n      dataView = new DataView(data);\n      byteView = new Uint8Array(data);\n      let uint32count = (offset + 3) >> 2;\n      for (let i = 0; i < uint32count; ++i)\n        dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\n    }\n\n    lastLength = length;\n    return dataView;\n  }\n  function commitWrite(...args: any[]) {\n    offset += lastLength;\n  }\n  function writeFloat64(val: number) {\n    commitWrite(prepareWrite(8).setFloat64(offset, val));\n  }\n  function writeUint8(val: number) {\n    commitWrite(prepareWrite(1).setUint8(offset, val));\n  }\n  function writeUint8Array(val: number[] | Uint8Array) {\n    prepareWrite(val.length);\n    byteView.set(val, offset);\n    commitWrite();\n  }\n  function writeUint16(val: number) {\n    commitWrite(prepareWrite(2).setUint16(offset, val));\n  }\n  function writeUint32(val: number) {\n    commitWrite(prepareWrite(4).setUint32(offset, val));\n  }\n  function writeUint64(val: number) {\n    let low = val % POW_2_32;\n    let high = (val - low) / POW_2_32;\n    let view = prepareWrite(8);\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n    commitWrite();\n  }\n  function writeVarUint(val: number, mod: number = 0) {\n    if (val <= 0xff) {\n      if (val < 24) {\n        writeUint8(val | mod);\n      } else {\n        writeUint8(0x18 | mod);\n        writeUint8(val);\n      }\n    } else if (val <= 0xffff) {\n      writeUint8(0x19 | mod);\n      writeUint16(val);\n    } else if (val <= 0xffffffff) {\n      writeUint8(0x1a | mod);\n      writeUint32(val);\n    } else {\n      writeUint8(0x1b | mod);\n      writeUint64(val);\n    }\n  }\n  function writeTypeAndLength(type: number, length: number) {\n    if (length < 24) {\n      writeUint8((type << 5) | length);\n    } else if (length < 0x100) {\n      writeUint8((type << 5) | 24);\n      writeUint8(length);\n    } else if (length < 0x10000) {\n      writeUint8((type << 5) | 25);\n      writeUint16(length);\n    } else if (length < 0x100000000) {\n      writeUint8((type << 5) | 26);\n      writeUint32(length);\n    } else {\n      writeUint8((type << 5) | 27);\n      writeUint64(length);\n    }\n  }\n\n  function encodeItem(val: any) {\n    let i;\n\n    if (val === false) return writeUint8(0xf4);\n    if (val === true) return writeUint8(0xf5);\n    if (val === null) return writeUint8(0xf6);\n    if (val === undefined) return writeUint8(0xf7);\n    if (objectIs(val, -0)) return writeUint8Array([0xf9, 0x80, 0x00]);\n\n    switch (typeof val) {\n      case \"number\":\n        if (Math.floor(val) === val) {\n          if (0 <= val && val <= POW_2_53) return writeTypeAndLength(0, val);\n          if (-POW_2_53 <= val && val < 0) return writeTypeAndLength(1, -(val + 1));\n        }\n        writeUint8(0xfb);\n        return writeFloat64(val);\n\n      case \"string\":\n        let utf8data = [];\n        for (i = 0; i < val.length; ++i) {\n          let charCode = val.charCodeAt(i);\n          if (charCode < 0x80) {\n            utf8data.push(charCode);\n          } else if (charCode < 0x800) {\n            utf8data.push(0xc0 | (charCode >> 6));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          } else if (charCode < 0xd800 || charCode >= 0xe000) {\n            utf8data.push(0xe0 | (charCode >> 12));\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          } else {\n            charCode = (charCode & 0x3ff) << 10;\n            charCode |= val.charCodeAt(++i) & 0x3ff;\n            charCode += 0x10000;\n\n            utf8data.push(0xf0 | (charCode >> 18));\n            utf8data.push(0x80 | ((charCode >> 12) & 0x3f));\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          }\n        }\n\n        writeTypeAndLength(3, utf8data.length);\n        return writeUint8Array(utf8data);\n\n      default:\n        let length;\n        let converted;\n        if (Array.isArray(val)) {\n          length = val.length;\n          writeTypeAndLength(4, length);\n          for (i = 0; i < length; i += 1) encodeItem(val[i]);\n        } else if (val instanceof Uint8Array) {\n          writeTypeAndLength(2, val.length);\n          writeUint8Array(val);\n        } else if (ArrayBuffer.isView(val)) {\n          converted = new Uint8Array(val.buffer);\n          writeTypeAndLength(2, converted.length);\n          writeUint8Array(converted);\n        } else if (\n          val instanceof ArrayBuffer ||\n          (typeof SharedArrayBuffer === \"function\" && val instanceof SharedArrayBuffer)\n        ) {\n          converted = new Uint8Array(val);\n          writeTypeAndLength(2, converted.length);\n          writeUint8Array(converted);\n        } else if (val instanceof TaggedValue) {\n          writeVarUint(val.tag, 0b11000000);\n          encodeItem(val.value);\n        } else {\n          let keys = Object.keys(val);\n          length = keys.length;\n          writeTypeAndLength(5, length);\n          for (i = 0; i < length; i += 1) {\n            let key = keys[i];\n            encodeItem(key);\n            encodeItem(val[key]);\n          }\n        }\n    }\n  }\n\n  encodeItem(value);\n\n  if (\"slice\" in data) return data.slice(0, offset);\n\n  let ret = new ArrayBuffer(offset);\n  let retView = new DataView(ret);\n  for (let i = 0; i < offset; ++i) retView.setUint8(i, dataView.getUint8(i));\n  return ret;\n}\n\n/**\n * An intrinsic object that provides functions to convert JavaScript values\n * to and from the Concise Binary Object Representation (CBOR) format.\n */\nexport const CBOR: {\n  decode: <T = any>(\n    data: ArrayBuffer | SharedArrayBuffer,\n    tagger?: TaggedValueFunction,\n    simpleValue?: SimpleValueFunction,\n  ) => T;\n  encode: <T = any>(value: T) => ArrayBuffer;\n} = {\n  decode,\n  encode,\n};\n","/*\n   Copyright 2015 D2L Corporation\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License. */\n\n// Changes:\n// - Cherry-pick the methods that we have a need for.\n// - Add typings.\n// - Original code is made for running in node, this version is adapted to work in the browser.\n\n// https://github.com/Brightspace/node-ecdsa-sig-formatter/blob/master/src/param-bytes-for-alg.js\n\nfunction getParamSize(keySize: number) {\n  const result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);\n  return result;\n}\n\nconst paramBytesForAlg = {\n  ES256: getParamSize(256),\n  ES384: getParamSize(384),\n  ES512: getParamSize(521),\n};\n\ntype Alg = keyof typeof paramBytesForAlg;\n\nfunction getParamBytesForAlg(alg: Alg) {\n  const paramBytes = paramBytesForAlg[alg];\n  if (paramBytes) {\n    return paramBytes;\n  }\n\n  throw new Error('Unknown algorithm \"' + alg + '\"');\n}\n\n// https://github.com/Brightspace/node-ecdsa-sig-formatter/blob/master/src/ecdsa-sig-formatter.js\n\nconst MAX_OCTET = 0x80,\n  CLASS_UNIVERSAL = 0,\n  PRIMITIVE_BIT = 0x20,\n  TAG_SEQ = 0x10,\n  TAG_INT = 0x02,\n  ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | (CLASS_UNIVERSAL << 6),\n  ENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);\n\n// Counts leading zeros and determines if there's a need for 0x00 padding\nfunction countPadding(\n  buf: Uint8Array,\n  start: number,\n  end: number,\n): { padding: number; needs0x00: boolean } {\n  let padding = 0;\n  while (start + padding < end && buf[start + padding] === 0) {\n    padding++;\n  }\n\n  const needs0x00 = (buf[start + padding] & MAX_OCTET) === MAX_OCTET;\n  return { padding, needs0x00 };\n}\n\nexport function p1363ToDer(signature: Uint8Array) {\n  const alg = \"ES256\";\n  const paramBytes = getParamBytesForAlg(alg);\n\n  const signatureBytes = signature.length;\n  if (signatureBytes !== paramBytes * 2) {\n    throw new TypeError(\n      '\"' +\n        alg +\n        '\" signatures must be \"' +\n        paramBytes * 2 +\n        '\" bytes, saw \"' +\n        signatureBytes +\n        '\"',\n    );\n  }\n\n  const { padding: rPadding, needs0x00: rNeeds0x00 } = countPadding(signature, 0, paramBytes);\n  const { padding: sPadding, needs0x00: sNeeds0x00 } = countPadding(\n    signature,\n    paramBytes,\n    signature.length,\n  );\n\n  const rActualLength = paramBytes - rPadding;\n  const sActualLength = paramBytes - sPadding;\n\n  const rLength = rActualLength + (rNeeds0x00 ? 1 : 0);\n  const sLength = sActualLength + (sNeeds0x00 ? 1 : 0);\n\n  const rsBytes = 2 + rLength + 2 + sLength;\n\n  const shortLength = rsBytes < MAX_OCTET;\n\n  const dst = new Uint8Array((shortLength ? 2 : 3) + rsBytes);\n\n  let offset = 0;\n  dst[offset++] = ENCODED_TAG_SEQ;\n  if (shortLength) {\n    dst[offset++] = rsBytes;\n  } else {\n    dst[offset++] = MAX_OCTET | 1;\n    dst[offset++] = rsBytes & 0xff;\n  }\n\n  // Encoding 'R' component\n  dst[offset++] = ENCODED_TAG_INT;\n  dst[offset++] = rLength;\n  if (rNeeds0x00) {\n    dst[offset++] = 0;\n  }\n  dst.set(signature.subarray(rPadding, rPadding + rActualLength), offset);\n  offset += rActualLength;\n\n  // Encoding 'S' component\n  dst[offset++] = ENCODED_TAG_INT;\n  dst[offset++] = sLength;\n  if (sNeeds0x00) {\n    dst[offset++] = 0;\n  }\n  dst.set(signature.subarray(paramBytes + sPadding, paramBytes + sPadding + sActualLength), offset);\n\n  return dst;\n}\n","import { Utils } from \"../../../platform/misc/utils\";\n\nexport class Fido2Utils {\n  static bufferToString(bufferSource: BufferSource): string {\n    const buffer = Fido2Utils.bufferSourceToUint8Array(bufferSource);\n\n    return Utils.fromBufferToUrlB64(buffer);\n  }\n\n  static stringToBuffer(str: string): Uint8Array {\n    return Utils.fromUrlB64ToArray(str);\n  }\n\n  static bufferSourceToUint8Array(bufferSource: BufferSource) {\n    if (Fido2Utils.isArrayBuffer(bufferSource)) {\n      return new Uint8Array(bufferSource);\n    } else {\n      return new Uint8Array(bufferSource.buffer);\n    }\n  }\n\n  /** Utility function to identify type of bufferSource. Necessary because of differences between runtimes */\n  private static isArrayBuffer(bufferSource: BufferSource): bufferSource is ArrayBuffer {\n    return bufferSource instanceof ArrayBuffer || bufferSource.buffer === undefined;\n  }\n}\n","/*\n  License for: guidToRawFormat, guidToStandardFormat\n  Source: https://github.com/uuidjs/uuid/\n  The MIT License (MIT)\n  Copyright (c) 2010-2020 Robert Kieffer and other contributors\n  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/\n\n/** Private array used for optimization */\nconst byteToHex = Array.from({ length: 256 }, (_, i) => (i + 0x100).toString(16).substring(1));\n\n/** Convert standard format (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX) UUID to raw 16 byte array. */\nexport function guidToRawFormat(guid: string) {\n  if (!isValidGuid(guid)) {\n    throw TypeError(\"GUID parameter is invalid\");\n  }\n\n  let v;\n  const arr = new Uint8Array(16);\n\n  // Parse ########-....-....-....-............\n  arr[0] = (v = parseInt(guid.slice(0, 8), 16)) >>> 24;\n  arr[1] = (v >>> 16) & 0xff;\n  arr[2] = (v >>> 8) & 0xff;\n  arr[3] = v & 0xff;\n\n  // Parse ........-####-....-....-............\n  arr[4] = (v = parseInt(guid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff;\n\n  // Parse ........-....-####-....-............\n  arr[6] = (v = parseInt(guid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff;\n\n  // Parse ........-....-....-####-............\n  arr[8] = (v = parseInt(guid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff;\n\n  // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n  arr[10] = ((v = parseInt(guid.slice(24, 36), 16)) / 0x10000000000) & 0xff;\n  arr[11] = (v / 0x100000000) & 0xff;\n  arr[12] = (v >>> 24) & 0xff;\n  arr[13] = (v >>> 16) & 0xff;\n  arr[14] = (v >>> 8) & 0xff;\n  arr[15] = v & 0xff;\n\n  return arr;\n}\n\n/** Convert raw 16 byte array to standard format (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX) UUID. */\nexport function guidToStandardFormat(bufferSource: BufferSource) {\n  const arr =\n    bufferSource instanceof ArrayBuffer\n      ? new Uint8Array(bufferSource)\n      : new Uint8Array(bufferSource.buffer);\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const guid = (\n    byteToHex[arr[0]] +\n    byteToHex[arr[1]] +\n    byteToHex[arr[2]] +\n    byteToHex[arr[3]] +\n    \"-\" +\n    byteToHex[arr[4]] +\n    byteToHex[arr[5]] +\n    \"-\" +\n    byteToHex[arr[6]] +\n    byteToHex[arr[7]] +\n    \"-\" +\n    byteToHex[arr[8]] +\n    byteToHex[arr[9]] +\n    \"-\" +\n    byteToHex[arr[10]] +\n    byteToHex[arr[11]] +\n    byteToHex[arr[12]] +\n    byteToHex[arr[13]] +\n    byteToHex[arr[14]] +\n    byteToHex[arr[15]]\n  ).toLowerCase();\n\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // or more input array values not mapping to a hex octet (leading to \"undefined\" in the uuid)\n  if (!isValidGuid(guid)) {\n    throw TypeError(\"Converted GUID is invalid\");\n  }\n\n  return guid;\n}\n\n// Perform format validation, without enforcing any variant restrictions as Utils.isGuid does\nfunction isValidGuid(guid: string): boolean {\n  return RegExp(/^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/, \"i\").test(guid);\n}\n","import { LogService } from \"../../../platform/abstractions/log.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { CipherService } from \"../../abstractions/cipher.service\";\nimport {\n  Fido2AlgorithmIdentifier,\n  Fido2AuthenticatorError,\n  Fido2AuthenticatorErrorCode,\n  Fido2AuthenticatorGetAssertionParams,\n  Fido2AuthenticatorGetAssertionResult,\n  Fido2AuthenticatorMakeCredentialResult,\n  Fido2AuthenticatorMakeCredentialsParams,\n  Fido2AuthenticatorService as Fido2AuthenticatorServiceAbstraction,\n  PublicKeyCredentialDescriptor,\n} from \"../../abstractions/fido2/fido2-authenticator.service.abstraction\";\nimport { Fido2UserInterfaceService } from \"../../abstractions/fido2/fido2-user-interface.service.abstraction\";\nimport { SyncService } from \"../../abstractions/sync/sync.service.abstraction\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CipherView } from \"../../models/view/cipher.view\";\nimport { Fido2CredentialView } from \"../../models/view/fido2-credential.view\";\n\nimport { CBOR } from \"./cbor\";\nimport { p1363ToDer } from \"./ecdsa-utils\";\nimport { Fido2Utils } from \"./fido2-utils\";\nimport { guidToRawFormat, guidToStandardFormat } from \"./guid-utils\";\n\n// AAGUID: d548826e-79b4-db40-a3d8-11116f7e8349\nexport const AAGUID = new Uint8Array([\n  0xd5, 0x48, 0x82, 0x6e, 0x79, 0xb4, 0xdb, 0x40, 0xa3, 0xd8, 0x11, 0x11, 0x6f, 0x7e, 0x83, 0x49,\n]);\n\nconst KeyUsages: KeyUsage[] = [\"sign\"];\n\n/**\n * Bitwarden implementation of the WebAuthn Authenticator Model as described by W3C\n * https://www.w3.org/TR/webauthn-3/#sctn-authenticator-model\n *\n * It is highly recommended that the W3C specification is used a reference when reading this code.\n */\nexport class Fido2AuthenticatorService implements Fido2AuthenticatorServiceAbstraction {\n  constructor(\n    private cipherService: CipherService,\n    private userInterface: Fido2UserInterfaceService,\n    private syncService: SyncService,\n    private logService?: LogService,\n  ) {}\n\n  async makeCredential(\n    params: Fido2AuthenticatorMakeCredentialsParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ): Promise<Fido2AuthenticatorMakeCredentialResult> {\n    const userInterfaceSession = await this.userInterface.newSession(\n      params.fallbackSupported,\n      tab,\n      abortController,\n    );\n\n    try {\n      if (params.credTypesAndPubKeyAlgs.every((p) => p.alg !== Fido2AlgorithmIdentifier.ES256)) {\n        const requestedAlgorithms = params.credTypesAndPubKeyAlgs.map((p) => p.alg).join(\", \");\n        this.logService?.warning(\n          `[Fido2Authenticator] No compatible algorithms found, RP requested: ${requestedAlgorithms}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotSupported);\n      }\n\n      if (\n        params.requireResidentKey != undefined &&\n        typeof params.requireResidentKey !== \"boolean\"\n      ) {\n        this.logService?.error(\n          `[Fido2Authenticator] Invalid 'requireResidentKey' value: ${String(\n            params.requireResidentKey,\n          )}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      if (\n        params.requireUserVerification != undefined &&\n        typeof params.requireUserVerification !== \"boolean\"\n      ) {\n        this.logService?.error(\n          `[Fido2Authenticator] Invalid 'requireUserVerification' value: ${String(\n            params.requireUserVerification,\n          )}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      await userInterfaceSession.ensureUnlockedVault();\n      await this.syncService.fullSync(false);\n\n      const existingCipherIds = await this.findExcludedCredentials(\n        params.excludeCredentialDescriptorList,\n      );\n      if (existingCipherIds.length > 0) {\n        this.logService?.info(\n          `[Fido2Authenticator] Aborting due to excluded credential found in vault.`,\n        );\n        await userInterfaceSession.informExcludedCredential(existingCipherIds);\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      let cipher: CipherView;\n      let fido2Credential: Fido2CredentialView;\n      let keyPair: CryptoKeyPair;\n      let userVerified = false;\n      let credentialId: string;\n      let pubKeyDer: ArrayBuffer;\n      const response = await userInterfaceSession.confirmNewCredential({\n        credentialName: params.rpEntity.name,\n        userName: params.userEntity.displayName,\n        userVerification: params.requireUserVerification,\n        rpId: params.rpEntity.id,\n      });\n      const cipherId = response.cipherId;\n      userVerified = response.userVerified;\n\n      if (cipherId === undefined) {\n        this.logService?.warning(\n          `[Fido2Authenticator] Aborting because user confirmation was not recieved.`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      try {\n        keyPair = await createKeyPair();\n        pubKeyDer = await crypto.subtle.exportKey(\"spki\", keyPair.publicKey);\n        const encrypted = await this.cipherService.get(cipherId);\n        cipher = await encrypted.decrypt(\n          await this.cipherService.getKeyForCipherKeyDecryption(encrypted),\n        );\n\n        if (\n          !userVerified &&\n          (params.requireUserVerification || cipher.reprompt !== CipherRepromptType.None)\n        ) {\n          this.logService?.warning(\n            `[Fido2Authenticator] Aborting because user verification was unsuccessful.`,\n          );\n          throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n        }\n\n        fido2Credential = await createKeyView(params, keyPair.privateKey);\n        cipher.login.fido2Credentials = [fido2Credential];\n        const reencrypted = await this.cipherService.encrypt(cipher);\n        await this.cipherService.updateWithServer(reencrypted);\n        credentialId = fido2Credential.credentialId;\n      } catch (error) {\n        this.logService?.error(\n          `[Fido2Authenticator] Aborting because of unknown error when creating credential: ${error}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      const authData = await generateAuthData({\n        rpId: params.rpEntity.id,\n        credentialId: guidToRawFormat(credentialId),\n        counter: fido2Credential.counter,\n        userPresence: true,\n        userVerification: userVerified,\n        keyPair,\n      });\n      const attestationObject = new Uint8Array(\n        CBOR.encode({\n          fmt: \"none\",\n          attStmt: {},\n          authData,\n        }),\n      );\n\n      return {\n        credentialId: guidToRawFormat(credentialId),\n        attestationObject,\n        authData,\n        publicKey: pubKeyDer,\n        publicKeyAlgorithm: -7,\n      };\n    } finally {\n      userInterfaceSession.close();\n    }\n  }\n\n  async getAssertion(\n    params: Fido2AuthenticatorGetAssertionParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ): Promise<Fido2AuthenticatorGetAssertionResult> {\n    const userInterfaceSession = await this.userInterface.newSession(\n      params.fallbackSupported,\n      tab,\n      abortController,\n    );\n    try {\n      if (\n        params.requireUserVerification != undefined &&\n        typeof params.requireUserVerification !== \"boolean\"\n      ) {\n        this.logService?.error(\n          `[Fido2Authenticator] Invalid 'requireUserVerification' value: ${String(\n            params.requireUserVerification,\n          )}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      let cipherOptions: CipherView[];\n\n      await userInterfaceSession.ensureUnlockedVault();\n      await this.syncService.fullSync(false);\n\n      if (params.allowCredentialDescriptorList?.length > 0) {\n        cipherOptions = await this.findCredentialsById(\n          params.allowCredentialDescriptorList,\n          params.rpId,\n        );\n      } else {\n        cipherOptions = await this.findCredentialsByRp(params.rpId);\n      }\n\n      if (cipherOptions.length === 0) {\n        this.logService?.info(\n          `[Fido2Authenticator] Aborting because no matching credentials were found in the vault.`,\n        );\n\n        await userInterfaceSession.informCredentialNotFound();\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      const response = await userInterfaceSession.pickCredential({\n        cipherIds: cipherOptions.map((cipher) => cipher.id),\n        userVerification: params.requireUserVerification,\n      });\n      const selectedCipherId = response.cipherId;\n      const userVerified = response.userVerified;\n      const selectedCipher = cipherOptions.find((c) => c.id === selectedCipherId);\n\n      if (selectedCipher === undefined) {\n        this.logService?.error(\n          `[Fido2Authenticator] Aborting because the selected credential could not be found.`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      if (\n        !userVerified &&\n        (params.requireUserVerification || selectedCipher.reprompt !== CipherRepromptType.None)\n      ) {\n        this.logService?.warning(\n          `[Fido2Authenticator] Aborting because user verification was unsuccessful.`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      try {\n        const selectedFido2Credential = selectedCipher.login.fido2Credentials[0];\n        const selectedCredentialId = selectedFido2Credential.credentialId;\n\n        if (selectedFido2Credential.counter > 0) {\n          ++selectedFido2Credential.counter;\n        }\n\n        selectedCipher.localData = {\n          ...selectedCipher.localData,\n          lastUsedDate: new Date().getTime(),\n        };\n\n        if (selectedFido2Credential.counter > 0) {\n          const encrypted = await this.cipherService.encrypt(selectedCipher);\n          await this.cipherService.updateWithServer(encrypted);\n        }\n\n        const authenticatorData = await generateAuthData({\n          rpId: selectedFido2Credential.rpId,\n          credentialId: guidToRawFormat(selectedCredentialId),\n          counter: selectedFido2Credential.counter,\n          userPresence: true,\n          userVerification: userVerified,\n        });\n\n        const signature = await generateSignature({\n          authData: authenticatorData,\n          clientDataHash: params.hash,\n          privateKey: await getPrivateKeyFromFido2Credential(selectedFido2Credential),\n        });\n\n        return {\n          authenticatorData,\n          selectedCredential: {\n            id: guidToRawFormat(selectedCredentialId),\n            userHandle: Fido2Utils.stringToBuffer(selectedFido2Credential.userHandle),\n          },\n          signature,\n        };\n      } catch (error) {\n        this.logService?.error(\n          `[Fido2Authenticator] Aborting because of unknown error when asserting credential: ${error}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n    } finally {\n      userInterfaceSession.close();\n    }\n  }\n\n  /** Finds existing crendetials and returns the `cipherId` for each one */\n  private async findExcludedCredentials(\n    credentials: PublicKeyCredentialDescriptor[],\n  ): Promise<string[]> {\n    const ids: string[] = [];\n\n    for (const credential of credentials) {\n      try {\n        ids.push(guidToStandardFormat(credential.id));\n        // eslint-disable-next-line no-empty\n      } catch {}\n    }\n\n    if (ids.length === 0) {\n      return [];\n    }\n\n    const ciphers = await this.cipherService.getAllDecrypted();\n    return ciphers\n      .filter(\n        (cipher) =>\n          !cipher.isDeleted &&\n          cipher.organizationId == undefined &&\n          cipher.type === CipherType.Login &&\n          cipher.login.hasFido2Credentials &&\n          ids.includes(cipher.login.fido2Credentials[0].credentialId),\n      )\n      .map((cipher) => cipher.id);\n  }\n\n  private async findCredentialsById(\n    credentials: PublicKeyCredentialDescriptor[],\n    rpId: string,\n  ): Promise<CipherView[]> {\n    const ids: string[] = [];\n\n    for (const credential of credentials) {\n      try {\n        ids.push(guidToStandardFormat(credential.id));\n        // eslint-disable-next-line no-empty\n      } catch {}\n    }\n\n    if (ids.length === 0) {\n      return [];\n    }\n\n    const ciphers = await this.cipherService.getAllDecrypted();\n    return ciphers.filter(\n      (cipher) =>\n        !cipher.isDeleted &&\n        cipher.type === CipherType.Login &&\n        cipher.login.hasFido2Credentials &&\n        cipher.login.fido2Credentials[0].rpId === rpId &&\n        ids.includes(cipher.login.fido2Credentials[0].credentialId),\n    );\n  }\n\n  private async findCredentialsByRp(rpId: string): Promise<CipherView[]> {\n    const ciphers = await this.cipherService.getAllDecrypted();\n    return ciphers.filter(\n      (cipher) =>\n        !cipher.isDeleted &&\n        cipher.type === CipherType.Login &&\n        cipher.login.hasFido2Credentials &&\n        cipher.login.fido2Credentials[0].rpId === rpId &&\n        cipher.login.fido2Credentials[0].discoverable,\n    );\n  }\n}\n\nasync function createKeyPair() {\n  return await crypto.subtle.generateKey(\n    {\n      name: \"ECDSA\",\n      namedCurve: \"P-256\",\n    },\n    true,\n    KeyUsages,\n  );\n}\n\nasync function createKeyView(\n  params: Fido2AuthenticatorMakeCredentialsParams,\n  keyValue: CryptoKey,\n): Promise<Fido2CredentialView> {\n  if (keyValue.algorithm.name !== \"ECDSA\" && (keyValue.algorithm as any).namedCurve !== \"P-256\") {\n    throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n  }\n\n  const pkcs8Key = await crypto.subtle.exportKey(\"pkcs8\", keyValue);\n  const fido2Credential = new Fido2CredentialView();\n  fido2Credential.credentialId = Utils.newGuid();\n  fido2Credential.keyType = \"public-key\";\n  fido2Credential.keyAlgorithm = \"ECDSA\";\n  fido2Credential.keyCurve = \"P-256\";\n  fido2Credential.keyValue = Fido2Utils.bufferToString(pkcs8Key);\n  fido2Credential.rpId = params.rpEntity.id;\n  fido2Credential.userHandle = Fido2Utils.bufferToString(params.userEntity.id);\n  fido2Credential.userName = params.userEntity.name;\n  fido2Credential.counter = 0;\n  fido2Credential.rpName = params.rpEntity.name;\n  fido2Credential.userDisplayName = params.userEntity.displayName;\n  fido2Credential.discoverable = params.requireResidentKey;\n  fido2Credential.creationDate = new Date();\n\n  return fido2Credential;\n}\n\nasync function getPrivateKeyFromFido2Credential(\n  fido2Credential: Fido2CredentialView,\n): Promise<CryptoKey> {\n  const keyBuffer = Fido2Utils.stringToBuffer(fido2Credential.keyValue);\n  return await crypto.subtle.importKey(\n    \"pkcs8\",\n    keyBuffer,\n    {\n      name: fido2Credential.keyAlgorithm,\n      namedCurve: fido2Credential.keyCurve,\n    } as EcKeyImportParams,\n    true,\n    KeyUsages,\n  );\n}\n\ninterface AuthDataParams {\n  rpId: string;\n  credentialId: BufferSource;\n  userPresence: boolean;\n  userVerification: boolean;\n  counter: number;\n  keyPair?: CryptoKeyPair;\n}\n\nasync function generateAuthData(params: AuthDataParams) {\n  const authData: Array<number> = [];\n\n  const rpIdHash = new Uint8Array(\n    await crypto.subtle.digest({ name: \"SHA-256\" }, Utils.fromByteStringToArray(params.rpId)),\n  );\n  authData.push(...rpIdHash);\n\n  const flags = authDataFlags({\n    extensionData: false,\n    attestationData: params.keyPair != undefined,\n    backupEligibility: true,\n    backupState: true, // Credentials are always synced\n    userVerification: params.userVerification,\n    userPresence: params.userPresence,\n  });\n  authData.push(flags);\n\n  // add 4 bytes of counter - we use time in epoch seconds as monotonic counter\n  // TODO: Consider changing this to a cryptographically safe random number\n  const counter = params.counter;\n  authData.push(\n    ((counter & 0xff000000) >> 24) & 0xff,\n    ((counter & 0x00ff0000) >> 16) & 0xff,\n    ((counter & 0x0000ff00) >> 8) & 0xff,\n    counter & 0x000000ff,\n  );\n\n  if (params.keyPair) {\n    // attestedCredentialData\n    const attestedCredentialData: Array<number> = [];\n\n    attestedCredentialData.push(...AAGUID);\n\n    // credentialIdLength (2 bytes) and credential Id\n    const rawId = Fido2Utils.bufferSourceToUint8Array(params.credentialId);\n    const credentialIdLength = [(rawId.length - (rawId.length & 0xff)) / 256, rawId.length & 0xff];\n    attestedCredentialData.push(...credentialIdLength);\n    attestedCredentialData.push(...rawId);\n\n    const publicKeyJwk = await crypto.subtle.exportKey(\"jwk\", params.keyPair.publicKey);\n    // COSE format of the EC256 key\n    const keyX = Utils.fromUrlB64ToArray(publicKeyJwk.x);\n    const keyY = Utils.fromUrlB64ToArray(publicKeyJwk.y);\n\n    // Can't get `cbor-redux` to encode in CTAP2 canonical CBOR. So we do it manually:\n    const coseBytes = new Uint8Array(77);\n    coseBytes.set([0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21, 0x58, 0x20], 0);\n    coseBytes.set(keyX, 10);\n    coseBytes.set([0x22, 0x58, 0x20], 10 + 32);\n    coseBytes.set(keyY, 10 + 32 + 3);\n\n    // credential public key - convert to array from CBOR encoded COSE key\n    attestedCredentialData.push(...coseBytes);\n\n    authData.push(...attestedCredentialData);\n  }\n\n  return new Uint8Array(authData);\n}\n\ninterface SignatureParams {\n  authData: Uint8Array;\n  clientDataHash: BufferSource;\n  privateKey: CryptoKey;\n}\n\nasync function generateSignature(params: SignatureParams) {\n  const sigBase = new Uint8Array([\n    ...params.authData,\n    ...Fido2Utils.bufferSourceToUint8Array(params.clientDataHash),\n  ]);\n  const p1363_signature = new Uint8Array(\n    await crypto.subtle.sign(\n      {\n        name: \"ECDSA\",\n        hash: { name: \"SHA-256\" },\n      },\n      params.privateKey,\n      sigBase,\n    ),\n  );\n\n  const asn1Der_signature = p1363ToDer(p1363_signature);\n\n  return asn1Der_signature;\n}\n\ninterface Flags {\n  extensionData: boolean;\n  attestationData: boolean;\n  backupEligibility: boolean;\n  backupState: boolean;\n  userVerification: boolean;\n  userPresence: boolean;\n}\n\nfunction authDataFlags(options: Flags): number {\n  let flags = 0;\n\n  if (options.extensionData) {\n    flags |= 0b1000000;\n  }\n\n  if (options.attestationData) {\n    flags |= 0b01000000;\n  }\n\n  if (options.backupEligibility) {\n    flags |= 0b00001000;\n  }\n\n  if (options.backupState) {\n    flags |= 0b00010000;\n  }\n\n  if (options.userVerification) {\n    flags |= 0b00000100;\n  }\n\n  if (options.userPresence) {\n    flags |= 0b00000001;\n  }\n\n  return flags;\n}\n","export const UserRequestedFallbackAbortReason = \"UserRequestedFallback\";\n\nexport type UserVerification = \"discouraged\" | \"preferred\" | \"required\";\n\n/**\n * This class represents an abstraction of the WebAuthn Client as described by W3C:\n * https://www.w3.org/TR/webauthn-3/#webauthn-client\n *\n * The WebAuthn Client is an intermediary entity typically implemented in the user agent\n * (in whole, or in part). Conceptually, it underlies the Web Authentication API and embodies\n * the implementation of the Web Authentication API's operations.\n *\n * It is responsible for both marshalling the inputs for the underlying authenticator operations,\n * and for returning the results of the latter operations to the Web Authentication API's callers.\n */\nexport abstract class Fido2ClientService {\n  isFido2FeatureEnabled: (hostname: string, origin: string) => Promise<boolean>;\n\n  /**\n   * Allows WebAuthn Relying Party scripts to request the creation of a new public key credential source.\n   * For more information please see: https://www.w3.org/TR/webauthn-3/#sctn-createCredential\n   *\n   * @param params The parameters for the credential creation operation.\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the new credential.\n   */\n  createCredential: (\n    params: CreateCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ) => Promise<CreateCredentialResult>;\n\n  /**\n   * Allows WebAuthn Relying Party scripts to discover and use an existing public key credential, with the user’s consent.\n   * Relying Party script can optionally specify some criteria to indicate what credential sources are acceptable to it.\n   * For more information please see: https://www.w3.org/TR/webauthn-3/#sctn-getAssertion\n   *\n   * @param params The parameters for the credential assertion operation.\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the asserted credential.\n   */\n  assertCredential: (\n    params: AssertCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ) => Promise<AssertCredentialResult>;\n}\n\n/**\n * Parameters for creating a new credential.\n */\nexport interface CreateCredentialParams {\n  /** The Relaying Parties origin, see: https://html.spec.whatwg.org/multipage/browsers.html#concept-origin */\n  origin: string;\n  /**\n   * A value which is true if and only if the caller’s environment settings object is same-origin with its ancestors.\n   * It is false if caller is cross-origin.\n   * */\n  sameOriginWithAncestors: boolean;\n  /** The Relying Party's preference for attestation conveyance */\n  attestation?: \"direct\" | \"enterprise\" | \"indirect\" | \"none\";\n  /** The Relying Party's requirements of the authenticator used in the creation of the credential. */\n  authenticatorSelection?: {\n    // authenticatorAttachment?: AuthenticatorAttachment; // not used\n    requireResidentKey?: boolean;\n    residentKey?: \"discouraged\" | \"preferred\" | \"required\";\n    userVerification?: UserVerification;\n  };\n  /** Challenge intended to be used for generating the newly created credential's attestation object. */\n  challenge: string; // b64 encoded\n  /**\n   * This member is intended for use by Relying Parties that wish to limit the creation of multiple credentials for\n   * the same account on a single authenticator. The client is requested to return an error if the new credential would\n   * be created on an authenticator that also contains one of the credentials enumerated in this parameter.\n   * */\n  excludeCredentials?: {\n    id: string; // b64 encoded\n    transports?: (\"ble\" | \"hybrid\" | \"internal\" | \"nfc\" | \"usb\")[];\n    type: \"public-key\";\n  }[];\n  /**\n   * This member contains additional parameters requesting additional processing by the client and authenticator.\n   **/\n  extensions?: {\n    appid?: string; // Not supported\n    appidExclude?: string; // Not supported\n    uvm?: boolean; // Not supported\n    credProps?: boolean;\n  };\n  /**\n   * This member contains information about the desired properties of the credential to be created.\n   * The sequence is ordered from most preferred to least preferred.\n   * The client makes a best-effort to create the most preferred credential that it can.\n   */\n  pubKeyCredParams: PublicKeyCredentialParam[];\n  /** Data about the Relying Party responsible for the request. */\n  rp: {\n    id?: string;\n    name: string;\n  };\n  /** Data about the user account for which the Relying Party is requesting attestation. */\n  user: {\n    id: string; // b64 encoded\n    displayName: string;\n    name: string;\n  };\n  /** Forwarded to user interface */\n  fallbackSupported: boolean;\n  /**\n   * This member specifies a time, in milliseconds, that the caller is willing to wait for the call to complete.\n   * This is treated as a hint, and MAY be overridden by the client.\n   **/\n  timeout?: number;\n}\n\n/**\n * The result of creating a new credential.\n */\nexport interface CreateCredentialResult {\n  credentialId: string;\n  clientDataJSON: string;\n  attestationObject: string;\n  authData: string;\n  publicKey: string;\n  publicKeyAlgorithm: number;\n  transports: string[];\n  extensions: {\n    credProps?: {\n      rk: boolean;\n    };\n  };\n}\n\n/**\n * Parameters for asserting a credential.\n */\nexport interface AssertCredentialParams {\n  allowedCredentialIds: string[];\n  rpId: string;\n  origin: string;\n  challenge: string;\n  userVerification?: UserVerification;\n  timeout: number;\n  sameOriginWithAncestors: boolean;\n  fallbackSupported: boolean;\n}\n\n/**\n * The result of asserting a credential.\n */\nexport interface AssertCredentialResult {\n  credentialId: string;\n  clientDataJSON: string;\n  authenticatorData: string;\n  signature: string;\n  userHandle: string;\n}\n\n/**\n * A description of a key type and algorithm.\n *\n * @example {\n *   alg: -7, // ES256\n *   type: \"public-key\"\n * }\n */\nexport interface PublicKeyCredentialParam {\n  alg: number;\n  type: \"public-key\";\n}\n\n/**\n * Error thrown when the user requests a fallback to the browser's built-in WebAuthn implementation.\n */\nexport class FallbackRequestedError extends Error {\n  readonly fallbackRequested = true;\n  constructor() {\n    super(\"FallbackRequested\");\n  }\n}\n","import { parse } from \"tldts\";\n\nexport function isValidRpId(rpId: string, origin: string) {\n  const parsedOrigin = parse(origin, { allowPrivateDomains: true });\n  const parsedRpId = parse(rpId, { allowPrivateDomains: true });\n\n  return (\n    (parsedOrigin.domain == null &&\n      parsedOrigin.hostname == parsedRpId.hostname &&\n      parsedOrigin.hostname == \"localhost\") ||\n    (parsedOrigin.domain != null &&\n      parsedOrigin.domain == parsedRpId.domain &&\n      parsedOrigin.subdomain.endsWith(parsedRpId.subdomain))\n  );\n}\n","import { firstValueFrom } from \"rxjs\";\nimport { parse } from \"tldts\";\n\nimport { AuthService } from \"../../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../../auth/enums/authentication-status\";\nimport { DomainSettingsService } from \"../../../autofill/services/domain-settings.service\";\nimport { ConfigServiceAbstraction } from \"../../../platform/abstractions/config/config.service.abstraction\";\nimport { LogService } from \"../../../platform/abstractions/log.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport {\n  Fido2AuthenticatorError,\n  Fido2AuthenticatorErrorCode,\n  Fido2AuthenticatorGetAssertionParams,\n  Fido2AuthenticatorMakeCredentialsParams,\n  Fido2AuthenticatorService,\n  PublicKeyCredentialDescriptor,\n} from \"../../abstractions/fido2/fido2-authenticator.service.abstraction\";\nimport {\n  AssertCredentialParams,\n  AssertCredentialResult,\n  CreateCredentialParams,\n  CreateCredentialResult,\n  FallbackRequestedError,\n  Fido2ClientService as Fido2ClientServiceAbstraction,\n  PublicKeyCredentialParam,\n  UserRequestedFallbackAbortReason,\n  UserVerification,\n} from \"../../abstractions/fido2/fido2-client.service.abstraction\";\nimport { VaultSettingsService } from \"../../abstractions/vault-settings/vault-settings.service\";\n\nimport { isValidRpId } from \"./domain-utils\";\nimport { Fido2Utils } from \"./fido2-utils\";\n\n/**\n * Bitwarden implementation of the Web Authentication API as described by W3C\n * https://www.w3.org/TR/webauthn-3/#sctn-api\n *\n * It is highly recommended that the W3C specification is used a reference when reading this code.\n */\nexport class Fido2ClientService implements Fido2ClientServiceAbstraction {\n  constructor(\n    private authenticator: Fido2AuthenticatorService,\n    private configService: ConfigServiceAbstraction,\n    private authService: AuthService,\n    private vaultSettingsService: VaultSettingsService,\n    private domainSettingsService: DomainSettingsService,\n    private logService?: LogService,\n  ) {}\n\n  async isFido2FeatureEnabled(hostname: string, origin: string): Promise<boolean> {\n    const userEnabledPasskeys = await firstValueFrom(this.vaultSettingsService.enablePasskeys$);\n    const isUserLoggedIn =\n      (await this.authService.getAuthStatus()) !== AuthenticationStatus.LoggedOut;\n\n    const neverDomains = await firstValueFrom(this.domainSettingsService.neverDomains$);\n\n    const isExcludedDomain = neverDomains != null && hostname in neverDomains;\n\n    const serverConfig = await firstValueFrom(this.configService.serverConfig$);\n    const isOriginEqualBitwardenVault = origin === serverConfig.environment?.vault;\n\n    return (\n      userEnabledPasskeys && isUserLoggedIn && !isExcludedDomain && !isOriginEqualBitwardenVault\n    );\n  }\n\n  async createCredential(\n    params: CreateCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController = new AbortController(),\n  ): Promise<CreateCredentialResult> {\n    const parsedOrigin = parse(params.origin, { allowPrivateDomains: true });\n    const enableFido2VaultCredentials = await this.isFido2FeatureEnabled(\n      parsedOrigin.hostname,\n      params.origin,\n    );\n\n    if (!enableFido2VaultCredentials) {\n      this.logService?.warning(`[Fido2Client] Fido2VaultCredential is not enabled`);\n      throw new FallbackRequestedError();\n    }\n\n    if (!params.sameOriginWithAncestors) {\n      this.logService?.warning(\n        `[Fido2Client] Invalid 'sameOriginWithAncestors' value: ${params.sameOriginWithAncestors}`,\n      );\n      throw new DOMException(\"Invalid 'sameOriginWithAncestors' value\", \"NotAllowedError\");\n    }\n\n    const userId = Fido2Utils.stringToBuffer(params.user.id);\n    if (userId.length < 1 || userId.length > 64) {\n      this.logService?.warning(\n        `[Fido2Client] Invalid 'user.id' length: ${params.user.id} (${userId.length})`,\n      );\n      throw new TypeError(\"Invalid 'user.id' length\");\n    }\n\n    params.rp.id = params.rp.id ?? parsedOrigin.hostname;\n    if (parsedOrigin.hostname == undefined || !params.origin.startsWith(\"https://\")) {\n      this.logService?.warning(`[Fido2Client] Invalid https origin: ${params.origin}`);\n      throw new DOMException(\"'origin' is not a valid https origin\", \"SecurityError\");\n    }\n\n    if (!isValidRpId(params.rp.id, params.origin)) {\n      this.logService?.warning(\n        `[Fido2Client] 'rp.id' cannot be used with the current origin: rp.id = ${params.rp.id}; origin = ${params.origin}`,\n      );\n      throw new DOMException(\"'rp.id' cannot be used with the current origin\", \"SecurityError\");\n    }\n\n    let credTypesAndPubKeyAlgs: PublicKeyCredentialParam[];\n    if (params.pubKeyCredParams?.length > 0) {\n      // Filter out all unsupported algorithms\n      credTypesAndPubKeyAlgs = params.pubKeyCredParams.filter(\n        (kp) => kp.alg === -7 && kp.type === \"public-key\",\n      );\n    } else {\n      // Assign default algorithms\n      credTypesAndPubKeyAlgs = [\n        { alg: -7, type: \"public-key\" },\n        { alg: -257, type: \"public-key\" },\n      ];\n    }\n\n    if (credTypesAndPubKeyAlgs.length === 0) {\n      const requestedAlgorithms = credTypesAndPubKeyAlgs.map((p) => p.alg).join(\", \");\n      this.logService?.warning(\n        `[Fido2Client] No compatible algorithms found, RP requested: ${requestedAlgorithms}`,\n      );\n      throw new DOMException(\"No supported key algorithms were found\", \"NotSupportedError\");\n    }\n\n    const collectedClientData = {\n      type: \"webauthn.create\",\n      challenge: params.challenge,\n      origin: params.origin,\n      crossOrigin: !params.sameOriginWithAncestors,\n      // tokenBinding: {} // Not currently supported\n    };\n    const clientDataJSON = JSON.stringify(collectedClientData);\n    const clientDataJSONBytes = Utils.fromByteStringToArray(clientDataJSON);\n    const clientDataHash = await crypto.subtle.digest({ name: \"SHA-256\" }, clientDataJSONBytes);\n    const makeCredentialParams = mapToMakeCredentialParams({\n      params,\n      credTypesAndPubKeyAlgs,\n      clientDataHash,\n    });\n\n    // Set timeout before invoking authenticator\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n    const timeout = setAbortTimeout(\n      abortController,\n      params.authenticatorSelection?.userVerification,\n      params.timeout,\n    );\n\n    let makeCredentialResult;\n    try {\n      makeCredentialResult = await this.authenticator.makeCredential(\n        makeCredentialParams,\n        tab,\n        abortController,\n      );\n    } catch (error) {\n      if (\n        abortController.signal.aborted &&\n        abortController.signal.reason === UserRequestedFallbackAbortReason\n      ) {\n        this.logService?.info(`[Fido2Client] Aborting because user requested fallback`);\n        throw new FallbackRequestedError();\n      }\n\n      if (\n        error instanceof Fido2AuthenticatorError &&\n        error.errorCode === Fido2AuthenticatorErrorCode.InvalidState\n      ) {\n        this.logService?.warning(`[Fido2Client] Unknown error: ${error}`);\n        throw new DOMException(\"Unknown error occured.\", \"InvalidStateError\");\n      }\n\n      this.logService?.info(`[Fido2Client] Aborted by user: ${error}`);\n      throw new DOMException(\n        \"The operation either timed out or was not allowed.\",\n        \"NotAllowedError\",\n      );\n    }\n\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n\n    let credProps;\n    if (params.extensions?.credProps) {\n      credProps = {\n        rk: makeCredentialParams.requireResidentKey,\n      };\n    }\n\n    clearTimeout(timeout);\n    return {\n      credentialId: Fido2Utils.bufferToString(makeCredentialResult.credentialId),\n      attestationObject: Fido2Utils.bufferToString(makeCredentialResult.attestationObject),\n      authData: Fido2Utils.bufferToString(makeCredentialResult.authData),\n      clientDataJSON: Fido2Utils.bufferToString(clientDataJSONBytes),\n      publicKey: Fido2Utils.bufferToString(makeCredentialResult.publicKey),\n      publicKeyAlgorithm: makeCredentialResult.publicKeyAlgorithm,\n      transports: params.rp.id === \"google.com\" ? [\"internal\", \"usb\"] : [\"internal\"],\n      extensions: { credProps },\n    };\n  }\n\n  async assertCredential(\n    params: AssertCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController = new AbortController(),\n  ): Promise<AssertCredentialResult> {\n    const parsedOrigin = parse(params.origin, { allowPrivateDomains: true });\n    const enableFido2VaultCredentials = await this.isFido2FeatureEnabled(\n      parsedOrigin.hostname,\n      params.origin,\n    );\n\n    if (!enableFido2VaultCredentials) {\n      this.logService?.warning(`[Fido2Client] Fido2VaultCredential is not enabled`);\n      throw new FallbackRequestedError();\n    }\n\n    params.rpId = params.rpId ?? parsedOrigin.hostname;\n\n    if (parsedOrigin.hostname == undefined || !params.origin.startsWith(\"https://\")) {\n      this.logService?.warning(`[Fido2Client] Invalid https origin: ${params.origin}`);\n      throw new DOMException(\"'origin' is not a valid https origin\", \"SecurityError\");\n    }\n\n    if (!isValidRpId(params.rpId, params.origin)) {\n      this.logService?.warning(\n        `[Fido2Client] 'rp.id' cannot be used with the current origin: rp.id = ${params.rpId}; origin = ${params.origin}`,\n      );\n      throw new DOMException(\"'rp.id' cannot be used with the current origin\", \"SecurityError\");\n    }\n\n    const collectedClientData = {\n      type: \"webauthn.get\",\n      challenge: params.challenge,\n      origin: params.origin,\n      crossOrigin: !params.sameOriginWithAncestors,\n      // tokenBinding: {} // Not currently supported\n    };\n    const clientDataJSON = JSON.stringify(collectedClientData);\n    const clientDataJSONBytes = Utils.fromByteStringToArray(clientDataJSON);\n    const clientDataHash = await crypto.subtle.digest({ name: \"SHA-256\" }, clientDataJSONBytes);\n    const getAssertionParams = mapToGetAssertionParams({ params, clientDataHash });\n\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n\n    const timeout = setAbortTimeout(abortController, params.userVerification, params.timeout);\n\n    let getAssertionResult;\n    try {\n      getAssertionResult = await this.authenticator.getAssertion(\n        getAssertionParams,\n        tab,\n        abortController,\n      );\n    } catch (error) {\n      if (\n        abortController.signal.aborted &&\n        abortController.signal.reason === UserRequestedFallbackAbortReason\n      ) {\n        this.logService?.info(`[Fido2Client] Aborting because user requested fallback`);\n        throw new FallbackRequestedError();\n      }\n\n      if (\n        error instanceof Fido2AuthenticatorError &&\n        error.errorCode === Fido2AuthenticatorErrorCode.InvalidState\n      ) {\n        this.logService?.warning(`[Fido2Client] Unknown error: ${error}`);\n        throw new DOMException(\"Unknown error occured.\", \"InvalidStateError\");\n      }\n\n      this.logService?.info(`[Fido2Client] Aborted by user: ${error}`);\n      throw new DOMException(\n        \"The operation either timed out or was not allowed.\",\n        \"NotAllowedError\",\n      );\n    }\n\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n    clearTimeout(timeout);\n\n    return {\n      authenticatorData: Fido2Utils.bufferToString(getAssertionResult.authenticatorData),\n      clientDataJSON: Fido2Utils.bufferToString(clientDataJSONBytes),\n      credentialId: Fido2Utils.bufferToString(getAssertionResult.selectedCredential.id),\n      userHandle:\n        getAssertionResult.selectedCredential.userHandle !== undefined\n          ? Fido2Utils.bufferToString(getAssertionResult.selectedCredential.userHandle)\n          : undefined,\n      signature: Fido2Utils.bufferToString(getAssertionResult.signature),\n    };\n  }\n}\n\nconst TIMEOUTS = {\n  NO_VERIFICATION: {\n    DEFAULT: 120000,\n    MIN: 30000,\n    MAX: 180000,\n  },\n  WITH_VERIFICATION: {\n    DEFAULT: 300000,\n    MIN: 30000,\n    MAX: 600000,\n  },\n};\n\nfunction setAbortTimeout(\n  abortController: AbortController,\n  userVerification?: UserVerification,\n  timeout?: number,\n): number {\n  let clampedTimeout: number;\n\n  if (userVerification === \"required\") {\n    timeout = timeout ?? TIMEOUTS.WITH_VERIFICATION.DEFAULT;\n    clampedTimeout = Math.max(\n      TIMEOUTS.WITH_VERIFICATION.MIN,\n      Math.min(timeout, TIMEOUTS.WITH_VERIFICATION.MAX),\n    );\n  } else {\n    timeout = timeout ?? TIMEOUTS.NO_VERIFICATION.DEFAULT;\n    clampedTimeout = Math.max(\n      TIMEOUTS.NO_VERIFICATION.MIN,\n      Math.min(timeout, TIMEOUTS.NO_VERIFICATION.MAX),\n    );\n  }\n\n  return window.setTimeout(() => abortController.abort(), clampedTimeout);\n}\n\n/**\n * Convert data gathered by the WebAuthn Client to a format that can be used by the authenticator.\n */\nfunction mapToMakeCredentialParams({\n  params,\n  credTypesAndPubKeyAlgs,\n  clientDataHash,\n}: {\n  params: CreateCredentialParams;\n  credTypesAndPubKeyAlgs: PublicKeyCredentialParam[];\n  clientDataHash: ArrayBuffer;\n}): Fido2AuthenticatorMakeCredentialsParams {\n  const excludeCredentialDescriptorList: PublicKeyCredentialDescriptor[] =\n    params.excludeCredentials?.map((credential) => ({\n      id: Fido2Utils.stringToBuffer(credential.id),\n      transports: credential.transports,\n      type: credential.type,\n    })) ?? [];\n\n  const requireResidentKey =\n    params.authenticatorSelection?.residentKey === \"required\" ||\n    params.authenticatorSelection?.residentKey === \"preferred\" ||\n    (params.authenticatorSelection?.residentKey === undefined &&\n      params.authenticatorSelection?.requireResidentKey === true);\n\n  const requireUserVerification =\n    params.authenticatorSelection?.userVerification === \"required\" ||\n    params.authenticatorSelection?.userVerification === \"preferred\" ||\n    params.authenticatorSelection?.userVerification === undefined;\n\n  return {\n    requireResidentKey,\n    requireUserVerification,\n    enterpriseAttestationPossible: params.attestation === \"enterprise\",\n    excludeCredentialDescriptorList,\n    credTypesAndPubKeyAlgs,\n    hash: clientDataHash,\n    rpEntity: {\n      id: params.rp.id,\n      name: params.rp.name,\n    },\n    userEntity: {\n      id: Fido2Utils.stringToBuffer(params.user.id),\n      displayName: params.user.displayName,\n      name: params.user.name,\n    },\n    fallbackSupported: params.fallbackSupported,\n  };\n}\n\n/**\n * Convert data gathered by the WebAuthn Client to a format that can be used by the authenticator.\n */\nfunction mapToGetAssertionParams({\n  params,\n  clientDataHash,\n}: {\n  params: AssertCredentialParams;\n  clientDataHash: ArrayBuffer;\n}): Fido2AuthenticatorGetAssertionParams {\n  const allowCredentialDescriptorList: PublicKeyCredentialDescriptor[] =\n    params.allowedCredentialIds.map((id) => ({\n      id: Fido2Utils.stringToBuffer(id),\n      type: \"public-key\",\n    }));\n\n  const requireUserVerification =\n    params.userVerification === \"required\" ||\n    params.userVerification === \"preferred\" ||\n    params.userVerification === undefined;\n\n  return {\n    rpId: params.rpId,\n    requireUserVerification,\n    hash: clientDataHash,\n    allowCredentialDescriptorList,\n    extensions: {},\n    fallbackSupported: params.fallbackSupported,\n  };\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { ErrorResponse } from \"../../../models/response/error.response\";\nimport {\n  FileUploadApiMethods,\n  FileUploadService,\n} from \"../../../platform/abstractions/file-upload/file-upload.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncArrayBuffer } from \"../../../platform/models/domain/enc-array-buffer\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { CipherFileUploadService as CipherFileUploadServiceAbstraction } from \"../../abstractions/file-upload/cipher-file-upload.service\";\nimport { Cipher } from \"../../models/domain/cipher\";\nimport { AttachmentRequest } from \"../../models/request/attachment.request\";\nimport { AttachmentUploadDataResponse } from \"../../models/response/attachment-upload-data.response\";\nimport { CipherResponse } from \"../../models/response/cipher.response\";\n\nexport class CipherFileUploadService implements CipherFileUploadServiceAbstraction {\n  constructor(\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n  ) {}\n\n  async upload(\n    cipher: Cipher,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    admin: boolean,\n    dataEncKey: [SymmetricCryptoKey, EncString],\n  ): Promise<CipherResponse> {\n    const request: AttachmentRequest = {\n      key: dataEncKey[1].encryptedString,\n      fileName: encFileName.encryptedString,\n      fileSize: encData.buffer.byteLength,\n      adminRequest: admin,\n    };\n\n    let response: CipherResponse;\n    try {\n      const uploadDataResponse = await this.apiService.postCipherAttachment(cipher.id, request);\n      response = admin ? uploadDataResponse.cipherMiniResponse : uploadDataResponse.cipherResponse;\n      await this.fileUploadService.upload(\n        uploadDataResponse,\n        encFileName,\n        encData,\n        this.generateMethods(uploadDataResponse, response, request.adminRequest),\n      );\n    } catch (e) {\n      if (\n        (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) ||\n        (e as ErrorResponse).statusCode === 405\n      ) {\n        response = await this.legacyServerAttachmentFileUpload(\n          request.adminRequest,\n          cipher.id,\n          encFileName,\n          encData,\n          dataEncKey[1],\n        );\n      } else if (e instanceof ErrorResponse) {\n        throw new Error((e as ErrorResponse).getSingleMessage());\n      } else {\n        throw e;\n      }\n    }\n    return response;\n  }\n\n  private generateMethods(\n    uploadData: AttachmentUploadDataResponse,\n    response: CipherResponse,\n    isAdmin: boolean,\n  ): FileUploadApiMethods {\n    return {\n      postDirect: this.generatePostDirectCallback(uploadData, isAdmin),\n      renewFileUploadUrl: this.generateRenewFileUploadUrlCallback(uploadData, response, isAdmin),\n      rollback: this.generateRollbackCallback(response, uploadData, isAdmin),\n    };\n  }\n\n  private generatePostDirectCallback(uploadData: AttachmentUploadDataResponse, isAdmin: boolean) {\n    return (data: FormData) => {\n      const response = isAdmin ? uploadData.cipherMiniResponse : uploadData.cipherResponse;\n      return this.apiService.postAttachmentFile(response.id, uploadData.attachmentId, data);\n    };\n  }\n\n  private generateRenewFileUploadUrlCallback(\n    uploadData: AttachmentUploadDataResponse,\n    response: CipherResponse,\n    isAdmin: boolean,\n  ) {\n    return async () => {\n      const renewResponse = await this.apiService.renewAttachmentUploadUrl(\n        response.id,\n        uploadData.attachmentId,\n      );\n      return renewResponse?.url;\n    };\n  }\n\n  private generateRollbackCallback(\n    response: CipherResponse,\n    uploadData: AttachmentUploadDataResponse,\n    isAdmin: boolean,\n  ) {\n    return () => {\n      if (isAdmin) {\n        return this.apiService.deleteCipherAttachmentAdmin(response.id, uploadData.attachmentId);\n      } else {\n        return this.apiService.deleteCipherAttachment(response.id, uploadData.attachmentId);\n      }\n    };\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerAttachmentFileUpload(\n    admin: boolean,\n    cipherId: string,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    key: EncString,\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", key.encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", key.encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any,\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    let response: CipherResponse;\n    try {\n      if (admin) {\n        response = await this.apiService.postCipherAttachmentAdminLegacy(cipherId, fd);\n      } else {\n        response = await this.apiService.postCipherAttachmentLegacy(cipherId, fd);\n      }\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n\n    return response;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { FolderResponse } from \"../response/folder.response\";\n\nexport class FolderData {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: Partial<FolderResponse>) {\n    this.name = response?.name;\n    this.id = response?.id;\n    this.revisionDate = response?.revisionDate;\n  }\n\n  static fromJSON(obj: Jsonify<FolderData>) {\n    return Object.assign(new FolderData({}), obj);\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nexport class FolderRequest {\n  name: string;\n\n  constructor(folder: Folder) {\n    this.name = folder.name ? folder.name.encryptedString : null;\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { FolderApiServiceAbstraction } from \"../../../vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"../../../vault/abstractions/folder/folder.service.abstraction\";\nimport { FolderData } from \"../../../vault/models/data/folder.data\";\nimport { Folder } from \"../../../vault/models/domain/folder\";\nimport { FolderRequest } from \"../../../vault/models/request/folder.request\";\nimport { FolderResponse } from \"../../../vault/models/response/folder.response\";\n\nexport class FolderApiService implements FolderApiServiceAbstraction {\n  constructor(\n    private folderService: InternalFolderService,\n    private apiService: ApiService,\n  ) {}\n\n  async save(folder: Folder): Promise<any> {\n    const request = new FolderRequest(folder);\n\n    let response: FolderResponse;\n    if (folder.id == null) {\n      response = await this.postFolder(request);\n      folder.id = response.id;\n    } else {\n      response = await this.putFolder(folder.id, request);\n    }\n\n    const data = new FolderData(response);\n    await this.folderService.upsert(data);\n  }\n\n  async delete(id: string): Promise<any> {\n    await this.deleteFolder(id);\n    await this.folderService.delete(id);\n  }\n\n  async get(id: string): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"GET\", \"/folders/\" + id, null, true, true);\n    return new FolderResponse(r);\n  }\n\n  private async postFolder(request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"POST\", \"/folders\", request, true, true);\n    return new FolderResponse(r);\n  }\n\n  async putFolder(id: string, request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"PUT\", \"/folders/\" + id, request, true, true);\n    return new FolderResponse(r);\n  }\n\n  private deleteFolder(id: string): Promise<any> {\n    return this.apiService.send(\"DELETE\", \"/folders/\" + id, null, true, false);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { Folder } from \"../domain/folder\";\nimport { ITreeNodeObject } from \"../domain/tree-node\";\n\nexport class FolderView implements View, ITreeNodeObject {\n  id: string = null;\n  name: string = null;\n  revisionDate: Date = null;\n\n  constructor(f?: Folder) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.revisionDate = f.revisionDate;\n  }\n\n  static fromJSON(obj: Jsonify<FolderView>) {\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    return Object.assign(new FolderView(), obj, { revisionDate });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { FolderData } from \"../data/folder.data\";\nimport { FolderView } from \"../view/folder.view\";\n\nexport class Folder extends Domain {\n  id: string;\n  name: EncString;\n  revisionDate: Date;\n\n  constructor(obj?: FolderData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        name: null,\n      },\n      [\"id\"],\n    );\n\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n  }\n\n  decrypt(): Promise<FolderView> {\n    return this.decryptObj(\n      new FolderView(this),\n      {\n        name: null,\n      },\n      null,\n    );\n  }\n\n  static fromJSON(obj: Jsonify<Folder>) {\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    return Object.assign(new Folder(), obj, { name: EncString.fromJSON(obj.name), revisionDate });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { DeriveDefinition, FOLDER_DISK, KeyDefinition } from \"../../../platform/state\";\nimport { FolderService } from \"../../abstractions/folder/folder.service.abstraction\";\nimport { FolderData } from \"../../models/data/folder.data\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { FolderView } from \"../../models/view/folder.view\";\n\nexport const FOLDER_ENCRYPTED_FOLDERS = KeyDefinition.record<FolderData>(FOLDER_DISK, \"folders\", {\n  deserializer: (obj: Jsonify<FolderData>) => FolderData.fromJSON(obj),\n});\n\nexport const FOLDER_DECRYPTED_FOLDERS = DeriveDefinition.from<\n  Record<string, FolderData>,\n  FolderView[],\n  { folderService: FolderService; cryptoService: CryptoService }\n>(FOLDER_ENCRYPTED_FOLDERS, {\n  deserializer: (obj) => obj.map((f) => FolderView.fromJSON(f)),\n  derive: async (from, { folderService, cryptoService }) => {\n    const folders = Object.values(from || {}).map((f) => new Folder(f));\n\n    if (await cryptoService.hasUserKey()) {\n      return await folderService.decryptFolders(folders);\n    } else {\n      return [];\n    }\n  },\n});\n","import { Observable, firstValueFrom, map } from \"rxjs\";\n\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { ActiveUserState, DerivedState, StateProvider } from \"../../../platform/state\";\nimport { UserId } from \"../../../types/guid\";\nimport { CipherService } from \"../../../vault/abstractions/cipher.service\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"../../../vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherData } from \"../../../vault/models/data/cipher.data\";\nimport { FolderData } from \"../../../vault/models/data/folder.data\";\nimport { Folder } from \"../../../vault/models/domain/folder\";\nimport { FolderView } from \"../../../vault/models/view/folder.view\";\nimport { FOLDER_DECRYPTED_FOLDERS, FOLDER_ENCRYPTED_FOLDERS } from \"../key-state/folder.state\";\n\nexport class FolderService implements InternalFolderServiceAbstraction {\n  folders$: Observable<Folder[]>;\n  folderViews$: Observable<FolderView[]>;\n\n  private encryptedFoldersState: ActiveUserState<Record<string, FolderData>>;\n  private decryptedFoldersState: DerivedState<FolderView[]>;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private stateProvider: StateProvider,\n  ) {\n    this.encryptedFoldersState = this.stateProvider.getActive(FOLDER_ENCRYPTED_FOLDERS);\n    this.decryptedFoldersState = this.stateProvider.getDerived(\n      this.encryptedFoldersState.state$,\n      FOLDER_DECRYPTED_FOLDERS,\n      { folderService: this, cryptoService: this.cryptoService },\n    );\n\n    this.folders$ = this.encryptedFoldersState.state$.pipe(\n      map((folderData) => Object.values(folderData).map((f) => new Folder(f))),\n    );\n\n    this.folderViews$ = this.decryptedFoldersState.state$;\n  }\n\n  async clearCache(): Promise<void> {\n    await this.decryptedFoldersState.forceValue([]);\n  }\n\n  // TODO: This should be moved to EncryptService or something\n  async encrypt(model: FolderView, key?: SymmetricCryptoKey): Promise<Folder> {\n    const folder = new Folder();\n    folder.id = model.id;\n    folder.name = await this.cryptoService.encrypt(model.name, key);\n    return folder;\n  }\n\n  async get(id: string): Promise<Folder> {\n    const folders = await firstValueFrom(this.folders$);\n\n    return folders.find((folder) => folder.id === id);\n  }\n\n  async getAllFromState(): Promise<Folder[]> {\n    return await firstValueFrom(this.folders$);\n  }\n\n  /**\n   * @deprecated For the CLI only\n   * @param id id of the folder\n   */\n  async getFromState(id: string): Promise<Folder> {\n    const folder = await this.get(id);\n    if (!folder) {\n      return null;\n    }\n\n    return folder;\n  }\n\n  /**\n   * @deprecated Only use in CLI!\n   */\n  async getAllDecryptedFromState(): Promise<FolderView[]> {\n    return await firstValueFrom(this.folderViews$);\n  }\n\n  async upsert(folderData: FolderData | FolderData[]): Promise<void> {\n    await this.encryptedFoldersState.update((folders) => {\n      if (folders == null) {\n        folders = {};\n      }\n\n      if (folderData instanceof FolderData) {\n        const f = folderData as FolderData;\n        folders[f.id] = f;\n      } else {\n        (folderData as FolderData[]).forEach((f) => {\n          folders[f.id] = f;\n        });\n      }\n\n      return folders;\n    });\n  }\n\n  async replace(folders: { [id: string]: FolderData }): Promise<void> {\n    if (!folders) {\n      return;\n    }\n\n    await this.encryptedFoldersState.update(() => {\n      const newFolders: Record<string, FolderData> = { ...folders };\n      return newFolders;\n    });\n  }\n\n  async clear(userId?: UserId): Promise<void> {\n    if (userId == null) {\n      await this.encryptedFoldersState.update(() => ({}));\n      await this.decryptedFoldersState.forceValue([]);\n    } else {\n      await this.stateProvider.getUser(userId, FOLDER_ENCRYPTED_FOLDERS).update(() => ({}));\n    }\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    await this.encryptedFoldersState.update((folders) => {\n      if (folders == null) {\n        return;\n      }\n\n      if (typeof id === \"string\") {\n        if (folders[id] == null) {\n          return;\n        }\n        delete folders[id];\n      } else {\n        (id as string[]).forEach((i) => {\n          delete folders[i];\n        });\n      }\n      return folders;\n    });\n\n    // Items in a deleted folder are re-assigned to \"No Folder\"\n    const ciphers = await this.stateService.getEncryptedCiphers();\n    if (ciphers != null) {\n      const updates: CipherData[] = [];\n      for (const cId in ciphers) {\n        if (ciphers[cId].folderId === id) {\n          ciphers[cId].folderId = null;\n          updates.push(ciphers[cId]);\n        }\n      }\n      if (updates.length > 0) {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.cipherService.upsert(updates);\n      }\n    }\n  }\n\n  async decryptFolders(folders: Folder[]) {\n    const decryptFolderPromises = folders.map((f) => f.decrypt());\n    const decryptedFolders = await Promise.all(decryptFolderPromises);\n\n    decryptedFolders.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    const noneFolder = new FolderView();\n    noneFolder.name = this.i18nService.t(\"noneFolder\");\n    decryptedFolders.push(noneFolder);\n    return decryptedFolders;\n  }\n}\n","import { Subject } from \"rxjs\";\n\nimport { SyncNotifierService as SyncNotifierServiceAbstraction } from \"../../abstractions/sync/sync-notifier.service.abstraction\";\nimport { SyncEventArgs } from \"../../types/sync-event-args\";\n\n/**\n * This class should most likely have 0 dependencies because it will hopefully\n * be rolled into SyncService once upon a time.\n */\nexport class SyncNotifierService implements SyncNotifierServiceAbstraction {\n  private _sync = new Subject<SyncEventArgs>();\n\n  sync$ = this._sync.asObservable();\n\n  next(event: SyncEventArgs): void {\n    this._sync.next(event);\n  }\n}\n","import { ProviderUserStatusType, ProviderUserType } from \"../../enums\";\nimport { ProfileProviderResponse } from \"../response/profile-provider.response\";\n\nexport class ProviderData {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n\n  constructor(response: ProfileProviderResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.userId = response.userId;\n    this.useEvents = response.useEvents;\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { UserDecryptionOptionsServiceAbstraction } from \"@bitwarden/auth/common\";\n\nimport { ApiService } from \"../../../abstractions/api.service\";\nimport { InternalOrganizationServiceAbstraction } from \"../../../admin-console/abstractions/organization/organization.service.abstraction\";\nimport { InternalPolicyService } from \"../../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { ProviderService } from \"../../../admin-console/abstractions/provider.service\";\nimport { OrganizationUserType } from \"../../../admin-console/enums\";\nimport { OrganizationData } from \"../../../admin-console/models/data/organization.data\";\nimport { PolicyData } from \"../../../admin-console/models/data/policy.data\";\nimport { ProviderData } from \"../../../admin-console/models/data/provider.data\";\nimport { PolicyResponse } from \"../../../admin-console/models/response/policy.response\";\nimport { AvatarService } from \"../../../auth/abstractions/avatar.service\";\nimport { KeyConnectorService } from \"../../../auth/abstractions/key-connector.service\";\nimport { ForceSetPasswordReason } from \"../../../auth/models/domain/force-set-password-reason\";\nimport { DomainSettingsService } from \"../../../autofill/services/domain-settings.service\";\nimport { BillingAccountProfileStateService } from \"../../../billing/abstractions/account/billing-account-profile-state.service\";\nimport { DomainsResponse } from \"../../../models/response/domains.response\";\nimport {\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../../../models/response/notification.response\";\nimport { ProfileResponse } from \"../../../models/response/profile.response\";\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { LogService } from \"../../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../../platform/abstractions/messaging.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { sequentialize } from \"../../../platform/misc/sequentialize\";\nimport { SendData } from \"../../../tools/send/models/data/send.data\";\nimport { SendResponse } from \"../../../tools/send/models/response/send.response\";\nimport { SendApiService } from \"../../../tools/send/services/send-api.service.abstraction\";\nimport { InternalSendService } from \"../../../tools/send/services/send.service.abstraction\";\nimport { UserId } from \"../../../types/guid\";\nimport { CipherService } from \"../../../vault/abstractions/cipher.service\";\nimport { FolderApiServiceAbstraction } from \"../../../vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"../../../vault/abstractions/folder/folder.service.abstraction\";\nimport { SyncService as SyncServiceAbstraction } from \"../../../vault/abstractions/sync/sync.service.abstraction\";\nimport { CipherData } from \"../../../vault/models/data/cipher.data\";\nimport { FolderData } from \"../../../vault/models/data/folder.data\";\nimport { CipherResponse } from \"../../../vault/models/response/cipher.response\";\nimport { FolderResponse } from \"../../../vault/models/response/folder.response\";\nimport { CollectionService } from \"../../abstractions/collection.service\";\nimport { CollectionData } from \"../../models/data/collection.data\";\nimport { CollectionDetailsResponse } from \"../../models/response/collection.response\";\n\nexport class SyncService implements SyncServiceAbstraction {\n  syncInProgress = false;\n\n  constructor(\n    private apiService: ApiService,\n    private domainSettingsService: DomainSettingsService,\n    private folderService: InternalFolderService,\n    private cipherService: CipherService,\n    private cryptoService: CryptoService,\n    private collectionService: CollectionService,\n    private messagingService: MessagingService,\n    private policyService: InternalPolicyService,\n    private sendService: InternalSendService,\n    private logService: LogService,\n    private keyConnectorService: KeyConnectorService,\n    private stateService: StateService,\n    private providerService: ProviderService,\n    private folderApiService: FolderApiServiceAbstraction,\n    private organizationService: InternalOrganizationServiceAbstraction,\n    private sendApiService: SendApiService,\n    private userDecryptionOptionsService: UserDecryptionOptionsServiceAbstraction,\n    private avatarService: AvatarService,\n    private logoutCallback: (expired: boolean) => Promise<void>,\n    private billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {}\n\n  async getLastSync(): Promise<Date> {\n    if ((await this.stateService.getUserId()) == null) {\n      return null;\n    }\n\n    const lastSync = await this.stateService.getLastSync();\n    if (lastSync) {\n      return new Date(lastSync);\n    }\n\n    return null;\n  }\n\n  async setLastSync(date: Date, userId?: string): Promise<any> {\n    await this.stateService.setLastSync(date.toJSON(), { userId: userId });\n  }\n\n  @sequentialize(() => \"fullSync\")\n  async fullSync(forceSync: boolean, allowThrowOnError = false): Promise<boolean> {\n    this.syncStarted();\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    if (!isAuthenticated) {\n      return this.syncCompleted(false);\n    }\n\n    const now = new Date();\n    let needsSync = false;\n    try {\n      needsSync = await this.needsSyncing(forceSync);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      }\n    }\n\n    if (!needsSync) {\n      await this.setLastSync(now);\n      return this.syncCompleted(false);\n    }\n\n    try {\n      await this.apiService.refreshIdentityToken();\n      const response = await this.apiService.getSync();\n\n      await this.syncProfile(response.profile);\n      await this.syncFolders(response.folders);\n      await this.syncCollections(response.collections);\n      await this.syncCiphers(response.ciphers);\n      await this.syncSends(response.sends);\n      await this.syncSettings(response.domains);\n      await this.syncPolicies(response.policies);\n\n      await this.setLastSync(now);\n      return this.syncCompleted(true);\n    } catch (e) {\n      if (allowThrowOnError) {\n        throw e;\n      } else {\n        return this.syncCompleted(false);\n      }\n    }\n  }\n\n  async syncUpsertFolder(notification: SyncFolderNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localFolder = await this.folderService.get(notification.id);\n        if (\n          (!isEdit && localFolder == null) ||\n          (isEdit && localFolder != null && localFolder.revisionDate < notification.revisionDate)\n        ) {\n          const remoteFolder = await this.folderApiService.get(notification.id);\n          if (remoteFolder != null) {\n            await this.folderService.upsert(new FolderData(remoteFolder));\n            this.messagingService.send(\"syncedUpsertedFolder\", { folderId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteFolder(notification: SyncFolderNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.folderService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedFolder\", { folderId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertCipher(notification: SyncCipherNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        let shouldUpdate = true;\n        const localCipher = await this.cipherService.get(notification.id);\n        if (localCipher != null && localCipher.revisionDate >= notification.revisionDate) {\n          shouldUpdate = false;\n        }\n\n        let checkCollections = false;\n        if (shouldUpdate) {\n          if (isEdit) {\n            shouldUpdate = localCipher != null;\n            checkCollections = true;\n          } else {\n            if (notification.collectionIds == null || notification.organizationId == null) {\n              shouldUpdate = localCipher == null;\n            } else {\n              shouldUpdate = false;\n              checkCollections = true;\n            }\n          }\n        }\n\n        if (\n          !shouldUpdate &&\n          checkCollections &&\n          notification.organizationId != null &&\n          notification.collectionIds != null &&\n          notification.collectionIds.length > 0\n        ) {\n          const collections = await this.collectionService.getAll();\n          if (collections != null) {\n            for (let i = 0; i < collections.length; i++) {\n              if (notification.collectionIds.indexOf(collections[i].id) > -1) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (shouldUpdate) {\n          const remoteCipher = await this.apiService.getFullCipherDetails(notification.id);\n          if (remoteCipher != null) {\n            await this.cipherService.upsert(new CipherData(remoteCipher));\n            this.messagingService.send(\"syncedUpsertedCipher\", { cipherId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        if (e != null && e.statusCode === 404 && isEdit) {\n          await this.cipherService.delete(notification.id);\n          this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n          return this.syncCompleted(true);\n        }\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteCipher(notification: SyncCipherNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.cipherService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n      return this.syncCompleted(true);\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertSend(notification: SyncSendNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localSend = this.sendService.get(notification.id);\n        if (\n          (!isEdit && localSend == null) ||\n          (isEdit && localSend != null && localSend.revisionDate < notification.revisionDate)\n        ) {\n          const remoteSend = await this.sendApiService.getSend(notification.id);\n          if (remoteSend != null) {\n            await this.sendService.upsert(new SendData(remoteSend));\n            this.messagingService.send(\"syncedUpsertedSend\", { sendId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteSend(notification: SyncSendNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.sendService.delete(notification.id);\n      this.messagingService.send(\"syncedDeletedSend\", { sendId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  // Helpers\n\n  private syncStarted() {\n    this.syncInProgress = true;\n    this.messagingService.send(\"syncStarted\");\n  }\n\n  private syncCompleted(successfully: boolean): boolean {\n    this.syncInProgress = false;\n    this.messagingService.send(\"syncCompleted\", { successfully: successfully });\n    return successfully;\n  }\n\n  private async needsSyncing(forceSync: boolean) {\n    if (forceSync) {\n      return true;\n    }\n\n    const lastSync = await this.getLastSync();\n    if (lastSync == null || lastSync.getTime() === 0) {\n      return true;\n    }\n\n    const response = await this.apiService.getAccountRevisionDate();\n    if (new Date(response) <= lastSync) {\n      return false;\n    }\n    return true;\n  }\n\n  private async syncProfile(response: ProfileResponse) {\n    const stamp = await this.stateService.getSecurityStamp();\n    if (stamp != null && stamp !== response.securityStamp) {\n      if (this.logoutCallback != null) {\n        await this.logoutCallback(true);\n      }\n\n      throw new Error(\"Stamp has changed\");\n    }\n\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key);\n    await this.cryptoService.setPrivateKey(response.privateKey);\n    await this.cryptoService.setProviderKeys(response.providers);\n    await this.cryptoService.setOrgKeys(response.organizations, response.providerOrganizations);\n    await this.avatarService.setSyncAvatarColor(response.id as UserId, response.avatarColor);\n    await this.stateService.setSecurityStamp(response.securityStamp);\n    await this.stateService.setEmailVerified(response.emailVerified);\n\n    await this.billingAccountProfileStateService.setHasPremium(\n      response.premiumPersonally,\n      response.premiumFromOrganization,\n    );\n    await this.keyConnectorService.setUsesKeyConnector(response.usesKeyConnector);\n\n    await this.setForceSetPasswordReasonIfNeeded(response);\n\n    const providers: { [id: string]: ProviderData } = {};\n    response.providers.forEach((p) => {\n      providers[p.id] = new ProviderData(p);\n    });\n\n    await this.providerService.save(providers);\n\n    await this.syncProfileOrganizations(response);\n\n    if (await this.keyConnectorService.userNeedsMigration()) {\n      await this.keyConnectorService.setConvertAccountRequired(true);\n      this.messagingService.send(\"convertAccountToKeyConnector\");\n    } else {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.keyConnectorService.removeConvertAccountRequired();\n    }\n  }\n\n  private async setForceSetPasswordReasonIfNeeded(profileResponse: ProfileResponse) {\n    // The `forcePasswordReset` flag indicates an admin has reset the user's password and must be updated\n    if (profileResponse.forcePasswordReset) {\n      await this.stateService.setForceSetPasswordReason(\n        ForceSetPasswordReason.AdminForcePasswordReset,\n      );\n    }\n\n    const userDecryptionOptions = await firstValueFrom(\n      this.userDecryptionOptionsService.userDecryptionOptions$,\n    );\n\n    if (userDecryptionOptions === null || userDecryptionOptions === undefined) {\n      this.logService.error(\"Sync: Account decryption options are null or undefined.\");\n    }\n\n    // Even though TDE users should only be in a single org (per single org policy), check\n    // through all orgs for the manageResetPassword permission. If they have it in any org,\n    // they should be forced to set a password.\n    let hasManageResetPasswordPermission = false;\n    for (const org of profileResponse.organizations) {\n      const isAdmin = org.type === OrganizationUserType.Admin;\n      const isOwner = org.type === OrganizationUserType.Owner;\n\n      // Note: apparently permissions only come down populated for custom roles.\n      if (isAdmin || isOwner || (org.permissions && org.permissions.manageResetPassword)) {\n        hasManageResetPasswordPermission = true;\n        break;\n      }\n    }\n\n    if (\n      userDecryptionOptions.trustedDeviceOption !== undefined &&\n      !userDecryptionOptions.hasMasterPassword &&\n      hasManageResetPasswordPermission\n    ) {\n      // TDE user w/out MP went from having no password reset permission to having it.\n      // Must set the force password reset reason so the auth guard will redirect to the set password page.\n      await this.stateService.setForceSetPasswordReason(\n        ForceSetPasswordReason.TdeUserWithoutPasswordHasPasswordResetPermission,\n      );\n    }\n  }\n\n  private async syncProfileOrganizations(response: ProfileResponse) {\n    const organizations: { [id: string]: OrganizationData } = {};\n    response.organizations.forEach((o) => {\n      organizations[o.id] = new OrganizationData(o, {\n        isMember: true,\n        isProviderUser: false,\n      });\n    });\n\n    response.providerOrganizations.forEach((o) => {\n      if (organizations[o.id] == null) {\n        organizations[o.id] = new OrganizationData(o, {\n          isMember: false,\n          isProviderUser: true,\n        });\n      } else {\n        organizations[o.id].isProviderUser = true;\n      }\n    });\n\n    await this.organizationService.replace(organizations);\n  }\n\n  private async syncFolders(response: FolderResponse[]) {\n    const folders: { [id: string]: FolderData } = {};\n    response.forEach((f) => {\n      folders[f.id] = new FolderData(f);\n    });\n    return await this.folderService.replace(folders);\n  }\n\n  private async syncCollections(response: CollectionDetailsResponse[]) {\n    const collections: { [id: string]: CollectionData } = {};\n    response.forEach((c) => {\n      collections[c.id] = new CollectionData(c);\n    });\n    return await this.collectionService.replace(collections);\n  }\n\n  private async syncCiphers(response: CipherResponse[]) {\n    const ciphers: { [id: string]: CipherData } = {};\n    response.forEach((c) => {\n      ciphers[c.id] = new CipherData(c);\n    });\n    return await this.cipherService.replace(ciphers);\n  }\n\n  private async syncSends(response: SendResponse[]) {\n    const sends: { [id: string]: SendData } = {};\n    response.forEach((s) => {\n      sends[s.id] = new SendData(s);\n    });\n    return await this.sendService.replace(sends);\n  }\n\n  private async syncSettings(response: DomainsResponse) {\n    let eqDomains: string[][] = [];\n    if (response != null && response.equivalentDomains != null) {\n      eqDomains = eqDomains.concat(response.equivalentDomains);\n    }\n\n    if (response != null && response.globalEquivalentDomains != null) {\n      response.globalEquivalentDomains.forEach((global) => {\n        if (global.domains.length > 0) {\n          eqDomains.push(global.domains);\n        }\n      });\n    }\n\n    return this.domainSettingsService.setEquivalentDomains(eqDomains);\n  }\n\n  private async syncPolicies(response: PolicyResponse[]) {\n    const policies: { [id: string]: PolicyData } = {};\n    if (response != null) {\n      response.forEach((p) => {\n        policies[p.id] = new PolicyData(p);\n      });\n    }\n    return await this.policyService.replace(policies);\n  }\n}\n","import { CryptoFunctionService } from \"../../platform/abstractions/crypto-function.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { TotpService as TotpServiceAbstraction } from \"../abstractions/totp.service\";\n\nconst B32Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst SteamChars = \"23456789BCDFGHJKMNPQRTVWXY\";\n\nexport class TotpService implements TotpServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService,\n  ) {}\n\n  async getCode(key: string): Promise<string> {\n    if (key == null) {\n      return null;\n    }\n    let period = 30;\n    let alg: \"sha1\" | \"sha256\" | \"sha512\" = \"sha1\";\n    let digits = 6;\n    let keyB32 = key;\n    const isOtpAuth = key.toLowerCase().indexOf(\"otpauth://\") === 0;\n    const isSteamAuth = !isOtpAuth && key.toLowerCase().indexOf(\"steam://\") === 0;\n    if (isOtpAuth) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"digits\") && params.get(\"digits\") != null) {\n        try {\n          const digitParams = parseInt(params.get(\"digits\").trim(), null);\n          if (digitParams > 10) {\n            digits = 10;\n          } else if (digitParams > 0) {\n            digits = digitParams;\n          }\n        } catch {\n          this.logService.error(\"Invalid digits param.\");\n        }\n      }\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          const periodParam = parseInt(params.get(\"period\").trim(), null);\n          if (periodParam > 0) {\n            period = periodParam;\n          }\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n      if (params.has(\"secret\") && params.get(\"secret\") != null) {\n        keyB32 = params.get(\"secret\");\n      }\n      if (params.has(\"algorithm\") && params.get(\"algorithm\") != null) {\n        const algParam = params.get(\"algorithm\").toLowerCase();\n        if (algParam === \"sha1\" || algParam === \"sha256\" || algParam === \"sha512\") {\n          alg = algParam;\n        }\n      }\n    } else if (isSteamAuth) {\n      keyB32 = key.substr(\"steam://\".length);\n      digits = 5;\n    }\n\n    const epoch = Math.round(new Date().getTime() / 1000.0);\n    const timeHex = this.leftPad(this.decToHex(Math.floor(epoch / period)), 16, \"0\");\n    const timeBytes = Utils.fromHexToArray(timeHex);\n    const keyBytes = this.b32ToBytes(keyB32);\n\n    if (!keyBytes.length || !timeBytes.length) {\n      return null;\n    }\n\n    const hash = await this.sign(keyBytes, timeBytes, alg);\n    if (hash.length === 0) {\n      return null;\n    }\n\n    const offset = hash[hash.length - 1] & 0xf;\n    const binary =\n      ((hash[offset] & 0x7f) << 24) |\n      ((hash[offset + 1] & 0xff) << 16) |\n      ((hash[offset + 2] & 0xff) << 8) |\n      (hash[offset + 3] & 0xff);\n\n    let otp = \"\";\n    if (isSteamAuth) {\n      let fullCode = binary & 0x7fffffff;\n      for (let i = 0; i < digits; i++) {\n        otp += SteamChars[fullCode % SteamChars.length];\n        fullCode = Math.trunc(fullCode / SteamChars.length);\n      }\n    } else {\n      otp = (binary % Math.pow(10, digits)).toString();\n      otp = this.leftPad(otp, digits, \"0\");\n    }\n\n    return otp;\n  }\n\n  getTimeInterval(key: string): number {\n    let period = 30;\n    if (key != null && key.toLowerCase().indexOf(\"otpauth://\") === 0) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          period = parseInt(params.get(\"period\").trim(), null);\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n    }\n    return period;\n  }\n\n  // Helpers\n\n  private leftPad(s: string, l: number, p: string): string {\n    if (l + 1 >= s.length) {\n      s = Array(l + 1 - s.length).join(p) + s;\n    }\n    return s;\n  }\n\n  private decToHex(d: number): string {\n    return (d < 15.5 ? \"0\" : \"\") + Math.round(d).toString(16);\n  }\n\n  private b32ToHex(s: string): string {\n    s = s.toUpperCase();\n    let cleanedInput = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n      if (B32Chars.indexOf(s[i]) < 0) {\n        continue;\n      }\n\n      cleanedInput += s[i];\n    }\n    s = cleanedInput;\n\n    let bits = \"\";\n    let hex = \"\";\n    for (let i = 0; i < s.length; i++) {\n      const byteIndex = B32Chars.indexOf(s.charAt(i));\n      if (byteIndex < 0) {\n        continue;\n      }\n      bits += this.leftPad(byteIndex.toString(2), 5, \"0\");\n    }\n    for (let i = 0; i + 4 <= bits.length; i += 4) {\n      const chunk = bits.substr(i, 4);\n      hex = hex + parseInt(chunk, 2).toString(16);\n    }\n    return hex;\n  }\n\n  private b32ToBytes(s: string): Uint8Array {\n    return Utils.fromHexToArray(this.b32ToHex(s));\n  }\n\n  private async sign(\n    keyBytes: Uint8Array,\n    timeBytes: Uint8Array,\n    alg: \"sha1\" | \"sha256\" | \"sha512\",\n  ) {\n    const signature = await this.cryptoFunctionService.hmac(timeBytes, keyBytes, alg);\n    return new Uint8Array(signature);\n  }\n}\n","import { VAULT_SETTINGS_DISK, KeyDefinition } from \"../../../platform/state\";\n\nexport const USER_ENABLE_PASSKEYS = new KeyDefinition<boolean>(\n  VAULT_SETTINGS_DISK,\n  \"enablePasskeys\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\nexport const SHOW_CARDS_CURRENT_TAB = new KeyDefinition<boolean>(\n  VAULT_SETTINGS_DISK,\n  \"showCardsCurrentTab\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\nexport const SHOW_IDENTITIES_CURRENT_TAB = new KeyDefinition<boolean>(\n  VAULT_SETTINGS_DISK,\n  \"showIdentitiesCurrentTab\",\n  { deserializer: (obj) => obj },\n);\n","import { Observable, map } from \"rxjs\";\n\nimport { ActiveUserState, GlobalState, StateProvider } from \"../../../platform/state\";\nimport { VaultSettingsService as VaultSettingsServiceAbstraction } from \"../../abstractions/vault-settings/vault-settings.service\";\nimport {\n  SHOW_CARDS_CURRENT_TAB,\n  SHOW_IDENTITIES_CURRENT_TAB,\n  USER_ENABLE_PASSKEYS,\n} from \"../key-state/vault-settings.state\";\n\n/**\n * {@link VaultSettingsServiceAbstraction}\n */\nexport class VaultSettingsService implements VaultSettingsServiceAbstraction {\n  private enablePasskeysState: GlobalState<boolean> =\n    this.stateProvider.getGlobal(USER_ENABLE_PASSKEYS);\n  /**\n   * {@link VaultSettingsServiceAbstraction.enablePasskeys$}\n   */\n  readonly enablePasskeys$: Observable<boolean> = this.enablePasskeysState.state$.pipe(\n    map((x) => x ?? true),\n  );\n\n  private showCardsCurrentTabState: ActiveUserState<boolean> =\n    this.stateProvider.getActive(SHOW_CARDS_CURRENT_TAB);\n  /**\n   * {@link VaultSettingsServiceAbstraction.showCardsCurrentTab$}\n   */\n  readonly showCardsCurrentTab$: Observable<boolean> = this.showCardsCurrentTabState.state$.pipe(\n    map((x) => x ?? true),\n  );\n\n  private showIdentitiesCurrentTabState: ActiveUserState<boolean> = this.stateProvider.getActive(\n    SHOW_IDENTITIES_CURRENT_TAB,\n  );\n  /**\n   * {@link VaultSettingsServiceAbstraction.showIdentitiesCurrentTab$}\n   */\n  readonly showIdentitiesCurrentTab$: Observable<boolean> =\n    this.showIdentitiesCurrentTabState.state$.pipe(map((x) => x ?? true));\n\n  constructor(private stateProvider: StateProvider) {}\n\n  /**\n   * {@link VaultSettingsServiceAbstraction.setShowCardsCurrentTab}\n   */\n  async setShowCardsCurrentTab(value: boolean): Promise<void> {\n    await this.showCardsCurrentTabState.update(() => value);\n  }\n\n  /**\n   * {@link VaultSettingsServiceAbstraction.setDontShowIdentitiesCurrentTab}\n   */\n  async setShowIdentitiesCurrentTab(value: boolean): Promise<void> {\n    await this.showIdentitiesCurrentTabState.update(() => value);\n  }\n\n  /**\n   * {@link VaultSettingsServiceAbstraction.setEnablePasskeys}\n   */\n  async setEnablePasskeys(value: boolean): Promise<void> {\n    await this.enablePasskeysState.update(() => value);\n  }\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest,\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false,\n    );\n  }\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"../../vault/models/request/collection-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { SelectionReadOnlyRequest } from \"../../../admin-console/models/request/selection-read-only.request\";\nimport { Collection } from \"../domain/collection\";\n\nexport class CollectionRequest {\n  name: string;\n  externalId: string;\n  groups: SelectionReadOnlyRequest[] = [];\n  users: SelectionReadOnlyRequest[] = [];\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    this.name = collection.name ? collection.name.encryptedString : null;\n    this.externalId = collection.externalId;\n  }\n}\n","import { Collection } from \"../domain/collection\";\n\nimport { CollectionRequest } from \"./collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nimport { FolderRequest } from \"./folder.request\";\n\nexport class FolderWithIdRequest extends FolderRequest {\n  id: string;\n\n  constructor(folder: Folder) {\n    super(folder);\n    this.id = folder.id;\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    // Ensure there are no external entity elements in the XML to prevent against XXE attacks.\n    if (!this.validateNoExternalEntities(data)) {\n      return null;\n    }\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options,\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (this.isNullOrWhitespace(expiration)) {\n      return false;\n    }\n\n    expiration = expiration.replace(/\\s/g, \"\");\n\n    const monthRegex = \"0?(?<month>[1-9]|1[0-2])\";\n    const yearRegex = \"(?<year>(?:[1-2][0-9])?[0-9]{2})\";\n    const expiryRegex = new RegExp(`^${monthRegex}/${yearRegex}$`);\n\n    const expiryMatch = expiration.match(expiryRegex);\n\n    if (!expiryMatch) {\n      return false;\n    }\n\n    cipher.card.expMonth = expiryMatch.groups.month;\n    const year: string = expiryMatch.groups.year;\n    cipher.card.expYear = year.length === 2 ? \"20\" + year : year;\n    return true;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n    if (cipher.passwordHistory != null && cipher.passwordHistory.length === 0) {\n      cipher.passwordHistory = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text,\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(\n    result: ImportResult,\n    folderName: string,\n    addRelationship: boolean = true,\n  ) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    //Some folders can have sub-folders but no ciphers directly, we should not add to the folderRelationships array\n    if (addRelationship) {\n      result.folderRelationships.push([result.ciphers.length, folderIndex]);\n    }\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n\n  private validateNoExternalEntities(data: string): boolean {\n    const regex = new RegExp(\"<!ENTITY\", \"i\");\n    const hasExternalEntities = regex.test(data);\n    return !hasExternalEntities;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\"),\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10,\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Card as CardDomain } from \"../../vault/models/domain/card\";\nimport { CardView } from \"../../vault/models/view/card.view\";\n\nexport class CardExport {\n  static template(): CardExport {\n    const req = new CardExport();\n    req.cardholderName = \"John Doe\";\n    req.brand = \"visa\";\n    req.number = \"4242424242424242\";\n    req.expMonth = \"04\";\n    req.expYear = \"2023\";\n    req.code = \"123\";\n    return req;\n  }\n\n  static toView(req: CardExport, view = new CardView()) {\n    view.cardholderName = req.cardholderName;\n    view.brand = req.brand;\n    view.number = req.number;\n    view.expMonth = req.expMonth;\n    view.expYear = req.expYear;\n    view.code = req.code;\n    return view;\n  }\n\n  static toDomain(req: CardExport, domain = new CardDomain()) {\n    domain.cardholderName = req.cardholderName != null ? new EncString(req.cardholderName) : null;\n    domain.brand = req.brand != null ? new EncString(req.brand) : null;\n    domain.number = req.number != null ? new EncString(req.number) : null;\n    domain.expMonth = req.expMonth != null ? new EncString(req.expMonth) : null;\n    domain.expYear = req.expYear != null ? new EncString(req.expYear) : null;\n    domain.code = req.code != null ? new EncString(req.code) : null;\n    return domain;\n  }\n\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(o?: CardView | CardDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof CardView) {\n      this.cardholderName = o.cardholderName;\n      this.brand = o.brand;\n      this.number = o.number;\n      this.expMonth = o.expMonth;\n      this.expYear = o.expYear;\n      this.code = o.code;\n    } else {\n      this.cardholderName = o.cardholderName?.encryptedString;\n      this.brand = o.brand?.encryptedString;\n      this.number = o.number?.encryptedString;\n      this.expMonth = o.expMonth?.encryptedString;\n      this.expYear = o.expYear?.encryptedString;\n      this.code = o.code?.encryptedString;\n    }\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { FieldType, LinkedIdType } from \"../../vault/enums\";\nimport { Field as FieldDomain } from \"../../vault/models/domain/field\";\nimport { FieldView } from \"../../vault/models/view/field.view\";\n\nexport class FieldExport {\n  static template(): FieldExport {\n    const req = new FieldExport();\n    req.name = \"Field name\";\n    req.value = \"Some value\";\n    req.type = FieldType.Text;\n    return req;\n  }\n\n  static toView(req: FieldExport, view = new FieldView()) {\n    view.type = req.type;\n    view.value = req.value;\n    view.name = req.name;\n    view.linkedId = req.linkedId;\n    return view;\n  }\n\n  static toDomain(req: FieldExport, domain = new FieldDomain()) {\n    domain.type = req.type;\n    domain.value = req.value != null ? new EncString(req.value) : null;\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.linkedId = req.linkedId;\n    return domain;\n  }\n\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(o?: FieldView | FieldDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof FieldView) {\n      this.name = o.name;\n      this.value = o.value;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.value = o.value?.encryptedString;\n    }\n    this.type = o.type;\n    this.linkedId = o.linkedId;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Identity as IdentityDomain } from \"../../vault/models/domain/identity\";\nimport { IdentityView } from \"../../vault/models/view/identity.view\";\n\nexport class IdentityExport {\n  static template(): IdentityExport {\n    const req = new IdentityExport();\n    req.title = \"Mr\";\n    req.firstName = \"John\";\n    req.middleName = \"William\";\n    req.lastName = \"Doe\";\n    req.address1 = \"123 Any St\";\n    req.address2 = \"Apt #123\";\n    req.address3 = null;\n    req.city = \"New York\";\n    req.state = \"NY\";\n    req.postalCode = \"10001\";\n    req.country = \"US\";\n    req.company = \"Acme Inc.\";\n    req.email = \"john@company.com\";\n    req.phone = \"5555551234\";\n    req.ssn = \"000-123-4567\";\n    req.username = \"jdoe\";\n    req.passportNumber = \"US-123456789\";\n    req.licenseNumber = \"D123-12-123-12333\";\n    return req;\n  }\n\n  static toView(req: IdentityExport, view = new IdentityView()) {\n    view.title = req.title;\n    view.firstName = req.firstName;\n    view.middleName = req.middleName;\n    view.lastName = req.lastName;\n    view.address1 = req.address1;\n    view.address2 = req.address2;\n    view.address3 = req.address3;\n    view.city = req.city;\n    view.state = req.state;\n    view.postalCode = req.postalCode;\n    view.country = req.country;\n    view.company = req.company;\n    view.email = req.email;\n    view.phone = req.phone;\n    view.ssn = req.ssn;\n    view.username = req.username;\n    view.passportNumber = req.passportNumber;\n    view.licenseNumber = req.licenseNumber;\n    return view;\n  }\n\n  static toDomain(req: IdentityExport, domain = new IdentityDomain()) {\n    domain.title = req.title != null ? new EncString(req.title) : null;\n    domain.firstName = req.firstName != null ? new EncString(req.firstName) : null;\n    domain.middleName = req.middleName != null ? new EncString(req.middleName) : null;\n    domain.lastName = req.lastName != null ? new EncString(req.lastName) : null;\n    domain.address1 = req.address1 != null ? new EncString(req.address1) : null;\n    domain.address2 = req.address2 != null ? new EncString(req.address2) : null;\n    domain.address3 = req.address3 != null ? new EncString(req.address3) : null;\n    domain.city = req.city != null ? new EncString(req.city) : null;\n    domain.state = req.state != null ? new EncString(req.state) : null;\n    domain.postalCode = req.postalCode != null ? new EncString(req.postalCode) : null;\n    domain.country = req.country != null ? new EncString(req.country) : null;\n    domain.company = req.company != null ? new EncString(req.company) : null;\n    domain.email = req.email != null ? new EncString(req.email) : null;\n    domain.phone = req.phone != null ? new EncString(req.phone) : null;\n    domain.ssn = req.ssn != null ? new EncString(req.ssn) : null;\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.passportNumber = req.passportNumber != null ? new EncString(req.passportNumber) : null;\n    domain.licenseNumber = req.licenseNumber != null ? new EncString(req.licenseNumber) : null;\n    return domain;\n  }\n\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(o?: IdentityView | IdentityDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof IdentityView) {\n      this.title = o.title;\n      this.firstName = o.firstName;\n      this.middleName = o.middleName;\n      this.lastName = o.lastName;\n      this.address1 = o.address1;\n      this.address2 = o.address2;\n      this.address3 = o.address3;\n      this.city = o.city;\n      this.state = o.state;\n      this.postalCode = o.postalCode;\n      this.country = o.country;\n      this.company = o.company;\n      this.email = o.email;\n      this.phone = o.phone;\n      this.ssn = o.ssn;\n      this.username = o.username;\n      this.passportNumber = o.passportNumber;\n      this.licenseNumber = o.licenseNumber;\n    } else {\n      this.title = o.title?.encryptedString;\n      this.firstName = o.firstName?.encryptedString;\n      this.middleName = o.middleName?.encryptedString;\n      this.lastName = o.lastName?.encryptedString;\n      this.address1 = o.address1?.encryptedString;\n      this.address2 = o.address2?.encryptedString;\n      this.address3 = o.address3?.encryptedString;\n      this.city = o.city?.encryptedString;\n      this.state = o.state?.encryptedString;\n      this.postalCode = o.postalCode?.encryptedString;\n      this.country = o.country?.encryptedString;\n      this.company = o.company?.encryptedString;\n      this.email = o.email?.encryptedString;\n      this.phone = o.phone?.encryptedString;\n      this.ssn = o.ssn?.encryptedString;\n      this.username = o.username?.encryptedString;\n      this.passportNumber = o.passportNumber?.encryptedString;\n      this.licenseNumber = o.licenseNumber?.encryptedString;\n    }\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Fido2Credential } from \"../../vault/models/domain/fido2-credential\";\nimport { Fido2CredentialView } from \"../../vault/models/view/fido2-credential.view\";\n\n/**\n * Represents format of Fido2 Credentials in JSON exports.\n */\nexport class Fido2CredentialExport {\n  /**\n   * Generates a template for Fido2CredentialExport\n   * @returns Instance of Fido2CredentialExport with predefined values.\n   */\n  static template(): Fido2CredentialExport {\n    const req = new Fido2CredentialExport();\n    req.credentialId = \"keyId\";\n    req.keyType = \"keyType\";\n    req.keyAlgorithm = \"keyAlgorithm\";\n    req.keyCurve = \"keyCurve\";\n    req.keyValue = \"keyValue\";\n    req.rpId = \"rpId\";\n    req.userHandle = \"userHandle\";\n    req.userName = \"userName\";\n    req.counter = \"counter\";\n    req.rpName = \"rpName\";\n    req.userDisplayName = \"userDisplayName\";\n    req.discoverable = \"false\";\n    req.creationDate = null;\n    return req;\n  }\n\n  /**\n   * Converts a Fido2CredentialExport object to its view representation.\n   * @param req - The Fido2CredentialExport object to be converted.\n   * @param view - (Optional) The Fido2CredentialView object to popualte with Fido2CredentialExport data\n   * @returns Fido2CredentialView - The populated view, or a new instance if none was provided.\n   */\n  static toView(req: Fido2CredentialExport, view = new Fido2CredentialView()) {\n    view.credentialId = req.credentialId;\n    view.keyType = req.keyType as \"public-key\";\n    view.keyAlgorithm = req.keyAlgorithm as \"ECDSA\";\n    view.keyCurve = req.keyCurve as \"P-256\";\n    view.keyValue = req.keyValue;\n    view.rpId = req.rpId;\n    view.userHandle = req.userHandle;\n    view.userName = req.userName;\n    view.counter = parseInt(req.counter);\n    view.rpName = req.rpName;\n    view.userDisplayName = req.userDisplayName;\n    view.discoverable = req.discoverable === \"true\";\n    view.creationDate = new Date(req.creationDate);\n    return view;\n  }\n\n  /**\n   * Converts a Fido2CredentialExport object to its domain representation.\n   * @param req - The Fido2CredentialExport object to be converted.\n   * @param domain - (Optional) The Fido2Credential object to popualte with Fido2CredentialExport data\n   * @returns Fido2Credential - The populated domain, or a new instance if none was provided.\n   */\n  static toDomain(req: Fido2CredentialExport, domain = new Fido2Credential()) {\n    domain.credentialId = req.credentialId != null ? new EncString(req.credentialId) : null;\n    domain.keyType = req.keyType != null ? new EncString(req.keyType) : null;\n    domain.keyAlgorithm = req.keyAlgorithm != null ? new EncString(req.keyAlgorithm) : null;\n    domain.keyCurve = req.keyCurve != null ? new EncString(req.keyCurve) : null;\n    domain.keyValue = req.keyValue != null ? new EncString(req.keyValue) : null;\n    domain.rpId = req.rpId != null ? new EncString(req.rpId) : null;\n    domain.userHandle = req.userHandle != null ? new EncString(req.userHandle) : null;\n    domain.userName = req.userName != null ? new EncString(req.userName) : null;\n    domain.counter = req.counter != null ? new EncString(req.counter) : null;\n    domain.rpName = req.rpName != null ? new EncString(req.rpName) : null;\n    domain.userDisplayName =\n      req.userDisplayName != null ? new EncString(req.userDisplayName) : null;\n    domain.discoverable = req.discoverable != null ? new EncString(req.discoverable) : null;\n    domain.creationDate = req.creationDate;\n    return domain;\n  }\n\n  credentialId: string;\n  keyType: string;\n  keyAlgorithm: string;\n  keyCurve: string;\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  userName: string;\n  counter: string;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: string;\n  creationDate: Date;\n\n  /**\n   * Constructs a new Fid2CredentialExport instance.\n   *\n   * @param o - The credential storing the data being exported. When not provided, an empty export is created instead.\n   */\n  constructor(o?: Fido2CredentialView | Fido2Credential) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof Fido2CredentialView) {\n      this.credentialId = o.credentialId;\n      this.keyType = o.keyType;\n      this.keyAlgorithm = o.keyAlgorithm;\n      this.keyCurve = o.keyCurve;\n      this.keyValue = o.keyValue;\n      this.rpId = o.rpId;\n      this.userHandle = o.userHandle;\n      this.userName = o.userName;\n      this.counter = String(o.counter);\n      this.rpName = o.rpName;\n      this.userDisplayName = o.userDisplayName;\n      this.discoverable = String(o.discoverable);\n    } else {\n      this.credentialId = o.credentialId?.encryptedString;\n      this.keyType = o.keyType?.encryptedString;\n      this.keyAlgorithm = o.keyAlgorithm?.encryptedString;\n      this.keyCurve = o.keyCurve?.encryptedString;\n      this.keyValue = o.keyValue?.encryptedString;\n      this.rpId = o.rpId?.encryptedString;\n      this.userHandle = o.userHandle?.encryptedString;\n      this.userName = o.userName?.encryptedString;\n      this.counter = o.counter?.encryptedString;\n      this.rpName = o.rpName?.encryptedString;\n      this.userDisplayName = o.userDisplayName?.encryptedString;\n      this.discoverable = o.discoverable?.encryptedString;\n    }\n    this.creationDate = o.creationDate;\n  }\n}\n","import { UriMatchStrategySetting } from \"../../models/domain/domain-service\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport { LoginUri as LoginUriDomain } from \"../../vault/models/domain/login-uri\";\nimport { LoginUriView } from \"../../vault/models/view/login-uri.view\";\n\nexport class LoginUriExport {\n  static template(): LoginUriExport {\n    const req = new LoginUriExport();\n    req.uri = \"https://google.com\";\n    req.match = null;\n    return req;\n  }\n\n  static toView(req: LoginUriExport, view = new LoginUriView()) {\n    view.uri = req.uri;\n    view.match = req.match;\n    return view;\n  }\n\n  static toDomain(req: LoginUriExport, domain = new LoginUriDomain()) {\n    domain.uri = req.uri != null ? new EncString(req.uri) : null;\n    domain.uriChecksum = req.uriChecksum != null ? new EncString(req.uriChecksum) : null;\n    domain.match = req.match;\n    return domain;\n  }\n\n  uri: string;\n  uriChecksum: string | undefined;\n  match: UriMatchStrategySetting = null;\n\n  constructor(o?: LoginUriView | LoginUriDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof LoginUriView) {\n      this.uri = o.uri;\n    } else {\n      this.uri = o.uri?.encryptedString;\n      this.uriChecksum = o.uriChecksum?.encryptedString;\n    }\n    this.match = o.match;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Login as LoginDomain } from \"../../vault/models/domain/login\";\nimport { LoginView } from \"../../vault/models/view/login.view\";\n\nimport { Fido2CredentialExport } from \"./fido2-credential.export\";\nimport { LoginUriExport } from \"./login-uri.export\";\n\nexport class LoginExport {\n  static template(): LoginExport {\n    const req = new LoginExport();\n    req.uris = [];\n    req.username = \"jdoe\";\n    req.password = \"myp@ssword123\";\n    req.totp = \"JBSWY3DPEHPK3PXP\";\n    req.fido2Credentials = [Fido2CredentialExport.template()];\n    return req;\n  }\n\n  static toView(req: LoginExport, view = new LoginView()) {\n    if (req.uris != null) {\n      view.uris = req.uris.map((u) => LoginUriExport.toView(u));\n    }\n    view.username = req.username;\n    view.password = req.password;\n    view.totp = req.totp;\n    if (req.fido2Credentials != null) {\n      view.fido2Credentials = req.fido2Credentials.map((key) => Fido2CredentialExport.toView(key));\n    }\n    return view;\n  }\n\n  static toDomain(req: LoginExport, domain = new LoginDomain()) {\n    if (req.uris != null) {\n      domain.uris = req.uris.map((u) => LoginUriExport.toDomain(u));\n    }\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.totp = req.totp != null ? new EncString(req.totp) : null;\n    // Fido2credentials are currently not supported for exports.\n\n    return domain;\n  }\n\n  uris: LoginUriExport[];\n  username: string;\n  password: string;\n  totp: string;\n  fido2Credentials: Fido2CredentialExport[] = [];\n\n  constructor(o?: LoginView | LoginDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o.uris != null) {\n      if (o instanceof LoginView) {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      } else {\n        this.uris = o.uris.map((u) => new LoginUriExport(u));\n      }\n    }\n\n    if (o.fido2Credentials != null) {\n      this.fido2Credentials = o.fido2Credentials.map((key) => new Fido2CredentialExport(key));\n    }\n\n    if (o instanceof LoginView) {\n      this.username = o.username;\n      this.password = o.password;\n      this.totp = o.totp;\n    } else {\n      this.username = o.username?.encryptedString;\n      this.password = o.password?.encryptedString;\n      this.totp = o.totp?.encryptedString;\n    }\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Password } from \"../../vault/models/domain/password\";\nimport { PasswordHistoryView } from \"../../vault/models/view/password-history.view\";\n\nexport class PasswordHistoryExport {\n  static template(): PasswordHistoryExport {\n    const req = new PasswordHistoryExport();\n    req.password = null;\n    req.lastUsedDate = null;\n    return req;\n  }\n\n  static toView(req: PasswordHistoryExport, view = new PasswordHistoryView()) {\n    view.password = req.password;\n    view.lastUsedDate = req.lastUsedDate;\n    return view;\n  }\n\n  static toDomain(req: PasswordHistoryExport, domain = new Password()) {\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.lastUsedDate = req.lastUsedDate;\n    return domain;\n  }\n\n  password: string;\n  lastUsedDate: Date = null;\n\n  constructor(o?: PasswordHistoryView | Password) {\n    if (o == null) {\n      return;\n    }\n\n    if (o instanceof PasswordHistoryView) {\n      this.password = o.password;\n    } else {\n      this.password = o.password?.encryptedString;\n    }\n    this.lastUsedDate = o.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../vault/enums\";\nimport { SecureNote as SecureNoteDomain } from \"../../vault/models/domain/secure-note\";\nimport { SecureNoteView } from \"../../vault/models/view/secure-note.view\";\n\nexport class SecureNoteExport {\n  static template(): SecureNoteExport {\n    const req = new SecureNoteExport();\n    req.type = SecureNoteType.Generic;\n    return req;\n  }\n\n  static toView(req: SecureNoteExport, view = new SecureNoteView()) {\n    view.type = req.type;\n    return view;\n  }\n\n  static toDomain(req: SecureNoteExport, view = new SecureNoteDomain()) {\n    view.type = req.type;\n    return view;\n  }\n\n  type: SecureNoteType;\n\n  constructor(o?: SecureNoteView | SecureNoteDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.type = o.type;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { CipherRepromptType } from \"../../vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { Cipher as CipherDomain } from \"../../vault/models/domain/cipher\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\n\nimport { CardExport } from \"./card.export\";\nimport { FieldExport } from \"./field.export\";\nimport { IdentityExport } from \"./identity.export\";\nimport { LoginExport } from \"./login.export\";\nimport { PasswordHistoryExport } from \"./password-history.export\";\nimport { SecureNoteExport } from \"./secure-note.export\";\n\nexport class CipherExport {\n  static template(): CipherExport {\n    const req = new CipherExport();\n    req.organizationId = null;\n    req.collectionIds = null;\n    req.folderId = null;\n    req.type = CipherType.Login;\n    req.name = \"Item name\";\n    req.notes = \"Some notes about this item.\";\n    req.favorite = false;\n    req.fields = [];\n    req.login = null;\n    req.secureNote = null;\n    req.card = null;\n    req.identity = null;\n    req.reprompt = CipherRepromptType.None;\n    req.passwordHistory = [];\n    req.creationDate = null;\n    req.revisionDate = null;\n    req.deletedDate = null;\n    return req;\n  }\n\n  static toView(req: CipherExport, view = new CipherView()) {\n    view.type = req.type;\n    view.folderId = req.folderId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    if (view.collectionIds || req.collectionIds) {\n      const set = new Set((view.collectionIds ?? []).concat(req.collectionIds ?? []));\n      view.collectionIds = Array.from(set.values());\n    }\n    view.name = req.name;\n    view.notes = req.notes;\n    view.favorite = req.favorite;\n    view.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      view.fields = req.fields.map((f) => FieldExport.toView(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        view.login = LoginExport.toView(req.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteExport.toView(req.secureNote);\n        break;\n      case CipherType.Card:\n        view.card = CardExport.toView(req.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityExport.toView(req.identity);\n        break;\n    }\n\n    if (req.passwordHistory != null) {\n      view.passwordHistory = req.passwordHistory.map((ph) => PasswordHistoryExport.toView(ph));\n    }\n\n    view.creationDate = req.creationDate;\n    view.revisionDate = req.revisionDate;\n    view.deletedDate = req.deletedDate;\n    return view;\n  }\n\n  static toDomain(req: CipherExport, domain = new CipherDomain()) {\n    domain.type = req.type;\n    domain.folderId = req.folderId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.notes = req.notes != null ? new EncString(req.notes) : null;\n    domain.favorite = req.favorite;\n    domain.reprompt = req.reprompt ?? CipherRepromptType.None;\n    domain.key = req.key != null ? new EncString(req.key) : null;\n\n    if (req.fields != null) {\n      domain.fields = req.fields.map((f) => FieldExport.toDomain(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        domain.login = LoginExport.toDomain(req.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNoteExport.toDomain(req.secureNote);\n        break;\n      case CipherType.Card:\n        domain.card = CardExport.toDomain(req.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = IdentityExport.toDomain(req.identity);\n        break;\n    }\n\n    if (req.passwordHistory != null) {\n      domain.passwordHistory = req.passwordHistory.map((ph) => PasswordHistoryExport.toDomain(ph));\n    }\n\n    domain.creationDate = req.creationDate;\n    domain.revisionDate = req.revisionDate;\n    domain.deletedDate = req.deletedDate;\n    return domain;\n  }\n\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  collectionIds: string[];\n  name: string;\n  notes: string;\n  favorite: boolean;\n  fields: FieldExport[];\n  login: LoginExport;\n  secureNote: SecureNoteExport;\n  card: CardExport;\n  identity: IdentityExport;\n  reprompt: CipherRepromptType;\n  passwordHistory: PasswordHistoryExport[] = null;\n  revisionDate: Date = null;\n  creationDate: Date = null;\n  deletedDate: Date = null;\n  key: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.organizationId = o.organizationId;\n    this.folderId = o.folderId;\n    this.type = o.type;\n    this.reprompt = o.reprompt;\n\n    if (o instanceof CipherView) {\n      this.name = o.name;\n      this.notes = o.notes;\n    } else {\n      this.name = o.name?.encryptedString;\n      this.notes = o.notes?.encryptedString;\n      this.key = o.key?.encryptedString;\n    }\n\n    this.favorite = o.favorite;\n\n    if (o.fields != null) {\n      if (o instanceof CipherView) {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      } else {\n        this.fields = o.fields.map((f) => new FieldExport(f));\n      }\n    }\n\n    switch (o.type) {\n      case CipherType.Login:\n        this.login = new LoginExport(o.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteExport(o.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardExport(o.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityExport(o.identity);\n        break;\n    }\n\n    if (o.passwordHistory != null) {\n      if (o instanceof CipherView) {\n        this.passwordHistory = o.passwordHistory.map((ph) => new PasswordHistoryExport(ph));\n      } else {\n        this.passwordHistory = o.passwordHistory.map((ph) => new PasswordHistoryExport(ph));\n      }\n    }\n\n    this.creationDate = o.creationDate;\n    this.revisionDate = o.revisionDate;\n    this.deletedDate = o.deletedDate;\n  }\n}\n","import { Cipher as CipherDomain } from \"../../vault/models/domain/cipher\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\n\nimport { CipherExport } from \"./cipher.export\";\n\nexport class CipherWithIdExport extends CipherExport {\n  id: string;\n  collectionIds: string[];\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.id = o.id;\n    super.build(o);\n    this.collectionIds = o.collectionIds;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Collection as CollectionDomain } from \"../../vault/models/domain/collection\";\nimport { CollectionView } from \"../../vault/models/view/collection.view\";\n\nexport class CollectionExport {\n  static template(): CollectionExport {\n    const req = new CollectionExport();\n    req.organizationId = \"00000000-0000-0000-0000-000000000000\";\n    req.name = \"Collection name\";\n    req.externalId = null;\n    return req;\n  }\n\n  static toView(req: CollectionExport, view = new CollectionView()) {\n    view.name = req.name;\n    view.externalId = req.externalId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    return view;\n  }\n\n  static toDomain(req: CollectionExport, domain = new CollectionDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.externalId = req.externalId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    return domain;\n  }\n\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.organizationId = o.organizationId;\n    if (o instanceof CollectionView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n    this.externalId = o.externalId;\n  }\n}\n","import { Collection as CollectionDomain } from \"../../vault/models/domain/collection\";\nimport { CollectionView } from \"../../vault/models/view/collection.view\";\n\nimport { CollectionExport } from \"./collection.export\";\n\nexport class CollectionWithIdExport extends CollectionExport {\n  id: string;\n\n  static toView(req: CollectionWithIdExport, view = new CollectionView()) {\n    view.id = req.id;\n    return super.toView(req, view);\n  }\n\n  static toDomain(req: CollectionWithIdExport, domain = new CollectionDomain()) {\n    domain.id = req.id;\n    return super.toDomain(req, domain);\n  }\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Folder as FolderDomain } from \"../../vault/models/domain/folder\";\nimport { FolderView } from \"../../vault/models/view/folder.view\";\n\nexport class FolderExport {\n  static template(): FolderExport {\n    const req = new FolderExport();\n    req.name = \"Folder name\";\n    return req;\n  }\n\n  static toView(req: FolderExport, view = new FolderView()) {\n    view.name = req.name;\n    return view;\n  }\n\n  static toDomain(req: FolderExport, domain = new FolderDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    return domain;\n  }\n\n  name: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    if (o instanceof FolderView) {\n      this.name = o.name;\n    } else {\n      this.name = o.name?.encryptedString;\n    }\n  }\n}\n","import { Folder as FolderDomain } from \"../../vault/models/domain/folder\";\nimport { FolderView } from \"../../vault/models/view/folder.view\";\n\nimport { FolderExport } from \"./folder.export\";\n\nexport class FolderWithIdExport extends FolderExport {\n  id: string;\n\n  static toView(req: FolderWithIdExport, view = new FolderView()) {\n    view.id = req.id;\n    return super.toView(req, view);\n  }\n\n  static toDomain(req: FolderWithIdExport, domain = new FolderDomain()) {\n    domain.id = req.id;\n    return super.toDomain(req, domain);\n  }\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","import {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport {\n  BitwardenEncryptedIndividualJsonExport,\n  BitwardenEncryptedOrgJsonExport,\n  BitwardenJsonExport,\n  BitwardenUnEncryptedIndividualJsonExport,\n  BitwardenUnEncryptedOrgJsonExport,\n} from \"@bitwarden/vault-export-core\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected cipherService: CipherService,\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results: BitwardenJsonExport = JSON.parse(data);\n    if (results == null || results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (results.encrypted) {\n      await this.parseEncrypted(results as any);\n    } else {\n      await this.parseDecrypted(results as any);\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted(\n    results: BitwardenEncryptedIndividualJsonExport | BitwardenEncryptedOrgJsonExport,\n  ) {\n    if (results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey,\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = this.organization\n      ? await this.parseCollections(results as BitwardenEncryptedOrgJsonExport)\n      : await this.parseFolders(results as BitwardenEncryptedIndividualJsonExport);\n\n    for (const c of results.items) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt(\n        await this.cipherService.getKeyForCipherKeyDecryption(cipher),\n      );\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private async parseDecrypted(\n    results: BitwardenUnEncryptedIndividualJsonExport | BitwardenUnEncryptedOrgJsonExport,\n  ) {\n    const groupingsMap = this.organization\n      ? await this.parseCollections(results as BitwardenUnEncryptedOrgJsonExport)\n      : await this.parseFolders(results as BitwardenUnEncryptedIndividualJsonExport);\n\n    results.items.forEach((c) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n\n  private async parseFolders(\n    data: BitwardenUnEncryptedIndividualJsonExport | BitwardenEncryptedIndividualJsonExport,\n  ): Promise<Map<string, number>> | null {\n    if (data.folders == null) {\n      return null;\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    for (const f of data.folders) {\n      let folderView: FolderView;\n      if (data.encrypted) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          folderView = await folder.decrypt();\n        }\n      } else {\n        folderView = FolderWithIdExport.toView(f);\n      }\n\n      if (folderView != null) {\n        groupingsMap.set(f.id, this.result.folders.length);\n        this.result.folders.push(folderView);\n      }\n    }\n    return groupingsMap;\n  }\n\n  private async parseCollections(\n    data: BitwardenUnEncryptedOrgJsonExport | BitwardenEncryptedOrgJsonExport,\n  ): Promise<Map<string, number>> | null {\n    if (data.collections == null) {\n      return null;\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    for (const c of data.collections) {\n      let collectionView: CollectionView;\n      if (data.encrypted) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        collection.organizationId = this.organizationId;\n        collectionView = await collection.decrypt();\n      } else {\n        collectionView = CollectionWithIdExport.toView(c);\n        collectionView.organizationId = null;\n      }\n\n      if (collectionView != null) {\n        groupingsMap.set(c.id, this.result.collections.length);\n        this.result.collections.push(collectionView);\n      }\n    }\n    return groupingsMap;\n  }\n}\n","import { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { KdfType } from \"@bitwarden/common/platform/enums\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { BitwardenPasswordProtectedFileFormat } from \"@bitwarden/vault-export-core\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\n\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    cipherService: CipherService,\n    private promptForPassword_callback: () => Promise<string>,\n  ) {\n    super(cryptoService, i18nService, cipherService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string,\n  ): Promise<boolean> {\n    if (this.isNullOrWhitespace(password)) {\n      return false;\n    }\n\n    this.key = await this.cryptoService.makePinKey(\n      password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism),\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key,\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\"),\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColumns = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentityColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColumns);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentityColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin),\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text,\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text,\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text,\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text,\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>,\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/vault/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = CardView.getCardBrandByPatterns(card.number);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"]),\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"]),\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ]),\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","import { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string,\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"TEL\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher, section.title);\n    });\n  }\n\n  private parseSectionFields(\n    category: CategoryEnum,\n    fields: FieldsEntity[],\n    cipher: CipherView,\n    sectionTitle: string,\n  ) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.title, sectionTitle);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  // Use the title if available. If not use the sectionTitle if available.\n  // Default to an empty string in all other cases.\n  private getFieldName(title: string, sectionTitle?: string): string {\n    if (!this.isNullOrWhitespace(title)) {\n      return title;\n    }\n\n    if (!this.isNullOrWhitespace(sectionTitle)) {\n      return sectionTitle;\n    }\n\n    return \"\";\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string,\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(\n    public importRecord: any,\n    public property: string,\n    public cipher: CipherView,\n  ) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000,\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden,\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = CardView.getCardBrandByPatterns(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2,\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\n/** This is the importer for the xml format from pwsafe.org  */\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export type ProtonPassJsonFile = {\n  version: string;\n  userId: string;\n  encrypted: boolean;\n  vaults: Record<string, ProtonPassVault>;\n};\n\nexport type ProtonPassVault = {\n  name: string;\n  description: string;\n  display: {\n    color: number;\n    icon: number;\n  };\n  items: ProtonPassItem[];\n};\n\nexport type ProtonPassItem = {\n  itemId: string;\n  shareId: string;\n  data: ProtonPassItemData;\n  state: ProtonPassItemState;\n  aliasEmail: string | null;\n  contentFormatVersion: number;\n  createTime: number;\n  modifyTime: number;\n};\n\nexport enum ProtonPassItemState {\n  ACTIVE = 1,\n  TRASHED = 2,\n}\n\nexport type ProtonPassItemData = {\n  metadata: ProtonPassItemMetadata;\n  extraFields: ProtonPassItemExtraField[];\n  type: \"login\" | \"alias\" | \"creditCard\" | \"note\";\n  content: ProtonPassLoginItemContent | ProtonPassCreditCardItemContent;\n};\n\nexport type ProtonPassItemMetadata = {\n  name: string;\n  note: string;\n  itemUuid: string;\n};\n\nexport type ProtonPassItemExtraField = {\n  fieldName: string;\n  type: string;\n  data: ProtonPassItemExtraFieldData;\n};\n\nexport type ProtonPassItemExtraFieldData = {\n  content?: string;\n  totpUri?: string;\n};\n\nexport type ProtonPassLoginItemContent = {\n  username?: string;\n  password?: string;\n  urls?: string[];\n  totpUri?: string;\n};\n\nexport type ProtonPassCreditCardItemContent = {\n  cardholderName?: string;\n  cardType?: number;\n  number?: string;\n  verificationNumber?: string;\n  expirationDate?: string;\n  pin?: string;\n};\n","import { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  ProtonPassCreditCardItemContent,\n  ProtonPassItemState,\n  ProtonPassJsonFile,\n  ProtonPassLoginItemContent,\n} from \"./types/protonpass-json-type\";\n\nexport class ProtonPassJsonImporter extends BaseImporter implements Importer {\n  constructor(private i18nService: I18nService) {\n    super();\n  }\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: ProtonPassJsonFile = JSON.parse(data);\n    if (results == null || results.vaults == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.encrypted) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"unsupportedEncryptedImport\");\n      return Promise.resolve(result);\n    }\n\n    for (const [, vault] of Object.entries(results.vaults)) {\n      for (const item of vault.items) {\n        if (item.state == ProtonPassItemState.TRASHED) {\n          continue;\n        }\n        this.processFolder(result, vault.name);\n\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(item.data.metadata.name, \"--\");\n        cipher.notes = this.getValueOrDefault(item.data.metadata.note);\n\n        switch (item.data.type) {\n          case \"login\": {\n            const loginContent = item.data.content as ProtonPassLoginItemContent;\n            cipher.login.uris = this.makeUriArray(loginContent.urls);\n            cipher.login.username = this.getValueOrDefault(loginContent.username);\n            cipher.login.password = this.getValueOrDefault(loginContent.password);\n            cipher.login.totp = this.getValueOrDefault(loginContent.totpUri);\n            for (const extraField of item.data.extraFields) {\n              this.processKvp(\n                cipher,\n                extraField.fieldName,\n                extraField.type == \"totp\" ? extraField.data.totpUri : extraField.data.content,\n                extraField.type == \"text\" ? FieldType.Text : FieldType.Hidden,\n              );\n            }\n            break;\n          }\n          case \"note\":\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case \"creditCard\": {\n            const creditCardContent = item.data.content as ProtonPassCreditCardItemContent;\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            cipher.card.cardholderName = this.getValueOrDefault(creditCardContent.cardholderName);\n            cipher.card.number = this.getValueOrDefault(creditCardContent.number);\n            cipher.card.brand = CardView.getCardBrandByPatterns(creditCardContent.number);\n            cipher.card.code = this.getValueOrDefault(creditCardContent.verificationNumber);\n\n            if (!this.isNullOrWhitespace(creditCardContent.expirationDate)) {\n              cipher.card.expMonth = creditCardContent.expirationDate.substring(0, 2);\n              cipher.card.expMonth = cipher.card.expMonth.replace(/^0+/, \"\");\n              cipher.card.expYear = creditCardContent.expirationDate.substring(2, 6);\n            }\n\n            if (!this.isNullOrWhitespace(creditCardContent.pin)) {\n              this.processKvp(cipher, \"PIN\", creditCardContent.pin, FieldType.Hidden);\n            }\n\n            break;\n          }\n        }\n\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      }\n    }\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[], parentName?: string) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      const folderHasItems = folder.items != null && folder.items.length > 0;\n      const folderHasSubfolders = folder.folders != null && folder.folders.length > 0;\n\n      if (!folderHasItems && !folderHasSubfolders) {\n        return;\n      }\n\n      if (!Utils.isNullOrWhitespace(parentName)) {\n        folder.name = parentName + \"/\" + folder.name;\n      }\n\n      if (folderHasSubfolders) {\n        this.parseFolders(result, folder.folders, folder.name);\n      }\n\n      if (!folderHasItems) {\n        this.processFolder(result, folder.name, folderHasItems);\n      } else {\n        this.handleItemParsing(result, folder.items, folder.name);\n      }\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[], folderName?: string) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n      this.processFolder(result, folderName, true);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit?.toString(),\n      FieldType.Boolean,\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden,\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>,\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris.push(...this.makeUriArray(text));\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    // The url field can be in different case formats.\n    const urlField = Object.keys(results[0]).find((k) => /url/i.test(k));\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value[urlField]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]',\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\"),\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"])),\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux/json)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"protonpass\", name: \"ProtonPass (zip/json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe - pwsafe.org (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/vault/models/request/collection-with-id.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  ProtonPassJsonImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService,\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null,\n    selectedImportTarget: FolderView | CollectionView = null,\n    canAccessImportExport: boolean,\n  ): Promise<ImportResult> {\n    let importResult: ImportResult;\n    try {\n      importResult = await importer.parse(fileContents);\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n      throw error;\n    }\n\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    if (organizationId && !selectedImportTarget && !canAccessImportExport) {\n      const hasUnassignedCollections =\n        importResult.collectionRelationships.length < importResult.ciphers.length;\n      if (hasUnassignedCollections) {\n        throw new Error(this.i18nService.t(\"importUnassignedItemsError\"));\n      }\n    }\n\n    try {\n      await this.setImportTarget(importResult, organizationId, selectedImportTarget);\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null,\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          this.cipherService,\n          promptForPassword_callback,\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      case \"protonpass\":\n        return new ProtonPassJsonImporter(this.i18nService);\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1])),\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1])),\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n\n  private async setImportTarget(\n    importResult: ImportResult,\n    organizationId: string,\n    importTarget: FolderView | CollectionView,\n  ) {\n    if (!importTarget) {\n      return;\n    }\n\n    if (organizationId) {\n      if (!(importTarget instanceof CollectionView)) {\n        throw new Error(\"Error assigning target collection\");\n      }\n\n      const noCollectionRelationShips: [number, number][] = [];\n      importResult.ciphers.forEach((c, index) => {\n        if (\n          !Array.isArray(importResult.collectionRelationships) ||\n          !importResult.collectionRelationships.some(([cipherPos]) => cipherPos === index)\n        ) {\n          noCollectionRelationShips.push([index, 0]);\n        }\n      });\n\n      const collections: CollectionView[] = [...importResult.collections];\n      importResult.collections = [importTarget as CollectionView];\n      collections.map((x) => {\n        const f = new CollectionView();\n        f.name = `${importTarget.name}/${x.name}`;\n        importResult.collections.push(f);\n      });\n\n      const relationships: [number, number][] = [...importResult.collectionRelationships];\n      importResult.collectionRelationships = [...noCollectionRelationShips];\n      relationships.map((x) => {\n        importResult.collectionRelationships.push([x[0], x[1] + 1]);\n      });\n\n      return;\n    }\n\n    if (!(importTarget instanceof FolderView)) {\n      throw new Error(\"Error assigning target folder\");\n    }\n\n    const noFolderRelationShips: [number, number][] = [];\n    importResult.ciphers.forEach((c, index) => {\n      if (Utils.isNullOrEmpty(c.folderId)) {\n        c.folderId = importTarget.id;\n        noFolderRelationShips.push([index, 0]);\n      }\n    });\n\n    const folders: FolderView[] = [...importResult.folders];\n    importResult.folders = [importTarget as FolderView];\n    folders.map((x) => {\n      const newFolderName = `${importTarget.name}/${x.name}`;\n      const f = new FolderView();\n      f.name = newFolderName;\n      importResult.folders.push(f);\n    });\n\n    const relationships: [number, number][] = [...importResult.folderRelationships];\n    importResult.folderRelationships = [...noFolderRelationShips];\n    relationships.map((x) => {\n      importResult.folderRelationships.push([x[0], x[1] + 1]);\n    });\n  }\n}\n","export class ExportHelper {\n  static getFileName(prefix: string = null, extension = \"csv\"): string {\n    const now = new Date();\n    const dateString =\n      now.getFullYear() +\n      \"\" +\n      this.padNumber(now.getMonth() + 1, 2) +\n      \"\" +\n      this.padNumber(now.getDate(), 2) +\n      this.padNumber(now.getHours(), 2) +\n      \"\" +\n      this.padNumber(now.getMinutes(), 2) +\n      this.padNumber(now.getSeconds(), 2);\n\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n\n  private static padNumber(num: number, width: number, padCharacter = \"0\"): string {\n    const numString = num.toString();\n    return numString.length >= width\n      ? numString\n      : new Array(width - numString.length + 1).join(padCharacter) + numString;\n  }\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { ExportHelper } from \"./export-helper\";\nimport { IndividualVaultExportServiceAbstraction } from \"./individual-vault-export.service.abstraction\";\nimport { OrganizationVaultExportServiceAbstraction } from \"./org-vault-export.service.abstraction\";\nimport { ExportFormat, VaultExportServiceAbstraction } from \"./vault-export.service.abstraction\";\n\nexport class VaultExportService implements VaultExportServiceAbstraction {\n  constructor(\n    private individualVaultExportService: IndividualVaultExportServiceAbstraction,\n    private organizationVaultExportService: OrganizationVaultExportServiceAbstraction,\n  ) {}\n\n  async getExport(format: ExportFormat = \"csv\", password: string): Promise<string> {\n    if (!Utils.isNullOrWhitespace(password)) {\n      if (format == \"csv\") {\n        throw new Error(\"CSV does not support password protected export\");\n      }\n\n      return this.individualVaultExportService.getPasswordProtectedExport(password);\n    }\n    return this.individualVaultExportService.getExport(format);\n  }\n\n  async getOrganizationExport(\n    organizationId: string,\n    format: ExportFormat,\n    password: string,\n    onlyManagedCollections = false,\n  ): Promise<string> {\n    if (!Utils.isNullOrWhitespace(password)) {\n      if (format == \"csv\") {\n        throw new Error(\"CSV does not support password protected export\");\n      }\n\n      return this.organizationVaultExportService.getPasswordProtectedExport(\n        organizationId,\n        password,\n        onlyManagedCollections,\n      );\n    }\n\n    return this.organizationVaultExportService.getOrganizationExport(\n      organizationId,\n      format,\n      onlyManagedCollections,\n    );\n  }\n\n  getFileName(prefix: string = null, extension = \"csv\"): string {\n    return ExportHelper.getFileName(prefix, extension);\n  }\n}\n","import { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { KdfType } from \"@bitwarden/common/platform/enums\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { BitwardenCsvExportType, BitwardenPasswordProtectedFileFormat } from \"../types\";\nexport class BaseVaultExportService {\n  constructor(\n    protected cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private stateService: StateService,\n  ) {}\n\n  protected async buildPasswordExport(clearText: string, password: string): Promise<string> {\n    const kdfType: KdfType = await this.stateService.getKdfType();\n    const kdfConfig: KdfConfig = await this.stateService.getKdfConfig();\n\n    const salt = Utils.fromBufferToB64(await this.cryptoFunctionService.randomBytes(16));\n    const key = await this.cryptoService.makePinKey(password, salt, kdfType, kdfConfig);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), key);\n    const encText = await this.cryptoService.encrypt(clearText, key);\n\n    const jsonDoc: BitwardenPasswordProtectedFileFormat = {\n      encrypted: true,\n      passwordProtected: true,\n      salt: salt,\n      kdfType: kdfType,\n      kdfIterations: kdfConfig.iterations,\n      kdfMemory: kdfConfig.memory,\n      kdfParallelism: kdfConfig.parallelism,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      data: encText.encryptedString,\n    };\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  protected buildCommonCipher(\n    cipher: BitwardenCsvExportType,\n    c: CipherView,\n  ): BitwardenCsvExportType {\n    cipher.type = null;\n    cipher.name = c.name;\n    cipher.notes = c.notes;\n    cipher.fields = null;\n    cipher.reprompt = c.reprompt;\n    // Login props\n    cipher.login_uri = null;\n    cipher.login_username = null;\n    cipher.login_password = null;\n    cipher.login_totp = null;\n\n    if (c.fields) {\n      c.fields.forEach((f) => {\n        if (!cipher.fields) {\n          cipher.fields = \"\";\n        } else {\n          cipher.fields += \"\\n\";\n        }\n\n        cipher.fields += (f.name || \"\") + \": \" + f.value;\n      });\n    }\n\n    switch (c.type) {\n      case CipherType.Login:\n        cipher.type = \"login\";\n        cipher.login_username = c.login.username;\n        cipher.login_password = c.login.password;\n        cipher.login_totp = c.login.totp;\n\n        if (c.login.uris) {\n          cipher.login_uri = [];\n          c.login.uris.forEach((u) => {\n            cipher.login_uri.push(u.uri);\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        cipher.type = \"note\";\n        break;\n      default:\n        return;\n    }\n\n    return cipher;\n  }\n}\n","import * as papa from \"papaparse\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CipherWithIdExport, CollectionWithIdExport } from \"@bitwarden/common/models/export\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherData } from \"@bitwarden/common/vault/models/data/cipher.data\";\nimport { CollectionData } from \"@bitwarden/common/vault/models/data/collection.data\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { Collection } from \"@bitwarden/common/vault/models/domain/collection\";\nimport { CollectionDetailsResponse } from \"@bitwarden/common/vault/models/response/collection.response\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport {\n  BitwardenCsvOrgExportType,\n  BitwardenEncryptedOrgJsonExport,\n  BitwardenUnEncryptedOrgJsonExport,\n} from \"../types\";\n\nimport { BaseVaultExportService } from \"./base-vault-export.service\";\nimport { OrganizationVaultExportServiceAbstraction } from \"./org-vault-export.service.abstraction\";\nimport { ExportFormat } from \"./vault-export.service.abstraction\";\n\nexport class OrganizationVaultExportService\n  extends BaseVaultExportService\n  implements OrganizationVaultExportServiceAbstraction\n{\n  constructor(\n    private cipherService: CipherService,\n    private apiService: ApiService,\n    cryptoService: CryptoService,\n    cryptoFunctionService: CryptoFunctionService,\n    stateService: StateService,\n    private collectionService: CollectionService,\n  ) {\n    super(cryptoService, cryptoFunctionService, stateService);\n  }\n\n  async getPasswordProtectedExport(\n    organizationId: string,\n    password: string,\n    onlyManagedCollections: boolean,\n  ): Promise<string> {\n    const clearText = await this.getOrganizationExport(\n      organizationId,\n      \"json\",\n      onlyManagedCollections,\n    );\n\n    return this.buildPasswordExport(clearText, password);\n  }\n\n  async getOrganizationExport(\n    organizationId: string,\n    format: ExportFormat = \"csv\",\n    onlyManagedCollections: boolean,\n  ): Promise<string> {\n    if (Utils.isNullOrWhitespace(organizationId)) {\n      throw new Error(\"OrganizationId must be set\");\n    }\n\n    if (format === \"encrypted_json\") {\n      return onlyManagedCollections\n        ? this.getEncryptedManagedExport(organizationId)\n        : this.getOrganizationEncryptedExport(organizationId);\n    }\n\n    return onlyManagedCollections\n      ? this.getDecryptedManagedExport(organizationId, format)\n      : this.getOrganizationDecryptedExport(organizationId, format);\n  }\n\n  private async getOrganizationDecryptedExport(\n    organizationId: string,\n    format: \"json\" | \"csv\",\n  ): Promise<string> {\n    const decCollections: CollectionView[] = [];\n    const decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getOrganizationExport(organizationId).then((exportData) => {\n        const exportPromises: any = [];\n        if (exportData != null) {\n          if (exportData.collections != null && exportData.collections.length > 0) {\n            exportData.collections.forEach((c) => {\n              const collection = new Collection(new CollectionData(c as CollectionDetailsResponse));\n              exportPromises.push(\n                collection.decrypt().then((decCol) => {\n                  decCollections.push(decCol);\n                }),\n              );\n            });\n          }\n          if (exportData.ciphers != null && exportData.ciphers.length > 0) {\n            exportData.ciphers\n              .filter((c) => c.deletedDate === null)\n              .forEach(async (c) => {\n                const cipher = new Cipher(new CipherData(c));\n                exportPromises.push(\n                  this.cipherService\n                    .getKeyForCipherKeyDecryption(cipher)\n                    .then((key) => cipher.decrypt(key))\n                    .then((decCipher) => {\n                      decCiphers.push(decCipher);\n                    }),\n                );\n              });\n          }\n        }\n        return Promise.all(exportPromises);\n      }),\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      return this.buildCsvExport(decCollections, decCiphers);\n    }\n    return this.buildJsonExport(decCollections, decCiphers);\n  }\n\n  private async getOrganizationEncryptedExport(organizationId: string): Promise<string> {\n    const collections: Collection[] = [];\n    const ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((c) => {\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data.forEach((r) => {\n            const collection = new Collection(new CollectionData(r as CollectionDetailsResponse));\n            collections.push(collection);\n          });\n        }\n      }),\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((c) => {\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data\n            .filter((item) => item.deletedDate === null)\n            .forEach((item) => {\n              const cipher = new Cipher(new CipherData(item));\n              ciphers.push(cipher);\n            });\n        }\n      }),\n    );\n\n    await Promise.all(promises);\n\n    return this.BuildEncryptedExport(organizationId, collections, ciphers);\n  }\n\n  private async getDecryptedManagedExport(\n    organizationId: string,\n    format: \"json\" | \"csv\",\n  ): Promise<string> {\n    let decCiphers: CipherView[] = [];\n    let allDecCiphers: CipherView[] = [];\n    let decCollections: CollectionView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.collectionService.getAllDecrypted().then(async (collections) => {\n        decCollections = collections.filter((c) => c.organizationId == organizationId && c.manage);\n      }),\n    );\n\n    promises.push(\n      this.cipherService.getAllDecrypted().then((ciphers) => {\n        allDecCiphers = ciphers;\n      }),\n    );\n    await Promise.all(promises);\n\n    decCiphers = allDecCiphers.filter(\n      (f) =>\n        f.deletedDate == null &&\n        f.organizationId == organizationId &&\n        decCollections.some((dC) => f.collectionIds.some((cId) => dC.id === cId)),\n    );\n\n    if (format === \"csv\") {\n      return this.buildCsvExport(decCollections, decCiphers);\n    }\n    return this.buildJsonExport(decCollections, decCiphers);\n  }\n\n  private async getEncryptedManagedExport(organizationId: string): Promise<string> {\n    let encCiphers: Cipher[] = [];\n    let allCiphers: Cipher[] = [];\n    let encCollections: Collection[] = [];\n    const promises = [];\n\n    promises.push(\n      this.collectionService.getAll().then((collections) => {\n        encCollections = collections.filter((c) => c.organizationId == organizationId && c.manage);\n      }),\n    );\n\n    promises.push(\n      this.cipherService.getAll().then((ciphers) => {\n        allCiphers = ciphers;\n      }),\n    );\n\n    await Promise.all(promises);\n\n    encCiphers = allCiphers.filter(\n      (f) =>\n        f.deletedDate == null &&\n        f.organizationId == organizationId &&\n        encCollections.some((eC) => f.collectionIds.some((cId) => eC.id === cId)),\n    );\n\n    return this.BuildEncryptedExport(organizationId, encCollections, encCiphers);\n  }\n\n  private async BuildEncryptedExport(\n    organizationId: string,\n    collections: Collection[],\n    ciphers: Cipher[],\n  ): Promise<string> {\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), orgKey);\n\n    const jsonDoc: BitwardenEncryptedOrgJsonExport = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      collections: [],\n      items: [],\n    };\n\n    collections.forEach((c) => {\n      const collection = new CollectionWithIdExport();\n      collection.build(c);\n      jsonDoc.collections.push(collection);\n    });\n\n    ciphers.forEach((c) => {\n      const cipher = new CipherWithIdExport();\n      cipher.build(c);\n      jsonDoc.items.push(cipher);\n    });\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private buildCsvExport(decCollections: CollectionView[], decCiphers: CipherView[]): string {\n    const collectionsMap = new Map<string, CollectionView>();\n    decCollections.forEach((c) => {\n      collectionsMap.set(c.id, c);\n    });\n\n    const exportCiphers: BitwardenCsvOrgExportType[] = [];\n    decCiphers.forEach((c) => {\n      // only export logins and secure notes\n      if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n        return;\n      }\n\n      const cipher = {} as BitwardenCsvOrgExportType;\n      cipher.collections = [];\n      if (c.collectionIds != null) {\n        cipher.collections = c.collectionIds\n          .filter((id) => collectionsMap.has(id))\n          .map((id) => collectionsMap.get(id).name);\n      }\n      this.buildCommonCipher(cipher, c);\n      exportCiphers.push(cipher);\n    });\n\n    return papa.unparse(exportCiphers);\n  }\n\n  private buildJsonExport(decCollections: CollectionView[], decCiphers: CipherView[]): string {\n    const jsonDoc: BitwardenUnEncryptedOrgJsonExport = {\n      encrypted: false,\n      collections: [],\n      items: [],\n    };\n\n    decCollections.forEach((c) => {\n      const collection = new CollectionWithIdExport();\n      collection.build(c);\n      jsonDoc.collections.push(collection);\n    });\n\n    decCiphers.forEach((c) => {\n      const cipher = new CipherWithIdExport();\n      cipher.build(c);\n      jsonDoc.items.push(cipher);\n    });\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n}\n","import * as papa from \"papaparse\";\n\nimport { CipherWithIdExport, FolderWithIdExport } from \"@bitwarden/common/models/export\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { Folder } from \"@bitwarden/common/vault/models/domain/folder\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport {\n  BitwardenCsvIndividualExportType,\n  BitwardenEncryptedIndividualJsonExport,\n  BitwardenUnEncryptedIndividualJsonExport,\n} from \"../types\";\n\nimport { BaseVaultExportService } from \"./base-vault-export.service\";\nimport { IndividualVaultExportServiceAbstraction } from \"./individual-vault-export.service.abstraction\";\nimport { ExportFormat } from \"./vault-export.service.abstraction\";\n\nexport class IndividualVaultExportService\n  extends BaseVaultExportService\n  implements IndividualVaultExportServiceAbstraction\n{\n  constructor(\n    private folderService: FolderService,\n    private cipherService: CipherService,\n    cryptoService: CryptoService,\n    cryptoFunctionService: CryptoFunctionService,\n    stateService: StateService,\n  ) {\n    super(cryptoService, cryptoFunctionService, stateService);\n  }\n\n  async getExport(format: ExportFormat = \"csv\"): Promise<string> {\n    if (format === \"encrypted_json\") {\n      return this.getEncryptedExport();\n    }\n    return this.getDecryptedExport(format);\n  }\n\n  async getPasswordProtectedExport(password: string): Promise<string> {\n    const clearText = await this.getExport(\"json\");\n    return this.buildPasswordExport(clearText, password);\n  }\n\n  private async getDecryptedExport(format: \"json\" | \"csv\"): Promise<string> {\n    let decFolders: FolderView[] = [];\n    let decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.folderService.getAllDecryptedFromState().then((folders) => {\n        decFolders = folders;\n      }),\n    );\n\n    promises.push(\n      this.cipherService.getAllDecrypted().then((ciphers) => {\n        decCiphers = ciphers.filter((f) => f.deletedDate == null);\n      }),\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      return this.buildCsvExport(decFolders, decCiphers);\n    }\n\n    return this.buildJsonExport(decFolders, decCiphers);\n  }\n\n  private async getEncryptedExport(): Promise<string> {\n    let folders: Folder[] = [];\n    let ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.folderService.getAllFromState().then((f) => {\n        folders = f;\n      }),\n    );\n\n    promises.push(\n      this.cipherService.getAll().then((c) => {\n        ciphers = c.filter((f) => f.deletedDate == null);\n      }),\n    );\n\n    await Promise.all(promises);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid());\n\n    const jsonDoc: BitwardenEncryptedIndividualJsonExport = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      folders: [],\n      items: [],\n    };\n\n    folders.forEach((f) => {\n      if (f.id == null) {\n        return;\n      }\n      const folder = new FolderWithIdExport();\n      folder.build(f);\n      jsonDoc.folders.push(folder);\n    });\n\n    ciphers.forEach((c) => {\n      if (c.organizationId != null) {\n        return;\n      }\n      const cipher = new CipherWithIdExport();\n      cipher.build(c);\n      cipher.collectionIds = null;\n      jsonDoc.items.push(cipher);\n    });\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private buildCsvExport(decFolders: FolderView[], decCiphers: CipherView[]): string {\n    const foldersMap = new Map<string, FolderView>();\n    decFolders.forEach((f) => {\n      if (f.id != null) {\n        foldersMap.set(f.id, f);\n      }\n    });\n\n    const exportCiphers: BitwardenCsvIndividualExportType[] = [];\n    decCiphers.forEach((c) => {\n      // only export logins and secure notes\n      if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n        return;\n      }\n      if (c.organizationId != null) {\n        return;\n      }\n\n      const cipher = {} as BitwardenCsvIndividualExportType;\n      cipher.folder =\n        c.folderId != null && foldersMap.has(c.folderId) ? foldersMap.get(c.folderId).name : null;\n      cipher.favorite = c.favorite ? 1 : null;\n      this.buildCommonCipher(cipher, c);\n      exportCiphers.push(cipher);\n    });\n\n    return papa.unparse(exportCiphers);\n  }\n\n  private buildJsonExport(decFolders: FolderView[], decCiphers: CipherView[]): string {\n    const jsonDoc: BitwardenUnEncryptedIndividualJsonExport = {\n      encrypted: false,\n      folders: [],\n      items: [],\n    };\n\n    decFolders.forEach((f) => {\n      if (f.id == null) {\n        return;\n      }\n      const folder = new FolderWithIdExport();\n      folder.build(f);\n      jsonDoc.folders.push(folder);\n    });\n\n    decCiphers.forEach((c) => {\n      if (c.organizationId != null) {\n        return;\n      }\n      const cipher = new CipherWithIdExport();\n      cipher.build(c);\n      cipher.collectionIds = null;\n      jsonDoc.items.push(cipher);\n    });\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n}\n","import { BrowserApi } from \"../platform/browser/browser-api\";\n\nexport class SafariApp {\n  static sendMessageToApp(command: string, data: any = null, resolveNow = false): Promise<any> {\n    if (!BrowserApi.isSafariApi) {\n      return Promise.resolve(null);\n    }\n    return new Promise((resolve) => {\n      const now = new Date();\n      const messageId =\n        now.getTime().toString() + \"_\" + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      (browser as any).runtime.sendNativeMessage(\n        \"com.bitwarden.desktop\",\n        {\n          id: messageId,\n          command: command,\n          data: data,\n          responseData: null,\n        },\n        (response: any) => {\n          resolve(response);\n        },\n      );\n    });\n  }\n}\n","import { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\n\nclass BrowserClipboardService {\n  private static consoleLogService: ConsoleLogService = new ConsoleLogService(false);\n\n  /**\n   * Copies the given text to the user's clipboard.\n   *\n   * @param globalContext - The global window context.\n   * @param text - The text to copy.\n   */\n  static async copy(globalContext: Window, text: string) {\n    if (!BrowserClipboardService.isClipboardApiSupported(globalContext, \"writeText\")) {\n      this.useLegacyCopyMethod(globalContext, text);\n      return;\n    }\n\n    try {\n      await globalContext.navigator.clipboard.writeText(text);\n    } catch (error) {\n      BrowserClipboardService.consoleLogService.debug(\n        `Error copying to clipboard using the clipboard API, attempting legacy method: ${error}`,\n      );\n\n      this.useLegacyCopyMethod(globalContext, text);\n    }\n  }\n\n  /**\n   * Reads the user's clipboard and returns the text.\n   *\n   * @param globalContext - The global window context.\n   */\n  static async read(globalContext: Window): Promise<string> {\n    if (!BrowserClipboardService.isClipboardApiSupported(globalContext, \"readText\")) {\n      return this.useLegacyReadMethod(globalContext);\n    }\n\n    try {\n      return await globalContext.navigator.clipboard.readText();\n    } catch (error) {\n      BrowserClipboardService.consoleLogService.debug(\n        `Error reading from clipboard using the clipboard API, attempting legacy method: ${error}`,\n      );\n\n      return this.useLegacyReadMethod(globalContext);\n    }\n  }\n\n  /**\n   * Copies the given text to the user's clipboard using the legacy `execCommand` method. This\n   * method is used as a fallback when the clipboard API is not supported or fails.\n   *\n   * @param globalContext - The global window context.\n   * @param text - The text to copy.\n   */\n  private static useLegacyCopyMethod(globalContext: Window, text: string) {\n    if (!BrowserClipboardService.isLegacyClipboardMethodSupported(globalContext, \"copy\")) {\n      BrowserClipboardService.consoleLogService.warning(\"Legacy copy method not supported\");\n      return;\n    }\n\n    const textareaElement = globalContext.document.createElement(\"textarea\");\n    textareaElement.textContent = !text ? \" \" : text;\n    textareaElement.style.position = \"fixed\";\n    globalContext.document.body.appendChild(textareaElement);\n    textareaElement.select();\n\n    try {\n      globalContext.document.execCommand(\"copy\");\n    } catch (error) {\n      BrowserClipboardService.consoleLogService.warning(`Error writing to clipboard: ${error}`);\n    } finally {\n      globalContext.document.body.removeChild(textareaElement);\n    }\n  }\n\n  /**\n   * Reads the user's clipboard using the legacy `execCommand` method. This method is used as a\n   * fallback when the clipboard API is not supported or fails.\n   *\n   * @param globalContext - The global window context.\n   */\n  private static useLegacyReadMethod(globalContext: Window): string {\n    if (!BrowserClipboardService.isLegacyClipboardMethodSupported(globalContext, \"paste\")) {\n      BrowserClipboardService.consoleLogService.warning(\"Legacy paste method not supported\");\n      return \"\";\n    }\n\n    const textareaElement = globalContext.document.createElement(\"textarea\");\n    textareaElement.style.position = \"fixed\";\n    globalContext.document.body.appendChild(textareaElement);\n    textareaElement.focus();\n\n    try {\n      return globalContext.document.execCommand(\"paste\") ? textareaElement.value : \"\";\n    } catch (error) {\n      BrowserClipboardService.consoleLogService.warning(`Error reading from clipboard: ${error}`);\n    } finally {\n      globalContext.document.body.removeChild(textareaElement);\n    }\n\n    return \"\";\n  }\n\n  /**\n   * Checks if the clipboard API is supported in the current environment.\n   *\n   * @param globalContext - The global window context.\n   * @param method - The clipboard API method to check for support.\n   */\n  private static isClipboardApiSupported(globalContext: Window, method: \"writeText\" | \"readText\") {\n    return \"clipboard\" in globalContext.navigator && method in globalContext.navigator.clipboard;\n  }\n\n  /**\n   * Checks if the legacy clipboard method is supported in the current environment.\n   *\n   * @param globalContext - The global window context.\n   * @param method - The legacy clipboard method to check for support.\n   */\n  private static isLegacyClipboardMethodSupported(globalContext: Window, method: \"copy\" | \"paste\") {\n    return (\n      \"queryCommandSupported\" in globalContext.document &&\n      globalContext.document.queryCommandSupported(method)\n    );\n  }\n}\n\nexport default BrowserClipboardService;\n","import { ClientType, DeviceType } from \"@bitwarden/common/enums\";\nimport {\n  ClipboardOptions,\n  PlatformUtilsService,\n} from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SafariApp } from \"../../../browser/safariApp\";\nimport { BrowserApi } from \"../../browser/browser-api\";\nimport BrowserClipboardService from \"../browser-clipboard.service\";\n\nexport abstract class BrowserPlatformUtilsService implements PlatformUtilsService {\n  private static deviceCache: DeviceType = null;\n\n  constructor(\n    private clipboardWriteCallback: (clipboardValue: string, clearMs: number) => void,\n    private biometricCallback: () => Promise<boolean>,\n    private globalContext: Window | ServiceWorkerGlobalScope,\n  ) {}\n\n  static getDevice(globalContext: Window | ServiceWorkerGlobalScope): DeviceType {\n    if (this.deviceCache) {\n      return this.deviceCache;\n    }\n\n    if (BrowserPlatformUtilsService.isFirefox()) {\n      this.deviceCache = DeviceType.FirefoxExtension;\n    } else if (BrowserPlatformUtilsService.isOpera(globalContext)) {\n      this.deviceCache = DeviceType.OperaExtension;\n    } else if (BrowserPlatformUtilsService.isEdge()) {\n      this.deviceCache = DeviceType.EdgeExtension;\n    } else if (BrowserPlatformUtilsService.isVivaldi()) {\n      this.deviceCache = DeviceType.VivaldiExtension;\n    } else if (BrowserPlatformUtilsService.isChrome(globalContext)) {\n      this.deviceCache = DeviceType.ChromeExtension;\n    } else if (BrowserPlatformUtilsService.isSafari(globalContext)) {\n      this.deviceCache = DeviceType.SafariExtension;\n    }\n\n    return this.deviceCache;\n  }\n\n  getDevice(): DeviceType {\n    return BrowserPlatformUtilsService.getDevice(this.globalContext);\n  }\n\n  getDeviceString(): string {\n    const device = DeviceType[this.getDevice()].toLowerCase();\n    return device.replace(\"extension\", \"\");\n  }\n\n  getClientType(): ClientType {\n    return ClientType.Browser;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  static isFirefox(): boolean {\n    return (\n      navigator.userAgent.indexOf(\" Firefox/\") !== -1 ||\n      navigator.userAgent.indexOf(\" Gecko/\") !== -1\n    );\n  }\n\n  isFirefox(): boolean {\n    return this.getDevice() === DeviceType.FirefoxExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isChrome(globalContext: Window | ServiceWorkerGlobalScope): boolean {\n    return globalContext.chrome && navigator.userAgent.indexOf(\" Chrome/\") !== -1;\n  }\n\n  isChrome(): boolean {\n    return this.getDevice() === DeviceType.ChromeExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isEdge(): boolean {\n    return navigator.userAgent.indexOf(\" Edg/\") !== -1;\n  }\n\n  isEdge(): boolean {\n    return this.getDevice() === DeviceType.EdgeExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isOpera(globalContext: Window | ServiceWorkerGlobalScope): boolean {\n    return (\n      !!globalContext.opr?.addons ||\n      !!globalContext.opera ||\n      navigator.userAgent.indexOf(\" OPR/\") >= 0\n    );\n  }\n\n  isOpera(): boolean {\n    return this.getDevice() === DeviceType.OperaExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isVivaldi(): boolean {\n    return navigator.userAgent.indexOf(\" Vivaldi/\") !== -1;\n  }\n\n  isVivaldi(): boolean {\n    return this.getDevice() === DeviceType.VivaldiExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  static isSafari(globalContext: Window | ServiceWorkerGlobalScope): boolean {\n    // Opera masquerades as Safari, so make sure we're not there first\n    return (\n      !BrowserPlatformUtilsService.isOpera(globalContext) &&\n      navigator.userAgent.indexOf(\" Safari/\") !== -1\n    );\n  }\n\n  private static safariVersion(): string {\n    return navigator.userAgent.match(\"Version/([0-9.]*)\")?.[1];\n  }\n\n  /**\n   * Safari previous to version 16.1 had a bug which caused artifacts on hover in large extension popups.\n   * https://bugs.webkit.org/show_bug.cgi?id=218704\n   */\n  static shouldApplySafariHeightFix(globalContext: Window | ServiceWorkerGlobalScope): boolean {\n    if (BrowserPlatformUtilsService.getDevice(globalContext) !== DeviceType.SafariExtension) {\n      return false;\n    }\n\n    const version = BrowserPlatformUtilsService.safariVersion();\n    const parts = version?.split(\".\")?.map((v) => Number(v));\n    return parts?.[0] < 16 || (parts?.[0] === 16 && parts?.[1] === 0);\n  }\n\n  isSafari(): boolean {\n    return this.getDevice() === DeviceType.SafariExtension;\n  }\n\n  isIE(): boolean {\n    return false;\n  }\n\n  isMacAppStore(): boolean {\n    return false;\n  }\n\n  /**\n   * Identifies if the vault popup is currently open. This is done by sending a\n   * message to the popup and waiting for a response. If a response is received,\n   * the view is open.\n   */\n  async isViewOpen(): Promise<boolean> {\n    return Boolean(await BrowserApi.sendMessageWithResponse(\"checkVaultPopupHeartbeat\"));\n  }\n\n  lockTimeout(): number {\n    return null;\n  }\n\n  launchUri(uri: string, options?: any): void {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.createNewTab(uri, options && options.extensionPage === true);\n  }\n\n  getApplicationVersion(): Promise<string> {\n    return Promise.resolve(BrowserApi.getApplicationVersion());\n  }\n\n  async getApplicationVersionNumber(): Promise<string> {\n    return (await this.getApplicationVersion()).split(RegExp(\"[+|-]\"))[0].trim();\n  }\n\n  supportsWebAuthn(win: Window): boolean {\n    return typeof PublicKeyCredential !== \"undefined\";\n  }\n\n  supportsDuo(): boolean {\n    return true;\n  }\n\n  abstract showToast(\n    type: \"error\" | \"success\" | \"warning\" | \"info\",\n    title: string,\n    text: string | string[],\n    options?: any,\n  ): void;\n\n  isDev(): boolean {\n    return process.env.ENV === \"development\";\n  }\n\n  isSelfHost(): boolean {\n    return false;\n  }\n\n  /**\n   * Copies the passed text to the clipboard. For Safari, this will use\n   * the native messaging API to send the text to the Bitwarden app. If\n   * the extension is using manifest v3, the offscreen document API will\n   * be used to copy the text to the clipboard. Otherwise, the browser's\n   * clipboard API will be used.\n   *\n   * @param text - The text to copy to the clipboard.\n   * @param options - Options for the clipboard operation.\n   */\n  copyToClipboard(text: string, options?: ClipboardOptions): void {\n    const windowContext = options?.window || (this.globalContext as Window);\n    const clearing = Boolean(options?.clearing);\n    const clearMs: number = options?.clearMs || null;\n    const handleClipboardWriteCallback = () => {\n      if (!clearing && this.clipboardWriteCallback != null) {\n        this.clipboardWriteCallback(text, clearMs);\n      }\n    };\n\n    if (this.isSafari()) {\n      void SafariApp.sendMessageToApp(\"copyToClipboard\", text).then(handleClipboardWriteCallback);\n\n      return;\n    }\n\n    if (this.isChrome() && text === \"\") {\n      text = \"\\u0000\";\n    }\n\n    if (this.isChrome() && BrowserApi.isManifestVersion(3)) {\n      void this.triggerOffscreenCopyToClipboard(text).then(handleClipboardWriteCallback);\n\n      return;\n    }\n\n    void BrowserClipboardService.copy(windowContext, text).then(handleClipboardWriteCallback);\n  }\n\n  /**\n   * Reads the text from the clipboard. For Safari, this will use the\n   * native messaging API to request the text from the Bitwarden app. If\n   * the extension is using manifest v3, the offscreen document API will\n   * be used to read the text from the clipboard. Otherwise, the browser's\n   * clipboard API will be used.\n   *\n   * @param options - Options for the clipboard operation.\n   */\n  async readFromClipboard(options?: ClipboardOptions): Promise<string> {\n    const windowContext = options?.window || (this.globalContext as Window);\n\n    if (this.isSafari()) {\n      return await SafariApp.sendMessageToApp(\"readFromClipboard\");\n    }\n\n    if (this.isChrome() && BrowserApi.isManifestVersion(3)) {\n      return await this.triggerOffscreenReadFromClipboard();\n    }\n\n    return await BrowserClipboardService.read(windowContext);\n  }\n\n  async supportsBiometric() {\n    const platformInfo = await BrowserApi.getPlatformInfo();\n    if (platformInfo.os === \"mac\" || platformInfo.os === \"win\") {\n      return true;\n    }\n    return false;\n  }\n\n  authenticateBiometric() {\n    return this.biometricCallback();\n  }\n\n  supportsSecureStorage(): boolean {\n    return false;\n  }\n\n  async getAutofillKeyboardShortcut(): Promise<string> {\n    let autofillCommand: string;\n    // You can not change the command in Safari or obtain it programmatically\n    if (this.isSafari()) {\n      autofillCommand = \"Cmd+Shift+L\";\n    } else if (this.isFirefox()) {\n      autofillCommand = (await browser.commands.getAll()).find(\n        (c) => c.name === \"autofill_login\",\n      ).shortcut;\n      // Firefox is returning Ctrl instead of Cmd for the modifier key on macOS if\n      // the command is the default one set on installation.\n      if (\n        (await browser.runtime.getPlatformInfo()).os === \"mac\" &&\n        autofillCommand === \"Ctrl+Shift+L\"\n      ) {\n        autofillCommand = \"Cmd+Shift+L\";\n      }\n    } else {\n      await new Promise((resolve) =>\n        chrome.commands.getAll((c) =>\n          resolve((autofillCommand = c.find((c) => c.name === \"autofill_login\").shortcut)),\n        ),\n      );\n    }\n    return autofillCommand;\n  }\n\n  /**\n   * Triggers the offscreen document API to copy the text to the clipboard.\n   */\n  private async triggerOffscreenCopyToClipboard(text: string) {\n    await BrowserApi.createOffscreenDocument(\n      [chrome.offscreen.Reason.CLIPBOARD],\n      \"Write text to the clipboard.\",\n    );\n    await BrowserApi.sendMessageWithResponse(\"offscreenCopyToClipboard\", { text });\n    BrowserApi.closeOffscreenDocument();\n  }\n\n  /**\n   * Triggers the offscreen document API to read the text from the clipboard.\n   */\n  private async triggerOffscreenReadFromClipboard() {\n    await BrowserApi.createOffscreenDocument(\n      [chrome.offscreen.Reason.CLIPBOARD],\n      \"Read text from the clipboard.\",\n    );\n    const response = await BrowserApi.sendMessageWithResponse(\"offscreenReadFromClipboard\");\n    BrowserApi.closeOffscreenDocument();\n    if (typeof response === \"string\") {\n      return response;\n    }\n\n    return \"\";\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { DeviceType } from \"@bitwarden/common/enums\";\n\nimport { TabMessage } from \"../../types/tab-messages\";\nimport { BrowserPlatformUtilsService } from \"../services/platform-utils/browser-platform-utils.service\";\n\nexport class BrowserApi {\n  static isWebExtensionsApi: boolean = typeof browser !== \"undefined\";\n  static isSafariApi: boolean =\n    navigator.userAgent.indexOf(\" Safari/\") !== -1 &&\n    navigator.userAgent.indexOf(\" Chrome/\") === -1 &&\n    navigator.userAgent.indexOf(\" Chromium/\") === -1;\n  static isChromeApi: boolean = !BrowserApi.isSafariApi && typeof chrome !== \"undefined\";\n  static isFirefoxOnAndroid: boolean =\n    navigator.userAgent.indexOf(\"Firefox/\") !== -1 && navigator.userAgent.indexOf(\"Android\") !== -1;\n\n  static get manifestVersion() {\n    return chrome.runtime.getManifest().manifest_version;\n  }\n\n  /**\n   * Determines if the extension manifest version is the given version.\n   *\n   * @param expectedVersion - The expected manifest version to check against.\n   */\n  static isManifestVersion(expectedVersion: 2 | 3) {\n    return BrowserApi.manifestVersion === expectedVersion;\n  }\n\n  /**\n   * Gets the current window or the window with the given id.\n   *\n   * @param windowId - The id of the window to get. If not provided, the current window is returned.\n   */\n  static async getWindow(windowId?: number): Promise<chrome.windows.Window> {\n    if (!windowId) {\n      return BrowserApi.getCurrentWindow();\n    }\n\n    return await BrowserApi.getWindowById(windowId);\n  }\n\n  /**\n   * Gets the currently active browser window.\n   */\n  static async getCurrentWindow(): Promise<chrome.windows.Window> {\n    return new Promise((resolve) => chrome.windows.getCurrent({ populate: true }, resolve));\n  }\n\n  /**\n   * Gets the window with the given id.\n   *\n   * @param windowId - The id of the window to get.\n   */\n  static async getWindowById(windowId: number): Promise<chrome.windows.Window> {\n    return new Promise((resolve) => chrome.windows.get(windowId, { populate: true }, resolve));\n  }\n\n  static async createWindow(options: chrome.windows.CreateData): Promise<chrome.windows.Window> {\n    return new Promise((resolve) =>\n      chrome.windows.create(options, (window) => {\n        resolve(window);\n      }),\n    );\n  }\n\n  /**\n   * Removes the window with the given id.\n   *\n   * @param windowId - The id of the window to remove.\n   */\n  static async removeWindow(windowId: number): Promise<void> {\n    return new Promise((resolve) => chrome.windows.remove(windowId, () => resolve()));\n  }\n\n  /**\n   * Updates the properties of the window with the given id.\n   *\n   * @param windowId - The id of the window to update.\n   * @param options - The window properties to update.\n   */\n  static async updateWindowProperties(\n    windowId: number,\n    options: chrome.windows.UpdateInfo,\n  ): Promise<void> {\n    return new Promise((resolve) =>\n      chrome.windows.update(windowId, options, () => {\n        resolve();\n      }),\n    );\n  }\n\n  /**\n   * Focuses the window with the given id.\n   *\n   * @param windowId - The id of the window to focus.\n   */\n  static async focusWindow(windowId: number) {\n    await BrowserApi.updateWindowProperties(windowId, { focused: true });\n  }\n\n  static async getTabFromCurrentWindowId(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      windowId: chrome.windows.WINDOW_ID_CURRENT,\n    });\n  }\n\n  /**\n   * Gets the tab with the given id.\n   *\n   * @param tabId - The id of the tab to get.\n   */\n  static async getTab(tabId: number): Promise<chrome.tabs.Tab> | null {\n    if (!tabId) {\n      return null;\n    }\n\n    if (BrowserApi.isManifestVersion(3)) {\n      return await chrome.tabs.get(tabId);\n    }\n\n    return new Promise((resolve) =>\n      chrome.tabs.get(tabId, (tab) => {\n        resolve(tab);\n      }),\n    );\n  }\n\n  static async getTabFromCurrentWindow(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      currentWindow: true,\n    });\n  }\n\n  static async getActiveTabs(): Promise<chrome.tabs.Tab[]> {\n    return await BrowserApi.tabsQuery({\n      active: true,\n    });\n  }\n\n  static async tabsQuery(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab[]> {\n    return new Promise((resolve) => {\n      chrome.tabs.query(options, (tabs) => {\n        resolve(tabs);\n      });\n    });\n  }\n\n  static async tabsQueryFirst(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab> | null {\n    const tabs = await BrowserApi.tabsQuery(options);\n    if (tabs.length > 0) {\n      return tabs[0];\n    }\n\n    return null;\n  }\n\n  static tabSendMessageData(\n    tab: chrome.tabs.Tab,\n    command: string,\n    data: any = null,\n  ): Promise<void> {\n    const obj: any = {\n      command: command,\n    };\n\n    if (data != null) {\n      obj.data = data;\n    }\n\n    return BrowserApi.tabSendMessage(tab, obj);\n  }\n\n  static async tabSendMessage<T>(\n    tab: chrome.tabs.Tab,\n    obj: T,\n    options: chrome.tabs.MessageSendOptions = null,\n  ): Promise<void> {\n    if (!tab || !tab.id) {\n      return;\n    }\n\n    return new Promise<void>((resolve) => {\n      chrome.tabs.sendMessage(tab.id, obj, options, () => {\n        if (chrome.runtime.lastError) {\n          // Some error happened\n        }\n        resolve();\n      });\n    });\n  }\n\n  static sendTabsMessage<T>(\n    tabId: number,\n    message: TabMessage,\n    options?: chrome.tabs.MessageSendOptions,\n    responseCallback?: (response: T) => void,\n  ) {\n    chrome.tabs.sendMessage<TabMessage, T>(tabId, message, options, responseCallback);\n  }\n\n  static async getPrivateModeWindows(): Promise<browser.windows.Window[]> {\n    return (await browser.windows.getAll()).filter((win) => win.incognito);\n  }\n\n  static async onWindowCreated(callback: (win: chrome.windows.Window) => any) {\n    // FIXME: Make sure that is does not cause a memory leak in Safari or use BrowserApi.AddListener\n    // and test that it doesn't break.\n    // eslint-disable-next-line no-restricted-syntax\n    return chrome.windows.onCreated.addListener(callback);\n  }\n\n  /**\n   * Gets the background page for the extension. This method is\n   * not valid within manifest v3 background service workers. As\n   * a result, it will return null when called from that context.\n   */\n  static getBackgroundPage(): any {\n    if (typeof chrome.extension.getBackgroundPage === \"undefined\") {\n      return null;\n    }\n\n    return chrome.extension.getBackgroundPage();\n  }\n\n  /**\n   * Accepts a window object and determines if it is\n   * associated with the background page of the extension.\n   *\n   * @param window - The window to check.\n   */\n  static isBackgroundPage(window: Window & typeof globalThis): boolean {\n    return typeof window !== \"undefined\" && window === BrowserApi.getBackgroundPage();\n  }\n\n  static getApplicationVersion(): string {\n    return chrome.runtime.getManifest().version;\n  }\n\n  /**\n   * Gets the extension views that match the given properties. This method is not\n   * available within background service worker. As a result, it will return an\n   * empty array when called from that context.\n   *\n   * @param fetchProperties - The properties used to filter extension views.\n   */\n  static getExtensionViews(fetchProperties?: chrome.extension.FetchProperties): Window[] {\n    if (typeof chrome.extension.getViews === \"undefined\") {\n      return [];\n    }\n\n    return chrome.extension.getViews(fetchProperties);\n  }\n\n  /**\n   * Queries all extension views that are of type `popup`\n   * and returns whether any are currently open.\n   */\n  static async isPopupOpen(): Promise<boolean> {\n    return Promise.resolve(BrowserApi.getExtensionViews({ type: \"popup\" }).length > 0);\n  }\n\n  static createNewTab(url: string, active = true): Promise<chrome.tabs.Tab> {\n    return new Promise((resolve) =>\n      chrome.tabs.create({ url: url, active: active }, (tab) => resolve(tab)),\n    );\n  }\n\n  // Keep track of all the events registered in a Safari popup so we can remove\n  // them when the popup gets unloaded, otherwise we cause a memory leak\n  private static trackedChromeEventListeners: [\n    event: chrome.events.Event<(...args: unknown[]) => unknown>,\n    callback: (...args: unknown[]) => unknown,\n  ][] = [];\n\n  static messageListener(\n    name: string,\n    callback: (\n      message: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: any,\n    ) => boolean | void,\n  ) {\n    BrowserApi.addListener(chrome.runtime.onMessage, callback);\n  }\n\n  static messageListener$() {\n    return new Observable<unknown>((subscriber) => {\n      const handler = (message: unknown) => {\n        subscriber.next(message);\n      };\n\n      BrowserApi.addListener(chrome.runtime.onMessage, handler);\n\n      return () => BrowserApi.removeListener(chrome.runtime.onMessage, handler);\n    });\n  }\n\n  static storageChangeListener(\n    callback: Parameters<typeof chrome.storage.onChanged.addListener>[0],\n  ) {\n    BrowserApi.addListener(chrome.storage.onChanged, callback);\n  }\n\n  /**\n   * Adds a callback to the given chrome event in a cross-browser platform manner.\n   *\n   * **Important:** All event listeners in the browser extension popup context must\n   * use this instead of the native APIs to handle unsubscribing from Safari properly.\n   *\n   * @param event - The event in which to add the listener to.\n   * @param callback - The callback you want registered onto the event.\n   */\n  static addListener<T extends (...args: readonly unknown[]) => unknown>(\n    event: chrome.events.Event<T>,\n    callback: T,\n  ) {\n    event.addListener(callback);\n\n    if (BrowserApi.isSafariApi && !BrowserApi.isBackgroundPage(self)) {\n      BrowserApi.trackedChromeEventListeners.push([event, callback]);\n      BrowserApi.setupUnloadListeners();\n    }\n  }\n\n  /**\n   * Removes a callback from the given chrome event in a cross-browser platform manner.\n   * @param event - The event in which to remove the listener from.\n   * @param callback - The callback you want removed from the event.\n   */\n  static removeListener<T extends (...args: readonly unknown[]) => unknown>(\n    event: chrome.events.Event<T>,\n    callback: T,\n  ) {\n    event.removeListener(callback);\n\n    if (BrowserApi.isSafariApi && !BrowserApi.isBackgroundPage(self)) {\n      const index = BrowserApi.trackedChromeEventListeners.findIndex(([_event, eventListener]) => {\n        return eventListener == callback;\n      });\n      if (index !== -1) {\n        BrowserApi.trackedChromeEventListeners.splice(index, 1);\n      }\n    }\n  }\n\n  // Setup the event to destroy all the listeners when the popup gets unloaded in Safari, otherwise we get a memory leak\n  private static setupUnloadListeners() {\n    // The MDN recommend using 'visibilitychange' but that event is fired any time the popup window is obscured as well\n    // 'pagehide' works just like 'unload' but is compatible with the back/forward cache, so we prefer using that one\n    window.onpagehide = () => {\n      for (const [event, callback] of BrowserApi.trackedChromeEventListeners) {\n        event.removeListener(callback);\n      }\n    };\n  }\n\n  static sendMessage(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    return chrome.runtime.sendMessage(message);\n  }\n\n  static sendMessageWithResponse<TResponse>(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    return new Promise<TResponse>((resolve) => chrome.runtime.sendMessage(message, resolve));\n  }\n\n  static async focusTab(tabId: number) {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    chrome.tabs.update(tabId, { active: true, highlighted: true });\n  }\n\n  static closePopup(win: Window) {\n    if (BrowserApi.isWebExtensionsApi && BrowserApi.isFirefoxOnAndroid) {\n      // Reactivating the active tab dismisses the popup tab. The promise final\n      // condition is only called if the popup wasn't already dismissed (future proofing).\n      // ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1433604\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      browser.tabs.update({ active: true }).finally(win.close);\n    } else {\n      win.close();\n    }\n  }\n\n  static gaFilter() {\n    return process.env.ENV !== \"production\";\n  }\n\n  static getUILanguage() {\n    return chrome.i18n.getUILanguage();\n  }\n\n  /**\n   * Handles reloading the extension, either by calling the window location\n   * to reload or by calling the extension's runtime to reload.\n   *\n   * @param globalContext - The global context to use for the reload.\n   */\n  static reloadExtension(globalContext: (Window & typeof globalThis) | null) {\n    // The passed globalContext might be a ServiceWorkerGlobalScope, as a result\n    // we need to check if the location object exists before calling reload on it.\n    if (typeof globalContext?.location?.reload === \"function\") {\n      return (globalContext as any).location.reload(true);\n    }\n\n    return chrome.runtime.reload();\n  }\n\n  /**\n   * Reloads all open extension views, except the background page. Will also\n   * skip reloading the current window location if exemptCurrentHref is true.\n   *\n   * @param exemptCurrentHref - Whether to exempt the current window location from the reload.\n   */\n  static reloadOpenWindows(exemptCurrentHref = false) {\n    const views = BrowserApi.getExtensionViews();\n    if (!views.length) {\n      return;\n    }\n\n    const currentHref = window.location.href;\n    views\n      .filter((w) => w.location.href != null && !w.location.href.includes(\"background.html\"))\n      .filter((w) => !exemptCurrentHref || w.location.href !== currentHref)\n      .forEach((w) => w.location.reload());\n  }\n\n  static connectNative(application: string): browser.runtime.Port | chrome.runtime.Port {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.connectNative(application);\n    } else if (BrowserApi.isChromeApi) {\n      return chrome.runtime.connectNative(application);\n    }\n  }\n\n  static requestPermission(permission: any) {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.permissions.request(permission);\n    }\n    return new Promise((resolve) => {\n      chrome.permissions.request(permission, resolve);\n    });\n  }\n\n  /**\n   * Checks if the user has provided the given permissions to the extension.\n   *\n   * @param permissions - The permissions to check.\n   */\n  static async permissionsGranted(permissions: string[]): Promise<boolean> {\n    return new Promise((resolve) =>\n      chrome.permissions.contains({ permissions }, (result) => resolve(result)),\n    );\n  }\n\n  static getPlatformInfo(): Promise<browser.runtime.PlatformInfo | chrome.runtime.PlatformInfo> {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.getPlatformInfo();\n    }\n    return new Promise((resolve) => {\n      chrome.runtime.getPlatformInfo(resolve);\n    });\n  }\n\n  /**\n   * Returns the supported BrowserAction API based on the manifest version.\n   */\n  static getBrowserAction() {\n    return BrowserApi.isManifestVersion(3) ? chrome.action : chrome.browserAction;\n  }\n\n  static getSidebarAction(\n    win: Window & typeof globalThis,\n  ): OperaSidebarAction | FirefoxSidebarAction | null {\n    const deviceType = BrowserPlatformUtilsService.getDevice(win);\n    if (deviceType !== DeviceType.FirefoxExtension && deviceType !== DeviceType.OperaExtension) {\n      return null;\n    }\n    return win.opr?.sidebarAction || browser.sidebarAction;\n  }\n\n  static captureVisibleTab(): Promise<string> {\n    return new Promise((resolve) => {\n      chrome.tabs.captureVisibleTab(null, { format: \"png\" }, resolve);\n    });\n  }\n\n  /**\n   * Extension API helper method used to execute a script in a tab.\n   *\n   * @see https://developer.chrome.com/docs/extensions/reference/tabs/#method-executeScript\n   * @param tabId - The id of the tab to execute the script in.\n   * @param details {@link \"InjectDetails\" https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/extensionTypes/InjectDetails}\n   * @param scriptingApiDetails {@link \"ExecutionWorld\" https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/scripting/ExecutionWorld}\n   */\n  static executeScriptInTab(\n    tabId: number,\n    details: chrome.tabs.InjectDetails,\n    scriptingApiDetails?: {\n      world: chrome.scripting.ExecutionWorld;\n    },\n  ): Promise<unknown> {\n    if (BrowserApi.isManifestVersion(3)) {\n      return chrome.scripting.executeScript({\n        target: {\n          tabId: tabId,\n          allFrames: details.allFrames,\n          frameIds: details.frameId ? [details.frameId] : null,\n        },\n        files: details.file ? [details.file] : null,\n        injectImmediately: details.runAt === \"document_start\",\n        world: scriptingApiDetails?.world || \"ISOLATED\",\n      });\n    }\n\n    return new Promise((resolve) => {\n      chrome.tabs.executeScript(tabId, details, (result) => {\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Identifies if the browser autofill settings are overridden by the extension.\n   */\n  static async browserAutofillSettingsOverridden(): Promise<boolean> {\n    const checkOverrideStatus = (details: chrome.types.ChromeSettingGetResultDetails) =>\n      details.levelOfControl === \"controlled_by_this_extension\" && !details.value;\n\n    const autofillAddressOverridden: boolean = await new Promise((resolve) =>\n      chrome.privacy.services.autofillAddressEnabled.get({}, (details) =>\n        resolve(checkOverrideStatus(details)),\n      ),\n    );\n\n    const autofillCreditCardOverridden: boolean = await new Promise((resolve) =>\n      chrome.privacy.services.autofillCreditCardEnabled.get({}, (details) =>\n        resolve(checkOverrideStatus(details)),\n      ),\n    );\n\n    const passwordSavingOverridden: boolean = await new Promise((resolve) =>\n      chrome.privacy.services.passwordSavingEnabled.get({}, (details) =>\n        resolve(checkOverrideStatus(details)),\n      ),\n    );\n\n    return autofillAddressOverridden && autofillCreditCardOverridden && passwordSavingOverridden;\n  }\n\n  /**\n   * Updates the browser autofill settings to the given value.\n   *\n   * @param value - Determines whether to enable or disable the autofill settings.\n   */\n  static updateDefaultBrowserAutofillSettings(value: boolean) {\n    chrome.privacy.services.autofillAddressEnabled.set({ value });\n    chrome.privacy.services.autofillCreditCardEnabled.set({ value });\n    chrome.privacy.services.passwordSavingEnabled.set({ value });\n  }\n\n  /**\n   * Opens the offscreen document with the given reasons and justification.\n   *\n   * @param reasons - List of reasons for opening the offscreen document.\n   * @see https://developer.chrome.com/docs/extensions/reference/api/offscreen#type-Reason\n   * @param justification - Custom written justification for opening the offscreen document.\n   */\n  static async createOffscreenDocument(reasons: chrome.offscreen.Reason[], justification: string) {\n    await chrome.offscreen.createDocument({\n      url: \"offscreen-document/index.html\",\n      reasons,\n      justification,\n    });\n  }\n\n  /**\n   * Closes the offscreen document.\n   *\n   * @param callback - Optional callback to execute after the offscreen document is closed.\n   */\n  static closeOffscreenDocument(callback?: () => void) {\n    chrome.offscreen.closeDocument(() => {\n      if (callback) {\n        callback();\n      }\n    });\n  }\n}\n","import { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { ContextMenuClickedHandler } from \"../browser/context-menu-clicked-handler\";\n\nimport { LockedVaultPendingNotificationsData } from \"./abstractions/notification.background\";\n\nexport default class ContextMenusBackground {\n  private contextMenus: typeof chrome.contextMenus;\n\n  constructor(private contextMenuClickedHandler: ContextMenuClickedHandler) {\n    this.contextMenus = chrome.contextMenus;\n  }\n\n  init() {\n    if (!this.contextMenus) {\n      return;\n    }\n\n    this.contextMenus.onClicked.addListener((info, tab) =>\n      this.contextMenuClickedHandler.run(info, tab),\n    );\n\n    BrowserApi.messageListener(\n      \"contextmenus.background\",\n      (\n        msg: { command: string; data: LockedVaultPendingNotificationsData },\n        sender: chrome.runtime.MessageSender,\n      ) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"contextmenus.background\") {\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.contextMenuClickedHandler\n            .cipherAction(\n              msg.data.commandToRetry.message.contextMenuOnClickData,\n              msg.data.commandToRetry.sender.tab,\n            )\n            .then(() => {\n              // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n            });\n        }\n      },\n    );\n  }\n}\n","import { BrowserApi } from \"../browser/browser-api\";\n\nimport { ScrollOptions } from \"./abstractions/browser-popup-utils.abstractions\";\n\nclass BrowserPopupUtils {\n  /**\n   * Identifies if the popup is within the sidebar.\n   *\n   * @param win - The passed window object.\n   */\n  static inSidebar(win: Window): boolean {\n    return BrowserPopupUtils.urlContainsSearchParams(win, \"uilocation\", \"sidebar\");\n  }\n\n  /**\n   * Identifies if the popup is within the popout.\n   *\n   * @param win - The passed window object.\n   */\n  static inPopout(win: Window): boolean {\n    return BrowserPopupUtils.urlContainsSearchParams(win, \"uilocation\", \"popout\");\n  }\n\n  /**\n   * Identifies if the popup is within the single action popout.\n   *\n   * @param win - The passed window object.\n   * @param popoutKey - The single action popout key used to identify the popout.\n   */\n  static inSingleActionPopout(win: Window, popoutKey: string): boolean {\n    return BrowserPopupUtils.urlContainsSearchParams(win, \"singleActionPopout\", popoutKey);\n  }\n\n  /**\n   * Identifies if the popup is within the popup.\n   *\n   * @param win - The passed window object.\n   */\n  static inPopup(win: Window): boolean {\n    return (\n      win.location.href.indexOf(\"uilocation=\") === -1 ||\n      win.location.href.indexOf(\"uilocation=popup\") > -1\n    );\n  }\n\n  /**\n   * Gets the scroll position of the popup.\n   *\n   * @param win - The passed window object.\n   * @param scrollingContainer - Element tag name of the scrolling container.\n   */\n  static getContentScrollY(win: Window, scrollingContainer = \"main\"): number {\n    const content = win.document.getElementsByTagName(scrollingContainer)[0];\n    return content.scrollTop;\n  }\n\n  /**\n   * Sets the scroll position of the popup.\n   *\n   * @param win - The passed window object.\n   * @param scrollYAmount - The amount to scroll the popup.\n   * @param options - Allows for setting the delay in ms to wait before scrolling the popup and the scrolling container tag name.\n   */\n  static async setContentScrollY(\n    win: Window,\n    scrollYAmount: number | undefined,\n    options: ScrollOptions = {\n      delay: 0,\n      containerSelector: \"main\",\n    },\n  ) {\n    const { delay, containerSelector } = options;\n    return new Promise<void>((resolve) =>\n      win.setTimeout(() => {\n        const container = win.document.querySelector(containerSelector);\n        if (!isNaN(scrollYAmount) && container) {\n          container.scrollTop = scrollYAmount;\n        }\n\n        resolve();\n      }, delay),\n    );\n  }\n\n  /**\n   * Identifies if the background page needs to be initialized.\n   */\n  static backgroundInitializationRequired() {\n    return !BrowserApi.getBackgroundPage();\n  }\n\n  /**\n   * Identifies if the popup is loading in private mode.\n   */\n  static inPrivateMode() {\n    return BrowserPopupUtils.backgroundInitializationRequired() && !BrowserApi.isManifestVersion(3);\n  }\n\n  /**\n   * Opens a popout window of any extension page. If the popout window is already open, it will be focused.\n   *\n   * @param extensionUrlPath - A relative path to the extension page. Example: \"popup/index.html#/tabs/vault\"\n   * @param options - Options for the popout window that overrides the default options.\n   */\n  static async openPopout(\n    extensionUrlPath: string,\n    options: {\n      senderWindowId?: number;\n      singleActionKey?: string;\n      forceCloseExistingWindows?: boolean;\n      windowOptions?: Partial<chrome.windows.CreateData>;\n    } = {},\n  ) {\n    const { senderWindowId, singleActionKey, forceCloseExistingWindows, windowOptions } = options;\n    const defaultPopoutWindowOptions: chrome.windows.CreateData = {\n      type: \"popup\",\n      focused: true,\n      width: 380,\n      height: 630,\n    };\n    const offsetRight = 15;\n    const offsetTop = 90;\n    const popupWidth = defaultPopoutWindowOptions.width;\n    const senderWindow = await BrowserApi.getWindow(senderWindowId);\n    const popoutWindowOptions = {\n      left: senderWindow.left + senderWindow.width - popupWidth - offsetRight,\n      top: senderWindow.top + offsetTop,\n      ...defaultPopoutWindowOptions,\n      ...windowOptions,\n      url: BrowserPopupUtils.buildPopoutUrl(extensionUrlPath, singleActionKey),\n    };\n\n    if (\n      (await BrowserPopupUtils.isSingleActionPopoutOpen(\n        singleActionKey,\n        popoutWindowOptions,\n        forceCloseExistingWindows,\n      )) &&\n      !forceCloseExistingWindows\n    ) {\n      return;\n    }\n\n    return await BrowserApi.createWindow(popoutWindowOptions);\n  }\n\n  /**\n   * Closes the single action popout window.\n   *\n   * @param popoutKey - The single action popout key used to identify the popout.\n   * @param delayClose - The amount of time to wait before closing the popout. Defaults to 0.\n   */\n  static async closeSingleActionPopout(popoutKey: string, delayClose = 0): Promise<void> {\n    const extensionUrl = chrome.runtime.getURL(\"popup/index.html\");\n    const tabs = await BrowserApi.tabsQuery({ url: `${extensionUrl}*` });\n    for (const tab of tabs) {\n      if (!tab.url.includes(`singleActionPopout=${popoutKey}`)) {\n        continue;\n      }\n\n      setTimeout(() => BrowserApi.removeWindow(tab.windowId), delayClose);\n    }\n  }\n\n  /**\n   * Opens a popout window for the current page.\n   * If the current page is set for the current tab, then the\n   * popout window will be set for the vault items listing tab.\n   *\n   * @param win - The passed window object.\n   * @param href - The href to open in the popout window.\n   */\n  static async openCurrentPagePopout(win: Window, href: string = null) {\n    const popoutUrl = href || win.location.href;\n    const parsedUrl = new URL(popoutUrl);\n    let hashRoute = parsedUrl.hash;\n    if (hashRoute.startsWith(\"#/tabs/current\")) {\n      hashRoute = \"#/tabs/vault\";\n    }\n\n    await BrowserPopupUtils.openPopout(`${parsedUrl.pathname}${hashRoute}`);\n\n    if (BrowserPopupUtils.inPopup(win)) {\n      BrowserApi.closePopup(win);\n    }\n  }\n\n  /**\n   * Identifies if a single action window is open based on the passed popoutKey.\n   * Will focus the existing window, and close any other windows that might exist\n   * with the same popout key.\n   *\n   * @param popoutKey - The single action popout key used to identify the popout.\n   * @param windowInfo - The window info to use to update the existing window.\n   * @param forceCloseExistingWindows - Identifies if the existing windows should be closed.\n   */\n  private static async isSingleActionPopoutOpen(\n    popoutKey: string | undefined,\n    windowInfo: chrome.windows.CreateData,\n    forceCloseExistingWindows = false,\n  ) {\n    if (!popoutKey) {\n      return false;\n    }\n\n    const extensionUrl = chrome.runtime.getURL(\"popup/index.html\");\n    const popoutTabs = (await BrowserApi.tabsQuery({ url: `${extensionUrl}*` })).filter((tab) =>\n      tab.url.includes(`singleActionPopout=${popoutKey}`),\n    );\n    if (popoutTabs.length === 0) {\n      return false;\n    }\n\n    if (!forceCloseExistingWindows) {\n      // Update first, remove it from list\n      const tab = popoutTabs.shift();\n      await BrowserApi.updateWindowProperties(tab.windowId, {\n        focused: true,\n        width: windowInfo.width,\n        height: windowInfo.height,\n        top: windowInfo.top,\n        left: windowInfo.left,\n      });\n    }\n\n    popoutTabs.forEach((tab) => BrowserApi.removeWindow(tab.windowId));\n\n    return true;\n  }\n\n  /**\n   * Identifies if the url contains the specified search param and value.\n   *\n   * @param win - The passed window object.\n   * @param searchParam - The search param to identify.\n   * @param searchValue - The search value to identify.\n   */\n  private static urlContainsSearchParams(\n    win: Window,\n    searchParam: string,\n    searchValue: string,\n  ): boolean {\n    return win.location.href.indexOf(`${searchParam}=${searchValue}`) > -1;\n  }\n\n  /**\n   * Builds the popout url path. Ensures that the uilocation param is set to\n   * `popout` and that the singleActionPopout param is set to the passed singleActionKey.\n   *\n   * @param extensionUrlPath - A relative path to the extension page. Example: \"popup/index.html#/tabs/vault\"\n   * @param singleActionKey - The single action popout key used to identify the popout.\n   */\n  private static buildPopoutUrl(extensionUrlPath: string, singleActionKey: string) {\n    const parsedUrl = new URL(chrome.runtime.getURL(extensionUrlPath));\n    parsedUrl.searchParams.set(\"uilocation\", \"popout\");\n\n    if (singleActionKey) {\n      parsedUrl.searchParams.set(\"singleActionPopout\", singleActionKey);\n    }\n\n    return parsedUrl.toString();\n  }\n}\n\nexport default BrowserPopupUtils;\n","import { BrowserApi } from \"../../../platform/browser/browser-api\";\nimport BrowserPopupUtils from \"../../../platform/popup/browser-popup-utils\";\n\nconst AuthPopoutType = {\n  unlockExtension: \"auth_unlockExtension\",\n  ssoAuthResult: \"auth_ssoAuthResult\",\n  twoFactorAuth: \"auth_twoFactorAuth\",\n} as const;\nconst extensionUnlockUrls = new Set([\n  chrome.runtime.getURL(\"popup/index.html#/lock\"),\n  chrome.runtime.getURL(\"popup/index.html#/home\"),\n]);\n\n/**\n * Opens a window that facilitates unlocking / logging into the extension.\n *\n * @param senderTab - Used to determine the windowId of the sender.\n * @param skipNotification - Used to determine whether to show the unlock notification.\n */\nasync function openUnlockPopout(senderTab: chrome.tabs.Tab, skipNotification = false) {\n  const existingPopoutWindowTabs = await BrowserApi.tabsQuery({ windowType: \"popup\" });\n  existingPopoutWindowTabs.forEach((tab) => {\n    if (extensionUnlockUrls.has(tab.url)) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      BrowserApi.removeWindow(tab.windowId);\n    }\n  });\n\n  await BrowserPopupUtils.openPopout(\"popup/index.html\", {\n    singleActionKey: AuthPopoutType.unlockExtension,\n    senderWindowId: senderTab.windowId,\n  });\n  await BrowserApi.tabSendMessageData(senderTab, \"bgUnlockPopoutOpened\", { skipNotification });\n}\n\n/**\n * Closes the unlock popout window.\n */\nasync function closeUnlockPopout() {\n  await BrowserPopupUtils.closeSingleActionPopout(AuthPopoutType.unlockExtension);\n}\n\n/**\n * Opens a window that facilitates presenting the results for SSO authentication.\n *\n * @param resultData - The result data from the SSO authentication.\n */\nasync function openSsoAuthResultPopout(resultData: { code: string; state: string }) {\n  const { code, state } = resultData;\n  const authResultUrl = `popup/index.html#/sso?code=${encodeURIComponent(\n    code,\n  )}&state=${encodeURIComponent(state)}`;\n\n  await BrowserPopupUtils.openPopout(authResultUrl, {\n    singleActionKey: AuthPopoutType.ssoAuthResult,\n  });\n}\n\n/**\n * Opens a window that facilitates two-factor authentication.\n *\n * @param twoFactorAuthData - The data from the two-factor authentication.\n */\nasync function openTwoFactorAuthPopout(twoFactorAuthData: { data: string; remember: string }) {\n  const { data, remember } = twoFactorAuthData;\n  const params =\n    `webAuthnResponse=${encodeURIComponent(data)};` + `remember=${encodeURIComponent(remember)}`;\n  const twoFactorUrl = `popup/index.html#/2fa;${params}`;\n\n  await BrowserPopupUtils.openPopout(twoFactorUrl, {\n    singleActionKey: AuthPopoutType.twoFactorAuth,\n  });\n}\n\n/**\n * Closes the two-factor authentication popout window.\n */\nasync function closeTwoFactorAuthPopout() {\n  await BrowserPopupUtils.closeSingleActionPopout(AuthPopoutType.twoFactorAuth);\n}\n\nexport {\n  AuthPopoutType,\n  openUnlockPopout,\n  closeUnlockPopout,\n  openSsoAuthResultPopout,\n  openTwoFactorAuthPopout,\n  closeTwoFactorAuthPopout,\n};\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\n\nimport { BrowserApi } from \"../../../platform/browser/browser-api\";\nimport BrowserPopupUtils from \"../../../platform/popup/browser-popup-utils\";\n\nconst VaultPopoutType = {\n  viewVaultItem: \"vault_viewVaultItem\",\n  addEditVaultItem: \"vault_AddEditVaultItem\",\n  fido2Popout: \"vault_Fido2Popout\",\n} as const;\n\n/**\n * Opens a popout window that facilitates viewing a vault item.\n *\n * @param senderTab - The tab that sent the request.\n * @param cipherOptions - The cipher id and action to perform.\n */\nasync function openViewVaultItemPopout(\n  senderTab: chrome.tabs.Tab,\n  cipherOptions: {\n    cipherId: string;\n    action: string;\n    forceCloseExistingWindows?: boolean;\n  },\n) {\n  const { cipherId, action, forceCloseExistingWindows } = cipherOptions;\n  let promptWindowPath = \"popup/index.html#/view-cipher\";\n  let queryParamToken = \"?\";\n  const formatQueryString = (key: string, value: string) => {\n    const queryString = `${queryParamToken}${key}=${value}`;\n    queryParamToken = \"&\";\n    return queryString;\n  };\n\n  if (cipherId) {\n    promptWindowPath += formatQueryString(\"cipherId\", cipherId);\n  }\n  if (senderTab.id) {\n    promptWindowPath += formatQueryString(\"senderTabId\", String(senderTab.id));\n  }\n  if (action) {\n    promptWindowPath += formatQueryString(\"action\", action);\n  }\n\n  await BrowserPopupUtils.openPopout(promptWindowPath, {\n    singleActionKey: `${VaultPopoutType.viewVaultItem}_${cipherId}`,\n    senderWindowId: senderTab.windowId,\n    forceCloseExistingWindows,\n  });\n}\n\n/**\n * Closes the view vault item popout window.\n *\n * @param singleActionKey - The single action popout key used to identify the popout.\n * @param delayClose - The amount of time to wait before closing the popout. Defaults to 0.\n */\nasync function closeViewVaultItemPopout(singleActionKey: string, delayClose = 0) {\n  await BrowserPopupUtils.closeSingleActionPopout(singleActionKey, delayClose);\n}\n\n/**\n * Opens a popout window that facilitates re-prompting for\n * the password of a vault item.\n *\n * @param senderTab - The tab that sent the request.\n * @param cipherOptions - The cipher id and action to perform.\n */\nasync function openVaultItemPasswordRepromptPopout(\n  senderTab: chrome.tabs.Tab,\n  cipherOptions: {\n    cipherId: string;\n    action: string;\n  },\n) {\n  await openViewVaultItemPopout(senderTab, {\n    forceCloseExistingWindows: true,\n    ...cipherOptions,\n  });\n  await BrowserApi.tabSendMessageData(senderTab, \"bgVaultItemRepromptPopoutOpened\");\n}\n\n/**\n * Opens a popout window that facilitates adding or editing a vault item.\n *\n * @param senderTab - The window id of the sender.\n * @param cipherOptions - Options passed as query params to the popout.\n */\nasync function openAddEditVaultItemPopout(\n  senderTab: chrome.tabs.Tab,\n  cipherOptions: { cipherId?: string; cipherType?: CipherType } = {},\n) {\n  const { cipherId, cipherType } = cipherOptions;\n  const { url, windowId } = senderTab;\n  let singleActionKey = VaultPopoutType.addEditVaultItem;\n  let addEditCipherUrl = \"popup/index.html#/edit-cipher\";\n  let queryParamToken = \"?\";\n  const formatQueryString = (key: string, value: string) => {\n    const queryString = `${queryParamToken}${key}=${value}`;\n    queryParamToken = \"&\";\n    return queryString;\n  };\n\n  if (cipherId && !cipherType) {\n    singleActionKey += `_${cipherId}`;\n    addEditCipherUrl += formatQueryString(\"cipherId\", cipherId);\n  }\n  if (cipherType && !cipherId) {\n    singleActionKey += `_${cipherType}`;\n    addEditCipherUrl += formatQueryString(\"type\", String(cipherType));\n  }\n  if (senderTab.url) {\n    addEditCipherUrl += formatQueryString(\"uri\", url);\n  }\n\n  await BrowserPopupUtils.openPopout(addEditCipherUrl, {\n    singleActionKey,\n    senderWindowId: windowId,\n  });\n}\n\n/**\n * Closes the add/edit vault item popout window.\n *\n * @param delayClose - The amount of time to wait before closing the popout. Defaults to 0.\n */\nasync function closeAddEditVaultItemPopout(delayClose = 0) {\n  await BrowserPopupUtils.closeSingleActionPopout(VaultPopoutType.addEditVaultItem, delayClose);\n}\n\n/**\n * Opens a popout window that facilitates FIDO2\n * authentication and passkey management.\n *\n * @param senderTab - The tab that sent the request.\n * @param options - Options passed as query params to the popout.\n */\nasync function openFido2Popout(\n  senderTab: chrome.tabs.Tab,\n  options: {\n    sessionId: string;\n    fallbackSupported: boolean;\n  },\n): Promise<chrome.windows.Window[\"id\"]> {\n  const { sessionId, fallbackSupported } = options;\n  const promptWindowPath =\n    \"popup/index.html#/fido2\" +\n    `?sessionId=${sessionId}` +\n    `&fallbackSupported=${fallbackSupported}` +\n    `&senderTabId=${senderTab.id}` +\n    `&senderUrl=${encodeURIComponent(senderTab.url)}`;\n\n  const popoutWindow = await BrowserPopupUtils.openPopout(promptWindowPath, {\n    singleActionKey: `${VaultPopoutType.fido2Popout}_${sessionId}`,\n    senderWindowId: senderTab.windowId,\n    forceCloseExistingWindows: true,\n    windowOptions: { height: 570 },\n  });\n\n  return popoutWindow.id;\n}\n\n/**\n * Closes the FIDO2 popout window associated with the passed session ID.\n *\n * @param sessionId - The session ID of the popout to close.\n */\nasync function closeFido2Popout(sessionId: string): Promise<void> {\n  await BrowserPopupUtils.closeSingleActionPopout(`${VaultPopoutType.fido2Popout}_${sessionId}`);\n}\n\nexport {\n  VaultPopoutType,\n  openViewVaultItemPopout,\n  closeViewVaultItemPopout,\n  openVaultItemPasswordRepromptPopout,\n  openAddEditVaultItemPopout,\n  closeAddEditVaultItemPopout,\n  openFido2Popout,\n  closeFido2Popout,\n};\n","const NotificationQueueMessageType = {\n  AddLogin: \"add\",\n  ChangePassword: \"change\",\n  UnlockVault: \"unlock\",\n  RequestFilelessImport: \"fileless-import\",\n} as const;\n\ntype NotificationQueueMessageTypes =\n  (typeof NotificationQueueMessageType)[keyof typeof NotificationQueueMessageType];\n\nexport { NotificationQueueMessageType, NotificationQueueMessageTypes };\n","import { firstValueFrom } from \"rxjs\";\n\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { NOTIFICATION_BAR_LIFESPAN_MS } from \"@bitwarden/common/autofill/constants\";\nimport { DomainSettingsService } from \"@bitwarden/common/autofill/services/domain-settings.service\";\nimport { UserNotificationSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/user-notification-settings.service\";\nimport { NeverDomains } from \"@bitwarden/common/models/domain/domain-service\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ThemeStateService } from \"@bitwarden/common/platform/theming/theme-state.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { openUnlockPopout } from \"../../auth/popup/utils/auth-popout-window\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { BrowserStateService } from \"../../platform/services/abstractions/browser-state.service\";\nimport { openAddEditVaultItemPopout } from \"../../vault/popup/utils/vault-popout-window\";\nimport { NotificationQueueMessageType } from \"../enums/notification-queue-message-type.enum\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\n\nimport {\n  AddChangePasswordQueueMessage,\n  AddLoginQueueMessage,\n  AddRequestFilelessImportQueueMessage,\n  AddUnlockVaultQueueMessage,\n  ChangePasswordMessageData,\n  AddLoginMessageData,\n  NotificationQueueMessageItem,\n  LockedVaultPendingNotificationsData,\n  NotificationBackgroundExtensionMessage,\n  NotificationBackgroundExtensionMessageHandlers,\n} from \"./abstractions/notification.background\";\nimport { OverlayBackgroundExtensionMessage } from \"./abstractions/overlay.background\";\n\nexport default class NotificationBackground {\n  private openUnlockPopout = openUnlockPopout;\n  private openAddEditVaultItemPopout = openAddEditVaultItemPopout;\n  private notificationQueue: NotificationQueueMessageItem[] = [];\n  private readonly extensionMessageHandlers: NotificationBackgroundExtensionMessageHandlers = {\n    unlockCompleted: ({ message, sender }) => this.handleUnlockCompleted(message, sender),\n    bgGetFolderData: () => this.getFolderData(),\n    bgCloseNotificationBar: ({ sender }) => this.handleCloseNotificationBarMessage(sender),\n    bgAdjustNotificationBar: ({ message, sender }) =>\n      this.handleAdjustNotificationBarMessage(message, sender),\n    bgAddLogin: ({ message, sender }) => this.addLogin(message, sender),\n    bgChangedPassword: ({ message, sender }) => this.changedPassword(message, sender),\n    bgRemoveTabFromNotificationQueue: ({ sender }) =>\n      this.removeTabFromNotificationQueue(sender.tab),\n    bgSaveCipher: ({ message, sender }) => this.handleSaveCipherMessage(message, sender),\n    bgNeverSave: ({ sender }) => this.saveNever(sender.tab),\n    collectPageDetailsResponse: ({ message }) =>\n      this.handleCollectPageDetailsResponseMessage(message),\n    bgUnlockPopoutOpened: ({ message, sender }) => this.unlockVault(message, sender.tab),\n    checkNotificationQueue: ({ sender }) => this.checkNotificationQueue(sender.tab),\n    bgReopenUnlockPopout: ({ sender }) => this.openUnlockPopout(sender.tab),\n    bgGetEnableChangedPasswordPrompt: () => this.getEnableChangedPasswordPrompt(),\n    bgGetEnableAddedLoginPrompt: () => this.getEnableAddedLoginPrompt(),\n    bgGetExcludedDomains: () => this.getExcludedDomains(),\n    getWebVaultUrlForNotification: () => this.getWebVaultUrl(),\n  };\n\n  constructor(\n    private autofillService: AutofillService,\n    private cipherService: CipherService,\n    private authService: AuthService,\n    private policyService: PolicyService,\n    private folderService: FolderService,\n    private stateService: BrowserStateService,\n    private userNotificationSettingsService: UserNotificationSettingsServiceAbstraction,\n    private domainSettingsService: DomainSettingsService,\n    private environmentService: EnvironmentService,\n    private logService: LogService,\n    private themeStateService: ThemeStateService,\n  ) {}\n\n  async init() {\n    if (chrome.runtime == null) {\n      return;\n    }\n\n    this.setupExtensionMessageListener();\n\n    this.cleanupNotificationQueue();\n  }\n\n  /**\n   * Gets the enableChangedPasswordPrompt setting from the user notification settings service.\n   */\n  async getEnableChangedPasswordPrompt(): Promise<boolean> {\n    return await firstValueFrom(this.userNotificationSettingsService.enableChangedPasswordPrompt$);\n  }\n\n  /**\n   * Gets the enableAddedLoginPrompt setting from the user notification settings service.\n   */\n  async getEnableAddedLoginPrompt(): Promise<boolean> {\n    return await firstValueFrom(this.userNotificationSettingsService.enableAddedLoginPrompt$);\n  }\n\n  /**\n   * Gets the neverDomains setting from the domain settings service.\n   */\n  async getExcludedDomains(): Promise<NeverDomains> {\n    return await firstValueFrom(this.domainSettingsService.neverDomains$);\n  }\n\n  /**\n   * Checks the notification queue for any messages that need to be sent to the\n   * specified tab. If no tab is specified, the current tab will be used.\n   *\n   * @param tab - The tab to check the notification queue for\n   */\n  async checkNotificationQueue(tab: chrome.tabs.Tab = null): Promise<void> {\n    if (this.notificationQueue.length === 0) {\n      return;\n    }\n\n    if (tab != null) {\n      await this.doNotificationQueueCheck(tab);\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindow();\n    if (currentTab != null) {\n      await this.doNotificationQueueCheck(currentTab);\n    }\n  }\n\n  private cleanupNotificationQueue() {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].expires < new Date()) {\n        BrowserApi.tabSendMessageData(this.notificationQueue[i].tab, \"closeNotificationBar\").catch(\n          (error) => this.logService.error(error),\n        );\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n    setTimeout(() => this.cleanupNotificationQueue(), 30000); // check every 30 seconds\n  }\n\n  private async doNotificationQueueCheck(tab: chrome.tabs.Tab): Promise<void> {\n    const tabDomain = Utils.getDomain(tab?.url);\n    if (!tabDomain) {\n      return;\n    }\n\n    const queueMessage = this.notificationQueue.find(\n      (message) => message.tab.id === tab.id && message.domain === tabDomain,\n    );\n    if (queueMessage) {\n      await this.sendNotificationQueueMessage(tab, queueMessage);\n    }\n  }\n\n  private async sendNotificationQueueMessage(\n    tab: chrome.tabs.Tab,\n    notificationQueueMessage: NotificationQueueMessageItem,\n  ) {\n    const notificationType = notificationQueueMessage.type;\n\n    const typeData: Record<string, any> = {\n      isVaultLocked: notificationQueueMessage.wasVaultLocked,\n      theme: await firstValueFrom(this.themeStateService.selectedTheme$),\n    };\n\n    switch (notificationType) {\n      case NotificationQueueMessageType.AddLogin:\n        typeData.removeIndividualVault = await this.removeIndividualVault();\n        break;\n      case NotificationQueueMessageType.RequestFilelessImport:\n        typeData.importType = (\n          notificationQueueMessage as AddRequestFilelessImportQueueMessage\n        ).importType;\n        break;\n    }\n\n    await BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n      type: notificationType,\n      typeData,\n    });\n  }\n\n  /**\n   * Removes any login messages from the notification queue that\n   * are associated with the specified tab.\n   *\n   * @param tab - The tab to remove messages for\n   */\n  private removeTabFromNotificationQueue(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].tab.id === tab.id) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * Adds a login message to the notification queue, prompting the user to save\n   * the login if it does not already exist in the vault. If the cipher exists\n   * but the password has changed, the user will be prompted to update the password.\n   *\n   * @param message - The message to add to the queue\n   * @param sender - The contextual sender of the message\n   */\n  private async addLogin(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    const authStatus = await this.authService.getAuthStatus();\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      return;\n    }\n\n    const loginInfo = message.login;\n    const normalizedUsername = loginInfo.username ? loginInfo.username.toLowerCase() : \"\";\n    const loginDomain = Utils.getDomain(loginInfo.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    const addLoginIsEnabled = await this.getEnableAddedLoginPrompt();\n\n    if (authStatus === AuthenticationStatus.Locked) {\n      if (addLoginIsEnabled) {\n        await this.pushAddLoginToQueue(loginDomain, loginInfo, sender.tab, true);\n      }\n\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(loginInfo.url);\n    const usernameMatches = ciphers.filter(\n      (c) => c.login.username != null && c.login.username.toLowerCase() === normalizedUsername,\n    );\n    if (addLoginIsEnabled && usernameMatches.length === 0) {\n      await this.pushAddLoginToQueue(loginDomain, loginInfo, sender.tab);\n      return;\n    }\n\n    const changePasswordIsEnabled = await this.getEnableChangedPasswordPrompt();\n\n    if (\n      changePasswordIsEnabled &&\n      usernameMatches.length === 1 &&\n      usernameMatches[0].login.password !== loginInfo.password\n    ) {\n      await this.pushChangePasswordToQueue(\n        usernameMatches[0].id,\n        loginDomain,\n        loginInfo.password,\n        sender.tab,\n      );\n    }\n  }\n\n  private async pushAddLoginToQueue(\n    loginDomain: string,\n    loginInfo: AddLoginMessageData,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false,\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddLoginQueueMessage = {\n      type: NotificationQueueMessageType.AddLogin,\n      username: loginInfo.username,\n      password: loginInfo.password,\n      domain: loginDomain,\n      uri: loginInfo.url,\n      tab: tab,\n      expires: new Date(new Date().getTime() + NOTIFICATION_BAR_LIFESPAN_MS),\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  /**\n   * Adds a change password message to the notification queue, prompting the user\n   * to update the password for a login that has changed.\n   *\n   * @param message - The message to add to the queue\n   * @param sender - The contextual sender of the message\n   */\n  private async changedPassword(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    const changeData = message.data as ChangePasswordMessageData;\n    const loginDomain = Utils.getDomain(changeData.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      await this.pushChangePasswordToQueue(\n        null,\n        loginDomain,\n        changeData.newPassword,\n        sender.tab,\n        true,\n      );\n      return;\n    }\n\n    let id: string = null;\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(changeData.url);\n    if (changeData.currentPassword != null) {\n      const passwordMatches = ciphers.filter(\n        (c) => c.login.password === changeData.currentPassword,\n      );\n      if (passwordMatches.length === 1) {\n        id = passwordMatches[0].id;\n      }\n    } else if (ciphers.length === 1) {\n      id = ciphers[0].id;\n    }\n    if (id != null) {\n      await this.pushChangePasswordToQueue(id, loginDomain, changeData.newPassword, sender.tab);\n    }\n  }\n\n  /**\n   * Sends the page details to the notification bar. Will query all\n   * forms with a password field and pass them to the notification bar.\n   *\n   * @param message - The extension message\n   */\n  private async handleCollectPageDetailsResponseMessage(\n    message: NotificationBackgroundExtensionMessage,\n  ) {\n    if (message.sender !== \"notificationBar\") {\n      return;\n    }\n\n    const forms = this.autofillService.getFormsWithPasswordFields(message.details);\n    await BrowserApi.tabSendMessageData(message.tab, \"notificationBarPageDetails\", {\n      details: message.details,\n      forms: forms,\n    });\n  }\n\n  /**\n   * Sets up a notification to unlock the vault when the user\n   * attempts to autofill a cipher while the vault is locked.\n   *\n   * @param message - Extension message, determines if the notification should be skipped\n   * @param tab - The tab that the message was sent from\n   */\n  private async unlockVault(message: NotificationBackgroundExtensionMessage, tab: chrome.tabs.Tab) {\n    if (message.data?.skipNotification) {\n      return;\n    }\n\n    const currentAuthStatus = await this.authService.getAuthStatus();\n    if (currentAuthStatus !== AuthenticationStatus.Locked || this.notificationQueue.length) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(tab.url);\n    if (loginDomain) {\n      await this.pushUnlockVaultToQueue(loginDomain, tab);\n    }\n  }\n\n  /**\n   * Sets up a notification to request a fileless import when the user\n   * attempts to trigger an import from a third party website.\n   *\n   * @param tab - The tab that we are sending the notification to\n   * @param importType - The type of import that is being requested\n   */\n  async requestFilelessImport(tab: chrome.tabs.Tab, importType: string) {\n    const currentAuthStatus = await this.authService.getAuthStatus();\n    if (currentAuthStatus !== AuthenticationStatus.Unlocked || this.notificationQueue.length) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(tab.url);\n    if (loginDomain) {\n      await this.pushRequestFilelessImportToQueue(loginDomain, tab, importType);\n    }\n  }\n\n  private async pushChangePasswordToQueue(\n    cipherId: string,\n    loginDomain: string,\n    newPassword: string,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false,\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddChangePasswordQueueMessage = {\n      type: NotificationQueueMessageType.ChangePassword,\n      cipherId: cipherId,\n      newPassword: newPassword,\n      domain: loginDomain,\n      tab: tab,\n      expires: new Date(new Date().getTime() + NOTIFICATION_BAR_LIFESPAN_MS),\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async pushUnlockVaultToQueue(loginDomain: string, tab: chrome.tabs.Tab) {\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddUnlockVaultQueueMessage = {\n      type: NotificationQueueMessageType.UnlockVault,\n      domain: loginDomain,\n      tab: tab,\n      expires: new Date(new Date().getTime() + 0.5 * 60000), // 30 seconds\n      wasVaultLocked: true,\n    };\n    await this.sendNotificationQueueMessage(tab, message);\n  }\n\n  /**\n   * Pushes a request to start a fileless import to the notification queue.\n   * This will display a notification bar to the user, prompting them to\n   * start the import.\n   *\n   * @param loginDomain - The domain of the tab that we are sending the notification to\n   * @param tab - The tab that we are sending the notification to\n   * @param importType - The type of import that is being requested\n   */\n  private async pushRequestFilelessImportToQueue(\n    loginDomain: string,\n    tab: chrome.tabs.Tab,\n    importType?: string,\n  ) {\n    this.removeTabFromNotificationQueue(tab);\n    const message: AddRequestFilelessImportQueueMessage = {\n      type: NotificationQueueMessageType.RequestFilelessImport,\n      domain: loginDomain,\n      tab,\n      expires: new Date(new Date().getTime() + 0.5 * 60000), // 30 seconds\n      wasVaultLocked: false,\n      importType,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n    this.removeTabFromNotificationQueue(tab);\n  }\n\n  /**\n   * Saves a cipher based on the message sent from the notification bar. If the vault\n   * is locked, the message will be added to the notification queue and the unlock\n   * popout will be opened.\n   *\n   * @param message - The extension message\n   * @param sender - The contextual sender of the message\n   */\n  private async handleSaveCipherMessage(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      await BrowserApi.tabSendMessageData(sender.tab, \"addToLockedVaultPendingNotifications\", {\n        commandToRetry: {\n          message: {\n            command: message.command,\n            edit: message.edit,\n            folder: message.folder,\n          },\n          sender: sender,\n        },\n        target: \"notification.background\",\n      } as LockedVaultPendingNotificationsData);\n      await this.openUnlockPopout(sender.tab);\n      return;\n    }\n\n    await this.saveOrUpdateCredentials(sender.tab, message.edit, message.folder);\n  }\n\n  /**\n   * Saves or updates credentials based on the message within the\n   * notification queue that is associated with the specified tab.\n   *\n   * @param tab - The tab to save or update credentials for\n   * @param edit - Identifies if the credentials should be edited or simply added\n   * @param folderId - The folder to add the cipher to\n   */\n  private async saveOrUpdateCredentials(tab: chrome.tabs.Tab, edit: boolean, folderId?: string) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tab.id !== tab.id ||\n        (queueMessage.type !== NotificationQueueMessageType.AddLogin &&\n          queueMessage.type !== NotificationQueueMessageType.ChangePassword)\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n\n      if (queueMessage.type === NotificationQueueMessageType.ChangePassword) {\n        const cipherView = await this.getDecryptedCipherById(queueMessage.cipherId);\n        await this.updatePassword(cipherView, queueMessage.newPassword, edit, tab);\n        return;\n      }\n\n      // If the vault was locked, check if a cipher needs updating instead of creating a new one\n      if (queueMessage.wasVaultLocked) {\n        const allCiphers = await this.cipherService.getAllDecryptedForUrl(queueMessage.uri);\n        const existingCipher = allCiphers.find(\n          (c) =>\n            c.login.username != null && c.login.username.toLowerCase() === queueMessage.username,\n        );\n\n        if (existingCipher != null) {\n          await this.updatePassword(existingCipher, queueMessage.password, edit, tab);\n          return;\n        }\n      }\n\n      folderId = (await this.folderExists(folderId)) ? folderId : null;\n      const newCipher = this.convertAddLoginQueueMessageToCipherView(queueMessage, folderId);\n\n      if (edit) {\n        await this.editItem(newCipher, tab);\n        await BrowserApi.tabSendMessage(tab, { command: \"closeNotificationBar\" });\n        return;\n      }\n\n      const cipher = await this.cipherService.encrypt(newCipher);\n      try {\n        await this.cipherService.createWithServer(cipher);\n        await BrowserApi.tabSendMessage(tab, { command: \"saveCipherAttemptCompleted\" });\n        await BrowserApi.tabSendMessage(tab, { command: \"addedCipher\" });\n      } catch (error) {\n        await BrowserApi.tabSendMessageData(tab, \"saveCipherAttemptCompleted\", {\n          error: String(error.message),\n        });\n      }\n    }\n  }\n\n  /**\n   * Handles updating an existing cipher's password. If the cipher\n   * is being edited, a popup will be opened to allow the user to\n   * edit the cipher.\n   *\n   * @param cipherView - The cipher to update\n   * @param newPassword - The new password to update the cipher with\n   * @param edit - Identifies if the cipher should be edited or simply updated\n   * @param tab - The tab that the message was sent from\n   */\n  private async updatePassword(\n    cipherView: CipherView,\n    newPassword: string,\n    edit: boolean,\n    tab: chrome.tabs.Tab,\n  ) {\n    cipherView.login.password = newPassword;\n\n    if (edit) {\n      await this.editItem(cipherView, tab);\n      await BrowserApi.tabSendMessage(tab, { command: \"closeNotificationBar\" });\n      await BrowserApi.tabSendMessage(tab, { command: \"editedCipher\" });\n      return;\n    }\n\n    const cipher = await this.cipherService.encrypt(cipherView);\n    try {\n      // We've only updated the password, no need to broadcast editedCipher message\n      await this.cipherService.updateWithServer(cipher);\n      await BrowserApi.tabSendMessage(tab, { command: \"saveCipherAttemptCompleted\" });\n    } catch (error) {\n      await BrowserApi.tabSendMessageData(tab, \"saveCipherAttemptCompleted\", {\n        error: String(error.message),\n      });\n    }\n  }\n\n  /**\n   * Sets the add/edit cipher info in the state service\n   * and opens the add/edit vault item popout.\n   *\n   * @param cipherView - The cipher to edit\n   * @param senderTab - The tab that the message was sent from\n   */\n  private async editItem(cipherView: CipherView, senderTab: chrome.tabs.Tab) {\n    await this.stateService.setAddEditCipherInfo({\n      cipher: cipherView,\n      collectionIds: cipherView.collectionIds,\n    });\n\n    await this.openAddEditVaultItemPopout(senderTab, { cipherId: cipherView.id });\n  }\n\n  private async folderExists(folderId: string) {\n    if (Utils.isNullOrWhitespace(folderId) || folderId === \"null\") {\n      return false;\n    }\n\n    const folders = await firstValueFrom(this.folderService.folderViews$);\n    return folders.some((x) => x.id === folderId);\n  }\n\n  private async getDecryptedCipherById(cipherId: string) {\n    const cipher = await this.cipherService.get(cipherId);\n    if (cipher != null && cipher.type === CipherType.Login) {\n      return await cipher.decrypt(await this.cipherService.getKeyForCipherKeyDecryption(cipher));\n    }\n    return null;\n  }\n\n  /**\n   * Saves the current tab's domain to the never save list.\n   *\n   * @param tab - The tab that sent the neverSave message\n   */\n  private async saveNever(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tab.id !== tab.id ||\n        queueMessage.type !== NotificationQueueMessageType.AddLogin\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      await BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      const hostname = Utils.getHostname(tab.url);\n      await this.cipherService.saveNeverDomain(hostname);\n    }\n  }\n\n  /**\n   * Returns the first value found from the folder service's folderViews$ observable.\n   */\n  private async getFolderData() {\n    return await firstValueFrom(this.folderService.folderViews$);\n  }\n\n  private async getWebVaultUrl(): Promise<string> {\n    const env = await firstValueFrom(this.environmentService.environment$);\n    return env.getWebVaultUrl();\n  }\n\n  private async removeIndividualVault(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n    );\n  }\n\n  /**\n   * Handles the unlockCompleted extension message. Will close the notification bar\n   * after an attempted autofill action, and retry the autofill action if the message\n   * contains a follow-up command.\n   *\n   * @param message - The extension message\n   * @param sender - The contextual sender of the message\n   */\n  private async handleUnlockCompleted(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ): Promise<void> {\n    const messageData = message.data as LockedVaultPendingNotificationsData;\n    const retryCommand = messageData.commandToRetry.message.command;\n    if (retryCommand === \"autofill_login\") {\n      await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n    }\n\n    if (messageData.target !== \"notification.background\") {\n      return;\n    }\n\n    const retryHandler: CallableFunction | undefined = this.extensionMessageHandlers[retryCommand];\n    if (retryHandler) {\n      retryHandler({\n        message: messageData.commandToRetry.message,\n        sender: messageData.commandToRetry.sender,\n      });\n    }\n  }\n\n  /**\n   * Sends a message back to the sender tab which\n   * triggers closure of the notification bar.\n   *\n   * @param sender - The contextual sender of the message\n   */\n  private async handleCloseNotificationBarMessage(sender: chrome.runtime.MessageSender) {\n    await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n  }\n\n  /**\n   * Sends a message back to the sender tab which triggers\n   * an CSS adjustment of the notification bar.\n   *\n   * @param message - The extension message\n   * @param sender - The contextual sender of the message\n   */\n  private async handleAdjustNotificationBarMessage(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    await BrowserApi.tabSendMessageData(sender.tab, \"adjustNotificationBar\", message.data);\n  }\n\n  /**\n   * Accepts a login queue message and converts it into a\n   * login uri view, login view, and cipher view.\n   *\n   * @param message - The message to convert to a cipher view\n   * @param folderId - The folder to add the cipher to\n   */\n  private convertAddLoginQueueMessageToCipherView(\n    message: AddLoginQueueMessage,\n    folderId?: string,\n  ): CipherView {\n    const uriView = new LoginUriView();\n    uriView.uri = message.uri;\n\n    const loginView = new LoginView();\n    loginView.uris = [uriView];\n    loginView.username = message.username;\n    loginView.password = message.password;\n\n    const cipherView = new CipherView();\n    cipherView.name = (Utils.getHostname(message.uri) || message.domain).replace(/^www\\./, \"\");\n    cipherView.folderId = folderId;\n    cipherView.type = CipherType.Login;\n    cipherView.login = loginView;\n\n    return cipherView;\n  }\n\n  private setupExtensionMessageListener() {\n    BrowserApi.messageListener(\"notification.background\", this.handleExtensionMessage);\n  }\n\n  private handleExtensionMessage = (\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response?: any) => void,\n  ) => {\n    const handler: CallableFunction | undefined = this.extensionMessageHandlers[message?.command];\n    if (!handler) {\n      return;\n    }\n\n    const messageResponse = handler({ message, sender });\n    if (!messageResponse) {\n      return;\n    }\n\n    Promise.resolve(messageResponse)\n      .then((response) => sendResponse(response))\n      .catch((error) => this.logService.error(error));\n    return true;\n  };\n}\n","import { Utils } from \"../../platform/misc/utils\";\nimport { CipherType } from \"../enums/cipher-type\";\nimport { CipherView } from \"../models/view/cipher.view\";\n\nexport function buildCipherIcon(iconsServerUrl: string, cipher: CipherView, showFavicon: boolean) {\n  let icon;\n  let image;\n  let fallbackImage = \"\";\n  const cardIcons: Record<string, string> = {\n    Visa: \"card-visa\",\n    Mastercard: \"card-mastercard\",\n    Amex: \"card-amex\",\n    Discover: \"card-discover\",\n    \"Diners Club\": \"card-diners-club\",\n    JCB: \"card-jcb\",\n    Maestro: \"card-maestro\",\n    UnionPay: \"card-union-pay\",\n    RuPay: \"card-ru-pay\",\n  };\n\n  switch (cipher.type) {\n    case CipherType.Login:\n      icon = \"bwi-globe\";\n\n      if (cipher.login.uri) {\n        let hostnameUri = cipher.login.uri;\n        let isWebsite = false;\n\n        if (hostnameUri.indexOf(\"androidapp://\") === 0) {\n          icon = \"bwi-android\";\n          image = null;\n        } else if (hostnameUri.indexOf(\"iosapp://\") === 0) {\n          icon = \"bwi-apple\";\n          image = null;\n        } else if (\n          showFavicon &&\n          hostnameUri.indexOf(\"://\") === -1 &&\n          hostnameUri.indexOf(\".\") > -1\n        ) {\n          hostnameUri = `http://${hostnameUri}`;\n          isWebsite = true;\n        } else if (showFavicon) {\n          isWebsite = hostnameUri.indexOf(\"http\") === 0 && hostnameUri.indexOf(\".\") > -1;\n        }\n\n        if (showFavicon && isWebsite) {\n          try {\n            image = `${iconsServerUrl}/${Utils.getHostname(hostnameUri)}/icon.png`;\n            fallbackImage = \"images/bwi-globe.png\";\n          } catch (e) {\n            // Ignore error since the fallback icon will be shown if image is null.\n          }\n        }\n      } else {\n        image = null;\n      }\n      break;\n    case CipherType.SecureNote:\n      icon = \"bwi-sticky-note\";\n      break;\n    case CipherType.Card:\n      icon = \"bwi-credit-card\";\n      if (showFavicon && cipher.card.brand in cardIcons) {\n        icon = `credit-card-icon ${cardIcons[cipher.card.brand]}`;\n      }\n      break;\n    case CipherType.Identity:\n      icon = \"bwi-id-card\";\n      break;\n    default:\n      break;\n  }\n\n  return {\n    imageEnabled: showFavicon,\n    image,\n    fallbackImage,\n    icon,\n  };\n}\n","const AutofillOverlayElement = {\n  Button: \"autofill-overlay-button\",\n  List: \"autofill-overlay-list\",\n} as const;\n\nconst AutofillOverlayPort = {\n  Button: \"autofill-overlay-button-port\",\n  List: \"autofill-overlay-list-port\",\n} as const;\n\nconst RedirectFocusDirection = {\n  Current: \"current\",\n  Previous: \"previous\",\n  Next: \"next\",\n} as const;\n\nexport { AutofillOverlayElement, AutofillOverlayPort, RedirectFocusDirection };\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { SHOW_AUTOFILL_BUTTON } from \"@bitwarden/common/autofill/constants\";\nimport { AutofillSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport { DomainSettingsService } from \"@bitwarden/common/autofill/services/domain-settings.service\";\nimport { InlineMenuVisibilitySetting } from \"@bitwarden/common/autofill/types\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ThemeStateService } from \"@bitwarden/common/platform/theming/theme-state.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { buildCipherIcon } from \"@bitwarden/common/vault/icon/build-cipher-icon\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { openUnlockPopout } from \"../../auth/popup/utils/auth-popout-window\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport {\n  openViewVaultItemPopout,\n  openAddEditVaultItemPopout,\n} from \"../../vault/popup/utils/vault-popout-window\";\nimport { AutofillService, PageDetail } from \"../services/abstractions/autofill.service\";\nimport { AutofillOverlayElement, AutofillOverlayPort } from \"../utils/autofill-overlay.enum\";\n\nimport { LockedVaultPendingNotificationsData } from \"./abstractions/notification.background\";\nimport {\n  FocusedFieldData,\n  OverlayBackgroundExtensionMessageHandlers,\n  OverlayButtonPortMessageHandlers,\n  OverlayCipherData,\n  OverlayListPortMessageHandlers,\n  OverlayBackground as OverlayBackgroundInterface,\n  OverlayBackgroundExtensionMessage,\n  OverlayAddNewItemMessage,\n  OverlayPortMessage,\n  WebsiteIconData,\n} from \"./abstractions/overlay.background\";\n\nclass OverlayBackground implements OverlayBackgroundInterface {\n  private readonly openUnlockPopout = openUnlockPopout;\n  private readonly openViewVaultItemPopout = openViewVaultItemPopout;\n  private readonly openAddEditVaultItemPopout = openAddEditVaultItemPopout;\n  private overlayLoginCiphers: Map<string, CipherView> = new Map();\n  private pageDetailsForTab: Record<\n    chrome.runtime.MessageSender[\"tab\"][\"id\"],\n    Map<chrome.runtime.MessageSender[\"frameId\"], PageDetail>\n  > = {};\n  private userAuthStatus: AuthenticationStatus = AuthenticationStatus.LoggedOut;\n  private overlayButtonPort: chrome.runtime.Port;\n  private overlayListPort: chrome.runtime.Port;\n  private focusedFieldData: FocusedFieldData;\n  private overlayPageTranslations: Record<string, string>;\n  private iconsServerUrl: string;\n  private readonly extensionMessageHandlers: OverlayBackgroundExtensionMessageHandlers = {\n    openAutofillOverlay: () => this.openOverlay(false),\n    autofillOverlayElementClosed: ({ message }) => this.overlayElementClosed(message),\n    autofillOverlayAddNewVaultItem: ({ message, sender }) => this.addNewVaultItem(message, sender),\n    getAutofillOverlayVisibility: () => this.getOverlayVisibility(),\n    checkAutofillOverlayFocused: () => this.checkOverlayFocused(),\n    focusAutofillOverlayList: () => this.focusOverlayList(),\n    updateAutofillOverlayPosition: ({ message }) => this.updateOverlayPosition(message),\n    updateAutofillOverlayHidden: ({ message }) => this.updateOverlayHidden(message),\n    updateFocusedFieldData: ({ message }) => this.setFocusedFieldData(message),\n    collectPageDetailsResponse: ({ message, sender }) => this.storePageDetails(message, sender),\n    unlockCompleted: ({ message }) => this.unlockCompleted(message),\n    addEditCipherSubmitted: () => this.updateOverlayCiphers(),\n    deletedCipher: () => this.updateOverlayCiphers(),\n  };\n  private readonly overlayButtonPortMessageHandlers: OverlayButtonPortMessageHandlers = {\n    overlayButtonClicked: ({ port }) => this.handleOverlayButtonClicked(port),\n    closeAutofillOverlay: ({ port }) => this.closeOverlay(port),\n    forceCloseAutofillOverlay: ({ port }) => this.closeOverlay(port, true),\n    overlayPageBlurred: () => this.checkOverlayListFocused(),\n    redirectOverlayFocusOut: ({ message, port }) => this.redirectOverlayFocusOut(message, port),\n  };\n  private readonly overlayListPortMessageHandlers: OverlayListPortMessageHandlers = {\n    checkAutofillOverlayButtonFocused: () => this.checkOverlayButtonFocused(),\n    forceCloseAutofillOverlay: ({ port }) => this.closeOverlay(port, true),\n    overlayPageBlurred: () => this.checkOverlayButtonFocused(),\n    unlockVault: ({ port }) => this.unlockVault(port),\n    fillSelectedListItem: ({ message, port }) => this.fillSelectedOverlayListItem(message, port),\n    addNewVaultItem: ({ port }) => this.getNewVaultItemDetails(port),\n    viewSelectedCipher: ({ message, port }) => this.viewSelectedCipher(message, port),\n    redirectOverlayFocusOut: ({ message, port }) => this.redirectOverlayFocusOut(message, port),\n  };\n\n  constructor(\n    private cipherService: CipherService,\n    private autofillService: AutofillService,\n    private authService: AuthService,\n    private environmentService: EnvironmentService,\n    private domainSettingsService: DomainSettingsService,\n    private stateService: StateService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private themeStateService: ThemeStateService,\n  ) {}\n\n  /**\n   * Removes cached page details for a tab\n   * based on the passed tabId.\n   *\n   * @param tabId - Used to reference the page details of a specific tab\n   */\n  removePageDetails(tabId: number) {\n    if (!this.pageDetailsForTab[tabId]) {\n      return;\n    }\n\n    this.pageDetailsForTab[tabId].clear();\n    delete this.pageDetailsForTab[tabId];\n  }\n\n  /**\n   * Sets up the extension message listeners and gets the settings for the\n   * overlay's visibility and the user's authentication status.\n   */\n  async init() {\n    this.setupExtensionMessageListeners();\n    const env = await firstValueFrom(this.environmentService.environment$);\n    this.iconsServerUrl = env.getIconsUrl();\n    await this.getOverlayVisibility();\n    await this.getAuthStatus();\n  }\n\n  /**\n   * Updates the overlay list's ciphers and sends the updated list to the overlay list iframe.\n   * Queries all ciphers for the given url, and sorts them by last used. Will not update the\n   * list of ciphers if the extension is not unlocked.\n   */\n  async updateOverlayCiphers() {\n    if (this.userAuthStatus !== AuthenticationStatus.Unlocked) {\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindowId();\n    if (!currentTab?.url) {\n      return;\n    }\n\n    this.overlayLoginCiphers = new Map();\n    const ciphersViews = (await this.cipherService.getAllDecryptedForUrl(currentTab.url)).sort(\n      (a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b),\n    );\n    for (let cipherIndex = 0; cipherIndex < ciphersViews.length; cipherIndex++) {\n      this.overlayLoginCiphers.set(`overlay-cipher-${cipherIndex}`, ciphersViews[cipherIndex]);\n    }\n\n    const ciphers = await this.getOverlayCipherData();\n    this.overlayListPort?.postMessage({ command: \"updateOverlayListCiphers\", ciphers });\n    await BrowserApi.tabSendMessageData(currentTab, \"updateIsOverlayCiphersPopulated\", {\n      isOverlayCiphersPopulated: Boolean(ciphers.length),\n    });\n  }\n\n  /**\n   * Strips out unnecessary data from the ciphers and returns an array of\n   * objects that contain the cipher data needed for the overlay list.\n   */\n  private async getOverlayCipherData(): Promise<OverlayCipherData[]> {\n    const showFavicons = await firstValueFrom(this.domainSettingsService.showFavicons$);\n    const overlayCiphersArray = Array.from(this.overlayLoginCiphers);\n    const overlayCipherData = [];\n    let loginCipherIcon: WebsiteIconData;\n\n    for (let cipherIndex = 0; cipherIndex < overlayCiphersArray.length; cipherIndex++) {\n      const [overlayCipherId, cipher] = overlayCiphersArray[cipherIndex];\n      if (!loginCipherIcon && cipher.type === CipherType.Login) {\n        loginCipherIcon = buildCipherIcon(this.iconsServerUrl, cipher, showFavicons);\n      }\n\n      overlayCipherData.push({\n        id: overlayCipherId,\n        name: cipher.name,\n        type: cipher.type,\n        reprompt: cipher.reprompt,\n        favorite: cipher.favorite,\n        icon:\n          cipher.type === CipherType.Login\n            ? loginCipherIcon\n            : buildCipherIcon(this.iconsServerUrl, cipher, showFavicons),\n        login: cipher.type === CipherType.Login ? { username: cipher.login.username } : null,\n        card: cipher.type === CipherType.Card ? cipher.card.subTitle : null,\n      });\n    }\n\n    return overlayCipherData;\n  }\n\n  /**\n   * Handles aggregation of page details for a tab. Stores the page details\n   * in association with the tabId of the tab that sent the message.\n   *\n   * @param message - Message received from the `collectPageDetailsResponse` command\n   * @param sender - The sender of the message\n   */\n  private storePageDetails(\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    const pageDetails = {\n      frameId: sender.frameId,\n      tab: sender.tab,\n      details: message.details,\n    };\n\n    const pageDetailsMap = this.pageDetailsForTab[sender.tab.id];\n    if (!pageDetailsMap) {\n      this.pageDetailsForTab[sender.tab.id] = new Map([[sender.frameId, pageDetails]]);\n      return;\n    }\n\n    pageDetailsMap.set(sender.frameId, pageDetails);\n  }\n\n  /**\n   * Triggers autofill for the selected cipher in the overlay list. Also places\n   * the selected cipher at the top of the list of ciphers.\n   *\n   * @param overlayCipherId - Cipher ID corresponding to the overlayLoginCiphers map. Does not correspond to the actual cipher's ID.\n   * @param sender - The sender of the port message\n   */\n  private async fillSelectedOverlayListItem(\n    { overlayCipherId }: OverlayPortMessage,\n    { sender }: chrome.runtime.Port,\n  ) {\n    const pageDetails = this.pageDetailsForTab[sender.tab.id];\n    if (!overlayCipherId || !pageDetails?.size) {\n      return;\n    }\n\n    const cipher = this.overlayLoginCiphers.get(overlayCipherId);\n\n    if (await this.autofillService.isPasswordRepromptRequired(cipher, sender.tab)) {\n      return;\n    }\n    const totpCode = await this.autofillService.doAutoFill({\n      tab: sender.tab,\n      cipher: cipher,\n      pageDetails: Array.from(pageDetails.values()),\n      fillNewPassword: true,\n      allowTotpAutofill: true,\n    });\n\n    if (totpCode) {\n      this.platformUtilsService.copyToClipboard(totpCode);\n    }\n\n    this.overlayLoginCiphers = new Map([[overlayCipherId, cipher], ...this.overlayLoginCiphers]);\n  }\n\n  /**\n   * Checks if the overlay is focused. Will check the overlay list\n   * if it is open, otherwise it will check the overlay button.\n   */\n  private checkOverlayFocused() {\n    if (this.overlayListPort) {\n      this.checkOverlayListFocused();\n\n      return;\n    }\n\n    this.checkOverlayButtonFocused();\n  }\n\n  /**\n   * Posts a message to the overlay button iframe to check if it is focused.\n   */\n  private checkOverlayButtonFocused() {\n    this.overlayButtonPort?.postMessage({ command: \"checkAutofillOverlayButtonFocused\" });\n  }\n\n  /**\n   * Posts a message to the overlay list iframe to check if it is focused.\n   */\n  private checkOverlayListFocused() {\n    this.overlayListPort?.postMessage({ command: \"checkAutofillOverlayListFocused\" });\n  }\n\n  /**\n   * Sends a message to the sender tab to close the autofill overlay.\n   *\n   * @param sender - The sender of the port message\n   * @param forceCloseOverlay - Identifies whether the overlay should be force closed\n   */\n  private closeOverlay({ sender }: chrome.runtime.Port, forceCloseOverlay = false) {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.tabSendMessageData(sender.tab, \"closeAutofillOverlay\", { forceCloseOverlay });\n  }\n\n  /**\n   * Handles cleanup when an overlay element is closed. Disconnects\n   * the list and button ports and sets them to null.\n   *\n   * @param overlayElement - The overlay element that was closed, either the list or button\n   */\n  private overlayElementClosed({ overlayElement }: OverlayBackgroundExtensionMessage) {\n    if (overlayElement === AutofillOverlayElement.Button) {\n      this.overlayButtonPort?.disconnect();\n      this.overlayButtonPort = null;\n\n      return;\n    }\n\n    this.overlayListPort?.disconnect();\n    this.overlayListPort = null;\n  }\n\n  /**\n   * Updates the position of either the overlay list or button. The position\n   * is based on the focused field's position and dimensions.\n   *\n   * @param overlayElement - The overlay element to update, either the list or button\n   */\n  private updateOverlayPosition({ overlayElement }: { overlayElement?: string }) {\n    if (!overlayElement) {\n      return;\n    }\n\n    if (overlayElement === AutofillOverlayElement.Button) {\n      this.overlayButtonPort?.postMessage({\n        command: \"updateIframePosition\",\n        styles: this.getOverlayButtonPosition(),\n      });\n\n      return;\n    }\n\n    this.overlayListPort?.postMessage({\n      command: \"updateIframePosition\",\n      styles: this.getOverlayListPosition(),\n    });\n  }\n\n  /**\n   * Gets the position of the focused field and calculates the position\n   * of the overlay button based on the focused field's position and dimensions.\n   */\n  private getOverlayButtonPosition() {\n    if (!this.focusedFieldData) {\n      return;\n    }\n\n    const { top, left, width, height } = this.focusedFieldData.focusedFieldRects;\n    const { paddingRight, paddingLeft } = this.focusedFieldData.focusedFieldStyles;\n    let elementOffset = height * 0.37;\n    if (height >= 35) {\n      elementOffset = height >= 50 ? height * 0.47 : height * 0.42;\n    }\n\n    const elementHeight = height - elementOffset;\n    const elementTopPosition = top + elementOffset / 2;\n    let elementLeftPosition = left + width - height + elementOffset / 2;\n\n    const fieldPaddingRight = parseInt(paddingRight, 10);\n    const fieldPaddingLeft = parseInt(paddingLeft, 10);\n    if (fieldPaddingRight > fieldPaddingLeft) {\n      elementLeftPosition = left + width - height - (fieldPaddingRight - elementOffset + 2);\n    }\n\n    return {\n      top: `${Math.round(elementTopPosition)}px`,\n      left: `${Math.round(elementLeftPosition)}px`,\n      height: `${Math.round(elementHeight)}px`,\n      width: `${Math.round(elementHeight)}px`,\n    };\n  }\n\n  /**\n   * Gets the position of the focused field and calculates the position\n   * of the overlay list based on the focused field's position and dimensions.\n   */\n  private getOverlayListPosition() {\n    if (!this.focusedFieldData) {\n      return;\n    }\n\n    const { top, left, width, height } = this.focusedFieldData.focusedFieldRects;\n    return {\n      width: `${Math.round(width)}px`,\n      top: `${Math.round(top + height)}px`,\n      left: `${Math.round(left)}px`,\n    };\n  }\n\n  /**\n   * Sets the focused field data to the data passed in the extension message.\n   *\n   * @param focusedFieldData - Contains the rects and styles of the focused field.\n   */\n  private setFocusedFieldData({ focusedFieldData }: OverlayBackgroundExtensionMessage) {\n    this.focusedFieldData = focusedFieldData;\n  }\n\n  /**\n   * Updates the overlay's visibility based on the display property passed in the extension message.\n   *\n   * @param display - The display property of the overlay, either \"block\" or \"none\"\n   */\n  private updateOverlayHidden({ display }: OverlayBackgroundExtensionMessage) {\n    if (!display) {\n      return;\n    }\n\n    const portMessage = { command: \"updateOverlayHidden\", styles: { display } };\n\n    this.overlayButtonPort?.postMessage(portMessage);\n    this.overlayListPort?.postMessage(portMessage);\n  }\n\n  /**\n   * Sends a message to the currently active tab to open the autofill overlay.\n   *\n   * @param isFocusingFieldElement - Identifies whether the field element should be focused when the overlay is opened\n   * @param isOpeningFullOverlay - Identifies whether the full overlay should be forced open regardless of other states\n   */\n  private async openOverlay(isFocusingFieldElement = false, isOpeningFullOverlay = false) {\n    const currentTab = await BrowserApi.getTabFromCurrentWindowId();\n\n    await BrowserApi.tabSendMessageData(currentTab, \"openAutofillOverlay\", {\n      isFocusingFieldElement,\n      isOpeningFullOverlay,\n      authStatus: await this.getAuthStatus(),\n    });\n  }\n\n  /**\n   * Gets the overlay's visibility setting from the settings service.\n   */\n  private async getOverlayVisibility(): Promise<InlineMenuVisibilitySetting> {\n    return await firstValueFrom(this.autofillSettingsService.inlineMenuVisibility$);\n  }\n\n  /**\n   * Gets the user's authentication status from the auth service. If the user's\n   * authentication status has changed, the overlay button's authentication status\n   * will be updated and the overlay list's ciphers will be updated.\n   */\n  private async getAuthStatus() {\n    const formerAuthStatus = this.userAuthStatus;\n    this.userAuthStatus = await this.authService.getAuthStatus();\n\n    if (\n      this.userAuthStatus !== formerAuthStatus &&\n      this.userAuthStatus === AuthenticationStatus.Unlocked\n    ) {\n      this.updateOverlayButtonAuthStatus();\n      await this.updateOverlayCiphers();\n    }\n\n    return this.userAuthStatus;\n  }\n\n  /**\n   * Sends a message to the overlay button to update its authentication status.\n   */\n  private updateOverlayButtonAuthStatus() {\n    this.overlayButtonPort?.postMessage({\n      command: \"updateOverlayButtonAuthStatus\",\n      authStatus: this.userAuthStatus,\n    });\n  }\n\n  /**\n   * Handles the overlay button being clicked. If the user is not authenticated,\n   * the vault will be unlocked. If the user is authenticated, the overlay will\n   * be opened.\n   *\n   * @param port - The port of the overlay button\n   */\n  private handleOverlayButtonClicked(port: chrome.runtime.Port) {\n    if (this.userAuthStatus !== AuthenticationStatus.Unlocked) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.unlockVault(port);\n      return;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.openOverlay(false, true);\n  }\n\n  /**\n   * Facilitates opening the unlock popout window.\n   *\n   * @param port - The port of the overlay list\n   */\n  private async unlockVault(port: chrome.runtime.Port) {\n    const { sender } = port;\n\n    this.closeOverlay(port);\n    const retryMessage: LockedVaultPendingNotificationsData = {\n      commandToRetry: { message: { command: \"openAutofillOverlay\" }, sender },\n      target: \"overlay.background\",\n    };\n    await BrowserApi.tabSendMessageData(\n      sender.tab,\n      \"addToLockedVaultPendingNotifications\",\n      retryMessage,\n    );\n    await this.openUnlockPopout(sender.tab, true);\n  }\n\n  /**\n   * Triggers the opening of a vault item popout window associated\n   * with the passed cipher ID.\n   * @param overlayCipherId - Cipher ID corresponding to the overlayLoginCiphers map. Does not correspond to the actual cipher's ID.\n   * @param sender - The sender of the port message\n   */\n  private async viewSelectedCipher(\n    { overlayCipherId }: OverlayPortMessage,\n    { sender }: chrome.runtime.Port,\n  ) {\n    const cipher = this.overlayLoginCiphers.get(overlayCipherId);\n    if (!cipher) {\n      return;\n    }\n\n    await this.openViewVaultItemPopout(sender.tab, {\n      cipherId: cipher.id,\n      action: SHOW_AUTOFILL_BUTTON,\n    });\n  }\n\n  /**\n   * Facilitates redirecting focus to the overlay list.\n   */\n  private focusOverlayList() {\n    this.overlayListPort?.postMessage({ command: \"focusOverlayList\" });\n  }\n\n  /**\n   * Updates the authentication status for the user and opens the overlay if\n   * a followup command is present in the message.\n   *\n   * @param message - Extension message received from the `unlockCompleted` command\n   */\n  private async unlockCompleted(message: OverlayBackgroundExtensionMessage) {\n    await this.getAuthStatus();\n\n    if (message.data?.commandToRetry?.message?.command === \"openAutofillOverlay\") {\n      await this.openOverlay(true);\n    }\n  }\n\n  /**\n   * Gets the translations for the overlay page.\n   */\n  private getTranslations() {\n    if (!this.overlayPageTranslations) {\n      this.overlayPageTranslations = {\n        locale: BrowserApi.getUILanguage(),\n        opensInANewWindow: this.i18nService.translate(\"opensInANewWindow\"),\n        buttonPageTitle: this.i18nService.translate(\"bitwardenOverlayButton\"),\n        toggleBitwardenVaultOverlay: this.i18nService.translate(\"toggleBitwardenVaultOverlay\"),\n        listPageTitle: this.i18nService.translate(\"bitwardenVault\"),\n        unlockYourAccount: this.i18nService.translate(\"unlockYourAccountToViewMatchingLogins\"),\n        unlockAccount: this.i18nService.translate(\"unlockAccount\"),\n        fillCredentialsFor: this.i18nService.translate(\"fillCredentialsFor\"),\n        partialUsername: this.i18nService.translate(\"partialUsername\"),\n        view: this.i18nService.translate(\"view\"),\n        noItemsToShow: this.i18nService.translate(\"noItemsToShow\"),\n        newItem: this.i18nService.translate(\"newItem\"),\n        addNewVaultItem: this.i18nService.translate(\"addNewVaultItem\"),\n      };\n    }\n\n    return this.overlayPageTranslations;\n  }\n\n  /**\n   * Facilitates redirecting focus out of one of the\n   *  overlay elements to elements on the page.\n   *\n   * @param direction - The direction to redirect focus to (either \"next\", \"previous\" or \"current)\n   * @param sender - The sender of the port message\n   */\n  private redirectOverlayFocusOut(\n    { direction }: OverlayPortMessage,\n    { sender }: chrome.runtime.Port,\n  ) {\n    if (!direction) {\n      return;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.tabSendMessageData(sender.tab, \"redirectOverlayFocusOut\", { direction });\n  }\n\n  /**\n   * Triggers adding a new vault item from the overlay. Gathers data\n   * input by the user before calling to open the add/edit window.\n   *\n   * @param sender - The sender of the port message\n   */\n  private getNewVaultItemDetails({ sender }: chrome.runtime.Port) {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.tabSendMessage(sender.tab, { command: \"addNewVaultItemFromOverlay\" });\n  }\n\n  /**\n   * Handles adding a new vault item from the overlay. Gathers data login\n   * data captured in the extension message.\n   *\n   * @param login - The login data captured from the extension message\n   * @param sender - The sender of the extension message\n   */\n  private async addNewVaultItem(\n    { login }: OverlayAddNewItemMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (!login) {\n      return;\n    }\n\n    const uriView = new LoginUriView();\n    uriView.uri = login.uri;\n\n    const loginView = new LoginView();\n    loginView.uris = [uriView];\n    loginView.username = login.username || \"\";\n    loginView.password = login.password || \"\";\n\n    const cipherView = new CipherView();\n    cipherView.name = (Utils.getHostname(login.uri) || login.hostname).replace(/^www\\./, \"\");\n    cipherView.folderId = null;\n    cipherView.type = CipherType.Login;\n    cipherView.login = loginView;\n\n    await this.stateService.setAddEditCipherInfo({\n      cipher: cipherView,\n      collectionIds: cipherView.collectionIds,\n    });\n\n    await BrowserApi.sendMessage(\"inlineAutofillMenuRefreshAddEditCipher\");\n    await this.openAddEditVaultItemPopout(sender.tab, { cipherId: cipherView.id });\n  }\n\n  /**\n   * Sets up the extension message listeners for the overlay.\n   */\n  private setupExtensionMessageListeners() {\n    BrowserApi.messageListener(\"overlay.background\", this.handleExtensionMessage);\n    BrowserApi.addListener(chrome.runtime.onConnect, this.handlePortOnConnect);\n  }\n\n  /**\n   * Handles extension messages sent to the extension background.\n   *\n   * @param message - The message received from the extension\n   * @param sender - The sender of the message\n   * @param sendResponse - The response to send back to the sender\n   */\n  private handleExtensionMessage = (\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response?: any) => void,\n  ) => {\n    const handler: CallableFunction | undefined = this.extensionMessageHandlers[message?.command];\n    if (!handler) {\n      return;\n    }\n\n    const messageResponse = handler({ message, sender });\n    if (!messageResponse) {\n      return;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve(messageResponse).then((response) => sendResponse(response));\n    return true;\n  };\n\n  /**\n   * Handles the connection of a port to the extension background.\n   *\n   * @param port - The port that connected to the extension background\n   */\n  private handlePortOnConnect = async (port: chrome.runtime.Port) => {\n    const isOverlayListPort = port.name === AutofillOverlayPort.List;\n    const isOverlayButtonPort = port.name === AutofillOverlayPort.Button;\n\n    if (!isOverlayListPort && !isOverlayButtonPort) {\n      return;\n    }\n\n    if (isOverlayListPort) {\n      this.overlayListPort = port;\n    } else {\n      this.overlayButtonPort = port;\n    }\n\n    port.onMessage.addListener(this.handleOverlayElementPortMessage);\n    port.postMessage({\n      command: `initAutofillOverlay${isOverlayListPort ? \"List\" : \"Button\"}`,\n      authStatus: await this.getAuthStatus(),\n      styleSheetUrl: chrome.runtime.getURL(`overlay/${isOverlayListPort ? \"list\" : \"button\"}.css`),\n      theme: await firstValueFrom(this.themeStateService.selectedTheme$),\n      translations: this.getTranslations(),\n      ciphers: isOverlayListPort ? await this.getOverlayCipherData() : null,\n    });\n    this.updateOverlayPosition({\n      overlayElement: isOverlayListPort\n        ? AutofillOverlayElement.List\n        : AutofillOverlayElement.Button,\n    });\n  };\n\n  /**\n   * Handles messages sent to the overlay list or button ports.\n   *\n   * @param message - The message received from the port\n   * @param port - The port that sent the message\n   */\n  private handleOverlayElementPortMessage = (\n    message: OverlayBackgroundExtensionMessage,\n    port: chrome.runtime.Port,\n  ) => {\n    const command = message?.command;\n    let handler: CallableFunction | undefined;\n\n    if (port.name === AutofillOverlayPort.Button) {\n      handler = this.overlayButtonPortMessageHandlers[command];\n    }\n\n    if (port.name === AutofillOverlayPort.List) {\n      handler = this.overlayListPortMessageHandlers[command];\n    }\n\n    if (!handler) {\n      return;\n    }\n\n    handler({ message, port });\n  };\n}\n\nexport default OverlayBackground;\n","import MainBackground from \"../../background/main.background\";\n\nimport NotificationBackground from \"./notification.background\";\nimport OverlayBackground from \"./overlay.background\";\n\nexport default class TabsBackground {\n  constructor(\n    private main: MainBackground,\n    private notificationBackground: NotificationBackground,\n    private overlayBackground: OverlayBackground,\n  ) {}\n\n  private focusedWindowId: number;\n\n  /**\n   * Initializes the window and tab listeners.\n   */\n  async init() {\n    if (!chrome.tabs || !chrome.windows) {\n      return;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.updateCurrentTabData();\n    this.setupTabEventListeners();\n  }\n\n  /**\n   * Sets up the tab and window event listeners.\n   */\n  private setupTabEventListeners() {\n    chrome.windows.onFocusChanged.addListener(this.handleWindowOnFocusChanged);\n    chrome.tabs.onActivated.addListener(this.handleTabOnActivated);\n    chrome.tabs.onReplaced.addListener(this.handleTabOnReplaced);\n    chrome.tabs.onUpdated.addListener(this.handleTabOnUpdated);\n    chrome.tabs.onRemoved.addListener(this.handleTabOnRemoved);\n  }\n\n  /**\n   * Handles the window onFocusChanged event.\n   *\n   * @param windowId - The ID of the window that was focused.\n   */\n  private handleWindowOnFocusChanged = async (windowId: number) => {\n    if (windowId == null || windowId < 0) {\n      return;\n    }\n\n    this.focusedWindowId = windowId;\n    await this.updateCurrentTabData();\n    this.main.messagingService.send(\"windowChanged\");\n  };\n\n  /**\n   * Handles the tab onActivated event.\n   */\n  private handleTabOnActivated = async () => {\n    await this.updateCurrentTabData();\n    this.main.messagingService.send(\"tabChanged\");\n  };\n\n  /**\n   * Handles the tab onReplaced event.\n   */\n  private handleTabOnReplaced = async () => {\n    if (this.main.onReplacedRan) {\n      return;\n    }\n    this.main.onReplacedRan = true;\n\n    await this.notificationBackground.checkNotificationQueue();\n    await this.updateCurrentTabData();\n    this.main.messagingService.send(\"tabChanged\");\n  };\n\n  /**\n   * Handles the tab onUpdated event.\n   *\n   * @param tabId - The ID of the tab that was updated.\n   * @param changeInfo - The change information.\n   * @param tab - The updated tab.\n   */\n  private handleTabOnUpdated = async (\n    tabId: number,\n    changeInfo: chrome.tabs.TabChangeInfo,\n    tab: chrome.tabs.Tab,\n  ) => {\n    const removePageDetailsStatus = new Set([\"loading\", \"unloaded\"]);\n    if (removePageDetailsStatus.has(changeInfo.status)) {\n      this.overlayBackground.removePageDetails(tabId);\n    }\n\n    if (this.focusedWindowId > 0 && tab.windowId !== this.focusedWindowId) {\n      return;\n    }\n\n    if (!tab.active) {\n      return;\n    }\n\n    await this.overlayBackground.updateOverlayCiphers();\n\n    if (this.main.onUpdatedRan) {\n      return;\n    }\n    this.main.onUpdatedRan = true;\n\n    await this.notificationBackground.checkNotificationQueue(tab);\n    await this.main.refreshBadge();\n    await this.main.refreshMenu();\n    this.main.messagingService.send(\"tabChanged\");\n  };\n\n  /**\n   * Handles the tab onRemoved event.\n   *\n   * @param tabId - The ID of the tab that was removed.\n   */\n  private handleTabOnRemoved = async (tabId: number) => {\n    this.overlayBackground.removePageDetails(tabId);\n  };\n\n  /**\n   * Updates the current tab data, refreshing the badge and context menu\n   * for the current tab. Also updates the overlay ciphers.\n   */\n  private updateCurrentTabData = async () => {\n    await Promise.all([\n      this.main.refreshBadge(),\n      this.main.refreshMenu(),\n      this.overlayBackground.updateOverlayCiphers(),\n    ]);\n  };\n}\n","import { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { UriMatchStrategy } from \"@bitwarden/common/models/domain/domain-service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\n\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\n\nexport default class WebRequestBackground {\n  private pendingAuthRequests: any[] = [];\n  private webRequest: any;\n  private isFirefox: boolean;\n\n  constructor(\n    platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private authService: AuthService,\n  ) {\n    if (BrowserApi.isManifestVersion(2)) {\n      this.webRequest = (window as any).chrome.webRequest;\n    }\n    this.isFirefox = platformUtilsService.isFirefox();\n  }\n\n  async init() {\n    if (!this.webRequest || !this.webRequest.onAuthRequired) {\n      return;\n    }\n\n    this.webRequest.onAuthRequired.addListener(\n      async (details: any, callback: any) => {\n        if (!details.url || this.pendingAuthRequests.indexOf(details.requestId) !== -1) {\n          if (callback) {\n            callback();\n          }\n          return;\n        }\n\n        this.pendingAuthRequests.push(details.requestId);\n\n        if (this.isFirefox) {\n          // eslint-disable-next-line\n          return new Promise(async (resolve, reject) => {\n            await this.resolveAuthCredentials(details.url, resolve, reject);\n          });\n        } else {\n          await this.resolveAuthCredentials(details.url, callback, callback);\n        }\n      },\n      { urls: [\"http://*/*\", \"https://*/*\"] },\n      [this.isFirefox ? \"blocking\" : \"asyncBlocking\"],\n    );\n\n    this.webRequest.onCompleted.addListener((details: any) => this.completeAuthRequest(details), {\n      urls: [\"http://*/*\"],\n    });\n    this.webRequest.onErrorOccurred.addListener(\n      (details: any) => this.completeAuthRequest(details),\n      {\n        urls: [\"http://*/*\"],\n      },\n    );\n  }\n\n  // eslint-disable-next-line\n  private async resolveAuthCredentials(domain: string, success: Function, error: Function) {\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      error();\n      return;\n    }\n\n    try {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        domain,\n        null,\n        UriMatchStrategy.Host,\n      );\n      if (ciphers == null || ciphers.length !== 1) {\n        error();\n        return;\n      }\n\n      success({\n        authCredentials: {\n          username: ciphers[0].login.username,\n          password: ciphers[0].login.password,\n        },\n      });\n    } catch {\n      error();\n    }\n  }\n\n  private completeAuthRequest(details: any) {\n    const i = this.pendingAuthRequests.indexOf(details.requestId);\n    if (i > -1) {\n      this.pendingAuthRequests.splice(i, 1);\n    }\n  }\n}\n","export type CachedServices = Record<string, unknown>;\n\nexport type FactoryOptions = {\n  alwaysInitializeNewService?: boolean;\n  doNotStoreInitializedService?: boolean;\n  [optionsKey: string]: unknown;\n};\n\nexport async function factory<\n  TCache extends CachedServices,\n  TName extends keyof TCache,\n  TOpts extends FactoryOptions,\n>(\n  cachedServices: TCache,\n  name: TName,\n  opts: TOpts,\n  factory: () => TCache[TName] | Promise<TCache[TName]>,\n): Promise<TCache[TName]> {\n  let instance = cachedServices[name];\n  if (opts.alwaysInitializeNewService || !instance) {\n    const instanceOrPromise = factory();\n    instance = instanceOrPromise instanceof Promise ? await instanceOrPromise : instanceOrPromise;\n  }\n\n  if (!opts.doNotStoreInitializedService) {\n    cachedServices[name] = instance;\n  }\n\n  return instance as TCache[TName];\n}\n","import { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { LogLevelType } from \"@bitwarden/common/platform/enums/log-level-type.enum\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\n\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\n\ntype LogServiceFactoryOptions = FactoryOptions & {\n  logServiceOptions: {\n    isDev: boolean;\n    filter?: (level: LogLevelType) => boolean;\n  };\n};\n\nexport type LogServiceInitOptions = LogServiceFactoryOptions;\n\nexport function logServiceFactory(\n  cache: { logService?: LogService } & CachedServices,\n  opts: LogServiceInitOptions,\n): Promise<LogService> {\n  return factory(\n    cache,\n    \"logService\",\n    opts,\n    () => new ConsoleLogService(opts.logServiceOptions.isDev, opts.logServiceOptions.filter),\n  );\n}\n","import { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/platform/services/web-crypto-function.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\n\ntype CryptoFunctionServiceFactoryOptions = FactoryOptions & {\n  cryptoFunctionServiceOptions: {\n    win: Window | typeof globalThis;\n  };\n};\n\nexport type CryptoFunctionServiceInitOptions = CryptoFunctionServiceFactoryOptions;\n\nexport function cryptoFunctionServiceFactory(\n  cache: { cryptoFunctionService?: CryptoFunctionService } & CachedServices,\n  opts: CryptoFunctionServiceFactoryOptions,\n): Promise<CryptoFunctionService> {\n  return factory(\n    cache,\n    \"cryptoFunctionService\",\n    opts,\n    () => new WebCryptoFunctionService(opts.cryptoFunctionServiceOptions.win),\n  );\n}\n","import { EncryptServiceImplementation } from \"@bitwarden/common/platform/services/cryptography/encrypt.service.implementation\";\n\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../background/service-factories/log-service.factory\";\n\nimport {\n  cryptoFunctionServiceFactory,\n  CryptoFunctionServiceInitOptions,\n} from \"./crypto-function-service.factory\";\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\n\ntype EncryptServiceFactoryOptions = FactoryOptions & {\n  encryptServiceOptions: {\n    logMacFailures: boolean;\n  };\n};\n\nexport type EncryptServiceInitOptions = EncryptServiceFactoryOptions &\n  CryptoFunctionServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function encryptServiceFactory(\n  cache: { encryptService?: EncryptServiceImplementation } & CachedServices,\n  opts: EncryptServiceInitOptions,\n): Promise<EncryptServiceImplementation> {\n  return factory(\n    cache,\n    \"encryptService\",\n    opts,\n    async () =>\n      new EncryptServiceImplementation(\n        await cryptoFunctionServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        opts.encryptServiceOptions.logMacFailures,\n      ),\n  );\n}\n","import { mergeMap } from \"rxjs\";\n\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n  StorageUpdateType,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\n\nimport { fromChromeEvent } from \"../../browser/from-chrome-event\";\n\nexport default abstract class AbstractChromeStorageService\n  implements AbstractStorageService, ObservableStorageService\n{\n  updates$;\n\n  constructor(protected chromeStorageApi: chrome.storage.StorageArea) {\n    this.updates$ = fromChromeEvent(this.chromeStorageApi.onChanged).pipe(\n      mergeMap(([changes]) => {\n        return Object.entries(changes).map(([key, change]) => {\n          // The `newValue` property isn't on the StorageChange object\n          // when the change was from a remove. Similarly a check of the `oldValue`\n          // could be used to tell if the operation was the first creation of this key\n          // but we currently do not differentiate that.\n          // Ref: https://developer.chrome.com/docs/extensions/reference/storage/#type-StorageChange\n          // Ref: https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageChange\n          const updateType: StorageUpdateType = \"newValue\" in change ? \"save\" : \"remove\";\n\n          return {\n            key: key,\n            // For removes this property will not exist but then it will just be\n            // undefined which is fine.\n            updateType: updateType,\n          };\n        });\n      }),\n    );\n  }\n\n  get valuesRequireDeserialization(): boolean {\n    return true;\n  }\n\n  async get<T>(key: string): Promise<T> {\n    return new Promise((resolve) => {\n      this.chromeStorageApi.get(key, (obj: any) => {\n        if (obj != null && obj[key] != null) {\n          resolve(obj[key] as T);\n          return;\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save(key: string, obj: any): Promise<void> {\n    if (obj == null) {\n      // Fix safari not liking null in set\n      return this.remove(key);\n    }\n\n    if (obj instanceof Set) {\n      obj = Array.from(obj);\n    }\n\n    const keyedObj = { [key]: obj };\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.set(keyedObj, () => {\n        resolve();\n      });\n    });\n  }\n\n  async remove(key: string): Promise<void> {\n    return new Promise<void>((resolve) => {\n      this.chromeStorageApi.remove(key, () => {\n        resolve();\n      });\n    });\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { BrowserApi } from \"./browser-api\";\n\n/**\n * Converts a Chrome event to an Observable stream.\n *\n * @typeParam T - The type of the event arguments.\n * @param event - The Chrome event to convert.\n * @returns An Observable stream of the event arguments.\n *\n * @remarks\n * This function creates an Observable stream that listens to a Chrome event and emits its arguments\n * whenever the event is triggered. If the event throws an error, the Observable will emit an error\n * notification with the error message.\n *\n * @example\n * ```typescript\n * const onMessage = fromChromeEvent(chrome.runtime.onMessage);\n * onMessage.subscribe((message) => console.log('Received message:', message));\n * ```\n */\nexport function fromChromeEvent<T extends unknown[]>(\n  event: chrome.events.Event<(...args: T) => void>,\n): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    const handler = (...args: T) => {\n      if (chrome.runtime.lastError) {\n        subscriber.error(chrome.runtime.lastError);\n        return;\n      }\n\n      subscriber.next(args);\n    };\n\n    BrowserApi.addListener(event, handler);\n    return () => BrowserApi.removeListener(event, handler);\n  });\n}\n","import AbstractChromeStorageService from \"./abstractions/abstract-chrome-storage-api.service\";\n\nexport default class BrowserLocalStorageService extends AbstractChromeStorageService {\n  constructor() {\n    super(chrome.storage.local);\n  }\n}\n","import {\n  flagEnabled as baseFlagEnabled,\n  devFlagEnabled as baseDevFlagEnabled,\n  devFlagValue as baseDevFlagValue,\n  SharedFlags,\n  SharedDevFlags,\n} from \"@bitwarden/common/platform/misc/flags\";\n\nimport { GroupPolicyEnvironment } from \"../admin-console/types/group-policy-environment\";\n\nimport { BrowserApi } from \"./browser/browser-api\";\n\n// required to avoid linting errors when there are no flags\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nexport type Flags = {\n  accountSwitching?: boolean;\n} & SharedFlags;\n\n// required to avoid linting errors when there are no flags\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nexport type DevFlags = {\n  storeSessionDecrypted?: boolean;\n  managedEnvironment?: GroupPolicyEnvironment;\n} & SharedDevFlags;\n\nexport function flagEnabled(flag: keyof Flags): boolean {\n  return baseFlagEnabled<Flags>(flag);\n}\n\nexport function devFlagEnabled(flag: keyof DevFlags) {\n  return baseDevFlagEnabled<DevFlags>(flag);\n}\n\nexport function devFlagValue(flag: keyof DevFlags) {\n  return baseDevFlagValue(flag);\n}\n\n/** Helper method to sync flag specifically for account switching, which as platform-based values.\n * If this pattern needs to be repeated, it's better handled by increasing complexity of webpack configurations\n * Not by expanding these flag getters.\n */\nexport function enableAccountSwitching(): boolean {\n  if (BrowserApi.isSafariApi) {\n    return false;\n  }\n  return flagEnabled(\"accountSwitching\");\n}\n","import AbstractChromeStorageService from \"./abstractions/abstract-chrome-storage-api.service\";\n\nexport default class BrowserMemoryStorageService extends AbstractChromeStorageService {\n  constructor() {\n    super(chrome.storage.session);\n  }\n}\n","import { Subject } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { KeyGenerationService } from \"@bitwarden/common/platform/abstractions/key-generation.service\";\nimport {\n  AbstractMemoryStorageService,\n  StorageUpdate,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { MemoryStorageOptions } from \"@bitwarden/common/platform/models/domain/storage-options\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { devFlag } from \"../decorators/dev-flag.decorator\";\nimport { devFlagEnabled } from \"../flags\";\n\nimport BrowserLocalStorageService from \"./browser-local-storage.service\";\nimport BrowserMemoryStorageService from \"./browser-memory-storage.service\";\n\nconst keys = {\n  encKey: \"localEncryptionKey\",\n  sessionKey: \"session\",\n};\n\nexport class LocalBackedSessionStorageService extends AbstractMemoryStorageService {\n  private cache = new Map<string, unknown>();\n  private localStorage = new BrowserLocalStorageService();\n  private sessionStorage = new BrowserMemoryStorageService();\n  private updatesSubject = new Subject<StorageUpdate>();\n  updates$;\n\n  constructor(\n    private encryptService: EncryptService,\n    private keyGenerationService: KeyGenerationService,\n  ) {\n    super();\n    this.updates$ = this.updatesSubject.asObservable();\n  }\n\n  get valuesRequireDeserialization(): boolean {\n    return true;\n  }\n\n  async get<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T> {\n    if (this.cache.has(key)) {\n      return this.cache.get(key) as T;\n    }\n\n    return await this.getBypassCache(key, options);\n  }\n\n  async getBypassCache<T>(key: string, options?: MemoryStorageOptions<T>): Promise<T> {\n    const session = await this.getLocalSession(await this.getSessionEncKey());\n    if (session == null || !Object.keys(session).includes(key)) {\n      return null;\n    }\n\n    let value = session[key];\n    if (options?.deserializer != null) {\n      value = options.deserializer(value as Jsonify<T>);\n    }\n\n    this.cache.set(key, value);\n    return this.cache.get(key) as T;\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save<T>(key: string, obj: T): Promise<void> {\n    if (obj == null) {\n      this.cache.delete(key);\n    } else {\n      this.cache.set(key, obj);\n    }\n\n    const sessionEncKey = await this.getSessionEncKey();\n    const localSession = (await this.getLocalSession(sessionEncKey)) ?? {};\n    localSession[key] = obj;\n    await this.setLocalSession(localSession, sessionEncKey);\n  }\n\n  async remove(key: string): Promise<void> {\n    await this.save(key, null);\n  }\n\n  async getLocalSession(encKey: SymmetricCryptoKey): Promise<Record<string, unknown>> {\n    const local = await this.localStorage.get<string>(keys.sessionKey);\n\n    if (local == null) {\n      return null;\n    }\n\n    if (devFlagEnabled(\"storeSessionDecrypted\")) {\n      return local as any as Record<string, unknown>;\n    }\n\n    const sessionJson = await this.encryptService.decryptToUtf8(new EncString(local), encKey);\n    if (sessionJson == null) {\n      // Error with decryption -- session is lost, delete state and key and start over\n      await this.setSessionEncKey(null);\n      await this.localStorage.remove(keys.sessionKey);\n      return null;\n    }\n    return JSON.parse(sessionJson);\n  }\n\n  async setLocalSession(session: Record<string, unknown>, key: SymmetricCryptoKey) {\n    if (devFlagEnabled(\"storeSessionDecrypted\")) {\n      await this.setDecryptedLocalSession(session);\n    } else {\n      await this.setEncryptedLocalSession(session, key);\n    }\n  }\n\n  @devFlag(\"storeSessionDecrypted\")\n  async setDecryptedLocalSession(session: Record<string, unknown>): Promise<void> {\n    // Make sure we're storing the jsonified version of the session\n    const jsonSession = JSON.parse(JSON.stringify(session));\n    if (session == null) {\n      await this.localStorage.remove(keys.sessionKey);\n    } else {\n      await this.localStorage.save(keys.sessionKey, jsonSession);\n    }\n  }\n\n  async setEncryptedLocalSession(session: Record<string, unknown>, key: SymmetricCryptoKey) {\n    const jsonSession = JSON.stringify(session);\n    const encSession = await this.encryptService.encrypt(jsonSession, key);\n\n    if (encSession == null) {\n      return await this.localStorage.remove(keys.sessionKey);\n    }\n    await this.localStorage.save(keys.sessionKey, encSession.encryptedString);\n  }\n\n  async getSessionEncKey(): Promise<SymmetricCryptoKey> {\n    let storedKey = await this.sessionStorage.get<SymmetricCryptoKey>(keys.encKey);\n    if (storedKey == null || Object.keys(storedKey).length == 0) {\n      const generatedKey = await this.keyGenerationService.createKeyWithPurpose(\n        128,\n        \"ephemeral\",\n        \"bitwarden-ephemeral\",\n      );\n      storedKey = generatedKey.derivedKey;\n      await this.setSessionEncKey(storedKey);\n      return storedKey;\n    } else {\n      return SymmetricCryptoKey.fromJSON(storedKey);\n    }\n  }\n\n  async setSessionEncKey(input: SymmetricCryptoKey): Promise<void> {\n    if (input == null) {\n      await this.sessionStorage.remove(keys.encKey);\n    } else {\n      await this.sessionStorage.save(keys.encKey, input);\n    }\n  }\n}\n","import { devFlagEnabled, DevFlags } from \"../flags\";\n\nexport function devFlag(flag: keyof DevFlags) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = function (...args: any[]) {\n      if (!devFlagEnabled(flag)) {\n        throw new Error(\n          `This method should not be called, it is protected by a disabled dev flag.`,\n        );\n      }\n      return originalMethod.apply(this, args);\n    };\n  };\n}\n","import { Subject } from \"rxjs\";\n\nimport {\n  AbstractMemoryStorageService,\n  ObservableStorageService,\n  StorageUpdate,\n} from \"../../abstractions/storage.service\";\n\nexport class MemoryStorageService\n  extends AbstractMemoryStorageService\n  implements ObservableStorageService\n{\n  protected store: Record<string, string> = {};\n  private updatesSubject = new Subject<StorageUpdate>();\n\n  get valuesRequireDeserialization(): boolean {\n    return true;\n  }\n  get updates$() {\n    return this.updatesSubject.asObservable();\n  }\n\n  get<T>(key: string): Promise<T> {\n    const json = this.store[key];\n    if (json) {\n      const obj = JSON.parse(json as string);\n      return Promise.resolve(obj as T);\n    }\n    return Promise.resolve(null);\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  save<T>(key: string, obj: T): Promise<void> {\n    if (obj == null) {\n      return this.remove(key);\n    }\n    // TODO: Remove once foreground/background contexts are separated in browser\n    // Needed to ensure ownership of all memory by the context running the storage service\n    this.store[key] = JSON.stringify(obj);\n    this.updatesSubject.next({ key, updateType: \"save\" });\n    return Promise.resolve();\n  }\n\n  remove(key: string): Promise<void> {\n    delete this.store[key];\n    this.updatesSubject.next({ key, updateType: \"remove\" });\n    return Promise.resolve();\n  }\n\n  getBypassCache<T>(key: string): Promise<T> {\n    return this.get<T>(key);\n  }\n}\n","// eslint-disable-next-line import/no-restricted-paths -- Implementation for memory storage specifically for browser backgrounds\nimport { MemoryStorageService } from \"@bitwarden/common/platform/state/storage/memory-storage.service\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\n\nimport { MemoryStoragePortMessage } from \"./port-messages\";\nimport { portName } from \"./port-name\";\n\nexport class BackgroundMemoryStorageService extends MemoryStorageService {\n  private _ports: chrome.runtime.Port[] = [];\n\n  constructor() {\n    super();\n\n    BrowserApi.addListener(chrome.runtime.onConnect, (port) => {\n      if (port.name !== portName(chrome.storage.session)) {\n        return;\n      }\n\n      this._ports.push(port);\n\n      const listenerCallback = this.onMessageFromForeground.bind(this);\n      port.onDisconnect.addListener(() => {\n        this._ports.splice(this._ports.indexOf(port), 1);\n        port.onMessage.removeListener(listenerCallback);\n      });\n      port.onMessage.addListener(listenerCallback);\n      // Initialize the new memory storage service with existing data\n      this.sendMessageTo(port, {\n        action: \"initialization\",\n        data: Array.from(Object.keys(this.store)),\n      });\n    });\n    this.updates$.subscribe((update) => {\n      this.broadcastMessage({\n        action: \"subject_update\",\n        data: update,\n      });\n    });\n  }\n\n  private async onMessageFromForeground(\n    message: MemoryStoragePortMessage,\n    port: chrome.runtime.Port,\n  ) {\n    if (message.originator === \"background\") {\n      return;\n    }\n\n    let result: unknown = null;\n\n    switch (message.action) {\n      case \"get\":\n      case \"getBypassCache\":\n      case \"has\": {\n        result = await this[message.action](message.key);\n        break;\n      }\n      case \"save\":\n        await this.save(message.key, JSON.parse((message.data as string) ?? null) as unknown);\n        break;\n      case \"remove\":\n        await this.remove(message.key);\n        break;\n    }\n\n    this.sendMessageTo(port, {\n      id: message.id,\n      key: message.key,\n      data: JSON.stringify(result),\n    });\n  }\n\n  private broadcastMessage(data: Omit<MemoryStoragePortMessage, \"originator\">) {\n    this._ports.forEach((port) => {\n      this.sendMessageTo(port, data);\n    });\n  }\n\n  private sendMessageTo(\n    port: chrome.runtime.Port,\n    data: Omit<MemoryStoragePortMessage, \"originator\">,\n  ) {\n    port.postMessage({\n      ...data,\n      originator: \"background\",\n    });\n  }\n}\n","export function portName(storageLocation: chrome.storage.StorageArea) {\n  switch (storageLocation) {\n    case chrome.storage.local:\n      return \"local\";\n    case chrome.storage.sync:\n      return \"sync\";\n    case chrome.storage.session:\n      return \"session\";\n    default:\n      throw new Error(\"Unknown storage location\");\n  }\n}\n","import { KeyGenerationService as KeyGenerationServiceAbstraction } from \"@bitwarden/common/platform/abstractions/key-generation.service\";\nimport { KeyGenerationService } from \"@bitwarden/common/platform/services/key-generation.service\";\n\nimport {\n  cryptoFunctionServiceFactory,\n  CryptoFunctionServiceInitOptions,\n} from \"./crypto-function-service.factory\";\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\n\ntype KeyGenerationServiceFactoryOptions = FactoryOptions;\n\nexport type KeyGenerationServiceInitOptions = KeyGenerationServiceFactoryOptions &\n  CryptoFunctionServiceInitOptions;\n\nexport function keyGenerationServiceFactory(\n  cache: { keyGenerationService?: KeyGenerationServiceAbstraction } & CachedServices,\n  opts: KeyGenerationServiceInitOptions,\n): Promise<KeyGenerationServiceAbstraction> {\n  return factory(\n    cache,\n    \"keyGenerationService\",\n    opts,\n    async () => new KeyGenerationService(await cryptoFunctionServiceFactory(cache, opts)),\n  );\n}\n","import {\n  AbstractMemoryStorageService,\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { MemoryStorageService } from \"@bitwarden/common/platform/services/memory-storage.service\";\n\nimport { BrowserApi } from \"../../browser/browser-api\";\nimport BrowserLocalStorageService from \"../../services/browser-local-storage.service\";\nimport { LocalBackedSessionStorageService } from \"../../services/local-backed-session-storage.service\";\nimport { BackgroundMemoryStorageService } from \"../../storage/background-memory-storage.service\";\n\nimport { EncryptServiceInitOptions, encryptServiceFactory } from \"./encrypt-service.factory\";\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport {\n  KeyGenerationServiceInitOptions,\n  keyGenerationServiceFactory,\n} from \"./key-generation-service.factory\";\n\ntype StorageServiceFactoryOptions = FactoryOptions;\n\nexport type DiskStorageServiceInitOptions = StorageServiceFactoryOptions;\nexport type SecureStorageServiceInitOptions = StorageServiceFactoryOptions;\nexport type MemoryStorageServiceInitOptions = StorageServiceFactoryOptions &\n  EncryptServiceInitOptions &\n  KeyGenerationServiceInitOptions;\n\nexport function diskStorageServiceFactory(\n  cache: { diskStorageService?: AbstractStorageService } & CachedServices,\n  opts: DiskStorageServiceInitOptions,\n): Promise<AbstractStorageService> {\n  return factory(cache, \"diskStorageService\", opts, () => new BrowserLocalStorageService());\n}\nexport function observableDiskStorageServiceFactory(\n  cache: {\n    diskStorageService?: AbstractStorageService & ObservableStorageService;\n  } & CachedServices,\n  opts: DiskStorageServiceInitOptions,\n): Promise<AbstractStorageService & ObservableStorageService> {\n  return factory(cache, \"diskStorageService\", opts, () => new BrowserLocalStorageService());\n}\n\nexport function secureStorageServiceFactory(\n  cache: { secureStorageService?: AbstractStorageService } & CachedServices,\n  opts: SecureStorageServiceInitOptions,\n): Promise<AbstractStorageService> {\n  return factory(cache, \"secureStorageService\", opts, () => new BrowserLocalStorageService());\n}\n\nexport function memoryStorageServiceFactory(\n  cache: { memoryStorageService?: AbstractMemoryStorageService } & CachedServices,\n  opts: MemoryStorageServiceInitOptions,\n): Promise<AbstractMemoryStorageService> {\n  return factory(cache, \"memoryStorageService\", opts, async () => {\n    if (BrowserApi.isManifestVersion(3)) {\n      return new LocalBackedSessionStorageService(\n        await encryptServiceFactory(cache, opts),\n        await keyGenerationServiceFactory(cache, opts),\n      );\n    }\n    return new MemoryStorageService();\n  });\n}\n\nexport function observableMemoryStorageServiceFactory(\n  cache: {\n    memoryStorageService?: AbstractMemoryStorageService & ObservableStorageService;\n  } & CachedServices,\n  opts: MemoryStorageServiceInitOptions,\n): Promise<AbstractMemoryStorageService & ObservableStorageService> {\n  return factory(cache, \"memoryStorageService\", opts, async () => {\n    return new BackgroundMemoryStorageService();\n  });\n}\n","import { StorageServiceProvider } from \"@bitwarden/common/platform/services/storage-service.provider\";\n\nimport { CachedServices, FactoryOptions, factory } from \"./factory-options\";\nimport {\n  DiskStorageServiceInitOptions,\n  MemoryStorageServiceInitOptions,\n  observableDiskStorageServiceFactory,\n  observableMemoryStorageServiceFactory,\n} from \"./storage-service.factory\";\n\ntype StorageServiceProviderFactoryOptions = FactoryOptions;\n\nexport type StorageServiceProviderInitOptions = StorageServiceProviderFactoryOptions &\n  MemoryStorageServiceInitOptions &\n  DiskStorageServiceInitOptions;\n\nexport async function storageServiceProviderFactory(\n  cache: {\n    storageServiceProvider?: StorageServiceProvider;\n  } & CachedServices,\n  opts: StorageServiceProviderInitOptions,\n): Promise<StorageServiceProvider> {\n  return factory(\n    cache,\n    \"storageServiceProvider\",\n    opts,\n    async () =>\n      new StorageServiceProvider(\n        await observableDiskStorageServiceFactory(cache, opts),\n        await observableMemoryStorageServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { GlobalStateProvider } from \"@bitwarden/common/platform/state\";\n// eslint-disable-next-line import/no-restricted-paths -- We need the implementation to inject, but generally this should not be accessed\nimport { DefaultGlobalStateProvider } from \"@bitwarden/common/platform/state/implementations/default-global-state.provider\";\n\nimport { CachedServices, FactoryOptions, factory } from \"./factory-options\";\nimport {\n  StorageServiceProviderInitOptions,\n  storageServiceProviderFactory,\n} from \"./storage-service-provider.factory\";\n\ntype GlobalStateProviderFactoryOptions = FactoryOptions;\n\nexport type GlobalStateProviderInitOptions = GlobalStateProviderFactoryOptions &\n  StorageServiceProviderInitOptions;\n\nexport async function globalStateProviderFactory(\n  cache: { globalStateProvider?: GlobalStateProvider } & CachedServices,\n  opts: GlobalStateProviderInitOptions,\n): Promise<GlobalStateProvider> {\n  return factory(\n    cache,\n    \"globalStateProvider\",\n    opts,\n    async () => new DefaultGlobalStateProvider(await storageServiceProviderFactory(cache, opts)),\n  );\n}\n","import { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\n\nimport { BrowserPlatformUtilsService } from \"./browser-platform-utils.service\";\n\nexport class BackgroundPlatformUtilsService extends BrowserPlatformUtilsService {\n  constructor(\n    private messagingService: MessagingService,\n    clipboardWriteCallback: (clipboardValue: string, clearMs: number) => void,\n    biometricCallback: () => Promise<boolean>,\n    win: Window & typeof globalThis,\n  ) {\n    super(clipboardWriteCallback, biometricCallback, win);\n  }\n\n  override showToast(\n    type: \"error\" | \"success\" | \"warning\" | \"info\",\n    title: string,\n    text: string | string[],\n    options?: any,\n  ): void {\n    this.messagingService.send(\"showToast\", {\n      text: text,\n      title: title,\n      type: type,\n      options: options,\n    });\n  }\n}\n","import { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\n\nexport default class BrowserMessagingService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    return BrowserApi.sendMessage(subscriber, arg);\n  }\n}\n","import { MessagingService as AbstractMessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../background/service-factories/factory-options\";\nimport BrowserMessagingService from \"../../services/browser-messaging.service\";\n\ntype MessagingServiceFactoryOptions = FactoryOptions;\n\nexport type MessagingServiceInitOptions = MessagingServiceFactoryOptions;\n\nexport function messagingServiceFactory(\n  cache: { messagingService?: AbstractMessagingService } & CachedServices,\n  opts: MessagingServiceInitOptions,\n): Promise<AbstractMessagingService> {\n  return factory(cache, \"messagingService\", opts, () => new BrowserMessagingService());\n}\n","import { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { BackgroundPlatformUtilsService } from \"../../services/platform-utils/background-platform-utils.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { MessagingServiceInitOptions, messagingServiceFactory } from \"./messaging-service.factory\";\n\ntype PlatformUtilsServiceFactoryOptions = FactoryOptions & {\n  platformUtilsServiceOptions: {\n    clipboardWriteCallback: (clipboardValue: string, clearMs: number) => Promise<void>;\n    biometricCallback: () => Promise<boolean>;\n    win: Window & typeof globalThis;\n  };\n};\n\nexport type PlatformUtilsServiceInitOptions = PlatformUtilsServiceFactoryOptions &\n  MessagingServiceInitOptions;\n\nexport function platformUtilsServiceFactory(\n  cache: { platformUtilsService?: PlatformUtilsService } & CachedServices,\n  opts: PlatformUtilsServiceInitOptions,\n): Promise<PlatformUtilsService> {\n  return factory(\n    cache,\n    \"platformUtilsService\",\n    opts,\n    async () =>\n      new BackgroundPlatformUtilsService(\n        await messagingServiceFactory(cache, opts),\n        opts.platformUtilsServiceOptions.clipboardWriteCallback,\n        opts.platformUtilsServiceOptions.biometricCallback,\n        opts.platformUtilsServiceOptions.win,\n      ),\n  );\n}\n","import { SingleUserStateProvider } from \"@bitwarden/common/platform/state\";\n// eslint-disable-next-line import/no-restricted-paths -- We need the implementation to inject, but generally this should not be accessed\nimport { DefaultSingleUserStateProvider } from \"@bitwarden/common/platform/state/implementations/default-single-user-state.provider\";\n\nimport { CachedServices, FactoryOptions, factory } from \"./factory-options\";\nimport {\n  StateEventRegistrarServiceInitOptions,\n  stateEventRegistrarServiceFactory,\n} from \"./state-event-registrar-service.factory\";\nimport {\n  StorageServiceProviderInitOptions,\n  storageServiceProviderFactory,\n} from \"./storage-service-provider.factory\";\n\ntype SingleUserStateProviderFactoryOptions = FactoryOptions;\n\nexport type SingleUserStateProviderInitOptions = SingleUserStateProviderFactoryOptions &\n  StorageServiceProviderInitOptions &\n  StateEventRegistrarServiceInitOptions;\n\nexport async function singleUserStateProviderFactory(\n  cache: { singleUserStateProvider?: SingleUserStateProvider } & CachedServices,\n  opts: SingleUserStateProviderInitOptions,\n): Promise<SingleUserStateProvider> {\n  return factory(\n    cache,\n    \"singleUserStateProvider\",\n    opts,\n    async () =>\n      new DefaultSingleUserStateProvider(\n        await storageServiceProviderFactory(cache, opts),\n        await stateEventRegistrarServiceFactory(cache, opts),\n      ),\n  );\n}\n","// eslint-disable-next-line import/no-restricted-paths\nimport { StateEventRegistrarService } from \"@bitwarden/common/platform/state/state-event-registrar.service\";\n\nimport { CachedServices, FactoryOptions, factory } from \"./factory-options\";\nimport {\n  GlobalStateProviderInitOptions,\n  globalStateProviderFactory,\n} from \"./global-state-provider.factory\";\nimport {\n  StorageServiceProviderInitOptions,\n  storageServiceProviderFactory,\n} from \"./storage-service-provider.factory\";\n\ntype StateEventRegistrarServiceFactoryOptions = FactoryOptions;\n\nexport type StateEventRegistrarServiceInitOptions = StateEventRegistrarServiceFactoryOptions &\n  GlobalStateProviderInitOptions &\n  StorageServiceProviderInitOptions;\n\nexport async function stateEventRegistrarServiceFactory(\n  cache: {\n    stateEventRegistrarService?: StateEventRegistrarService;\n  } & CachedServices,\n  opts: StateEventRegistrarServiceInitOptions,\n): Promise<StateEventRegistrarService> {\n  return factory(\n    cache,\n    \"stateEventRegistrarService\",\n    opts,\n    async () =>\n      new StateEventRegistrarService(\n        await globalStateProviderFactory(cache, opts),\n        await storageServiceProviderFactory(cache, opts),\n      ),\n  );\n}\n","import { TokenService as AbstractTokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TokenService } from \"@bitwarden/common/auth/services/token.service\";\n\nimport {\n  EncryptServiceInitOptions,\n  encryptServiceFactory,\n} from \"../../../platform/background/service-factories/encrypt-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  GlobalStateProviderInitOptions,\n  globalStateProviderFactory,\n} from \"../../../platform/background/service-factories/global-state-provider.factory\";\nimport {\n  KeyGenerationServiceInitOptions,\n  keyGenerationServiceFactory,\n} from \"../../../platform/background/service-factories/key-generation-service.factory\";\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../../platform/background/service-factories/log-service.factory\";\nimport {\n  PlatformUtilsServiceInitOptions,\n  platformUtilsServiceFactory,\n} from \"../../../platform/background/service-factories/platform-utils-service.factory\";\nimport {\n  SingleUserStateProviderInitOptions,\n  singleUserStateProviderFactory,\n} from \"../../../platform/background/service-factories/single-user-state-provider.factory\";\nimport {\n  SecureStorageServiceInitOptions,\n  secureStorageServiceFactory,\n} from \"../../../platform/background/service-factories/storage-service.factory\";\n\ntype TokenServiceFactoryOptions = FactoryOptions;\n\nexport type TokenServiceInitOptions = TokenServiceFactoryOptions &\n  SingleUserStateProviderInitOptions &\n  GlobalStateProviderInitOptions &\n  PlatformUtilsServiceInitOptions &\n  SecureStorageServiceInitOptions &\n  KeyGenerationServiceInitOptions &\n  EncryptServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function tokenServiceFactory(\n  cache: { tokenService?: AbstractTokenService } & CachedServices,\n  opts: TokenServiceInitOptions,\n): Promise<AbstractTokenService> {\n  return factory(\n    cache,\n    \"tokenService\",\n    opts,\n    async () =>\n      new TokenService(\n        await singleUserStateProviderFactory(cache, opts),\n        await globalStateProviderFactory(cache, opts),\n        (await platformUtilsServiceFactory(cache, opts)).supportsSecureStorage(),\n        await secureStorageServiceFactory(cache, opts),\n        await keyGenerationServiceFactory(cache, opts),\n        await encryptServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\n\nexport type Urls = {\n  base?: string;\n  webVault?: string;\n  api?: string;\n  identity?: string;\n  icons?: string;\n  notifications?: string;\n  events?: string;\n  keyConnector?: string;\n  scim?: string;\n};\n\n/**\n * A subset of available regions, additional regions can be loaded through configuration.\n */\nexport enum Region {\n  US = \"US\",\n  EU = \"EU\",\n  SelfHosted = \"Self-hosted\",\n}\n\n/**\n * The possible cloud regions.\n */\nexport type CloudRegion = Exclude<Region, Region.SelfHosted>;\n\nexport type RegionConfig = {\n  // Beware this isn't completely true, it's actually a string for custom environments,\n  // which are currently only supported in web where it doesn't matter.\n  key: Region;\n  domain: string;\n  urls: Urls;\n};\n\n/**\n * The Environment interface represents a server environment.\n *\n * It provides methods to retrieve the URLs of the different services.\n */\nexport interface Environment {\n  /**\n   * Retrieve the current region.\n   */\n  getRegion(): Region;\n  /**\n   * Retrieve the urls, should only be used when configuring the environment.\n   */\n  getUrls(): Urls;\n\n  /**\n   * Identify if the region is a cloud environment.\n   *\n   * @returns true if the environment is a cloud environment, false otherwise.\n   */\n  isCloud(): boolean;\n\n  getApiUrl(): string;\n  getEventsUrl(): string;\n  getIconsUrl(): string;\n  getIdentityUrl(): string;\n\n  /**\n   * @deprecated This is currently only used by the CLI. This functionality should be extracted since\n   * the CLI relies on changing environment mid-login.\n   *\n   * @remarks\n   * Expect this to be null unless the CLI has explicitly set it during the login flow.\n   */\n  getKeyConnectorUrl(): string | null;\n  getNotificationsUrl(): string;\n  getScimUrl(): string;\n  getSendUrl(): string;\n  getWebVaultUrl(): string;\n\n  /**\n   * Get a friendly hostname for the environment.\n   *\n   * - For self-hosted this is the web vault url without protocol prefix.\n   * - For cloud environments it's the domain key.\n   */\n  getHostname(): string;\n\n  // Not sure why we provide this, evaluate if we can remove it.\n  hasBaseUrl(): boolean;\n}\n\n/**\n * The environment service. Provides access to set the current environment urls and region.\n */\nexport abstract class EnvironmentService {\n  abstract environment$: Observable<Environment>;\n  abstract cloudWebVaultUrl$: Observable<string>;\n\n  /**\n   * Retrieve all the available regions for environment selectors.\n   *\n   * This currently relies on compile time provided constants, and will not change at runtime.\n   * Expect all builds to include production environments, QA builds to also include QA\n   * environments and dev builds to include localhost.\n   */\n  abstract availableRegions(): RegionConfig[];\n\n  /**\n   * Set the global environment.\n   */\n  abstract setEnvironment(region: Region, urls?: Urls): Promise<Urls>;\n\n  /**\n   * Seed the environment state for a given user based on the global environment.\n   *\n   * @remarks\n   * Expected to be called only by the StateService when adding a new account.\n   */\n  abstract seedUserEnvironment(userId: UserId): Promise<void>;\n\n  /**\n   * Sets the URL of the cloud web vault app based on the region parameter.\n   *\n   * @param userId - The user id to set the cloud web vault app URL for. If null or undefined the global environment is set.\n   * @param region - The region of the cloud web vault app.\n   */\n  abstract setCloudRegion(userId: UserId, region: Region): Promise<void>;\n\n  /**\n   * Get the environment from state. Useful if you need to get the environment for another user.\n   */\n  abstract getEnvironment(userId?: string): Promise<Environment | undefined>;\n}\n","import { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AccountServiceImplementation } from \"@bitwarden/common/auth/services/account.service\";\n\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  GlobalStateProviderInitOptions,\n  globalStateProviderFactory,\n} from \"../../../platform/background/service-factories/global-state-provider.factory\";\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../../platform/background/service-factories/log-service.factory\";\nimport {\n  MessagingServiceInitOptions,\n  messagingServiceFactory,\n} from \"../../../platform/background/service-factories/messaging-service.factory\";\n\ntype AccountServiceFactoryOptions = FactoryOptions;\n\nexport type AccountServiceInitOptions = AccountServiceFactoryOptions &\n  MessagingServiceInitOptions &\n  LogServiceInitOptions &\n  GlobalStateProviderInitOptions;\n\nexport function accountServiceFactory(\n  cache: { accountService?: AccountService } & CachedServices,\n  opts: AccountServiceInitOptions,\n): Promise<AccountService> {\n  return factory(\n    cache,\n    \"accountService\",\n    opts,\n    async () =>\n      new AccountServiceImplementation(\n        await messagingServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await globalStateProviderFactory(cache, opts),\n      ),\n  );\n}\n","import { distinctUntilChanged, firstValueFrom, map, Observable, switchMap } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { UserId } from \"../../types/guid\";\nimport {\n  EnvironmentService,\n  Environment,\n  Region,\n  RegionConfig,\n  Urls,\n  CloudRegion,\n} from \"../abstractions/environment.service\";\nimport { Utils } from \"../misc/utils\";\nimport {\n  ENVIRONMENT_DISK,\n  ENVIRONMENT_MEMORY,\n  GlobalState,\n  KeyDefinition,\n  StateProvider,\n} from \"../state\";\n\nexport class EnvironmentUrls {\n  base: string = null;\n  api: string = null;\n  identity: string = null;\n  icons: string = null;\n  notifications: string = null;\n  events: string = null;\n  webVault: string = null;\n  keyConnector: string = null;\n}\n\nclass EnvironmentState {\n  region: Region;\n  urls: EnvironmentUrls;\n\n  static fromJSON(obj: Jsonify<EnvironmentState>): EnvironmentState {\n    return Object.assign(new EnvironmentState(), obj);\n  }\n}\n\nexport const ENVIRONMENT_KEY = new KeyDefinition<EnvironmentState>(\n  ENVIRONMENT_DISK,\n  \"environment\",\n  {\n    deserializer: EnvironmentState.fromJSON,\n  },\n);\n\nexport const CLOUD_REGION_KEY = new KeyDefinition<CloudRegion>(ENVIRONMENT_MEMORY, \"cloudRegion\", {\n  deserializer: (b) => b,\n});\n\n/**\n * The production regions available for selection.\n *\n * In the future we desire to load these urls from the config endpoint.\n */\nexport const PRODUCTION_REGIONS: RegionConfig[] = [\n  {\n    key: Region.US,\n    domain: \"bitwarden.com\",\n    urls: {\n      base: null,\n      api: \"https://api.bitwarden.com\",\n      identity: \"https://identity.bitwarden.com\",\n      icons: \"https://icons.bitwarden.net\",\n      webVault: \"https://vault.bitwarden.com\",\n      notifications: \"https://notifications.bitwarden.com\",\n      events: \"https://events.bitwarden.com\",\n      scim: \"https://scim.bitwarden.com\",\n    },\n  },\n  {\n    key: Region.EU,\n    domain: \"bitwarden.eu\",\n    urls: {\n      base: null,\n      api: \"https://api.bitwarden.eu\",\n      identity: \"https://identity.bitwarden.eu\",\n      icons: \"https://icons.bitwarden.eu\",\n      webVault: \"https://vault.bitwarden.eu\",\n      notifications: \"https://notifications.bitwarden.eu\",\n      events: \"https://events.bitwarden.eu\",\n      scim: \"https://scim.bitwarden.eu\",\n    },\n  },\n];\n\n/**\n * The default region when starting the app.\n */\nconst DEFAULT_REGION = Region.US;\n\n/**\n * The default region configuration.\n */\nconst DEFAULT_REGION_CONFIG = PRODUCTION_REGIONS.find((r) => r.key === DEFAULT_REGION);\n\nexport class DefaultEnvironmentService implements EnvironmentService {\n  private globalState: GlobalState<EnvironmentState | null>;\n  private globalCloudRegionState: GlobalState<CloudRegion | null>;\n\n  // We intentionally don't want the helper on account service, we want the null back if there is no active user\n  private activeAccountId$: Observable<UserId | null> = this.accountService.activeAccount$.pipe(\n    map((a) => a?.id),\n  );\n\n  environment$: Observable<Environment>;\n  cloudWebVaultUrl$: Observable<string>;\n\n  constructor(\n    private stateProvider: StateProvider,\n    private accountService: AccountService,\n  ) {\n    this.globalState = this.stateProvider.getGlobal(ENVIRONMENT_KEY);\n    this.globalCloudRegionState = this.stateProvider.getGlobal(CLOUD_REGION_KEY);\n\n    const account$ = this.activeAccountId$.pipe(\n      // Use == here to not trigger on undefined -> null transition\n      distinctUntilChanged((oldUserId: UserId, newUserId: UserId) => oldUserId == newUserId),\n    );\n\n    this.environment$ = account$.pipe(\n      switchMap((userId) => {\n        const t = userId\n          ? this.stateProvider.getUser(userId, ENVIRONMENT_KEY).state$\n          : this.stateProvider.getGlobal(ENVIRONMENT_KEY).state$;\n        return t;\n      }),\n      map((state) => {\n        return this.buildEnvironment(state?.region, state?.urls);\n      }),\n    );\n    this.cloudWebVaultUrl$ = account$.pipe(\n      switchMap((userId) => {\n        const t = userId\n          ? this.stateProvider.getUser(userId, CLOUD_REGION_KEY).state$\n          : this.stateProvider.getGlobal(CLOUD_REGION_KEY).state$;\n        return t;\n      }),\n      map((region) => {\n        if (region != null) {\n          const config = this.getRegionConfig(region);\n\n          if (config != null) {\n            return config.urls.webVault;\n          }\n        }\n        return DEFAULT_REGION_CONFIG.urls.webVault;\n      }),\n    );\n  }\n\n  availableRegions(): RegionConfig[] {\n    const additionalRegions = (process.env.ADDITIONAL_REGIONS as unknown as RegionConfig[]) ?? [];\n    return PRODUCTION_REGIONS.concat(additionalRegions);\n  }\n\n  /**\n   * Get the region configuration for the given region.\n   */\n  private getRegionConfig(region: Region): RegionConfig | undefined {\n    return this.availableRegions().find((r) => r.key === region);\n  }\n\n  async setEnvironment(region: Region, urls?: Urls): Promise<Urls> {\n    // Unknown regions are treated as self-hosted\n    if (this.getRegionConfig(region) == null) {\n      region = Region.SelfHosted;\n    }\n\n    // If self-hosted ensure urls are valid else fallback to default region\n    if (region == Region.SelfHosted && isEmpty(urls)) {\n      region = DEFAULT_REGION;\n    }\n\n    if (region != Region.SelfHosted) {\n      await this.globalState.update(() => ({\n        region: region,\n        urls: null,\n      }));\n\n      return null;\n    } else {\n      // Clean the urls\n      urls.base = formatUrl(urls.base);\n      urls.webVault = formatUrl(urls.webVault);\n      urls.api = formatUrl(urls.api);\n      urls.identity = formatUrl(urls.identity);\n      urls.icons = formatUrl(urls.icons);\n      urls.notifications = formatUrl(urls.notifications);\n      urls.events = formatUrl(urls.events);\n      urls.keyConnector = formatUrl(urls.keyConnector);\n      urls.scim = null;\n\n      await this.globalState.update(() => ({\n        region: region,\n        urls: {\n          base: urls.base,\n          api: urls.api,\n          identity: urls.identity,\n          webVault: urls.webVault,\n          icons: urls.icons,\n          notifications: urls.notifications,\n          events: urls.events,\n          keyConnector: urls.keyConnector,\n        },\n      }));\n\n      return urls;\n    }\n  }\n\n  /**\n   * Helper for building the environment from state. Performs some general sanitization to avoid invalid regions and urls.\n   */\n  protected buildEnvironment(region: Region, urls: Urls) {\n    // Unknown regions are treated as self-hosted\n    if (this.getRegionConfig(region) == null) {\n      region = Region.SelfHosted;\n    }\n\n    // If self-hosted ensure urls are valid else fallback to default region\n    if (region == Region.SelfHosted && isEmpty(urls)) {\n      region = DEFAULT_REGION;\n    }\n\n    // Load urls from region config\n    if (region != Region.SelfHosted) {\n      const regionConfig = this.getRegionConfig(region);\n      if (regionConfig != null) {\n        return new CloudEnvironment(regionConfig);\n      }\n    }\n\n    return new SelfHostedEnvironment(urls);\n  }\n\n  async setCloudRegion(userId: UserId, region: CloudRegion) {\n    if (userId == null) {\n      await this.globalCloudRegionState.update(() => region);\n    } else {\n      await this.stateProvider.getUser(userId, CLOUD_REGION_KEY).update(() => region);\n    }\n  }\n\n  async getEnvironment(userId?: UserId) {\n    if (userId == null) {\n      return await firstValueFrom(this.environment$);\n    }\n\n    const state = await this.getEnvironmentState(userId);\n    return this.buildEnvironment(state.region, state.urls);\n  }\n\n  private async getEnvironmentState(userId: UserId | null) {\n    // Previous rules dictated that we only get from user scoped state if there is an active user.\n    const activeUserId = await firstValueFrom(this.activeAccountId$);\n    return activeUserId == null\n      ? await firstValueFrom(this.globalState.state$)\n      : await firstValueFrom(\n          this.stateProvider.getUser(userId ?? activeUserId, ENVIRONMENT_KEY).state$,\n        );\n  }\n\n  async seedUserEnvironment(userId: UserId) {\n    const global = await firstValueFrom(this.globalState.state$);\n    await this.stateProvider.getUser(userId, ENVIRONMENT_KEY).update(() => global);\n  }\n}\n\nfunction formatUrl(url: string): string {\n  if (url == null || url === \"\") {\n    return null;\n  }\n\n  url = url.replace(/\\/+$/g, \"\");\n  if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n    url = \"https://\" + url;\n  }\n\n  return url.trim();\n}\n\nfunction isEmpty(u?: Urls): boolean {\n  if (u == null) {\n    return true;\n  }\n\n  return (\n    u.base == null &&\n    u.webVault == null &&\n    u.api == null &&\n    u.identity == null &&\n    u.icons == null &&\n    u.notifications == null &&\n    u.events == null\n  );\n}\n\nabstract class UrlEnvironment implements Environment {\n  constructor(\n    protected region: Region,\n    protected urls: Urls,\n  ) {\n    // Scim is always null for self-hosted\n    if (region == Region.SelfHosted) {\n      this.urls.scim = null;\n    }\n  }\n\n  abstract getHostname(): string;\n\n  getRegion() {\n    return this.region;\n  }\n\n  getUrls() {\n    return {\n      base: this.urls.base,\n      webVault: this.urls.webVault,\n      api: this.urls.api,\n      identity: this.urls.identity,\n      icons: this.urls.icons,\n      notifications: this.urls.notifications,\n      events: this.urls.events,\n      keyConnector: this.urls.keyConnector,\n      scim: this.urls.scim,\n    };\n  }\n\n  hasBaseUrl() {\n    return this.urls.base != null;\n  }\n\n  getWebVaultUrl() {\n    return this.getUrl(\"webVault\", \"\");\n  }\n\n  getApiUrl() {\n    return this.getUrl(\"api\", \"/api\");\n  }\n\n  getEventsUrl() {\n    return this.getUrl(\"events\", \"/events\");\n  }\n\n  getIconsUrl() {\n    return this.getUrl(\"icons\", \"/icons\");\n  }\n\n  getIdentityUrl() {\n    return this.getUrl(\"identity\", \"/identity\");\n  }\n\n  getKeyConnectorUrl() {\n    return this.urls.keyConnector;\n  }\n\n  getNotificationsUrl() {\n    return this.getUrl(\"notifications\", \"/notifications\");\n  }\n\n  getScimUrl() {\n    if (this.urls.scim != null) {\n      return this.urls.scim + \"/v2\";\n    }\n\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://scim.bitwarden.com/v2\"\n      : this.getWebVaultUrl() + \"/scim/v2\";\n  }\n\n  getSendUrl() {\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://send.bitwarden.com/#\"\n      : this.getWebVaultUrl() + \"/#/send/\";\n  }\n\n  /**\n   * Presume that if the region is not self-hosted, it is cloud.\n   */\n  isCloud(): boolean {\n    return this.region !== Region.SelfHosted;\n  }\n\n  /**\n   * Helper for getting an URL.\n   *\n   * @param key Key of the URL to get from URLs\n   * @param baseSuffix Suffix to append to the base URL if the url is not set\n   * @returns\n   */\n  private getUrl(key: keyof Urls, baseSuffix: string) {\n    if (this.urls[key] != null) {\n      return this.urls[key];\n    }\n\n    if (this.urls.base) {\n      return this.urls.base + baseSuffix;\n    }\n\n    return DEFAULT_REGION_CONFIG.urls[key];\n  }\n}\n\n/**\n * Denote a cloud environment.\n */\nexport class CloudEnvironment extends UrlEnvironment {\n  constructor(private config: RegionConfig) {\n    super(config.key, config.urls);\n  }\n\n  /**\n   * Cloud always returns nice urls, i.e. bitwarden.com instead of vault.bitwarden.com.\n   */\n  getHostname() {\n    return this.config.domain;\n  }\n}\n\nexport class SelfHostedEnvironment extends UrlEnvironment {\n  constructor(urls: Urls) {\n    super(Region.SelfHosted, urls);\n  }\n\n  getHostname() {\n    return Utils.getHost(this.getWebVaultUrl());\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { Region } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { DefaultEnvironmentService } from \"@bitwarden/common/platform/services/default-environment.service\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\n\nimport { GroupPolicyEnvironment } from \"../../admin-console/types/group-policy-environment\";\nimport { devFlagEnabled, devFlagValue } from \"../flags\";\n\nexport class BrowserEnvironmentService extends DefaultEnvironmentService {\n  constructor(\n    private logService: LogService,\n    stateProvider: StateProvider,\n    accountService: AccountService,\n  ) {\n    super(stateProvider, accountService);\n  }\n\n  async hasManagedEnvironment(): Promise<boolean> {\n    try {\n      return (await this.getManagedEnvironment()) != null;\n    } catch (e) {\n      this.logService.error(e);\n      return false;\n    }\n  }\n\n  async settingsHaveChanged() {\n    if (!(await this.hasManagedEnvironment())) {\n      return false;\n    }\n\n    const managedEnv = await this.getManagedEnvironment();\n    const env = await firstValueFrom(this.environment$);\n    const urls = env.getUrls();\n\n    return (\n      managedEnv.base != urls.base ||\n      managedEnv.webVault != urls.webVault ||\n      managedEnv.api != urls.api ||\n      managedEnv.identity != urls.identity ||\n      managedEnv.icons != urls.icons ||\n      managedEnv.notifications != urls.notifications ||\n      managedEnv.events != urls.events\n    );\n  }\n\n  getManagedEnvironment(): Promise<GroupPolicyEnvironment> {\n    return devFlagEnabled(\"managedEnvironment\")\n      ? new Promise((resolve) => resolve(devFlagValue(\"managedEnvironment\")))\n      : new Promise((resolve, reject) => {\n          if (chrome.storage.managed == null) {\n            return resolve(null);\n          }\n\n          chrome.storage.managed.get(\"environment\", (result) => {\n            if (chrome.runtime.lastError) {\n              return reject(chrome.runtime.lastError);\n            }\n\n            resolve(result.environment);\n          });\n        });\n  }\n\n  async setUrlsToManagedEnvironment() {\n    const env = await this.getManagedEnvironment();\n    await this.setEnvironment(Region.SelfHosted, {\n      base: env.base,\n      webVault: env.webVault,\n      api: env.api,\n      identity: env.identity,\n      icons: env.icons,\n      notifications: env.notifications,\n      events: env.events,\n    });\n  }\n}\n","import { Observable, ReplaySubject, Subject, concatMap, merge, share, timer } from \"rxjs\";\n\nimport { DerivedStateDependencies } from \"../../../types/state\";\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"../../abstractions/storage.service\";\nimport { DeriveDefinition } from \"../derive-definition\";\nimport { DerivedState } from \"../derived-state\";\n\n/**\n * Default derived state\n */\nexport class DefaultDerivedState<TFrom, TTo, TDeps extends DerivedStateDependencies>\n  implements DerivedState<TTo>\n{\n  private readonly storageKey: string;\n  private forcedValueSubject = new Subject<TTo>();\n\n  state$: Observable<TTo>;\n\n  constructor(\n    private parentState$: Observable<TFrom>,\n    protected deriveDefinition: DeriveDefinition<TFrom, TTo, TDeps>,\n    private memoryStorage: AbstractStorageService & ObservableStorageService,\n    private dependencies: TDeps,\n  ) {\n    this.storageKey = deriveDefinition.storageKey;\n\n    const derivedState$ = this.parentState$.pipe(\n      concatMap(async (state) => {\n        let derivedStateOrPromise = this.deriveDefinition.derive(state, this.dependencies);\n        if (derivedStateOrPromise instanceof Promise) {\n          derivedStateOrPromise = await derivedStateOrPromise;\n        }\n        const derivedState = derivedStateOrPromise;\n        await this.storeValue(derivedState);\n        return derivedState;\n      }),\n    );\n\n    this.state$ = merge(this.forcedValueSubject, derivedState$).pipe(\n      share({\n        connector: () => {\n          return new ReplaySubject<TTo>(1);\n        },\n        resetOnRefCountZero: () =>\n          timer(this.deriveDefinition.cleanupDelayMs).pipe(\n            concatMap(async () => {\n              if (this.deriveDefinition.clearOnCleanup) {\n                await this.memoryStorage.remove(this.storageKey);\n              }\n              return true;\n            }),\n          ),\n      }),\n    );\n  }\n\n  async forceValue(value: TTo) {\n    await this.storeValue(value);\n    this.forcedValueSubject.next(value);\n    return value;\n  }\n\n  private storeValue(value: TTo) {\n    return this.memoryStorage.save(this.storageKey, { derived: true, value });\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { DerivedStateDependencies } from \"../../../types/state\";\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"../../abstractions/storage.service\";\nimport { DeriveDefinition } from \"../derive-definition\";\nimport { DerivedState } from \"../derived-state\";\nimport { DerivedStateProvider } from \"../derived-state.provider\";\n\nimport { DefaultDerivedState } from \"./default-derived-state\";\n\nexport class DefaultDerivedStateProvider implements DerivedStateProvider {\n  private cache: Record<string, DerivedState<unknown>> = {};\n\n  constructor(protected memoryStorage: AbstractStorageService & ObservableStorageService) {}\n\n  get<TFrom, TTo, TDeps extends DerivedStateDependencies>(\n    parentState$: Observable<TFrom>,\n    deriveDefinition: DeriveDefinition<TFrom, TTo, TDeps>,\n    dependencies: TDeps,\n  ): DerivedState<TTo> {\n    const cacheKey = deriveDefinition.buildCacheKey();\n    const existingDerivedState = this.cache[cacheKey];\n    if (existingDerivedState != null) {\n      // I have to cast out of the unknown generic but this should be safe if rules\n      // around domain token are made\n      return existingDerivedState as DefaultDerivedState<TFrom, TTo, TDeps>;\n    }\n\n    const newDerivedState = this.buildDerivedState(parentState$, deriveDefinition, dependencies);\n    this.cache[cacheKey] = newDerivedState;\n    return newDerivedState;\n  }\n\n  protected buildDerivedState<TFrom, TTo, TDeps extends DerivedStateDependencies>(\n    parentState$: Observable<TFrom>,\n    deriveDefinition: DeriveDefinition<TFrom, TTo, TDeps>,\n    dependencies: TDeps,\n  ): DerivedState<TTo> {\n    return new DefaultDerivedState<TFrom, TTo, TDeps>(\n      parentState$,\n      deriveDefinition,\n      this.memoryStorage,\n      dependencies,\n    );\n  }\n}\n","import { Observable, Subscription } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { DeriveDefinition } from \"@bitwarden/common/platform/state\";\n// eslint-disable-next-line import/no-restricted-paths -- extending this class for this client\nimport { DefaultDerivedState } from \"@bitwarden/common/platform/state/implementations/default-derived-state\";\nimport { DerivedStateDependencies } from \"@bitwarden/common/types/state\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\n\nexport class BackgroundDerivedState<\n  TFrom,\n  TTo,\n  TDeps extends DerivedStateDependencies,\n> extends DefaultDerivedState<TFrom, TTo, TDeps> {\n  private portSubscriptions: Map<chrome.runtime.Port, Subscription> = new Map();\n\n  constructor(\n    parentState$: Observable<TFrom>,\n    deriveDefinition: DeriveDefinition<TFrom, TTo, TDeps>,\n    memoryStorage: AbstractStorageService & ObservableStorageService,\n    dependencies: TDeps,\n  ) {\n    super(parentState$, deriveDefinition, memoryStorage, dependencies);\n    const portName = deriveDefinition.buildCacheKey();\n\n    // listen for foreground derived states to connect\n    BrowserApi.addListener(chrome.runtime.onConnect, (port) => {\n      if (port.name !== portName) {\n        return;\n      }\n\n      const listenerCallback = this.onMessageFromForeground.bind(this);\n      port.onDisconnect.addListener(() => {\n        this.portSubscriptions.get(port)?.unsubscribe();\n        this.portSubscriptions.delete(port);\n        port.onMessage.removeListener(listenerCallback);\n      });\n      port.onMessage.addListener(listenerCallback);\n\n      const stateSubscription = this.state$.subscribe();\n\n      this.portSubscriptions.set(port, stateSubscription);\n    });\n  }\n\n  private async onMessageFromForeground(message: DerivedStateMessage, port: chrome.runtime.Port) {\n    if (message.originator === \"background\") {\n      return;\n    }\n\n    switch (message.action) {\n      case \"nextState\": {\n        const dataObj = JSON.parse(message.data) as Jsonify<TTo>;\n        const data = this.deriveDefinition.deserialize(dataObj);\n        await this.forceValue(data);\n        await this.sendResponse(\n          message,\n          {\n            action: \"resolve\",\n          },\n          port,\n        );\n        break;\n      }\n    }\n  }\n\n  private async sendResponse(\n    originalMessage: DerivedStateMessage,\n    response: Omit<DerivedStateMessage, \"originator\" | \"id\">,\n    port: chrome.runtime.Port,\n  ) {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendMessage(\n      {\n        ...response,\n        id: originalMessage.id,\n      },\n      port,\n    );\n  }\n\n  private async sendMessage(\n    message: Omit<DerivedStateMessage, \"originator\">,\n    port: chrome.runtime.Port,\n  ) {\n    port.postMessage({\n      ...message,\n      originator: \"background\",\n    });\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { DeriveDefinition, DerivedState } from \"@bitwarden/common/platform/state\";\n// eslint-disable-next-line import/no-restricted-paths -- extending this class for this client\nimport { DefaultDerivedStateProvider } from \"@bitwarden/common/platform/state/implementations/default-derived-state.provider\";\nimport { DerivedStateDependencies } from \"@bitwarden/common/src/types/state\";\n\nimport { BackgroundDerivedState } from \"./background-derived-state\";\n\nexport class BackgroundDerivedStateProvider extends DefaultDerivedStateProvider {\n  override buildDerivedState<TFrom, TTo, TDeps extends DerivedStateDependencies>(\n    parentState$: Observable<TFrom>,\n    deriveDefinition: DeriveDefinition<TFrom, TTo, TDeps>,\n    dependencies: TDeps,\n  ): DerivedState<TTo> {\n    return new BackgroundDerivedState(\n      parentState$,\n      deriveDefinition,\n      this.memoryStorage,\n      dependencies,\n    );\n  }\n}\n","import { StateProvider } from \"@bitwarden/common/platform/state\";\n// eslint-disable-next-line import/no-restricted-paths -- We need the implementation to inject, but generally this should not be accessed\nimport { DefaultStateProvider } from \"@bitwarden/common/platform/state/implementations/default-state.provider\";\n\nimport {\n  ActiveUserStateProviderInitOptions,\n  activeUserStateProviderFactory,\n} from \"./active-user-state-provider.factory\";\nimport {\n  DerivedStateProviderInitOptions,\n  derivedStateProviderFactory,\n} from \"./derived-state-provider.factory\";\nimport { CachedServices, FactoryOptions, factory } from \"./factory-options\";\nimport {\n  GlobalStateProviderInitOptions,\n  globalStateProviderFactory,\n} from \"./global-state-provider.factory\";\nimport {\n  SingleUserStateProviderInitOptions,\n  singleUserStateProviderFactory,\n} from \"./single-user-state-provider.factory\";\n\ntype StateProviderFactoryOptions = FactoryOptions;\n\nexport type StateProviderInitOptions = StateProviderFactoryOptions &\n  GlobalStateProviderInitOptions &\n  ActiveUserStateProviderInitOptions &\n  SingleUserStateProviderInitOptions &\n  DerivedStateProviderInitOptions;\n\nexport async function stateProviderFactory(\n  cache: { stateProvider?: StateProvider } & CachedServices,\n  opts: StateProviderInitOptions,\n): Promise<StateProvider> {\n  return factory(\n    cache,\n    \"stateProvider\",\n    opts,\n    async () =>\n      new DefaultStateProvider(\n        await activeUserStateProviderFactory(cache, opts),\n        await singleUserStateProviderFactory(cache, opts),\n        await globalStateProviderFactory(cache, opts),\n        await derivedStateProviderFactory(cache, opts),\n      ),\n  );\n}\n","import { ActiveUserStateProvider } from \"@bitwarden/common/platform/state\";\n// eslint-disable-next-line import/no-restricted-paths -- We need the implementation to inject, but generally this should not be accessed\nimport { DefaultActiveUserStateProvider } from \"@bitwarden/common/platform/state/implementations/default-active-user-state.provider\";\n\nimport {\n  AccountServiceInitOptions,\n  accountServiceFactory,\n} from \"../../../auth/background/service-factories/account-service.factory\";\n\nimport { CachedServices, FactoryOptions, factory } from \"./factory-options\";\nimport {\n  SingleUserStateProviderInitOptions,\n  singleUserStateProviderFactory,\n} from \"./single-user-state-provider.factory\";\n\ntype ActiveUserStateProviderFactory = FactoryOptions;\n\nexport type ActiveUserStateProviderInitOptions = ActiveUserStateProviderFactory &\n  AccountServiceInitOptions &\n  SingleUserStateProviderInitOptions;\n\nexport async function activeUserStateProviderFactory(\n  cache: { activeUserStateProvider?: ActiveUserStateProvider } & CachedServices,\n  opts: ActiveUserStateProviderInitOptions,\n): Promise<ActiveUserStateProvider> {\n  return factory(\n    cache,\n    \"activeUserStateProvider\",\n    opts,\n    async () =>\n      new DefaultActiveUserStateProvider(\n        await accountServiceFactory(cache, opts),\n        await singleUserStateProviderFactory(cache, opts),\n      ),\n  );\n}\n","import { DerivedStateProvider } from \"@bitwarden/common/platform/state\";\n\nimport { BackgroundDerivedStateProvider } from \"../../state/background-derived-state.provider\";\n\nimport { CachedServices, FactoryOptions, factory } from \"./factory-options\";\nimport {\n  MemoryStorageServiceInitOptions,\n  observableMemoryStorageServiceFactory,\n} from \"./storage-service.factory\";\n\ntype DerivedStateProviderFactoryOptions = FactoryOptions;\n\nexport type DerivedStateProviderInitOptions = DerivedStateProviderFactoryOptions &\n  MemoryStorageServiceInitOptions;\n\nexport async function derivedStateProviderFactory(\n  cache: { derivedStateProvider?: DerivedStateProvider } & CachedServices,\n  opts: DerivedStateProviderInitOptions,\n): Promise<DerivedStateProvider> {\n  return factory(\n    cache,\n    \"derivedStateProvider\",\n    opts,\n    async () =>\n      new BackgroundDerivedStateProvider(await observableMemoryStorageServiceFactory(cache, opts)),\n  );\n}\n","import {\n  accountServiceFactory,\n  AccountServiceInitOptions,\n} from \"../../../auth/background/service-factories/account-service.factory\";\nimport { BrowserEnvironmentService } from \"../../services/browser-environment.service\";\n\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\nimport { stateProviderFactory, StateProviderInitOptions } from \"./state-provider.factory\";\n\ntype EnvironmentServiceFactoryOptions = FactoryOptions;\n\nexport type EnvironmentServiceInitOptions = EnvironmentServiceFactoryOptions &\n  StateProviderInitOptions &\n  AccountServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function environmentServiceFactory(\n  cache: { environmentService?: BrowserEnvironmentService } & CachedServices,\n  opts: EnvironmentServiceInitOptions,\n): Promise<BrowserEnvironmentService> {\n  return factory(\n    cache,\n    \"environmentService\",\n    opts,\n    async () =>\n      new BrowserEnvironmentService(\n        await logServiceFactory(cache, opts),\n        await stateProviderFactory(cache, opts),\n        await accountServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { LogLevelType } from \"../enums/log-level-type.enum\";\n\nexport abstract class LogService {\n  debug: (message: string) => void;\n  info: (message: string) => void;\n  warning: (message: string) => void;\n  error: (message: string) => void;\n  write: (level: LogLevelType, message: string) => void;\n}\n","import { View } from \"../../../../models/view/view\";\nimport { DeepJsonify } from \"../../../../types/deep-jsonify\";\nimport { SendFile } from \"../domain/send-file\";\n\nexport class SendFileView implements View {\n  id: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n\n  constructor(f?: SendFile) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.size = f.size;\n    this.sizeName = f.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n\n  static fromJSON(json: DeepJsonify<SendFileView>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new SendFileView(), json);\n  }\n}\n","import { View } from \"../../../../models/view/view\";\nimport { DeepJsonify } from \"../../../../types/deep-jsonify\";\nimport { SendText } from \"../domain/send-text\";\n\nexport class SendTextView implements View {\n  text: string = null;\n  hidden: boolean;\n\n  constructor(t?: SendText) {\n    if (!t) {\n      return;\n    }\n\n    this.hidden = t.hidden;\n  }\n\n  get maskedText(): string {\n    return this.text != null ? \"••••••••\" : null;\n  }\n\n  static fromJSON(json: DeepJsonify<SendTextView>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new SendTextView(), json);\n  }\n}\n","import { View } from \"../../../../models/view/view\";\nimport { Utils } from \"../../../../platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"../../../../platform/models/domain/symmetric-crypto-key\";\nimport { DeepJsonify } from \"../../../../types/deep-jsonify\";\nimport { SendType } from \"../../enums/send-type\";\nimport { Send } from \"../domain/send\";\n\nimport { SendFileView } from \"./send-file.view\";\nimport { SendTextView } from \"./send-text.view\";\n\nexport class SendView implements View {\n  id: string = null;\n  accessId: string = null;\n  name: string = null;\n  notes: string = null;\n  key: Uint8Array;\n  cryptoKey: SymmetricCryptoKey;\n  type: SendType = null;\n  text = new SendTextView();\n  file = new SendFileView();\n  maxAccessCount?: number = null;\n  accessCount = 0;\n  revisionDate: Date = null;\n  deletionDate: Date = null;\n  expirationDate: Date = null;\n  password: string = null;\n  disabled = false;\n  hideEmail = false;\n\n  constructor(s?: Send) {\n    if (!s) {\n      return;\n    }\n\n    this.id = s.id;\n    this.accessId = s.accessId;\n    this.type = s.type;\n    this.maxAccessCount = s.maxAccessCount;\n    this.accessCount = s.accessCount;\n    this.revisionDate = s.revisionDate;\n    this.deletionDate = s.deletionDate;\n    this.expirationDate = s.expirationDate;\n    this.disabled = s.disabled;\n    this.password = s.password;\n    this.hideEmail = s.hideEmail;\n  }\n\n  get urlB64Key(): string {\n    return Utils.fromBufferToUrlB64(this.key);\n  }\n\n  get maxAccessCountReached(): boolean {\n    if (this.maxAccessCount == null) {\n      return false;\n    }\n    return this.accessCount >= this.maxAccessCount;\n  }\n\n  get expired(): boolean {\n    if (this.expirationDate == null) {\n      return false;\n    }\n    return this.expirationDate <= new Date();\n  }\n\n  get pendingDelete(): boolean {\n    return this.deletionDate <= new Date();\n  }\n\n  toJSON() {\n    return Utils.merge(\n      { ...this },\n      {\n        key: Utils.fromBufferToB64(this.key),\n      },\n    );\n  }\n\n  static fromJSON(json: DeepJsonify<SendView>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new SendView(), json, {\n      key: Utils.fromB64ToArray(json.key),\n      cryptoKey: SymmetricCryptoKey.fromJSON(json.cryptoKey),\n      text: SendTextView.fromJSON(json.text),\n      file: SendFileView.fromJSON(json.file),\n      revisionDate: json.revisionDate == null ? null : new Date(json.revisionDate),\n      deletionDate: json.deletionDate == null ? null : new Date(json.deletionDate),\n      expirationDate: json.expirationDate == null ? null : new Date(json.expirationDate),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Account } from \"./account\";\nimport { GlobalState } from \"./global-state\";\n\nexport class State<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account,\n> {\n  accounts: { [userId: string]: TAccount } = {};\n  globals: TGlobalState;\n  activeUserId: string;\n  authenticatedAccounts: string[] = [];\n  accountActivity: { [userId: string]: number } = {};\n\n  constructor(globals: TGlobalState) {\n    this.globals = globals;\n  }\n\n  // TODO, make Jsonify<State,TGlobalState,TAccount> work. It currently doesn't because Globals doesn't implement Jsonify.\n  static fromJSON<TGlobalState extends GlobalState, TAccount extends Account>(\n    obj: any,\n    accountDeserializer: (json: Jsonify<TAccount>) => TAccount,\n  ): State<TGlobalState, TAccount> {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new State(null), obj, {\n      accounts: State.buildAccountMapFromJSON(obj?.accounts, accountDeserializer),\n    });\n  }\n\n  private static buildAccountMapFromJSON<TAccount extends Account>(\n    jsonAccounts: { [userId: string]: Jsonify<TAccount> },\n    accountDeserializer: (json: Jsonify<TAccount>) => TAccount,\n  ) {\n    if (!jsonAccounts) {\n      return {};\n    }\n    const accounts: { [userId: string]: TAccount } = {};\n    for (const userId in jsonAccounts) {\n      accounts[userId] = accountDeserializer(jsonAccounts[userId]);\n    }\n    return accounts;\n  }\n}\n","import { BehaviorSubject, Observable, map } from \"rxjs\";\nimport { Jsonify, JsonValue } from \"type-fest\";\n\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { TokenService } from \"../../auth/abstractions/token.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { AdminAuthRequestStorable } from \"../../auth/models/domain/admin-auth-req-storable\";\nimport { ForceSetPasswordReason } from \"../../auth/models/domain/force-set-password-reason\";\nimport { KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport { BiometricKey } from \"../../auth/types/biometric-key\";\nimport { GeneratorOptions } from \"../../tools/generator/generator-options\";\nimport { GeneratedPasswordHistory, PasswordGeneratorOptions } from \"../../tools/generator/password\";\nimport { UsernameGeneratorOptions } from \"../../tools/generator/username\";\nimport { SendData } from \"../../tools/send/models/data/send.data\";\nimport { SendView } from \"../../tools/send/models/view/send.view\";\nimport { UserId } from \"../../types/guid\";\nimport { DeviceKey, MasterKey } from \"../../types/key\";\nimport { CipherData } from \"../../vault/models/data/cipher.data\";\nimport { LocalData } from \"../../vault/models/data/local.data\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { AddEditCipherInfo } from \"../../vault/types/add-edit-cipher-info\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport {\n  InitOptions,\n  StateService as StateServiceAbstraction,\n} from \"../abstractions/state.service\";\nimport {\n  AbstractMemoryStorageService,\n  AbstractStorageService,\n} from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation, KdfType, StorageLocation } from \"../enums\";\nimport { StateFactory } from \"../factories/state-factory\";\nimport { Utils } from \"../misc/utils\";\nimport { ServerConfigData } from \"../models/data/server-config.data\";\nimport { Account, AccountData, AccountSettings } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/enc-string\";\nimport { GlobalState } from \"../models/domain/global-state\";\nimport { State } from \"../models/domain/state\";\nimport { StorageOptions } from \"../models/domain/storage-options\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\nimport { MigrationRunner } from \"./migration-runner\";\n\nconst keys = {\n  state: \"state\",\n  stateVersion: \"stateVersion\",\n  global: \"global\",\n  authenticatedAccounts: \"authenticatedAccounts\",\n  activeUserId: \"activeUserId\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n  accountActivity: \"accountActivity\",\n};\n\nconst partialKeys = {\n  userAutoKey: \"_user_auto\",\n  userBiometricKey: \"_user_biometric\",\n\n  autoKey: \"_masterkey_auto\",\n  biometricKey: \"_masterkey_biometric\",\n  masterKey: \"_masterkey\",\n};\n\nconst DDG_SHARED_KEY = \"DuckDuckGoSharedKey\";\n\nexport class StateService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account,\n> implements StateServiceAbstraction<TAccount>\n{\n  protected accountsSubject = new BehaviorSubject<{ [userId: string]: TAccount }>({});\n  accounts$ = this.accountsSubject.asObservable();\n\n  protected activeAccountSubject = new BehaviorSubject<string | null>(null);\n  activeAccount$ = this.activeAccountSubject.asObservable();\n\n  activeAccountUnlocked$: Observable<boolean>;\n\n  private hasBeenInited = false;\n  protected isRecoveredSession = false;\n\n  protected accountDiskCache = new BehaviorSubject<Record<string, TAccount>>({});\n\n  // default account serializer, must be overridden by child class\n  protected accountDeserializer = Account.fromJSON as (json: Jsonify<TAccount>) => TAccount;\n\n  constructor(\n    protected storageService: AbstractStorageService,\n    protected secureStorageService: AbstractStorageService,\n    protected memoryStorageService: AbstractMemoryStorageService,\n    protected logService: LogService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>,\n    protected accountService: AccountService,\n    protected environmentService: EnvironmentService,\n    protected tokenService: TokenService,\n    private migrationRunner: MigrationRunner,\n    protected useAccountCache: boolean = true,\n  ) {\n    this.activeAccountUnlocked$ = this.accountService.activeAccount$.pipe(\n      map((a) => {\n        return a?.status === AuthenticationStatus.Unlocked;\n      }),\n    );\n  }\n\n  async init(initOptions: InitOptions = {}): Promise<void> {\n    // Deconstruct and apply defaults\n    const { runMigrations = true } = initOptions;\n    if (this.hasBeenInited) {\n      return;\n    }\n\n    if (runMigrations) {\n      await this.migrationRunner.run();\n    } else {\n      // It may have been requested to not run the migrations but we should defensively not\n      // continue this method until migrations have a chance to be completed elsewhere.\n      await this.migrationRunner.waitForCompletion();\n    }\n\n    await this.state().then(async (state) => {\n      if (state == null) {\n        await this.setState(new State<TGlobalState, TAccount>(this.createGlobals()));\n      } else {\n        this.isRecoveredSession = true;\n      }\n    });\n    await this.initAccountState();\n\n    this.hasBeenInited = true;\n  }\n\n  async initAccountState() {\n    if (this.isRecoveredSession) {\n      return;\n    }\n\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts =\n        (await this.storageService.get<string[]>(keys.authenticatedAccounts)) ?? [];\n      for (const i in state.authenticatedAccounts) {\n        if (i != null) {\n          state = await this.syncAccountFromDisk(state.authenticatedAccounts[i]);\n        }\n      }\n      const storedActiveUser = await this.storageService.get<string>(keys.activeUserId);\n      if (storedActiveUser != null) {\n        state.activeUserId = storedActiveUser;\n      }\n      await this.pushAccounts();\n      this.activeAccountSubject.next(state.activeUserId);\n      // TODO: Temporary update to avoid routing all account status changes through account service for now.\n      // account service tracks logged out accounts, but State service does not, so we need to add the active account\n      // if it's not in the accounts list.\n      if (state.activeUserId != null && this.accountsSubject.value[state.activeUserId] == null) {\n        const activeDiskAccount = await this.getAccountFromDisk({ userId: state.activeUserId });\n        await this.accountService.addAccount(state.activeUserId as UserId, {\n          name: activeDiskAccount.profile.name,\n          email: activeDiskAccount.profile.email,\n          status: AuthenticationStatus.LoggedOut,\n        });\n      }\n      await this.accountService.switchAccount(state.activeUserId as UserId);\n      // End TODO\n\n      return state;\n    });\n  }\n\n  async syncAccountFromDisk(userId: string): Promise<State<TGlobalState, TAccount>> {\n    if (userId == null) {\n      return;\n    }\n    const diskAccount = await this.getAccountFromDisk({ userId: userId });\n    const state = await this.updateState(async (state) => {\n      if (state.accounts == null) {\n        state.accounts = {};\n      }\n      state.accounts[userId] = this.createAccount();\n      state.accounts[userId].profile = diskAccount.profile;\n      return state;\n    });\n\n    // TODO: Temporary update to avoid routing all account status changes through account service for now.\n    // The determination of state should be handled by the various services that control those values.\n    const token = await this.tokenService.getAccessToken(userId as UserId);\n    const autoKey = await this.getUserKeyAutoUnlock({ userId: userId });\n    const accountStatus =\n      token == null\n        ? AuthenticationStatus.LoggedOut\n        : autoKey == null\n          ? AuthenticationStatus.Locked\n          : AuthenticationStatus.Unlocked;\n    await this.accountService.addAccount(userId as UserId, {\n      status: accountStatus,\n      name: diskAccount.profile.name,\n      email: diskAccount.profile.email,\n    });\n\n    return state;\n  }\n\n  async addAccount(account: TAccount) {\n    await this.environmentService.seedUserEnvironment(account.profile.userId as UserId);\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts.push(account.profile.userId);\n      await this.storageService.save(keys.authenticatedAccounts, state.authenticatedAccounts);\n      state.accounts[account.profile.userId] = account;\n      return state;\n    });\n    await this.scaffoldNewAccountStorage(account);\n    await this.setLastActive(new Date().getTime(), { userId: account.profile.userId });\n    // TODO: Temporary update to avoid routing all account status changes through account service for now.\n    await this.accountService.addAccount(account.profile.userId as UserId, {\n      status: AuthenticationStatus.Locked,\n      name: account.profile.name,\n      email: account.profile.email,\n    });\n    await this.setActiveUser(account.profile.userId);\n  }\n\n  async setActiveUser(userId: string): Promise<void> {\n    await this.clearDecryptedDataForActiveUser();\n    await this.updateState(async (state) => {\n      state.activeUserId = userId;\n      await this.storageService.save(keys.activeUserId, userId);\n      this.activeAccountSubject.next(state.activeUserId);\n      // TODO: temporary update to avoid routing all account status changes through account service for now.\n      await this.accountService.switchAccount(userId as UserId);\n\n      return state;\n    });\n\n    await this.pushAccounts();\n  }\n\n  async clean(options?: StorageOptions): Promise<UserId> {\n    options = this.reconcileOptions(options, await this.defaultInMemoryOptions());\n    await this.deAuthenticateAccount(options.userId);\n    let currentUser = (await this.state())?.activeUserId;\n    if (options.userId === currentUser) {\n      currentUser = await this.dynamicallySetActiveUser();\n    }\n\n    await this.removeAccountFromDisk(options?.userId);\n    await this.removeAccountFromMemory(options?.userId);\n    await this.pushAccounts();\n    return currentUser as UserId;\n  }\n\n  async getAddEditCipherInfo(options?: StorageOptions): Promise<AddEditCipherInfo> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    // ensure prototype on cipher\n    const raw = account?.data?.addEditCipherInfo;\n    return raw == null\n      ? null\n      : {\n          cipher:\n            raw?.cipher.toJSON != null\n              ? raw.cipher\n              : CipherView.fromJSON(raw?.cipher as Jsonify<CipherView>),\n          collectionIds: raw?.collectionIds,\n        };\n  }\n\n  async setAddEditCipherInfo(value: AddEditCipherInfo, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.data.addEditCipherInfo = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  async getBiometricFingerprintValidated(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.biometricFingerprintValidated ?? false\n    );\n  }\n\n  async setBiometricFingerprintValidated(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    globals.biometricFingerprintValidated = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getConvertAccountToKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.convertAccountToKeyConnector;\n  }\n\n  async setConvertAccountToKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.profile.convertAccountToKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  /**\n   * @deprecated Do not save the Master Key. Use the User Symmetric Key instead\n   */\n  async getCryptoMasterKey(options?: StorageOptions): Promise<SymmetricCryptoKey> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    return account?.keys?.cryptoMasterKey;\n  }\n\n  /**\n   * User's master key derived from MP, saved only if we decrypted with MP\n   */\n  async getMasterKey(options?: StorageOptions): Promise<MasterKey> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    return account?.keys?.masterKey;\n  }\n\n  /**\n   * User's master key derived from MP, saved only if we decrypted with MP\n   */\n  async setMasterKey(value: MasterKey, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.keys.masterKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  /**\n   * The master key encrypted User symmetric key, saved on every auth\n   * so we can unlock with MP offline\n   */\n  async getMasterKeyEncryptedUserKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys.masterKeyEncryptedUserKey;\n  }\n\n  /**\n   * The master key encrypted User symmetric key, saved on every auth\n   * so we can unlock with MP offline\n   */\n  async setMasterKeyEncryptedUserKey(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.keys.masterKeyEncryptedUserKey = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  /**\n   * user key when using the \"never\" option of vault timeout\n   */\n  async getUserKeyAutoUnlock(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.userAutoKey}`,\n      options,\n    );\n  }\n\n  /**\n   * user key when using the \"never\" option of vault timeout\n   */\n  async setUserKeyAutoUnlock(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.userAutoKey, value, options);\n  }\n\n  /**\n   * User's encrypted symmetric key when using biometrics\n   */\n  async getUserKeyBiometric(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.userBiometricKey}`,\n      options,\n    );\n  }\n\n  async hasUserKeyBiometric(options?: StorageOptions): Promise<boolean> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return false;\n    }\n    return await this.secureStorageService.has(\n      `${options.userId}${partialKeys.userBiometricKey}`,\n      options,\n    );\n  }\n\n  async setUserKeyBiometric(value: BiometricKey, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.userBiometricKey, value, options);\n  }\n\n  async getPinKeyEncryptedUserKey(options?: StorageOptions): Promise<EncString> {\n    return EncString.fromJSON(\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.pinKeyEncryptedUserKey,\n    );\n  }\n\n  async setPinKeyEncryptedUserKey(value: EncString, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.settings.pinKeyEncryptedUserKey = value?.encryptedString;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getPinKeyEncryptedUserKeyEphemeral(options?: StorageOptions): Promise<EncString> {\n    return EncString.fromJSON(\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.settings?.pinKeyEncryptedUserKeyEphemeral,\n    );\n  }\n\n  async setPinKeyEncryptedUserKeyEphemeral(\n    value: EncString,\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.settings.pinKeyEncryptedUserKeyEphemeral = value?.encryptedString;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  /**\n   * @deprecated Use UserKeyAuto instead\n   */\n  async getCryptoMasterKeyAuto(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.autoKey}`,\n      options,\n    );\n  }\n\n  /**\n   * @deprecated Use UserKeyAuto instead\n   */\n  async setCryptoMasterKeyAuto(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.autoKey, value, options);\n  }\n\n  /**\n   * @deprecated I don't see where this is even used\n   */\n  async getCryptoMasterKeyB64(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options?.userId}${partialKeys.masterKey}`,\n      options,\n    );\n  }\n\n  /**\n   * @deprecated I don't see where this is even used\n   */\n  async setCryptoMasterKeyB64(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.masterKey, value, options);\n  }\n\n  /**\n   * @deprecated Use UserKeyBiometric instead\n   */\n  async getCryptoMasterKeyBiometric(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options,\n    );\n  }\n\n  /**\n   * @deprecated Use UserKeyBiometric instead\n   */\n  async hasCryptoMasterKeyBiometric(options?: StorageOptions): Promise<boolean> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return false;\n    }\n    return await this.secureStorageService.has(\n      `${options.userId}${partialKeys.biometricKey}`,\n      options,\n    );\n  }\n\n  /**\n   * @deprecated Use UserKeyBiometric instead\n   */\n  async setCryptoMasterKeyBiometric(value: BiometricKey, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.biometricKey, value, options);\n  }\n\n  @withPrototypeForArrayMembers(CipherView, CipherView.fromJSON)\n  async getDecryptedCiphers(options?: StorageOptions): Promise<CipherView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.ciphers?.decrypted;\n  }\n\n  async setDecryptedCiphers(value: CipherView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.data.ciphers.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  @withPrototypeForArrayMembers(GeneratedPasswordHistory)\n  async getDecryptedPasswordGenerationHistory(\n    options?: StorageOptions,\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.passwordGenerationHistory?.decrypted;\n  }\n\n  async setDecryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.data.passwordGenerationHistory.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  /**\n   * @deprecated Use getPinKeyEncryptedUserKeyEphemeral instead\n   */\n  async getDecryptedPinProtected(options?: StorageOptions): Promise<EncString> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.settings?.pinProtected?.decrypted;\n  }\n\n  /**\n   * @deprecated Use setPinKeyEncryptedUserKeyEphemeral instead\n   */\n  async setDecryptedPinProtected(value: EncString, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.settings.pinProtected.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  @withPrototypeForArrayMembers(SendView)\n  async getDecryptedSends(options?: StorageOptions): Promise<SendView[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.data?.sends?.decrypted;\n  }\n\n  async setDecryptedSends(value: SendView[], options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.data.sends.decrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  async getDisableGa(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.disableGa ?? false\n    );\n  }\n\n  async setDisableGa(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.settings.disableGa = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getDuckDuckGoSharedKey(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(DDG_SHARED_KEY, options);\n  }\n\n  async setDuckDuckGoSharedKey(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    value == null\n      ? await this.secureStorageService.remove(DDG_SHARED_KEY, options)\n      : await this.secureStorageService.save(DDG_SHARED_KEY, value, options);\n  }\n\n  async getDeviceKey(options?: StorageOptions): Promise<DeviceKey | null> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return null;\n    }\n\n    const account = await this.getAccount(options);\n\n    const existingDeviceKey = account?.keys?.deviceKey;\n\n    // Must manually instantiate the SymmetricCryptoKey class from the JSON object\n    if (existingDeviceKey != null) {\n      return SymmetricCryptoKey.fromJSON(existingDeviceKey) as DeviceKey;\n    } else {\n      return null;\n    }\n  }\n\n  async setDeviceKey(value: DeviceKey | null, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return;\n    }\n\n    const account = await this.getAccount(options);\n\n    account.keys.deviceKey = value?.toJSON() ?? null;\n\n    await this.saveAccount(account, options);\n  }\n\n  async getAdminAuthRequest(options?: StorageOptions): Promise<AdminAuthRequestStorable | null> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return null;\n    }\n\n    const account = await this.getAccount(options);\n\n    return account?.adminAuthRequest\n      ? AdminAuthRequestStorable.fromJSON(account.adminAuthRequest)\n      : null;\n  }\n\n  async setAdminAuthRequest(\n    adminAuthRequest: AdminAuthRequestStorable,\n    options?: StorageOptions,\n  ): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return;\n    }\n\n    const account = await this.getAccount(options);\n\n    account.adminAuthRequest = adminAuthRequest?.toJSON();\n\n    await this.saveAccount(account, options);\n  }\n\n  async getShouldTrustDevice(options?: StorageOptions): Promise<boolean | null> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n\n    if (options?.userId == null) {\n      return null;\n    }\n\n    const account = await this.getAccount(options);\n\n    return account?.settings?.trustDeviceChoiceForDecryption ?? null;\n  }\n\n  async setShouldTrustDevice(value: boolean, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskLocalOptions());\n    if (options?.userId == null) {\n      return;\n    }\n\n    const account = await this.getAccount(options);\n\n    account.settings.trustDeviceChoiceForDecryption = value;\n\n    await this.saveAccount(account, options);\n  }\n\n  async getEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.profile?.email;\n  }\n\n  async setEmail(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.profile.email = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  async getEmailVerified(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.profile.emailVerified ?? false\n    );\n  }\n\n  async setEmailVerified(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.profile.emailVerified = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getEnableBrowserIntegration(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegration ?? false\n    );\n  }\n\n  async setEnableBrowserIntegration(value: boolean, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    globals.enableBrowserIntegration = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getEnableBrowserIntegrationFingerprint(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.enableBrowserIntegrationFingerprint ?? false\n    );\n  }\n\n  async setEnableBrowserIntegrationFingerprint(\n    value: boolean,\n    options?: StorageOptions,\n  ): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    globals.enableBrowserIntegrationFingerprint = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  @withPrototypeForObjectValues(CipherData)\n  async getEncryptedCiphers(options?: StorageOptions): Promise<{ [id: string]: CipherData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.ciphers?.encrypted;\n  }\n\n  async setEncryptedCiphers(\n    value: { [id: string]: CipherData },\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()),\n    );\n    account.data.ciphers.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()),\n    );\n  }\n\n  /**\n   * @deprecated Use UserKey instead\n   */\n  async getEncryptedCryptoSymmetricKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys.cryptoSymmetricKey.encrypted;\n  }\n\n  @withPrototypeForArrayMembers(GeneratedPasswordHistory)\n  async getEncryptedPasswordGenerationHistory(\n    options?: StorageOptions,\n  ): Promise<GeneratedPasswordHistory[]> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.data?.passwordGenerationHistory?.encrypted;\n  }\n\n  async setEncryptedPasswordGenerationHistory(\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.data.passwordGenerationHistory.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getEncryptedPinProtected(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.pinProtected?.encrypted;\n  }\n\n  async setEncryptedPinProtected(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.settings.pinProtected.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  @withPrototypeForObjectValues(SendData)\n  async getEncryptedSends(options?: StorageOptions): Promise<{ [id: string]: SendData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.data?.sends.encrypted;\n  }\n\n  async setEncryptedSends(\n    value: { [id: string]: SendData },\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()),\n    );\n    account.data.sends.encrypted = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()),\n    );\n  }\n\n  async getEverBeenUnlocked(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions())))\n        ?.profile?.everBeenUnlocked ?? false\n    );\n  }\n\n  async setEverBeenUnlocked(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.profile.everBeenUnlocked = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  async getForceSetPasswordReason(options?: StorageOptions): Promise<ForceSetPasswordReason> {\n    return (\n      (\n        await this.getAccount(\n          this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()),\n        )\n      )?.profile?.forceSetPasswordReason ?? ForceSetPasswordReason.None\n    );\n  }\n\n  async setForceSetPasswordReason(\n    value: ForceSetPasswordReason,\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()),\n    );\n    account.profile.forceSetPasswordReason = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()),\n    );\n  }\n\n  async getInstalledVersion(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.installedVersion;\n  }\n\n  async setInstalledVersion(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    globals.installedVersion = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.tokenService.getAccessToken(options?.userId as UserId)) != null &&\n      (await this.getUserId(options)) != null\n    );\n  }\n\n  async getKdfConfig(options?: StorageOptions): Promise<KdfConfig> {\n    const iterations = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfIterations;\n    const memory = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfMemory;\n    const parallelism = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfParallelism;\n    return new KdfConfig(iterations, memory, parallelism);\n  }\n\n  async setKdfConfig(config: KdfConfig, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.profile.kdfIterations = config.iterations;\n    account.profile.kdfMemory = config.memory;\n    account.profile.kdfParallelism = config.parallelism;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getKdfType(options?: StorageOptions): Promise<KdfType> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.kdfType;\n  }\n\n  async setKdfType(value: KdfType, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.profile.kdfType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getKeyHash(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.keyHash;\n  }\n\n  async setKeyHash(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.profile.keyHash = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getLastActive(options?: StorageOptions): Promise<number> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n\n    const accountActivity = await this.storageService.get<{ [userId: string]: number }>(\n      keys.accountActivity,\n      options,\n    );\n\n    if (accountActivity == null || Object.keys(accountActivity).length < 1) {\n      return null;\n    }\n\n    return accountActivity[options.userId];\n  }\n\n  async setLastActive(value: number, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultOnDiskOptions());\n    if (options.userId == null) {\n      return;\n    }\n    const accountActivity =\n      (await this.storageService.get<{ [userId: string]: number }>(\n        keys.accountActivity,\n        options,\n      )) ?? {};\n    accountActivity[options.userId] = value;\n    await this.storageService.save(keys.accountActivity, accountActivity, options);\n  }\n\n  async getLastSync(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()))\n    )?.profile?.lastSync;\n  }\n\n  async setLastSync(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()),\n    );\n    account.profile.lastSync = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskMemoryOptions()),\n    );\n  }\n\n  async getLocalData(options?: StorageOptions): Promise<{ [cipherId: string]: LocalData }> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.data?.localData;\n  }\n\n  async setLocalData(\n    value: { [cipherId: string]: LocalData },\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n    account.data.localData = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  async getMinimizeOnCopyToClipboard(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions())))\n        ?.settings?.minimizeOnCopyToClipboard ?? false\n    );\n  }\n\n  async setMinimizeOnCopyToClipboard(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.settings.minimizeOnCopyToClipboard = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getOrganizationInvitation(options?: StorageOptions): Promise<any> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.organizationInvitation;\n  }\n\n  async setOrganizationInvitation(value: any, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    globals.organizationInvitation = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  async getPasswordGenerationOptions(options?: StorageOptions): Promise<PasswordGeneratorOptions> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.passwordGenerationOptions;\n  }\n\n  async setPasswordGenerationOptions(\n    value: PasswordGeneratorOptions,\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n    account.settings.passwordGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  async getUsernameGenerationOptions(options?: StorageOptions): Promise<UsernameGeneratorOptions> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.usernameGenerationOptions;\n  }\n\n  async setUsernameGenerationOptions(\n    value: UsernameGeneratorOptions,\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n    account.settings.usernameGenerationOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  async getGeneratorOptions(options?: StorageOptions): Promise<GeneratorOptions> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.generatorOptions;\n  }\n\n  async setGeneratorOptions(value: GeneratorOptions, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n    account.settings.generatorOptions = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  async getProtectedPin(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.settings?.protectedPin;\n  }\n\n  async setProtectedPin(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.settings.protectedPin = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getRememberedEmail(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.rememberedEmail;\n  }\n\n  async setRememberedEmail(value: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n    globals.rememberedEmail = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  async getSecurityStamp(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.tokens?.securityStamp;\n  }\n\n  async setSecurityStamp(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.tokens.securityStamp = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  async getUserId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.userId;\n  }\n\n  async getUsesKeyConnector(options?: StorageOptions): Promise<boolean> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.usesKeyConnector;\n  }\n\n  async setUsesKeyConnector(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    account.profile.usesKeyConnector = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  async getVaultTimeout(options?: StorageOptions): Promise<number> {\n    const accountVaultTimeout = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeout;\n    return accountVaultTimeout;\n  }\n\n  async setVaultTimeout(value: number, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n    account.settings.vaultTimeout = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  async getVaultTimeoutAction(options?: StorageOptions): Promise<string> {\n    const accountVaultTimeoutAction = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.vaultTimeoutAction;\n    return (\n      accountVaultTimeoutAction ??\n      (\n        await this.getGlobals(\n          this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n        )\n      )?.vaultTimeoutAction\n    );\n  }\n\n  async setVaultTimeoutAction(value: string, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n    account.settings.vaultTimeoutAction = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  async getApproveLoginRequests(options?: StorageOptions): Promise<boolean> {\n    const approveLoginRequests = (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.approveLoginRequests;\n    return approveLoginRequests;\n  }\n\n  async setApproveLoginRequests(value: boolean, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n    account.settings.approveLoginRequests = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  async setServerConfig(value: ServerConfigData, options?: StorageOptions): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n    account.settings.serverConfig = value;\n    return await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  async getServerConfig(options: StorageOptions): Promise<ServerConfigData> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskLocalOptions()))\n    )?.settings?.serverConfig;\n  }\n\n  async getDeepLinkRedirectUrl(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getGlobals(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.deepLinkRedirectUrl;\n  }\n\n  async setDeepLinkRedirectUrl(url: string, options?: StorageOptions): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    globals.deepLinkRedirectUrl = url;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  protected async getGlobals(options: StorageOptions): Promise<TGlobalState> {\n    let globals: TGlobalState;\n    if (this.useMemory(options.storageLocation)) {\n      globals = await this.getGlobalsFromMemory();\n    }\n\n    if (this.useDisk && globals == null) {\n      globals = await this.getGlobalsFromDisk(options);\n    }\n\n    if (globals == null) {\n      globals = this.createGlobals();\n    }\n\n    return globals;\n  }\n\n  protected async saveGlobals(globals: TGlobalState, options: StorageOptions) {\n    return this.useMemory(options.storageLocation)\n      ? this.saveGlobalsToMemory(globals)\n      : await this.saveGlobalsToDisk(globals, options);\n  }\n\n  protected async getGlobalsFromMemory(): Promise<TGlobalState> {\n    return (await this.state()).globals;\n  }\n\n  protected async getGlobalsFromDisk(options: StorageOptions): Promise<TGlobalState> {\n    return await this.storageService.get<TGlobalState>(keys.global, options);\n  }\n\n  protected async saveGlobalsToMemory(globals: TGlobalState): Promise<void> {\n    await this.updateState(async (state) => {\n      state.globals = globals;\n      return state;\n    });\n  }\n\n  protected async saveGlobalsToDisk(globals: TGlobalState, options: StorageOptions): Promise<void> {\n    if (options.useSecureStorage) {\n      await this.secureStorageService.save(keys.global, globals, options);\n    } else {\n      await this.storageService.save(keys.global, globals, options);\n    }\n  }\n\n  protected async getAccount(options: StorageOptions): Promise<TAccount> {\n    try {\n      let account: TAccount;\n      if (this.useMemory(options.storageLocation)) {\n        account = await this.getAccountFromMemory(options);\n      }\n\n      if (this.useDisk(options.storageLocation) && account == null) {\n        account = await this.getAccountFromDisk(options);\n      }\n\n      return account;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  protected async getAccountFromMemory(options: StorageOptions): Promise<TAccount> {\n    return await this.state().then(async (state) => {\n      if (state.accounts == null) {\n        return null;\n      }\n      return state.accounts[await this.getUserIdFromMemory(options)];\n    });\n  }\n\n  protected async getUserIdFromMemory(options: StorageOptions): Promise<string> {\n    return await this.state().then((state) => {\n      return options?.userId != null\n        ? state.accounts[options.userId]?.profile?.userId\n        : state.activeUserId;\n    });\n  }\n\n  protected async getAccountFromDisk(options: StorageOptions): Promise<TAccount> {\n    if (options?.userId == null && (await this.state())?.activeUserId == null) {\n      return null;\n    }\n\n    if (this.useAccountCache) {\n      const cachedAccount = this.accountDiskCache.value[options.userId];\n      if (cachedAccount != null) {\n        return cachedAccount;\n      }\n    }\n\n    const account = options?.useSecureStorage\n      ? (await this.secureStorageService.get<TAccount>(options.userId, options)) ??\n        (await this.storageService.get<TAccount>(\n          options.userId,\n          this.reconcileOptions(options, { htmlStorageLocation: HtmlStorageLocation.Local }),\n        ))\n      : await this.storageService.get<TAccount>(options.userId, options);\n\n    this.setDiskCache(options.userId, account);\n    return account;\n  }\n\n  protected useMemory(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Memory || storageLocation === StorageLocation.Both;\n  }\n\n  protected useDisk(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Disk || storageLocation === StorageLocation.Both;\n  }\n\n  protected async saveAccount(\n    account: TAccount,\n    options: StorageOptions = {\n      storageLocation: StorageLocation.Both,\n      useSecureStorage: false,\n    },\n  ) {\n    return this.useMemory(options.storageLocation)\n      ? await this.saveAccountToMemory(account)\n      : await this.saveAccountToDisk(account, options);\n  }\n\n  protected async saveAccountToDisk(account: TAccount, options: StorageOptions): Promise<void> {\n    const storageLocation = options.useSecureStorage\n      ? this.secureStorageService\n      : this.storageService;\n\n    await storageLocation.save(`${options.userId}`, account, options);\n\n    this.deleteDiskCache(options.userId);\n  }\n\n  protected async saveAccountToMemory(account: TAccount): Promise<void> {\n    if ((await this.getAccountFromMemory({ userId: account.profile.userId })) !== null) {\n      await this.updateState((state) => {\n        return new Promise((resolve) => {\n          state.accounts[account.profile.userId] = account;\n          resolve(state);\n        });\n      });\n    }\n    await this.pushAccounts();\n  }\n\n  protected async scaffoldNewAccountStorage(account: TAccount): Promise<void> {\n    // We don't want to manipulate the referenced in memory account\n    const deepClone = JSON.parse(JSON.stringify(account));\n    await this.scaffoldNewAccountLocalStorage(deepClone);\n    await this.scaffoldNewAccountSessionStorage(deepClone);\n    await this.scaffoldNewAccountMemoryStorage(deepClone);\n  }\n\n  // TODO: There is a tech debt item for splitting up these methods - only Web uses multiple storage locations in its storageService.\n  // For now these methods exist with some redundancy to facilitate this special web requirement.\n  protected async scaffoldNewAccountLocalStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions(),\n      ),\n    );\n    if (storedAccount?.settings != null) {\n      account.settings = storedAccount.settings;\n    } else if (await this.storageService.has(keys.tempAccountSettings)) {\n      account.settings = await this.storageService.get<AccountSettings>(keys.tempAccountSettings);\n      await this.storageService.remove(keys.tempAccountSettings);\n    }\n\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions(),\n      ),\n    );\n  }\n\n  protected async scaffoldNewAccountMemoryStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions(),\n      ),\n    );\n    if (storedAccount?.settings != null) {\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions(),\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions(),\n      ),\n    );\n  }\n\n  protected async scaffoldNewAccountSessionStorage(account: TAccount): Promise<void> {\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions()),\n    );\n    if (storedAccount?.settings != null) {\n      account.settings = storedAccount.settings;\n    }\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions(),\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  protected async pushAccounts(): Promise<void> {\n    await this.state().then((state) => {\n      if (state.accounts == null || Object.keys(state.accounts).length < 1) {\n        this.accountsSubject.next({});\n        return;\n      }\n\n      this.accountsSubject.next(state.accounts);\n    });\n  }\n\n  protected reconcileOptions(\n    requestedOptions: StorageOptions,\n    defaultOptions: StorageOptions,\n  ): StorageOptions {\n    if (requestedOptions == null) {\n      return defaultOptions;\n    }\n    requestedOptions.userId = requestedOptions?.userId ?? defaultOptions.userId;\n    requestedOptions.storageLocation =\n      requestedOptions?.storageLocation ?? defaultOptions.storageLocation;\n    requestedOptions.useSecureStorage =\n      requestedOptions?.useSecureStorage ?? defaultOptions.useSecureStorage;\n    requestedOptions.htmlStorageLocation =\n      requestedOptions?.htmlStorageLocation ?? defaultOptions.htmlStorageLocation;\n    requestedOptions.keySuffix = requestedOptions?.keySuffix ?? defaultOptions.keySuffix;\n    return requestedOptions;\n  }\n\n  protected async defaultInMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Memory,\n      userId: (await this.state()).activeUserId,\n    };\n  }\n\n  protected async defaultOnDiskOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Session,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskLocalOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Local,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskMemoryOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Memory,\n      userId: (await this.state())?.activeUserId ?? (await this.getUserId()),\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultSecureStorageOptions(): Promise<StorageOptions> {\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId: (await this.state())?.activeUserId ?? (await this.getActiveUserIdFromStorage()),\n    };\n  }\n\n  protected async getActiveUserIdFromStorage(): Promise<string> {\n    return await this.storageService.get<string>(keys.activeUserId);\n  }\n\n  protected async removeAccountFromLocalStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions()),\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  protected async removeAccountFromSessionStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions()),\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  protected async removeAccountFromSecureStorage(userId: string = null): Promise<void> {\n    userId = userId ?? (await this.state())?.activeUserId;\n    await this.setUserKeyAutoUnlock(null, { userId: userId });\n    await this.setUserKeyBiometric(null, { userId: userId });\n    await this.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.setCryptoMasterKeyBiometric(null, { userId: userId });\n    await this.setCryptoMasterKeyB64(null, { userId: userId });\n  }\n\n  protected async removeAccountFromMemory(userId: string = null): Promise<void> {\n    await this.updateState(async (state) => {\n      userId = userId ?? state.activeUserId;\n      delete state.accounts[userId];\n\n      this.deleteDiskCache(userId);\n\n      return state;\n    });\n    // TODO: Invert this logic, we should remove accounts based on logged out emit\n    await this.accountService.setAccountStatus(userId as UserId, AuthenticationStatus.LoggedOut);\n  }\n\n  // settings persist even on reset, and are not affected by this method\n  protected resetAccount(account: TAccount) {\n    const persistentAccountInformation = {\n      settings: account.settings,\n      keys: { deviceKey: account.keys.deviceKey },\n      adminAuthRequest: account.adminAuthRequest,\n    };\n    return Object.assign(this.createAccount(), persistentAccountInformation);\n  }\n\n  protected async clearDecryptedDataForActiveUser(): Promise<void> {\n    await this.updateState(async (state) => {\n      const userId = state?.activeUserId;\n      if (userId != null && state?.accounts[userId]?.data != null) {\n        state.accounts[userId].data = new AccountData();\n      }\n\n      return state;\n    });\n  }\n\n  protected createAccount(init: Partial<TAccount> = null): TAccount {\n    return this.stateFactory.createAccount(init);\n  }\n\n  protected createGlobals(init: Partial<TGlobalState> = null): TGlobalState {\n    return this.stateFactory.createGlobal(init);\n  }\n\n  protected async deAuthenticateAccount(userId: string): Promise<void> {\n    // We must have a manual call to clear tokens as we can't leverage state provider to clean\n    // up our data as we have secure storage in the mix.\n    await this.tokenService.clearTokens(userId as UserId);\n    await this.setLastActive(null, { userId: userId });\n    await this.updateState(async (state) => {\n      state.authenticatedAccounts = state.authenticatedAccounts.filter((id) => id !== userId);\n\n      await this.storageService.save(keys.authenticatedAccounts, state.authenticatedAccounts);\n\n      return state;\n    });\n  }\n\n  protected async removeAccountFromDisk(userId: string) {\n    await this.removeAccountFromSessionStorage(userId);\n    await this.removeAccountFromLocalStorage(userId);\n    await this.removeAccountFromSecureStorage(userId);\n  }\n\n  async nextUpActiveUser() {\n    const accounts = (await this.state())?.accounts;\n    if (accounts == null || Object.keys(accounts).length < 1) {\n      return null;\n    }\n\n    let newActiveUser;\n    for (const userId in accounts) {\n      if (userId == null) {\n        continue;\n      }\n      if (await this.getIsAuthenticated({ userId: userId })) {\n        newActiveUser = userId;\n        break;\n      }\n      newActiveUser = null;\n    }\n    return newActiveUser as UserId;\n  }\n\n  protected async dynamicallySetActiveUser() {\n    const newActiveUser = await this.nextUpActiveUser();\n    await this.setActiveUser(newActiveUser);\n    return newActiveUser;\n  }\n\n  protected async saveSecureStorageKey<T extends JsonValue>(\n    key: string,\n    value: T,\n    options?: StorageOptions,\n  ) {\n    return value == null\n      ? await this.secureStorageService.remove(`${options.userId}${key}`, options)\n      : await this.secureStorageService.save(`${options.userId}${key}`, value, options);\n  }\n\n  protected async state(): Promise<State<TGlobalState, TAccount>> {\n    const state = await this.memoryStorageService.get<State<TGlobalState, TAccount>>(keys.state, {\n      deserializer: (s) => State.fromJSON(s, this.accountDeserializer),\n    });\n    return state;\n  }\n\n  private async setState(\n    state: State<TGlobalState, TAccount>,\n  ): Promise<State<TGlobalState, TAccount>> {\n    await this.memoryStorageService.save(keys.state, state);\n    return state;\n  }\n\n  protected async updateState(\n    stateUpdater: (state: State<TGlobalState, TAccount>) => Promise<State<TGlobalState, TAccount>>,\n  ): Promise<State<TGlobalState, TAccount>> {\n    return await this.state().then(async (state) => {\n      const updatedState = await stateUpdater(state);\n      if (updatedState == null) {\n        throw new Error(\"Attempted to update state to null value\");\n      }\n\n      return await this.setState(updatedState);\n    });\n  }\n\n  private setDiskCache(key: string, value: TAccount, options?: StorageOptions) {\n    if (this.useAccountCache) {\n      this.accountDiskCache.value[key] = value;\n      this.accountDiskCache.next(this.accountDiskCache.value);\n    }\n  }\n\n  protected deleteDiskCache(key: string) {\n    if (this.useAccountCache) {\n      delete this.accountDiskCache.value[key];\n      this.accountDiskCache.next(this.accountDiskCache.value);\n    }\n  }\n}\n\nfunction withPrototypeForArrayMembers<T>(\n  memberConstructor: new (...args: any[]) => T,\n  memberConverter: (input: any) => T = (i) => i,\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor,\n) => { value: (...args: any[]) => Promise<T[]> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<any[]> = originalMethod.apply(this, args);\n\n        if (!Utils.isPromise(originalResult)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey,\n            )}`,\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else if (!(result instanceof Array)) {\n            throw new Error(\n              `Attempted to retrieve non array type from state as an array for method ${String(\n                propertyKey,\n              )}`,\n            );\n          } else {\n            return result.map((r) => {\n              return r == null ||\n                r.constructor.name === memberConstructor.prototype.constructor.name\n                ? r\n                : memberConverter(\n                    Object.create(memberConstructor.prototype, Object.getOwnPropertyDescriptors(r)),\n                  );\n            });\n          }\n        });\n      },\n    };\n  };\n}\n\nfunction withPrototypeForObjectValues<T>(\n  valuesConstructor: new (...args: any[]) => T,\n  valuesConverter: (input: any) => T = (i) => i,\n): (\n  target: any,\n  propertyKey: string | symbol,\n  descriptor: PropertyDescriptor,\n) => { value: (...args: any[]) => Promise<{ [key: string]: T }> } {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const originalResult: Promise<{ [key: string]: T }> = originalMethod.apply(this, args);\n\n        if (!Utils.isPromise(originalResult)) {\n          throw new Error(\n            `Error applying prototype to stored value -- result is not a promise for method ${String(\n              propertyKey,\n            )}`,\n          );\n        }\n\n        return originalResult.then((result) => {\n          if (result == null) {\n            return null;\n          } else {\n            for (const [key, val] of Object.entries(result)) {\n              result[key] =\n                val == null || val.constructor.name === valuesConstructor.prototype.constructor.name\n                  ? valuesConverter(val)\n                  : valuesConverter(\n                      Object.create(\n                        valuesConstructor.prototype,\n                        Object.getOwnPropertyDescriptors(val),\n                      ),\n                    );\n            }\n\n            return result as { [key: string]: T };\n          }\n        });\n      },\n    };\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nexport class BrowserComponentState {\n  scrollY: number;\n  searchText: string;\n\n  static fromJSON(json: Jsonify<BrowserComponentState>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new BrowserComponentState(), json);\n  }\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { DeepJsonify } from \"@bitwarden/common/types/deep-jsonify\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserGroupingsComponentState extends BrowserComponentState {\n  favoriteCiphers: CipherView[];\n  noFolderCiphers: CipherView[];\n  ciphers: CipherView[];\n  collectionCounts: Map<string, number>;\n  folderCounts: Map<string, number>;\n  typeCounts: Map<CipherType, number>;\n  folders: FolderView[];\n  collections: CollectionView[];\n  deletedCount: number;\n\n  toJSON() {\n    return Utils.merge(this, {\n      collectionCounts: Utils.mapToRecord(this.collectionCounts),\n      folderCounts: Utils.mapToRecord(this.folderCounts),\n      typeCounts: Utils.mapToRecord(this.typeCounts),\n    });\n  }\n\n  static fromJSON(json: DeepJsonify<BrowserGroupingsComponentState>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new BrowserGroupingsComponentState(), json, {\n      favoriteCiphers: json.favoriteCiphers?.map((c) => CipherView.fromJSON(c)),\n      noFolderCiphers: json.noFolderCiphers?.map((c) => CipherView.fromJSON(c)),\n      ciphers: json.ciphers?.map((c) => CipherView.fromJSON(c)),\n      collectionCounts: Utils.recordToMap(json.collectionCounts),\n      folderCounts: Utils.recordToMap(json.folderCounts),\n      typeCounts: Utils.recordToMap(json.typeCounts),\n      folders: json.folders?.map((f) => FolderView.fromJSON(f)),\n    });\n  }\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SendType } from \"@bitwarden/common/tools/send/enums/send-type\";\nimport { SendView } from \"@bitwarden/common/tools/send/models/view/send.view\";\nimport { DeepJsonify } from \"@bitwarden/common/types/deep-jsonify\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\n\nexport class BrowserSendComponentState extends BrowserComponentState {\n  sends: SendView[];\n  typeCounts: Map<SendType, number>;\n\n  toJSON() {\n    return Utils.merge(this, {\n      typeCounts: Utils.mapToRecord(this.typeCounts),\n    });\n  }\n\n  static fromJSON(json: DeepJsonify<BrowserSendComponentState>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new BrowserSendComponentState(), json, {\n      sends: json.sends?.map((s) => SendView.fromJSON(s)),\n      typeCounts: Utils.recordToMap(json.typeCounts),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport {\n  Account as BaseAccount,\n  AccountSettings as BaseAccountSettings,\n} from \"@bitwarden/common/platform/models/domain/account\";\n\nimport { BrowserComponentState } from \"./browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"./browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"./browserSendComponentState\";\n\nexport class AccountSettings extends BaseAccountSettings {\n  vaultTimeout = -1; // On Restart\n\n  static fromJSON(json: Jsonify<AccountSettings>): AccountSettings {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountSettings(), json, super.fromJSON(json));\n  }\n}\n\nexport class Account extends BaseAccount {\n  settings?: AccountSettings = new AccountSettings();\n  groupings?: BrowserGroupingsComponentState;\n  send?: BrowserSendComponentState;\n  ciphers?: BrowserComponentState;\n  sendType?: BrowserComponentState;\n\n  constructor(init: Partial<Account>) {\n    super(init);\n    Object.assign(this.settings, {\n      ...new AccountSettings(),\n      ...this.settings,\n    });\n    this.groupings = init?.groupings ?? new BrowserGroupingsComponentState();\n    this.send = init?.send ?? new BrowserSendComponentState();\n    this.ciphers = init?.ciphers ?? new BrowserComponentState();\n    this.sendType = init?.sendType ?? new BrowserComponentState();\n  }\n\n  static fromJSON(json: Jsonify<Account>): Account {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new Account({}), json, super.fromJSON(json), {\n      settings: AccountSettings.fromJSON(json.settings),\n      groupings: BrowserGroupingsComponentState.fromJSON(json.groupings),\n      send: BrowserSendComponentState.fromJSON(json.send),\n      ciphers: BrowserComponentState.fromJSON(json.ciphers),\n      sendType: BrowserComponentState.fromJSON(json.sendType),\n    });\n  }\n}\n","export type InitializeOptions = \"array\" | \"record\" | \"object\";\n\nexport class SyncedItemMetadata {\n  propertyKey: string;\n  sessionKey: string;\n  initializer: (keyValuePair: any) => any;\n  initializeAs: InitializeOptions;\n\n  static builder(metadata: SyncedItemMetadata): (o: any) => any {\n    const itemBuilder = metadata.initializer;\n    if (metadata.initializeAs === \"array\") {\n      return (keyValuePair: any) => keyValuePair.map((o: any) => itemBuilder(o));\n    } else if (metadata.initializeAs === \"record\") {\n      return (keyValuePair: any) => {\n        const record: Record<any, any> = {};\n        for (const key in keyValuePair) {\n          record[key] = itemBuilder(keyValuePair[key]);\n        }\n        return record;\n      };\n    } else {\n      return (keyValuePair: any) => itemBuilder(keyValuePair);\n    }\n  }\n}\n","import { BehaviorSubject, concatMap, ReplaySubject, skip, Subject, Subscription } from \"rxjs\";\n\nimport { AbstractMemoryStorageService } from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { BrowserApi } from \"../../browser/browser-api\";\n\nimport { SyncedItemMetadata } from \"./sync-item-metadata\";\n\nexport class SessionSyncer {\n  subscription: Subscription;\n  id = Utils.newGuid();\n\n  // ignore initial values\n  private ignoreNUpdates = 0;\n\n  constructor(\n    private subject: Subject<any>,\n    private memoryStorageService: AbstractMemoryStorageService,\n    private metaData: SyncedItemMetadata,\n  ) {\n    if (!(subject instanceof Subject)) {\n      throw new Error(\"subject must inherit from Subject\");\n    }\n\n    if (metaData.initializer == null) {\n      throw new Error(\"initializer must be provided\");\n    }\n  }\n\n  async init() {\n    switch (this.subject.constructor) {\n      case ReplaySubject:\n        // ignore all updates currently in the buffer\n        this.ignoreNUpdates = (this.subject as any)._buffer.length;\n        break;\n      case BehaviorSubject:\n        this.ignoreNUpdates = 1;\n        break;\n      default:\n        break;\n    }\n\n    await this.observe();\n    // must be synchronous\n    const hasInSessionMemory = await this.memoryStorageService.has(this.metaData.sessionKey);\n    if (hasInSessionMemory) {\n      await this.updateFromMemory();\n    }\n\n    this.listenForUpdates();\n  }\n\n  private async observe() {\n    const stream = this.subject.pipe(skip(this.ignoreNUpdates));\n    this.ignoreNUpdates = 0;\n\n    // This may be a memory leak.\n    // There is no good time to unsubscribe from this observable. Hopefully Manifest V3 clears memory from temporary\n    // contexts. If so, this is handled by destruction of the context.\n    this.subscription = stream\n      .pipe(\n        concatMap(async (next) => {\n          if (this.ignoreNUpdates > 0) {\n            this.ignoreNUpdates -= 1;\n            return;\n          }\n          await this.updateSession(next);\n        }),\n      )\n      .subscribe();\n  }\n\n  private listenForUpdates() {\n    // This is an unawaited promise, but it will be executed asynchronously in the background.\n    BrowserApi.messageListener(this.updateMessageCommand, (message) => {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.updateFromMessage(message);\n    });\n  }\n\n  async updateFromMessage(message: any) {\n    if (message.command != this.updateMessageCommand || message.id === this.id) {\n      return;\n    }\n    await this.update(message.serializedValue);\n  }\n\n  async updateFromMemory() {\n    const value = await this.memoryStorageService.getBypassCache(this.metaData.sessionKey);\n    await this.update(value);\n  }\n\n  async update(serializedValue: any) {\n    const unBuiltValue = JSON.parse(serializedValue);\n    if (!BrowserApi.isManifestVersion(3) && BrowserApi.isBackgroundPage(self)) {\n      await this.memoryStorageService.save(this.metaData.sessionKey, serializedValue);\n    }\n    const builder = SyncedItemMetadata.builder(this.metaData);\n    const value = builder(unBuiltValue);\n    this.ignoreNUpdates = 1;\n    this.subject.next(value);\n  }\n\n  private async updateSession(value: any) {\n    const serializedValue = JSON.stringify(value);\n    if (BrowserApi.isManifestVersion(3) || BrowserApi.isBackgroundPage(self)) {\n      await this.memoryStorageService.save(this.metaData.sessionKey, serializedValue);\n    }\n    await BrowserApi.sendMessage(this.updateMessageCommand, { id: this.id, serializedValue });\n  }\n\n  private get updateMessageCommand() {\n    return `${this.metaData.sessionKey}_update`;\n  }\n}\n","import { Constructor } from \"type-fest\";\n\nimport { AbstractMemoryStorageService } from \"@bitwarden/common/platform/abstractions/storage.service\";\n\nimport { SessionStorable } from \"./session-storable\";\nimport { SessionSyncer } from \"./session-syncer\";\nimport { SyncedItemMetadata } from \"./sync-item-metadata\";\n\n/**\n * Mark the class as syncing state across the browser session. This decorator finds rxjs BehaviorSubject properties\n * marked with @sessionSync and syncs these values across the browser session.\n *\n * @param constructor\n * @returns A new constructor that extends the original one to add session syncing.\n */\nexport function browserSession<TCtor extends Constructor<any>>(constructor: TCtor) {\n  return class extends constructor implements SessionStorable {\n    __syncedItemMetadata: SyncedItemMetadata[];\n    __sessionSyncers: SessionSyncer[];\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Require state service to be injected\n      const storageService: AbstractMemoryStorageService = this.findStorageService(\n        [this as any].concat(args),\n      );\n\n      if (this.__syncedItemMetadata == null || !(this.__syncedItemMetadata instanceof Array)) {\n        return;\n      }\n\n      this.__sessionSyncers = this.__syncedItemMetadata.map((metadata) =>\n        this.buildSyncer(metadata, storageService),\n      );\n    }\n\n    buildSyncer(metadata: SyncedItemMetadata, storageSerice: AbstractMemoryStorageService) {\n      const syncer = new SessionSyncer(\n        (this as any)[metadata.propertyKey],\n        storageSerice,\n        metadata,\n      );\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      syncer.init();\n      return syncer;\n    }\n\n    findStorageService(args: any[]): AbstractMemoryStorageService {\n      const storageService = args.find(this.isMemoryStorageService);\n\n      if (storageService) {\n        return storageService;\n      }\n\n      const stateService = args.find(\n        (arg) =>\n          arg?.memoryStorageService != null &&\n          this.isMemoryStorageService(arg.memoryStorageService),\n      );\n      if (stateService) {\n        return stateService.memoryStorageService;\n      }\n\n      throw new Error(\n        `Cannot decorate ${constructor.name} with browserSession, Browser's AbstractMemoryStorageService must be accessible through the observed classes parameters`,\n      );\n    }\n\n    isMemoryStorageService(arg: any): arg is AbstractMemoryStorageService {\n      return arg.type != null && arg.type === AbstractMemoryStorageService.TYPE;\n    }\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { SessionStorable } from \"./session-storable\";\nimport { InitializeOptions } from \"./sync-item-metadata\";\n\nclass BuildOptions<T, TJson = Jsonify<T>> {\n  initializer?: (keyValuePair: TJson) => T;\n  initializeAs?: InitializeOptions;\n}\n\n// Used to ensure uniqueness for each synced observable\nlet index = 0;\n\n/**\n * A decorator used to indicate the BehaviorSubject should be synced for this browser session across all contexts.\n *\n * >**Note** This decorator does nothing if the enclosing class is not decorated with @browserSession.\n *\n * >**Note** The Behavior subject must be initialized with a default or in the constructor of the class. If it is not, an error will be thrown.\n *\n * >**!!Warning!!** If the property is overwritten at any time, the new value will not be synced across the browser session.\n *\n * @param buildOptions\n * Builders for the value, requires either a constructor (ctor) for your BehaviorSubject type or an\n * initializer function that takes a key value pair representation of the BehaviorSubject data\n * and returns your instantiated BehaviorSubject value. `initializeAs can optionally be used to indicate\n * the provided initializer function should be used to build an array of values. For example,\n * ```ts\n * \\@sessionSync({ initializer: Foo.fromJSON, initializeAs: 'array' })\n * ```\n * is equivalent to\n * ```\n * \\@sessionSync({ initializer: (obj: any[]) => obj.map((f) => Foo.fromJSON })\n * ```\n *\n * @returns decorator function\n */\nexport function sessionSync<T>(buildOptions: BuildOptions<T>) {\n  return (prototype: unknown, propertyKey: string) => {\n    // Force prototype into SessionStorable and implement it.\n    const p = prototype as SessionStorable;\n\n    if (p.__syncedItemMetadata == null) {\n      p.__syncedItemMetadata = [];\n    }\n\n    p.__syncedItemMetadata.push({\n      propertyKey,\n      sessionKey: `${propertyKey}_${index++}`,\n      initializer: buildOptions.initializer,\n      initializeAs: buildOptions.initializeAs ?? \"object\",\n    });\n  };\n}\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { TokenService } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport {\n  AbstractStorageService,\n  AbstractMemoryStorageService,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { StorageOptions } from \"@bitwarden/common/platform/models/domain/storage-options\";\nimport { MigrationRunner } from \"@bitwarden/common/platform/services/migration-runner\";\nimport { StateService as BaseStateService } from \"@bitwarden/common/platform/services/state.service\";\n\nimport { Account } from \"../../models/account\";\nimport { BrowserComponentState } from \"../../models/browserComponentState\";\nimport { BrowserGroupingsComponentState } from \"../../models/browserGroupingsComponentState\";\nimport { BrowserSendComponentState } from \"../../models/browserSendComponentState\";\nimport { BrowserApi } from \"../browser/browser-api\";\nimport { browserSession, sessionSync } from \"../decorators/session-sync-observable\";\n\nimport { BrowserStateService as StateServiceAbstraction } from \"./abstractions/browser-state.service\";\n\n@browserSession\nexport class BrowserStateService\n  extends BaseStateService<GlobalState, Account>\n  implements StateServiceAbstraction\n{\n  @sessionSync({\n    initializer: Account.fromJSON as any, // TODO: Remove this any when all any types are removed from Account\n    initializeAs: \"record\",\n  })\n  protected accountsSubject: BehaviorSubject<{ [userId: string]: Account }>;\n  @sessionSync({ initializer: (s: string) => s })\n  protected activeAccountSubject: BehaviorSubject<string>;\n\n  protected accountDeserializer = Account.fromJSON;\n\n  constructor(\n    storageService: AbstractStorageService,\n    secureStorageService: AbstractStorageService,\n    memoryStorageService: AbstractMemoryStorageService,\n    logService: LogService,\n    stateFactory: StateFactory<GlobalState, Account>,\n    accountService: AccountService,\n    environmentService: EnvironmentService,\n    tokenService: TokenService,\n    migrationRunner: MigrationRunner,\n    useAccountCache = true,\n  ) {\n    super(\n      storageService,\n      secureStorageService,\n      memoryStorageService,\n      logService,\n      stateFactory,\n      accountService,\n      environmentService,\n      tokenService,\n      migrationRunner,\n      useAccountCache,\n    );\n\n    // TODO: This is a hack to fix having a disk cache on both the popup and\n    // the background page that can get out of sync. We need to work out the\n    // best way to handle caching with multiple instances of the state service.\n    if (useAccountCache) {\n      BrowserApi.storageChangeListener((changes, namespace) => {\n        if (namespace === \"local\") {\n          for (const key of Object.keys(changes)) {\n            if (key !== \"accountActivity\" && this.accountDiskCache.value[key]) {\n              this.deleteDiskCache(key);\n            }\n          }\n        }\n      });\n\n      BrowserApi.addListener(\n        chrome.runtime.onMessage,\n        (message: { command: string }, _, respond) => {\n          if (message.command === \"initializeDiskCache\") {\n            respond(JSON.stringify(this.accountDiskCache.value));\n          }\n        },\n      );\n    }\n  }\n\n  override async initAccountState(): Promise<void> {\n    if (this.isRecoveredSession && this.useAccountCache) {\n      // request cache initialization\n\n      const response = await BrowserApi.sendMessageWithResponse<string>(\"initializeDiskCache\");\n      this.accountDiskCache.next(JSON.parse(response));\n\n      return;\n    }\n\n    await super.initAccountState();\n  }\n\n  async addAccount(account: Account) {\n    // Apply browser overrides to default account values\n    account = new Account(account);\n    await super.addAccount(account);\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    // Firefox Private Mode can clash with non-Private Mode because they both read from the same onDiskOptions\n    // Check that there is an account in memory before considering the user authenticated\n    return (\n      (await super.getIsAuthenticated(options)) &&\n      (await this.getAccount(await this.defaultInMemoryOptions())) != null\n    );\n  }\n\n  async getBrowserGroupingComponentState(\n    options?: StorageOptions,\n  ): Promise<BrowserGroupingsComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.groupings;\n  }\n\n  async setBrowserGroupingComponentState(\n    value: BrowserGroupingsComponentState,\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.groupings = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  async getBrowserVaultItemsComponentState(\n    options?: StorageOptions,\n  ): Promise<BrowserComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.ciphers;\n  }\n\n  async setBrowserVaultItemsComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.ciphers = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  async getBrowserSendComponentState(options?: StorageOptions): Promise<BrowserSendComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.send;\n  }\n\n  async setBrowserSendComponentState(\n    value: BrowserSendComponentState,\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.send = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  async getBrowserSendTypeComponentState(options?: StorageOptions): Promise<BrowserComponentState> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultInMemoryOptions()))\n    )?.sendType;\n  }\n\n  async setBrowserSendTypeComponentState(\n    value: BrowserComponentState,\n    options?: StorageOptions,\n  ): Promise<void> {\n    const account = await this.getAccount(\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n    account.sendType = value;\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(options, await this.defaultInMemoryOptions()),\n    );\n  }\n\n  // Overriding the base class to prevent deleting the cache on save. We register a storage listener\n  // to delete the cache in the constructor above.\n  protected override async saveAccountToDisk(\n    account: Account,\n    options: StorageOptions,\n  ): Promise<void> {\n    const storageLocation = options.useSecureStorage\n      ? this.secureStorageService\n      : this.storageService;\n\n    await storageLocation.save(`${options.userId}`, account, options);\n  }\n}\n","import { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { UserId } from \"../../types/guid\";\nimport { DecodedAccessToken } from \"../services/token.service\";\n\nexport abstract class TokenService {\n  /**\n   * Sets the access token, refresh token, API Key Client ID, and API Key Client Secret in memory or disk\n   * based on the given vaultTimeoutAction and vaultTimeout and the derived access token user id.\n   * Note: for platforms that support secure storage, the access & refresh tokens are stored in secure storage instead of on disk.\n   * Note 2: this method also enforces always setting the access token and the refresh token together as\n   * we can retrieve the user id required to set the refresh token from the access token for efficiency.\n   * @param accessToken The access token to set.\n   * @param vaultTimeoutAction The action to take when the vault times out.\n   * @param vaultTimeout The timeout for the vault.\n   * @param refreshToken The optional refresh token to set. Note: this is undefined when using the CLI Login Via API Key flow\n   * @param clientIdClientSecret The API Key Client ID and Client Secret to set.\n   *\n   * @returns A promise that resolves when the tokens have been set.\n   */\n  setTokens: (\n    accessToken: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n    refreshToken?: string,\n    clientIdClientSecret?: [string, string],\n  ) => Promise<void>;\n\n  /**\n   * Clears the access token, refresh token, API Key Client ID, and API Key Client Secret out of memory, disk, and secure storage if supported.\n   * @param userId The optional user id to clear the tokens for; if not provided, the active user id is used.\n   * @returns A promise that resolves when the tokens have been cleared.\n   */\n  clearTokens: (userId?: UserId) => Promise<void>;\n\n  /**\n   * Sets the access token in memory or disk based on the given vaultTimeoutAction and vaultTimeout\n   * and the user id read off the access token\n   * Note: for platforms that support secure storage, the access & refresh tokens are stored in secure storage instead of on disk.\n   * @param accessToken The access token to set.\n   * @param vaultTimeoutAction The action to take when the vault times out.\n   * @param vaultTimeout The timeout for the vault.\n   * @returns A promise that resolves when the access token has been set.\n   */\n  setAccessToken: (\n    accessToken: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n  ) => Promise<void>;\n\n  // TODO: revisit having this public clear method approach once the state service is fully deprecated.\n  /**\n   * Clears the access token for the given user id out of memory, disk, and secure storage if supported.\n   * @param userId The optional user id to clear the access token for; if not provided, the active user id is used.\n   * @returns A promise that resolves when the access token has been cleared.\n   *\n   * Note: This method is required so that the StateService doesn't have to inject the VaultTimeoutSettingsService to\n   * pass in the vaultTimeoutAction and vaultTimeout.\n   * This avoids a circular dependency between the StateService, TokenService, and VaultTimeoutSettingsService.\n   */\n  clearAccessToken: (userId?: UserId) => Promise<void>;\n\n  /**\n   * Gets the access token\n   * @param userId - The optional user id to get the access token for; if not provided, the active user is used.\n   * @returns A promise that resolves with the access token or undefined.\n   */\n  getAccessToken: (userId?: UserId) => Promise<string | undefined>;\n\n  /**\n   * Gets the refresh token.\n   * @param userId - The optional user id to get the refresh token for; if not provided, the active user is used.\n   * @returns A promise that resolves with the refresh token or undefined.\n   */\n  getRefreshToken: (userId?: UserId) => Promise<string | undefined>;\n\n  /**\n   * Sets the API Key Client ID for the active user id in memory or disk based on the given vaultTimeoutAction and vaultTimeout.\n   * @param clientId The API Key Client ID to set.\n   * @param vaultTimeoutAction The action to take when the vault times out.\n   * @param vaultTimeout The timeout for the vault.\n   * @returns A promise that resolves when the API Key Client ID has been set.\n   */\n  setClientId: (\n    clientId: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n    userId?: UserId,\n  ) => Promise<void>;\n\n  /**\n   * Gets the API Key Client ID for the active user.\n   * @returns A promise that resolves with the API Key Client ID or undefined\n   */\n  getClientId: (userId?: UserId) => Promise<string | undefined>;\n\n  /**\n   * Sets the API Key Client Secret for the active user id in memory or disk based on the given vaultTimeoutAction and vaultTimeout.\n   * @param clientSecret The API Key Client Secret to set.\n   * @param vaultTimeoutAction The action to take when the vault times out.\n   * @param vaultTimeout The timeout for the vault.\n   * @returns A promise that resolves when the API Key Client Secret has been set.\n   */\n  setClientSecret: (\n    clientSecret: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: number | null,\n    userId?: UserId,\n  ) => Promise<void>;\n\n  /**\n   * Gets the API Key Client Secret for the active user.\n   * @returns A promise that resolves with the API Key Client Secret or undefined\n   */\n  getClientSecret: (userId?: UserId) => Promise<string | undefined>;\n\n  /**\n   * Sets the two factor token for the given email in global state.\n   * The two factor token is set when the user checks \"remember me\" when completing two factor\n   * authentication and it is used to bypass two factor authentication for a period of time.\n   * @param email The email to set the two factor token for.\n   * @param twoFactorToken The two factor token to set.\n   * @returns A promise that resolves when the two factor token has been set.\n   */\n  setTwoFactorToken: (email: string, twoFactorToken: string) => Promise<void>;\n\n  /**\n   * Gets the two factor token for the given email.\n   * @param email The email to get the two factor token for.\n   * @returns A promise that resolves with the two factor token for the given email or null if it isn't found.\n   */\n  getTwoFactorToken: (email: string) => Promise<string | null>;\n\n  /**\n   * Clears the two factor token for the given email out of global state.\n   * @param email The email to clear the two factor token for.\n   * @returns A promise that resolves when the two factor token has been cleared.\n   */\n  clearTwoFactorToken: (email: string) => Promise<void>;\n\n  /**\n   * Decodes the access token.\n   * @param token The access token to decode.\n   * @returns A promise that resolves with the decoded access token.\n   */\n  decodeAccessToken: (token?: string) => Promise<DecodedAccessToken>;\n\n  /**\n   * Gets the expiration date for the access token. Returns if token can't be decoded or has no expiration\n   * @returns A promise that resolves with the expiration date for the access token.\n   */\n  getTokenExpirationDate: () => Promise<Date | null>;\n\n  /**\n   * Calculates the adjusted time in seconds until the access token expires, considering an optional offset.\n   *\n   * @param {number} [offsetSeconds=0] Optional seconds to subtract from the remaining time,\n   * creating a buffer before actual expiration. Useful for preemptive actions\n   * before token expiry. A value of 0 or omitting this parameter calculates time\n   * based on the actual expiration.\n   * @returns {Promise<number>} Promise resolving to the adjusted seconds remaining.\n   */\n  tokenSecondsRemaining: (offsetSeconds?: number) => Promise<number>;\n\n  /**\n   * Checks if the access token needs to be refreshed.\n   * @param {number} [minutes=5] - Optional number of minutes before the access token expires to consider refreshing it.\n   * @returns A promise that resolves with a boolean indicating if the access token needs to be refreshed.\n   */\n  tokenNeedsRefresh: (minutes?: number) => Promise<boolean>;\n\n  /**\n   * Gets the user id for the active user from the access token.\n   * @returns A promise that resolves with the user id for the active user.\n   * @deprecated Use AccountService.activeAccount$ instead.\n   */\n  getUserId: () => Promise<UserId>;\n\n  /**\n   * Gets the email for the active user from the access token.\n   * @returns A promise that resolves with the email for the active user.\n   * @deprecated Use AccountService.activeAccount$ instead.\n   */\n  getEmail: () => Promise<string>;\n\n  /**\n   * Gets the email verified status for the active user from the access token.\n   * @returns A promise that resolves with the email verified status for the active user.\n   */\n  getEmailVerified: () => Promise<boolean>;\n\n  /**\n   * Gets the name for the active user from the access token.\n   * @returns A promise that resolves with the name for the active user.\n   * @deprecated Use AccountService.activeAccount$ instead.\n   */\n  getName: () => Promise<string>;\n\n  /**\n   * Gets the issuer for the active user from the access token.\n   * @returns A promise that resolves with the issuer for the active user.\n   */\n  getIssuer: () => Promise<string>;\n\n  /**\n   * Gets whether or not the user authenticated via an external mechanism.\n   * @returns A promise that resolves with a boolean representing the user's external authN status.\n   */\n  getIsExternal: () => Promise<boolean>;\n}\n","import { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\n\nimport {\n  accountServiceFactory,\n  AccountServiceInitOptions,\n} from \"../../../auth/background/service-factories/account-service.factory\";\nimport {\n  tokenServiceFactory,\n  TokenServiceInitOptions,\n} from \"../../../auth/background/service-factories/token-service.factory\";\nimport { Account } from \"../../../models/account\";\nimport { BrowserStateService } from \"../../services/browser-state.service\";\n\nimport {\n  environmentServiceFactory,\n  EnvironmentServiceInitOptions,\n} from \"./environment-service.factory\";\nimport { CachedServices, factory, FactoryOptions } from \"./factory-options\";\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\nimport { migrationRunnerFactory, MigrationRunnerInitOptions } from \"./migration-runner.factory\";\nimport {\n  diskStorageServiceFactory,\n  secureStorageServiceFactory,\n  memoryStorageServiceFactory,\n  DiskStorageServiceInitOptions,\n  SecureStorageServiceInitOptions,\n  MemoryStorageServiceInitOptions,\n} from \"./storage-service.factory\";\n\ntype StateServiceFactoryOptions = FactoryOptions & {\n  stateServiceOptions: {\n    useAccountCache?: boolean;\n    stateFactory: StateFactory<GlobalState, Account>;\n  };\n};\n\nexport type StateServiceInitOptions = StateServiceFactoryOptions &\n  DiskStorageServiceInitOptions &\n  SecureStorageServiceInitOptions &\n  MemoryStorageServiceInitOptions &\n  LogServiceInitOptions &\n  AccountServiceInitOptions &\n  EnvironmentServiceInitOptions &\n  TokenServiceInitOptions &\n  MigrationRunnerInitOptions;\n\nexport async function stateServiceFactory(\n  cache: { stateService?: BrowserStateService } & CachedServices,\n  opts: StateServiceInitOptions,\n): Promise<BrowserStateService> {\n  const service = await factory(\n    cache,\n    \"stateService\",\n    opts,\n    async () =>\n      new BrowserStateService(\n        await diskStorageServiceFactory(cache, opts),\n        await secureStorageServiceFactory(cache, opts),\n        await memoryStorageServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        opts.stateServiceOptions.stateFactory,\n        await accountServiceFactory(cache, opts),\n        await environmentServiceFactory(cache, opts),\n        await tokenServiceFactory(cache, opts),\n        await migrationRunnerFactory(cache, opts),\n        opts.stateServiceOptions.useAccountCache,\n      ),\n  );\n  // TODO: If we run migration through a chrome installed/updated event we can turn off running migrations\n  await service.init();\n  return service;\n}\n","import { MigrationBuilderService } from \"@bitwarden/common/platform/services/migration-builder.service\";\nimport { MigrationRunner } from \"@bitwarden/common/platform/services/migration-runner\";\n\nimport { CachedServices, FactoryOptions, factory } from \"./factory-options\";\nimport { LogServiceInitOptions, logServiceFactory } from \"./log-service.factory\";\nimport {\n  DiskStorageServiceInitOptions,\n  diskStorageServiceFactory,\n} from \"./storage-service.factory\";\n\ntype MigrationRunnerFactory = FactoryOptions;\n\nexport type MigrationRunnerInitOptions = MigrationRunnerFactory &\n  DiskStorageServiceInitOptions &\n  LogServiceInitOptions;\n\nexport async function migrationRunnerFactory(\n  cache: { migrationRunner?: MigrationRunner } & CachedServices,\n  opts: MigrationRunnerInitOptions,\n): Promise<MigrationRunner> {\n  return factory(\n    cache,\n    \"migrationRunner\",\n    opts,\n    async () =>\n      new MigrationRunner(\n        await diskStorageServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        new MigrationBuilderService(),\n      ),\n  );\n}\n","import { ApiService as AbstractApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ApiService } from \"@bitwarden/common/services/api.service\";\n\nimport {\n  tokenServiceFactory,\n  TokenServiceInitOptions,\n} from \"../../../auth/background/service-factories/token-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../background/service-factories/factory-options\";\n\nimport { AppIdServiceInitOptions, appIdServiceFactory } from \"./app-id-service.factory\";\nimport {\n  environmentServiceFactory,\n  EnvironmentServiceInitOptions,\n} from \"./environment-service.factory\";\nimport {\n  PlatformUtilsServiceInitOptions,\n  platformUtilsServiceFactory,\n} from \"./platform-utils-service.factory\";\nimport { stateServiceFactory, StateServiceInitOptions } from \"./state-service.factory\";\n\ntype ApiServiceFactoryOptions = FactoryOptions & {\n  apiServiceOptions: {\n    logoutCallback: (expired: boolean) => Promise<void>;\n    customUserAgent?: string;\n  };\n};\n\nexport type ApiServiceInitOptions = ApiServiceFactoryOptions &\n  TokenServiceInitOptions &\n  PlatformUtilsServiceInitOptions &\n  EnvironmentServiceInitOptions &\n  AppIdServiceInitOptions &\n  StateServiceInitOptions;\n\nexport function apiServiceFactory(\n  cache: { apiService?: AbstractApiService } & CachedServices,\n  opts: ApiServiceInitOptions,\n): Promise<AbstractApiService> {\n  return factory(\n    cache,\n    \"apiService\",\n    opts,\n    async () =>\n      new ApiService(\n        await tokenServiceFactory(cache, opts),\n        await platformUtilsServiceFactory(cache, opts),\n        await environmentServiceFactory(cache, opts),\n        await appIdServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        opts.apiServiceOptions.logoutCallback,\n        opts.apiServiceOptions.customUserAgent,\n      ),\n  );\n}\n","import { AppIdService as AbstractAppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { AppIdService } from \"@bitwarden/common/platform/services/app-id.service\";\n\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\nimport {\n  GlobalStateProviderInitOptions,\n  globalStateProviderFactory,\n} from \"./global-state-provider.factory\";\n\ntype AppIdServiceFactoryOptions = FactoryOptions;\n\nexport type AppIdServiceInitOptions = AppIdServiceFactoryOptions & GlobalStateProviderInitOptions;\n\nexport function appIdServiceFactory(\n  cache: { appIdService?: AbstractAppIdService } & CachedServices,\n  opts: AppIdServiceInitOptions,\n): Promise<AbstractAppIdService> {\n  return factory(\n    cache,\n    \"appIdService\",\n    opts,\n    async () => new AppIdService(await globalStateProviderFactory(cache, opts)),\n  );\n}\n","import { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { OrgKey } from \"../../../types/key\";\nimport { EncryptedOrganizationKeyData } from \"../data/encrypted-organization-key.data\";\n\nexport abstract class BaseEncryptedOrganizationKey {\n  decrypt: (cryptoService: CryptoService) => Promise<SymmetricCryptoKey>;\n\n  static fromData(data: EncryptedOrganizationKeyData) {\n    switch (data.type) {\n      case \"organization\":\n        return new EncryptedOrganizationKey(data.key);\n\n      case \"provider\":\n        return new ProviderEncryptedOrganizationKey(data.key, data.providerId);\n\n      default:\n        return null;\n    }\n  }\n}\n\nexport class EncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(private key: string) {}\n\n  async decrypt(cryptoService: CryptoService) {\n    const decValue = await cryptoService.rsaDecrypt(this.key);\n    return new SymmetricCryptoKey(decValue) as OrgKey;\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"organization\",\n      key: this.key,\n    };\n  }\n}\n\nexport class ProviderEncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(\n    private key: string,\n    private providerId: string,\n  ) {}\n\n  async decrypt(cryptoService: CryptoService) {\n    const providerKey = await cryptoService.getProviderKey(this.providerId);\n    const decValue = await cryptoService.decryptToBytes(new EncString(this.key), providerKey);\n    return new SymmetricCryptoKey(decValue) as OrgKey;\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"provider\",\n      key: this.key,\n      providerId: this.providerId,\n    };\n  }\n}\n","import { EncryptedOrganizationKeyData } from \"../../../admin-console/models/data/encrypted-organization-key.data\";\nimport { BaseEncryptedOrganizationKey } from \"../../../admin-console/models/domain/encrypted-organization-key\";\nimport { OrganizationId } from \"../../../types/guid\";\nimport { OrgKey } from \"../../../types/key\";\nimport { CryptoService } from \"../../abstractions/crypto.service\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\nimport { KeyDefinition, CRYPTO_DISK, DeriveDefinition } from \"../../state\";\n\nexport const USER_ENCRYPTED_ORGANIZATION_KEYS = KeyDefinition.record<\n  EncryptedOrganizationKeyData,\n  OrganizationId\n>(CRYPTO_DISK, \"organizationKeys\", {\n  deserializer: (obj) => obj,\n});\n\nexport const USER_ORGANIZATION_KEYS = DeriveDefinition.from<\n  Record<OrganizationId, EncryptedOrganizationKeyData>,\n  Record<OrganizationId, OrgKey>,\n  { cryptoService: CryptoService }\n>(USER_ENCRYPTED_ORGANIZATION_KEYS, {\n  deserializer: (obj) => {\n    const result: Record<OrganizationId, OrgKey> = {};\n    for (const orgId of Object.keys(obj ?? {}) as OrganizationId[]) {\n      result[orgId] = SymmetricCryptoKey.fromJSON(obj[orgId]) as OrgKey;\n    }\n    return result;\n  },\n  derive: async (from, { cryptoService }) => {\n    const result: Record<OrganizationId, OrgKey> = {};\n    for (const orgId of Object.keys(from ?? {}) as OrganizationId[]) {\n      if (result[orgId] != null) {\n        continue;\n      }\n      const encrypted = BaseEncryptedOrganizationKey.fromData(from[orgId]);\n      const decrypted = await encrypted.decrypt(cryptoService);\n\n      result[orgId] = decrypted;\n    }\n\n    return result;\n  },\n});\n","import { ProviderId } from \"../../../types/guid\";\nimport { ProviderKey } from \"../../../types/key\";\nimport { EncryptService } from \"../../abstractions/encrypt.service\";\nimport { EncString, EncryptedString } from \"../../models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\nimport { KeyDefinition, CRYPTO_DISK, DeriveDefinition } from \"../../state\";\nimport { CryptoService } from \"../crypto.service\";\n\nexport const USER_ENCRYPTED_PROVIDER_KEYS = KeyDefinition.record<EncryptedString, ProviderId>(\n  CRYPTO_DISK,\n  \"providerKeys\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\nexport const USER_PROVIDER_KEYS = DeriveDefinition.from<\n  Record<ProviderId, EncryptedString>,\n  Record<ProviderId, ProviderKey>,\n  { encryptService: EncryptService; cryptoService: CryptoService } // TODO: This should depend on an active user private key observable directly\n>(USER_ENCRYPTED_PROVIDER_KEYS, {\n  deserializer: (obj) => {\n    const result: Record<ProviderId, ProviderKey> = {};\n    for (const providerId of Object.keys(obj ?? {}) as ProviderId[]) {\n      result[providerId] = SymmetricCryptoKey.fromJSON(obj[providerId]) as ProviderKey;\n    }\n    return result;\n  },\n  derive: async (from, { encryptService, cryptoService }) => {\n    const result: Record<ProviderId, ProviderKey> = {};\n    for (const providerId of Object.keys(from ?? {}) as ProviderId[]) {\n      if (result[providerId] != null) {\n        continue;\n      }\n      const encrypted = new EncString(from[providerId]);\n      const privateKey = await cryptoService.getPrivateKey();\n      const decrypted = await encryptService.rsaDecrypt(encrypted, privateKey);\n      const providerKey = new SymmetricCryptoKey(decrypted) as ProviderKey;\n\n      result[providerId] = providerKey;\n    }\n\n    return result;\n  },\n});\n","import { UserPrivateKey, UserPublicKey, UserKey } from \"../../../types/key\";\nimport { CryptoFunctionService } from \"../../abstractions/crypto-function.service\";\nimport { EncryptService } from \"../../abstractions/encrypt.service\";\nimport { EncString, EncryptedString } from \"../../models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\nimport { KeyDefinition, CRYPTO_DISK, DeriveDefinition, CRYPTO_MEMORY } from \"../../state\";\nimport { CryptoService } from \"../crypto.service\";\n\nexport const USER_EVER_HAD_USER_KEY = new KeyDefinition<boolean>(CRYPTO_DISK, \"everHadUserKey\", {\n  deserializer: (obj) => obj,\n});\n\nexport const USER_ENCRYPTED_PRIVATE_KEY = new KeyDefinition<EncryptedString>(\n  CRYPTO_DISK,\n  \"privateKey\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\nexport const USER_PRIVATE_KEY = DeriveDefinition.fromWithUserId<\n  EncryptedString,\n  UserPrivateKey,\n  // TODO: update cryptoService to user key directly\n  { encryptService: EncryptService; cryptoService: CryptoService }\n>(USER_ENCRYPTED_PRIVATE_KEY, {\n  deserializer: (obj) => new Uint8Array(Object.values(obj)) as UserPrivateKey,\n  derive: async ([userId, encPrivateKeyString], { encryptService, cryptoService }) => {\n    if (encPrivateKeyString == null) {\n      return null;\n    }\n\n    const userKey = await cryptoService.getUserKey(userId);\n    if (userKey == null) {\n      return null;\n    }\n\n    const encPrivateKey = new EncString(encPrivateKeyString);\n    const privateKey = (await encryptService.decryptToBytes(\n      encPrivateKey,\n      userKey,\n    )) as UserPrivateKey;\n    return privateKey;\n  },\n});\n\nexport const USER_PUBLIC_KEY = DeriveDefinition.from<\n  UserPrivateKey,\n  UserPublicKey,\n  { cryptoFunctionService: CryptoFunctionService }\n>([USER_PRIVATE_KEY, \"publicKey\"], {\n  deserializer: (obj) => new Uint8Array(Object.values(obj)) as UserPublicKey,\n  derive: async (privateKey, { cryptoFunctionService }) => {\n    if (privateKey == null) {\n      return null;\n    }\n\n    return (await cryptoFunctionService.rsaExtractPublicKey(privateKey)) as UserPublicKey;\n  },\n});\nexport const USER_KEY = new KeyDefinition<UserKey>(CRYPTO_MEMORY, \"userKey\", {\n  deserializer: (obj) => SymmetricCryptoKey.fromJSON(obj) as UserKey,\n});\n","import * as bigInt from \"big-integer\";\nimport { Observable, filter, firstValueFrom, map } from \"rxjs\";\n\nimport { EncryptedOrganizationKeyData } from \"../../admin-console/models/data/encrypted-organization-key.data\";\nimport { ProfileOrganizationResponse } from \"../../admin-console/models/response/profile-organization.response\";\nimport { ProfileProviderOrganizationResponse } from \"../../admin-console/models/response/profile-provider-organization.response\";\nimport { ProfileProviderResponse } from \"../../admin-console/models/response/profile-provider.response\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { CsprngArray } from \"../../types/csprng\";\nimport { OrganizationId, ProviderId, UserId } from \"../../types/guid\";\nimport {\n  OrgKey,\n  UserKey,\n  MasterKey,\n  ProviderKey,\n  PinKey,\n  CipherKey,\n  UserPrivateKey,\n  UserPublicKey,\n} from \"../../types/key\";\nimport { CryptoFunctionService } from \"../abstractions/crypto-function.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"../abstractions/crypto.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\nimport { KeyGenerationService } from \"../abstractions/key-generation.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { PlatformUtilsService } from \"../abstractions/platform-utils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport {\n  KeySuffixOptions,\n  HashPurpose,\n  KdfType,\n  ARGON2_ITERATIONS,\n  ARGON2_MEMORY,\n  ARGON2_PARALLELISM,\n  EncryptionType,\n  PBKDF2_ITERATIONS,\n} from \"../enums\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { EFFLongWordList } from \"../misc/wordlist\";\nimport { EncArrayBuffer } from \"../models/domain/enc-array-buffer\";\nimport { EncString, EncryptedString } from \"../models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\nimport { ActiveUserState, DerivedState, StateProvider } from \"../state\";\n\nimport {\n  USER_ENCRYPTED_ORGANIZATION_KEYS,\n  USER_ORGANIZATION_KEYS,\n} from \"./key-state/org-keys.state\";\nimport { USER_ENCRYPTED_PROVIDER_KEYS, USER_PROVIDER_KEYS } from \"./key-state/provider-keys.state\";\nimport {\n  USER_ENCRYPTED_PRIVATE_KEY,\n  USER_EVER_HAD_USER_KEY,\n  USER_PRIVATE_KEY,\n  USER_PUBLIC_KEY,\n  USER_KEY,\n} from \"./key-state/user-key.state\";\n\nexport class CryptoService implements CryptoServiceAbstraction {\n  private readonly activeUserKeyState: ActiveUserState<UserKey>;\n  private readonly activeUserEverHadUserKey: ActiveUserState<boolean>;\n  private readonly activeUserEncryptedOrgKeysState: ActiveUserState<\n    Record<OrganizationId, EncryptedOrganizationKeyData>\n  >;\n  private readonly activeUserOrgKeysState: DerivedState<Record<OrganizationId, OrgKey>>;\n  private readonly activeUserEncryptedProviderKeysState: ActiveUserState<\n    Record<ProviderId, EncryptedString>\n  >;\n  private readonly activeUserProviderKeysState: DerivedState<Record<ProviderId, ProviderKey>>;\n  private readonly activeUserEncryptedPrivateKeyState: ActiveUserState<EncryptedString>;\n  private readonly activeUserPrivateKeyState: DerivedState<UserPrivateKey>;\n  private readonly activeUserPublicKeyState: DerivedState<UserPublicKey>;\n\n  readonly activeUserKey$: Observable<UserKey>;\n\n  readonly activeUserOrgKeys$: Observable<Record<OrganizationId, OrgKey>>;\n  readonly activeUserProviderKeys$: Observable<Record<ProviderId, ProviderKey>>;\n  readonly activeUserPrivateKey$: Observable<UserPrivateKey>;\n  readonly activeUserPublicKey$: Observable<UserPublicKey>;\n  readonly everHadUserKey$: Observable<boolean>;\n\n  constructor(\n    protected keyGenerationService: KeyGenerationService,\n    protected cryptoFunctionService: CryptoFunctionService,\n    protected encryptService: EncryptService,\n    protected platformUtilService: PlatformUtilsService,\n    protected logService: LogService,\n    protected stateService: StateService,\n    protected accountService: AccountService,\n    protected stateProvider: StateProvider,\n  ) {\n    // User Key\n    this.activeUserKeyState = stateProvider.getActive(USER_KEY);\n    this.activeUserKey$ = this.activeUserKeyState.state$;\n    this.activeUserEverHadUserKey = stateProvider.getActive(USER_EVER_HAD_USER_KEY);\n    this.everHadUserKey$ = this.activeUserEverHadUserKey.state$.pipe(map((x) => x ?? false));\n\n    // User Asymmetric Key Pair\n    this.activeUserEncryptedPrivateKeyState = stateProvider.getActive(USER_ENCRYPTED_PRIVATE_KEY);\n    this.activeUserPrivateKeyState = stateProvider.getDerived(\n      this.activeUserEncryptedPrivateKeyState.combinedState$.pipe(\n        filter(([_userId, key]) => key != null),\n      ),\n      USER_PRIVATE_KEY,\n      {\n        encryptService: this.encryptService,\n        cryptoService: this,\n      },\n    );\n    this.activeUserPrivateKey$ = this.activeUserPrivateKeyState.state$; // may be null\n    this.activeUserPublicKeyState = stateProvider.getDerived(\n      this.activeUserPrivateKey$.pipe(filter((key) => key != null)),\n      USER_PUBLIC_KEY,\n      {\n        cryptoFunctionService: this.cryptoFunctionService,\n      },\n    );\n    this.activeUserPublicKey$ = this.activeUserPublicKeyState.state$; // may be null\n\n    // Organization keys\n    this.activeUserEncryptedOrgKeysState = stateProvider.getActive(\n      USER_ENCRYPTED_ORGANIZATION_KEYS,\n    );\n    this.activeUserOrgKeysState = stateProvider.getDerived(\n      this.activeUserEncryptedOrgKeysState.state$.pipe(filter((keys) => keys != null)),\n      USER_ORGANIZATION_KEYS,\n      { cryptoService: this },\n    );\n    this.activeUserOrgKeys$ = this.activeUserOrgKeysState.state$; // null handled by `derive` function\n\n    // Provider keys\n    this.activeUserEncryptedProviderKeysState = stateProvider.getActive(\n      USER_ENCRYPTED_PROVIDER_KEYS,\n    );\n    this.activeUserProviderKeysState = stateProvider.getDerived(\n      this.activeUserEncryptedProviderKeysState.state$.pipe(filter((keys) => keys != null)),\n      USER_PROVIDER_KEYS,\n      { encryptService: this.encryptService, cryptoService: this },\n    );\n    this.activeUserProviderKeys$ = this.activeUserProviderKeysState.state$; // null handled by `derive` function\n  }\n\n  async setUserKey(key: UserKey, userId?: UserId): Promise<void> {\n    if (key == null) {\n      throw new Error(\"No key provided. Use ClearUserKey to clear the key\");\n    }\n    // Set userId to ensure we have one for the account status update\n    [userId, key] = await this.stateProvider.setUserState(USER_KEY, key, userId);\n    await this.stateProvider.setUserState(USER_EVER_HAD_USER_KEY, true, userId);\n\n    await this.accountService.setAccountStatus(userId, AuthenticationStatus.Unlocked);\n\n    await this.storeAdditionalKeys(key, userId);\n  }\n\n  async refreshAdditionalKeys(): Promise<void> {\n    const key = await this.getUserKey();\n    await this.setUserKey(key);\n  }\n\n  async getUserKey(userId?: UserId): Promise<UserKey> {\n    let userKey = await firstValueFrom(this.stateProvider.getUserState$(USER_KEY, userId));\n    if (userKey) {\n      return userKey;\n    }\n\n    // If the user has set their vault timeout to 'Never', we can load the user key from storage\n    if (await this.hasUserKeyStored(KeySuffixOptions.Auto, userId)) {\n      userKey = await this.getKeyFromStorage(KeySuffixOptions.Auto, userId);\n      if (userKey) {\n        await this.setUserKey(userKey, userId);\n        return userKey;\n      }\n    }\n  }\n\n  async isLegacyUser(masterKey?: MasterKey, userId?: UserId): Promise<boolean> {\n    return await this.validateUserKey(\n      (masterKey ?? (await this.getMasterKey(userId))) as unknown as UserKey,\n    );\n  }\n\n  async getUserKeyWithLegacySupport(userId?: UserId): Promise<UserKey> {\n    const userKey = await this.getUserKey(userId);\n    if (userKey) {\n      return userKey;\n    }\n\n    // Legacy support: encryption used to be done with the master key (derived from master password).\n    // Users who have not migrated will have a null user key and must use the master key instead.\n    return (await this.getMasterKey(userId)) as unknown as UserKey;\n  }\n\n  async getUserKeyFromStorage(keySuffix: KeySuffixOptions, userId?: UserId): Promise<UserKey> {\n    const userKey = await this.getKeyFromStorage(keySuffix, userId);\n    if (userKey) {\n      if (!(await this.validateUserKey(userKey))) {\n        this.logService.warning(\"Invalid key, throwing away stored keys\");\n        await this.clearAllStoredUserKeys(userId);\n      }\n      return userKey;\n    }\n  }\n\n  async hasUserKey(userId?: UserId): Promise<boolean> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    if (userId == null) {\n      return false;\n    }\n    return (\n      (await this.hasUserKeyInMemory(userId)) ||\n      (await this.hasUserKeyStored(KeySuffixOptions.Auto, userId))\n    );\n  }\n\n  async hasUserKeyInMemory(userId?: UserId): Promise<boolean> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    if (userId == null) {\n      return false;\n    }\n\n    return (await firstValueFrom(this.stateProvider.getUserState$(USER_KEY, userId))) != null;\n  }\n\n  async hasUserKeyStored(keySuffix: KeySuffixOptions, userId?: UserId): Promise<boolean> {\n    return (await this.getKeyFromStorage(keySuffix, userId)) != null;\n  }\n\n  async makeUserKey(masterKey: MasterKey): Promise<[UserKey, EncString]> {\n    masterKey ||= await this.getMasterKey();\n    if (masterKey == null) {\n      throw new Error(\"No Master Key found.\");\n    }\n\n    const newUserKey = await this.keyGenerationService.createKey(512);\n    return this.buildProtectedSymmetricKey(masterKey, newUserKey.key);\n  }\n\n  async clearUserKey(clearStoredKeys = true, userId?: UserId): Promise<void> {\n    // Set userId to ensure we have one for the account status update\n    [userId] = await this.stateProvider.setUserState(USER_KEY, null, userId);\n    await this.accountService.setMaxAccountStatus(userId, AuthenticationStatus.Locked);\n    if (clearStoredKeys) {\n      await this.clearAllStoredUserKeys(userId);\n    }\n  }\n\n  async clearStoredUserKey(keySuffix: KeySuffixOptions, userId?: UserId): Promise<void> {\n    if (keySuffix === KeySuffixOptions.Auto) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.clearDeprecatedKeys(KeySuffixOptions.Auto, userId);\n    }\n    if (keySuffix === KeySuffixOptions.Pin) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stateService.setPinKeyEncryptedUserKeyEphemeral(null, { userId: userId });\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.clearDeprecatedKeys(KeySuffixOptions.Pin, userId);\n    }\n  }\n\n  async setMasterKeyEncryptedUserKey(userKeyMasterKey: string, userId?: UserId): Promise<void> {\n    await this.stateService.setMasterKeyEncryptedUserKey(userKeyMasterKey, { userId: userId });\n  }\n\n  async setMasterKey(key: MasterKey, userId?: UserId): Promise<void> {\n    await this.stateService.setMasterKey(key, { userId: userId });\n  }\n\n  async getMasterKey(userId?: UserId): Promise<MasterKey> {\n    let masterKey = await this.stateService.getMasterKey({ userId: userId });\n    if (!masterKey) {\n      masterKey = (await this.stateService.getCryptoMasterKey({ userId: userId })) as MasterKey;\n      // if master key was null/undefined and getCryptoMasterKey also returned null/undefined,\n      // don't set master key as it is unnecessary\n      if (masterKey) {\n        await this.setMasterKey(masterKey, userId);\n      }\n    }\n    return masterKey;\n  }\n\n  async getOrDeriveMasterKey(password: string, userId?: UserId) {\n    let masterKey = await this.getMasterKey(userId);\n    return (masterKey ||= await this.makeMasterKey(\n      password,\n      await this.stateService.getEmail({ userId: userId }),\n      await this.stateService.getKdfType({ userId: userId }),\n      await this.stateService.getKdfConfig({ userId: userId }),\n    ));\n  }\n\n  /**\n   * Derive a master key from a password and email.\n   *\n   * @remarks\n   * Does not validate the kdf config to ensure it satisfies the minimum requirements for the given kdf type.\n   */\n  async makeMasterKey(\n    password: string,\n    email: string,\n    kdf: KdfType,\n    KdfConfig: KdfConfig,\n  ): Promise<MasterKey> {\n    return (await this.keyGenerationService.deriveKeyFromPassword(\n      password,\n      email,\n      kdf,\n      KdfConfig,\n    )) as MasterKey;\n  }\n\n  async clearMasterKey(userId?: UserId): Promise<void> {\n    await this.stateService.setMasterKey(null, { userId: userId });\n  }\n\n  async encryptUserKeyWithMasterKey(\n    masterKey: MasterKey,\n    userKey?: UserKey,\n  ): Promise<[UserKey, EncString]> {\n    userKey ||= await this.getUserKey();\n    return await this.buildProtectedSymmetricKey(masterKey, userKey.key);\n  }\n\n  async decryptUserKeyWithMasterKey(\n    masterKey: MasterKey,\n    userKey?: EncString,\n    userId?: UserId,\n  ): Promise<UserKey> {\n    masterKey ||= await this.getMasterKey(userId);\n    if (masterKey == null) {\n      throw new Error(\"No master key found.\");\n    }\n\n    if (!userKey) {\n      let masterKeyEncryptedUserKey = await this.stateService.getMasterKeyEncryptedUserKey({\n        userId: userId,\n      });\n\n      // Try one more way to get the user key if it still wasn't found.\n      if (masterKeyEncryptedUserKey == null) {\n        masterKeyEncryptedUserKey = await this.stateService.getEncryptedCryptoSymmetricKey({\n          userId: userId,\n        });\n      }\n\n      if (masterKeyEncryptedUserKey == null) {\n        throw new Error(\"No encrypted user key found.\");\n      }\n      userKey = new EncString(masterKeyEncryptedUserKey);\n    }\n\n    let decUserKey: Uint8Array;\n    if (userKey.encryptionType === EncryptionType.AesCbc256_B64) {\n      decUserKey = await this.encryptService.decryptToBytes(userKey, masterKey);\n    } else if (userKey.encryptionType === EncryptionType.AesCbc256_HmacSha256_B64) {\n      const newKey = await this.stretchKey(masterKey);\n      decUserKey = await this.encryptService.decryptToBytes(userKey, newKey);\n    } else {\n      throw new Error(\"Unsupported encryption type.\");\n    }\n    if (decUserKey == null) {\n      return null;\n    }\n\n    return new SymmetricCryptoKey(decUserKey) as UserKey;\n  }\n\n  async hashMasterKey(\n    password: string,\n    key: MasterKey,\n    hashPurpose?: HashPurpose,\n  ): Promise<string> {\n    key ||= await this.getMasterKey();\n\n    if (password == null || key == null) {\n      throw new Error(\"Invalid parameters.\");\n    }\n\n    const iterations = hashPurpose === HashPurpose.LocalAuthorization ? 2 : 1;\n    const hash = await this.cryptoFunctionService.pbkdf2(key.key, password, \"sha256\", iterations);\n    return Utils.fromBufferToB64(hash);\n  }\n\n  async setMasterKeyHash(keyHash: string): Promise<void> {\n    await this.stateService.setKeyHash(keyHash);\n  }\n\n  async getMasterKeyHash(): Promise<string> {\n    return await this.stateService.getKeyHash();\n  }\n\n  async clearMasterKeyHash(userId?: UserId): Promise<void> {\n    return await this.stateService.setKeyHash(null, { userId: userId });\n  }\n\n  async compareAndUpdateKeyHash(masterPassword: string, masterKey: MasterKey): Promise<boolean> {\n    const storedPasswordHash = await this.getMasterKeyHash();\n    if (masterPassword != null && storedPasswordHash != null) {\n      const localKeyHash = await this.hashMasterKey(\n        masterPassword,\n        masterKey,\n        HashPurpose.LocalAuthorization,\n      );\n      if (localKeyHash != null && storedPasswordHash === localKeyHash) {\n        return true;\n      }\n\n      // TODO: remove serverKeyHash check in 1-2 releases after everyone's keyHash has been updated\n      const serverKeyHash = await this.hashMasterKey(\n        masterPassword,\n        masterKey,\n        HashPurpose.ServerAuthorization,\n      );\n      if (serverKeyHash != null && storedPasswordHash === serverKeyHash) {\n        await this.setMasterKeyHash(localKeyHash);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async setOrgKeys(\n    orgs: ProfileOrganizationResponse[] = [],\n    providerOrgs: ProfileProviderOrganizationResponse[] = [],\n  ): Promise<void> {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.activeUserEncryptedOrgKeysState.update((_) => {\n      const encOrgKeyData: { [orgId: string]: EncryptedOrganizationKeyData } = {};\n\n      orgs.forEach((org) => {\n        encOrgKeyData[org.id] = {\n          type: \"organization\",\n          key: org.key,\n        };\n      });\n\n      providerOrgs.forEach((org) => {\n        encOrgKeyData[org.id] = {\n          type: \"provider\",\n          providerId: org.providerId,\n          key: org.key,\n        };\n      });\n\n      return encOrgKeyData;\n    });\n  }\n\n  async getOrgKey(orgId: OrganizationId): Promise<OrgKey> {\n    return (await firstValueFrom(this.activeUserOrgKeys$))[orgId];\n  }\n\n  @sequentialize(() => \"getOrgKeys\")\n  async getOrgKeys(): Promise<Record<string, OrgKey>> {\n    return await firstValueFrom(this.activeUserOrgKeys$);\n  }\n\n  async makeDataEncKey<T extends OrgKey | UserKey>(\n    key: T,\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    if (key == null) {\n      throw new Error(\"No key provided\");\n    }\n\n    const newSymKey = await this.keyGenerationService.createKey(512);\n    return this.buildProtectedSymmetricKey(key, newSymKey.key);\n  }\n\n  async clearOrgKeys(memoryOnly?: boolean, userId?: UserId): Promise<void> {\n    const activeUserId = (await firstValueFrom(this.accountService.activeAccount$))?.id;\n    const userIdIsActive = userId == null || userId === activeUserId;\n\n    if (!memoryOnly) {\n      if (userId == null && activeUserId == null) {\n        // nothing to do\n        return;\n      }\n      await this.stateProvider\n        .getUser(userId ?? activeUserId, USER_ENCRYPTED_ORGANIZATION_KEYS)\n        .update(() => null);\n      return;\n    }\n\n    // org keys are only cached for active users\n    if (userIdIsActive) {\n      await this.activeUserOrgKeysState.forceValue({});\n    }\n  }\n\n  async setProviderKeys(providers: ProfileProviderResponse[]): Promise<void> {\n    await this.activeUserEncryptedProviderKeysState.update((_) => {\n      const encProviderKeys: { [providerId: ProviderId]: EncryptedString } = {};\n\n      providers.forEach((provider) => {\n        encProviderKeys[provider.id as ProviderId] = provider.key as EncryptedString;\n      });\n\n      return encProviderKeys;\n    });\n  }\n\n  async getProviderKey(providerId: ProviderId): Promise<ProviderKey> {\n    if (providerId == null) {\n      return null;\n    }\n\n    return (await firstValueFrom(this.activeUserProviderKeys$))[providerId] ?? null;\n  }\n\n  @sequentialize(() => \"getProviderKeys\")\n  async getProviderKeys(): Promise<Record<ProviderId, ProviderKey>> {\n    return await firstValueFrom(this.activeUserProviderKeys$);\n  }\n\n  async clearProviderKeys(memoryOnly?: boolean, userId?: UserId): Promise<void> {\n    const activeUserId = (await firstValueFrom(this.accountService.activeAccount$))?.id;\n    const userIdIsActive = userId == null || userId === activeUserId;\n\n    if (!memoryOnly) {\n      if (userId == null && activeUserId == null) {\n        // nothing to do\n        return;\n      }\n      await this.stateProvider\n        .getUser(userId ?? activeUserId, USER_ENCRYPTED_PROVIDER_KEYS)\n        .update(() => null);\n      return;\n    }\n\n    // provider keys are only cached for active users\n    if (userIdIsActive) {\n      await this.activeUserProviderKeysState.forceValue({});\n    }\n  }\n\n  async getPublicKey(): Promise<Uint8Array> {\n    return await firstValueFrom(this.activeUserPublicKey$);\n  }\n\n  async makeOrgKey<T extends OrgKey | ProviderKey>(): Promise<[EncString, T]> {\n    const shareKey = await this.keyGenerationService.createKey(512);\n    const publicKey = await this.getPublicKey();\n    const encShareKey = await this.rsaEncrypt(shareKey.key, publicKey);\n    return [encShareKey, shareKey as T];\n  }\n\n  async setPrivateKey(encPrivateKey: EncryptedString): Promise<void> {\n    if (encPrivateKey == null) {\n      return;\n    }\n\n    await this.activeUserEncryptedPrivateKeyState.update(() => encPrivateKey);\n  }\n\n  async getPrivateKey(): Promise<Uint8Array> {\n    return await firstValueFrom(this.activeUserPrivateKey$);\n  }\n\n  async getFingerprint(fingerprintMaterial: string, publicKey?: Uint8Array): Promise<string[]> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey === null) {\n      throw new Error(\"No public key available.\");\n    }\n    const keyFingerprint = await this.cryptoFunctionService.hash(publicKey, \"sha256\");\n    const userFingerprint = await this.cryptoFunctionService.hkdfExpand(\n      keyFingerprint,\n      fingerprintMaterial,\n      32,\n      \"sha256\",\n    );\n    return this.hashPhrase(userFingerprint);\n  }\n\n  async makeKeyPair(key?: SymmetricCryptoKey): Promise<[string, EncString]> {\n    // Default to user key\n    key ||= await this.getUserKeyWithLegacySupport();\n\n    const keyPair = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    const publicB64 = Utils.fromBufferToB64(keyPair[0]);\n    const privateEnc = await this.encryptService.encrypt(keyPair[1], key);\n    return [publicB64, privateEnc];\n  }\n\n  async clearKeyPair(memoryOnly?: boolean, userId?: UserId): Promise<void[]> {\n    const activeUserId = (await firstValueFrom(this.accountService.activeAccount$))?.id;\n    const userIdIsActive = userId == null || userId === activeUserId;\n\n    if (!memoryOnly) {\n      if (userId == null && activeUserId == null) {\n        // nothing to do\n        return;\n      }\n      await this.stateProvider\n        .getUser(userId ?? activeUserId, USER_ENCRYPTED_PRIVATE_KEY)\n        .update(() => null);\n      return;\n    }\n\n    // decrypted key pair is only cached for active users\n    if (userIdIsActive) {\n      await this.activeUserPrivateKeyState.forceValue(null);\n      await this.activeUserPublicKeyState.forceValue(null);\n    }\n  }\n\n  async makePinKey(pin: string, salt: string, kdf: KdfType, kdfConfig: KdfConfig): Promise<PinKey> {\n    const pinKey = await this.keyGenerationService.deriveKeyFromPassword(pin, salt, kdf, kdfConfig);\n    return (await this.stretchKey(pinKey)) as PinKey;\n  }\n\n  async clearPinKeys(userId?: UserId): Promise<void> {\n    await this.stateService.setPinKeyEncryptedUserKey(null, { userId: userId });\n    await this.stateService.setPinKeyEncryptedUserKeyEphemeral(null, { userId: userId });\n    await this.stateService.setProtectedPin(null, { userId: userId });\n    await this.clearDeprecatedKeys(KeySuffixOptions.Pin, userId);\n  }\n\n  async decryptUserKeyWithPin(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfConfig: KdfConfig,\n    pinProtectedUserKey?: EncString,\n  ): Promise<UserKey> {\n    pinProtectedUserKey ||= await this.stateService.getPinKeyEncryptedUserKey();\n    pinProtectedUserKey ||= await this.stateService.getPinKeyEncryptedUserKeyEphemeral();\n    if (!pinProtectedUserKey) {\n      throw new Error(\"No PIN protected key found.\");\n    }\n    const pinKey = await this.makePinKey(pin, salt, kdf, kdfConfig);\n    const userKey = await this.encryptService.decryptToBytes(pinProtectedUserKey, pinKey);\n    return new SymmetricCryptoKey(userKey) as UserKey;\n  }\n\n  // only for migration purposes\n  async decryptMasterKeyWithPin(\n    pin: string,\n    salt: string,\n    kdf: KdfType,\n    kdfConfig: KdfConfig,\n    pinProtectedMasterKey?: EncString,\n  ): Promise<MasterKey> {\n    if (!pinProtectedMasterKey) {\n      const pinProtectedMasterKeyString = await this.stateService.getEncryptedPinProtected();\n      if (pinProtectedMasterKeyString == null) {\n        throw new Error(\"No PIN protected key found.\");\n      }\n      pinProtectedMasterKey = new EncString(pinProtectedMasterKeyString);\n    }\n    const pinKey = await this.makePinKey(pin, salt, kdf, kdfConfig);\n    const masterKey = await this.encryptService.decryptToBytes(pinProtectedMasterKey, pinKey);\n    return new SymmetricCryptoKey(masterKey) as MasterKey;\n  }\n\n  async makeSendKey(keyMaterial: CsprngArray): Promise<SymmetricCryptoKey> {\n    return await this.keyGenerationService.deriveKeyFromMaterial(\n      keyMaterial,\n      \"bitwarden-send\",\n      \"send\",\n    );\n  }\n\n  async makeCipherKey(): Promise<CipherKey> {\n    return (await this.keyGenerationService.createKey(512)) as CipherKey;\n  }\n\n  async clearKeys(userId?: UserId): Promise<any> {\n    await this.clearUserKey(true, userId);\n    await this.clearMasterKeyHash(userId);\n    await this.clearOrgKeys(false, userId);\n    await this.clearProviderKeys(false, userId);\n    await this.clearKeyPair(false, userId);\n    await this.clearPinKeys(userId);\n    await this.stateProvider.setUserState(USER_EVER_HAD_USER_KEY, null, userId);\n  }\n\n  async rsaEncrypt(data: Uint8Array, publicKey?: Uint8Array): Promise<EncString> {\n    if (publicKey == null) {\n      publicKey = await this.getPublicKey();\n    }\n    if (publicKey == null) {\n      throw new Error(\"Public key unavailable.\");\n    }\n\n    const encBytes = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encBytes));\n  }\n\n  async rsaDecrypt(encValue: string, privateKeyValue?: Uint8Array): Promise<Uint8Array> {\n    const headerPieces = encValue.split(\".\");\n    let encType: EncryptionType = null;\n    let encPieces: string[];\n\n    if (headerPieces.length === 1) {\n      encType = EncryptionType.Rsa2048_OaepSha256_B64;\n      encPieces = [headerPieces[0]];\n    } else if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64: // HmacSha256 types are deprecated\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    if (encPieces == null || encPieces.length <= 0) {\n      throw new Error(\"encPieces unavailable.\");\n    }\n\n    const data = Utils.fromB64ToArray(encPieces[0]);\n    const privateKey = privateKeyValue ?? (await this.getPrivateKey());\n    if (privateKey == null) {\n      throw new Error(\"No private key.\");\n    }\n\n    let alg: \"sha1\" | \"sha256\" = \"sha1\";\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        alg = \"sha256\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data, privateKey, alg);\n  }\n\n  // EFForg/OpenWireless\n  // ref https://github.com/EFForg/OpenWireless/blob/master/app/js/diceware.js\n  async randomNumber(min: number, max: number): Promise<number> {\n    let rval = 0;\n    const range = max - min + 1;\n    const bitsNeeded = Math.ceil(Math.log2(range));\n    if (bitsNeeded > 53) {\n      throw new Error(\"We cannot generate numbers larger than 53 bits.\");\n    }\n\n    const bytesNeeded = Math.ceil(bitsNeeded / 8);\n    const mask = Math.pow(2, bitsNeeded) - 1;\n    // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n    // Fill a byte array with N random numbers\n    const byteArray = new Uint8Array(await this.cryptoFunctionService.randomBytes(bytesNeeded));\n\n    let p = (bytesNeeded - 1) * 8;\n    for (let i = 0; i < bytesNeeded; i++) {\n      rval += byteArray[i] * Math.pow(2, p);\n      p -= 8;\n    }\n\n    // Use & to apply the mask and reduce the number of recursive lookups\n    rval = rval & mask;\n\n    if (rval >= range) {\n      // Integer out of acceptable range\n      return this.randomNumber(min, max);\n    }\n\n    // Return an integer that falls within the range\n    return min + rval;\n  }\n\n  // ---HELPERS---\n  protected async validateUserKey(key: UserKey): Promise<boolean> {\n    if (!key) {\n      return false;\n    }\n\n    try {\n      const [userId, encPrivateKey] = await firstValueFrom(\n        this.activeUserEncryptedPrivateKeyState.combinedState$,\n      );\n      if (encPrivateKey == null) {\n        return false;\n      }\n\n      // Can decrypt private key\n      const privateKey = await USER_PRIVATE_KEY.derive([userId, encPrivateKey], {\n        encryptService: this.encryptService,\n        cryptoService: this,\n      });\n\n      // Can successfully derive public key\n      await USER_PUBLIC_KEY.derive(privateKey, {\n        cryptoFunctionService: this.cryptoFunctionService,\n      });\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Initialize all necessary crypto keys needed for a new account.\n   * Warning! This completely replaces any existing keys!\n   */\n  async initAccount(): Promise<{\n    userKey: UserKey;\n    publicKey: string;\n    privateKey: EncString;\n  }> {\n    const userKey = (await this.keyGenerationService.createKey(512)) as UserKey;\n    const [publicKey, privateKey] = await this.makeKeyPair(userKey);\n    await this.setUserKey(userKey);\n    await this.activeUserEncryptedPrivateKeyState.update(() => privateKey.encryptedString);\n\n    return {\n      userKey,\n      publicKey,\n      privateKey,\n    };\n  }\n\n  /**\n   * Generates any additional keys if needed. Additional keys are\n   * keys such as biometrics, auto, and pin keys.\n   * Useful to make sure other keys stay in sync when the user key\n   * has been rotated.\n   * @param key The user key\n   * @param userId The desired user\n   */\n  protected async storeAdditionalKeys(key: UserKey, userId?: UserId) {\n    const storeAuto = await this.shouldStoreKey(KeySuffixOptions.Auto, userId);\n    if (storeAuto) {\n      await this.stateService.setUserKeyAutoUnlock(key.keyB64, { userId: userId });\n    } else {\n      await this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n    }\n    await this.clearDeprecatedKeys(KeySuffixOptions.Auto, userId);\n\n    const storePin = await this.shouldStoreKey(KeySuffixOptions.Pin, userId);\n    if (storePin) {\n      await this.storePinKey(key, userId);\n      // We can't always clear deprecated keys because the pin is only\n      // migrated once used to unlock\n      await this.clearDeprecatedKeys(KeySuffixOptions.Pin, userId);\n    } else {\n      await this.stateService.setPinKeyEncryptedUserKey(null, { userId: userId });\n      await this.stateService.setPinKeyEncryptedUserKeyEphemeral(null, { userId: userId });\n    }\n  }\n\n  /**\n   * Stores the pin key if needed. If MP on Reset is enabled, stores the\n   * ephemeral version.\n   * @param key The user key\n   */\n  protected async storePinKey(key: UserKey, userId?: UserId) {\n    const pin = await this.encryptService.decryptToUtf8(\n      new EncString(await this.stateService.getProtectedPin({ userId: userId })),\n      key,\n    );\n    const pinKey = await this.makePinKey(\n      pin,\n      await this.stateService.getEmail({ userId: userId }),\n      await this.stateService.getKdfType({ userId: userId }),\n      await this.stateService.getKdfConfig({ userId: userId }),\n    );\n    const encPin = await this.encryptService.encrypt(key.key, pinKey);\n\n    if ((await this.stateService.getPinKeyEncryptedUserKey({ userId: userId })) != null) {\n      await this.stateService.setPinKeyEncryptedUserKey(encPin, { userId: userId });\n    } else {\n      await this.stateService.setPinKeyEncryptedUserKeyEphemeral(encPin, { userId: userId });\n    }\n  }\n\n  protected async shouldStoreKey(keySuffix: KeySuffixOptions, userId?: UserId) {\n    let shouldStoreKey = false;\n    switch (keySuffix) {\n      case KeySuffixOptions.Auto: {\n        const vaultTimeout = await this.stateService.getVaultTimeout({ userId: userId });\n        shouldStoreKey = vaultTimeout == null;\n        break;\n      }\n      case KeySuffixOptions.Pin: {\n        const protectedPin = await this.stateService.getProtectedPin({ userId: userId });\n        shouldStoreKey = !!protectedPin;\n        break;\n      }\n    }\n    return shouldStoreKey;\n  }\n\n  protected async getKeyFromStorage(\n    keySuffix: KeySuffixOptions,\n    userId?: UserId,\n  ): Promise<UserKey> {\n    if (keySuffix === KeySuffixOptions.Auto) {\n      const userKey = await this.stateService.getUserKeyAutoUnlock({ userId: userId });\n      if (userKey) {\n        return new SymmetricCryptoKey(Utils.fromB64ToArray(userKey)) as UserKey;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Validate that the KDF config follows the requirements for the given KDF type.\n   *\n   * @remarks\n   * Should always be called before updating a users KDF config.\n   */\n  validateKdfConfig(kdf: KdfType, kdfConfig: KdfConfig): void {\n    switch (kdf) {\n      case KdfType.PBKDF2_SHA256:\n        if (!PBKDF2_ITERATIONS.inRange(kdfConfig.iterations)) {\n          throw new Error(\n            `PBKDF2 iterations must be between ${PBKDF2_ITERATIONS.min} and ${PBKDF2_ITERATIONS.max}`,\n          );\n        }\n        break;\n      case KdfType.Argon2id:\n        if (!ARGON2_ITERATIONS.inRange(kdfConfig.iterations)) {\n          throw new Error(\n            `Argon2 iterations must be between ${ARGON2_ITERATIONS.min} and ${ARGON2_ITERATIONS.max}`,\n          );\n        }\n\n        if (!ARGON2_MEMORY.inRange(kdfConfig.memory)) {\n          throw new Error(\n            `Argon2 memory must be between ${ARGON2_MEMORY.min}mb and ${ARGON2_MEMORY.max}mb`,\n          );\n        }\n\n        if (!ARGON2_PARALLELISM.inRange(kdfConfig.parallelism)) {\n          throw new Error(\n            `Argon2 parallelism must be between ${ARGON2_PARALLELISM.min} and ${ARGON2_PARALLELISM.max}.`,\n          );\n        }\n        break;\n    }\n  }\n\n  protected async clearAllStoredUserKeys(userId?: UserId): Promise<void> {\n    await this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n    await this.stateService.setPinKeyEncryptedUserKeyEphemeral(null, { userId: userId });\n  }\n\n  private async stretchKey(key: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    const newKey = new Uint8Array(64);\n    const encKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"enc\", 32, \"sha256\");\n    const macKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"mac\", 32, \"sha256\");\n    newKey.set(new Uint8Array(encKey));\n    newKey.set(new Uint8Array(macKey), 32);\n    return new SymmetricCryptoKey(newKey);\n  }\n\n  private async hashPhrase(hash: Uint8Array, minimumEntropy = 64) {\n    const entropyPerWord = Math.log(EFFLongWordList.length) / Math.log(2);\n    let numWords = Math.ceil(minimumEntropy / entropyPerWord);\n\n    const hashArr = Array.from(new Uint8Array(hash));\n    const entropyAvailable = hashArr.length * 4;\n    if (numWords * entropyPerWord > entropyAvailable) {\n      throw new Error(\"Output entropy of hash function is too small\");\n    }\n\n    const phrase: string[] = [];\n    let hashNumber = bigInt.fromArray(hashArr, 256);\n    while (numWords--) {\n      const remainder = hashNumber.mod(EFFLongWordList.length);\n      hashNumber = hashNumber.divide(EFFLongWordList.length);\n      phrase.push(EFFLongWordList[remainder as any]);\n    }\n    return phrase;\n  }\n\n  private async buildProtectedSymmetricKey<T extends SymmetricCryptoKey>(\n    encryptionKey: SymmetricCryptoKey,\n    newSymKey: Uint8Array,\n  ): Promise<[T, EncString]> {\n    let protectedSymKey: EncString = null;\n    if (encryptionKey.key.byteLength === 32) {\n      const stretchedEncryptionKey = await this.stretchKey(encryptionKey);\n      protectedSymKey = await this.encryptService.encrypt(newSymKey, stretchedEncryptionKey);\n    } else if (encryptionKey.key.byteLength === 64) {\n      protectedSymKey = await this.encryptService.encrypt(newSymKey, encryptionKey);\n    } else {\n      throw new Error(\"Invalid key size.\");\n    }\n    return [new SymmetricCryptoKey(newSymKey) as T, protectedSymKey];\n  }\n\n  // --LEGACY METHODS--\n  // We previously used the master key for additional keys, but now we use the user key.\n  // These methods support migrating the old keys to the new ones.\n  // TODO: Remove after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3475)\n\n  async clearDeprecatedKeys(keySuffix: KeySuffixOptions, userId?: UserId) {\n    if (keySuffix === KeySuffixOptions.Auto) {\n      await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n    } else if (keySuffix === KeySuffixOptions.Pin) {\n      await this.stateService.setEncryptedPinProtected(null, { userId: userId });\n      await this.stateService.setDecryptedPinProtected(null, { userId: userId });\n    }\n  }\n\n  async migrateAutoKeyIfNeeded(userId?: UserId) {\n    const oldAutoKey = await this.stateService.getCryptoMasterKeyAuto({ userId: userId });\n    if (!oldAutoKey) {\n      return;\n    }\n    // Decrypt\n    const masterKey = new SymmetricCryptoKey(Utils.fromB64ToArray(oldAutoKey)) as MasterKey;\n    if (await this.isLegacyUser(masterKey, userId)) {\n      // Legacy users don't have a user key, so no need to migrate.\n      // Instead, set the master key for additional isLegacyUser checks that will log the user out.\n      await this.setMasterKey(masterKey, userId);\n      return;\n    }\n    const encryptedUserKey = await this.stateService.getEncryptedCryptoSymmetricKey({\n      userId: userId,\n    });\n    const userKey = await this.decryptUserKeyWithMasterKey(\n      masterKey,\n      new EncString(encryptedUserKey),\n      userId,\n    );\n    // Migrate\n    await this.stateService.setUserKeyAutoUnlock(userKey.keyB64, { userId: userId });\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n    // Set encrypted user key in case user immediately locks without syncing\n    await this.setMasterKeyEncryptedUserKey(encryptedUserKey);\n  }\n\n  async decryptAndMigrateOldPinKey(\n    masterPasswordOnRestart: boolean,\n    pin: string,\n    email: string,\n    kdf: KdfType,\n    kdfConfig: KdfConfig,\n    oldPinKey: EncString,\n  ): Promise<UserKey> {\n    // Decrypt\n    const masterKey = await this.decryptMasterKeyWithPin(pin, email, kdf, kdfConfig, oldPinKey);\n    const encUserKey = await this.stateService.getEncryptedCryptoSymmetricKey();\n    const userKey = await this.decryptUserKeyWithMasterKey(masterKey, new EncString(encUserKey));\n    // Migrate\n    const pinKey = await this.makePinKey(pin, email, kdf, kdfConfig);\n    const pinProtectedKey = await this.encryptService.encrypt(userKey.key, pinKey);\n    if (masterPasswordOnRestart) {\n      await this.stateService.setDecryptedPinProtected(null);\n      await this.stateService.setPinKeyEncryptedUserKeyEphemeral(pinProtectedKey);\n    } else {\n      await this.stateService.setEncryptedPinProtected(null);\n      await this.stateService.setPinKeyEncryptedUserKey(pinProtectedKey);\n      // We previously only set the protected pin if MP on Restart was enabled\n      // now we set it regardless\n      const encPin = await this.encryptService.encrypt(pin, userKey);\n      await this.stateService.setProtectedPin(encPin.encryptedString);\n    }\n    // This also clears the old Biometrics key since the new Biometrics key will\n    // be created when the user key is set.\n    await this.stateService.setCryptoMasterKeyBiometric(null);\n    return userKey;\n  }\n\n  // --DEPRECATED METHODS--\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encrypt\n   */\n  async encrypt(plainValue: string | Uint8Array, key?: SymmetricCryptoKey): Promise<EncString> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return await this.encryptService.encrypt(plainValue, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encryptToBytes\n   */\n  async encryptToBytes(plainValue: Uint8Array, key?: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return this.encryptService.encryptToBytes(plainValue, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  async decryptToBytes(encString: EncString, key?: SymmetricCryptoKey): Promise<Uint8Array> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return this.encryptService.decryptToBytes(encString, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToUtf8\n   */\n  async decryptToUtf8(encString: EncString, key?: SymmetricCryptoKey): Promise<string> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return await this.encryptService.decryptToUtf8(encString, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  async decryptFromBytes(encBuffer: EncArrayBuffer, key: SymmetricCryptoKey): Promise<Uint8Array> {\n    if (encBuffer == null) {\n      throw new Error(\"No buffer provided for decryption.\");\n    }\n\n    key ||= await this.getUserKeyWithLegacySupport();\n\n    return this.encryptService.decryptToBytes(encBuffer, key);\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { KeyGenerationService } from \"@bitwarden/common/platform/abstractions/key-generation.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { BiometricStateService } from \"@bitwarden/common/platform/biometrics/biometric-state.service\";\nimport { KeySuffixOptions } from \"@bitwarden/common/platform/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/services/crypto.service\";\nimport { USER_KEY } from \"@bitwarden/common/platform/services/key-state/user-key.state\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { UserKey } from \"@bitwarden/common/types/key\";\n\nexport class BrowserCryptoService extends CryptoService {\n  constructor(\n    keyGenerationService: KeyGenerationService,\n    cryptoFunctionService: CryptoFunctionService,\n    encryptService: EncryptService,\n    platformUtilService: PlatformUtilsService,\n    logService: LogService,\n    stateService: StateService,\n    accountService: AccountService,\n    stateProvider: StateProvider,\n    private biometricStateService: BiometricStateService,\n  ) {\n    super(\n      keyGenerationService,\n      cryptoFunctionService,\n      encryptService,\n      platformUtilService,\n      logService,\n      stateService,\n      accountService,\n      stateProvider,\n    );\n  }\n  override async hasUserKeyStored(keySuffix: KeySuffixOptions, userId?: UserId): Promise<boolean> {\n    if (keySuffix === KeySuffixOptions.Biometric) {\n      const biometricUnlockPromise =\n        userId == null\n          ? firstValueFrom(this.biometricStateService.biometricUnlockEnabled$)\n          : this.biometricStateService.getBiometricUnlockEnabled(userId);\n      return await biometricUnlockPromise;\n    }\n    return super.hasUserKeyStored(keySuffix, userId);\n  }\n\n  /**\n   * Browser doesn't store biometric keys, so we retrieve them from the desktop and return\n   * if we successfully saved it into memory as the User Key\n   * @returns the `UserKey` if the user passes a biometrics prompt, otherwise return `null`.\n   */\n  protected override async getKeyFromStorage(\n    keySuffix: KeySuffixOptions,\n    userId?: UserId,\n  ): Promise<UserKey> {\n    if (keySuffix === KeySuffixOptions.Biometric) {\n      const biometricsResult = await this.platformUtilService.authenticateBiometric();\n\n      if (!biometricsResult) {\n        return null;\n      }\n\n      const userKey = await firstValueFrom(this.stateProvider.getUserState$(USER_KEY, userId));\n      if (userKey) {\n        return userKey;\n      }\n    }\n\n    return await super.getKeyFromStorage(keySuffix, userId);\n  }\n}\n","import {\n  BiometricStateService,\n  DefaultBiometricStateService,\n} from \"@bitwarden/common/platform/biometrics/biometric-state.service\";\n\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\nimport { StateProviderInitOptions, stateProviderFactory } from \"./state-provider.factory\";\n\ntype BiometricStateServiceFactoryOptions = FactoryOptions;\n\nexport type BiometricStateServiceInitOptions = BiometricStateServiceFactoryOptions &\n  StateProviderInitOptions;\n\nexport function biometricStateServiceFactory(\n  cache: { biometricStateService?: BiometricStateService } & CachedServices,\n  opts: BiometricStateServiceInitOptions,\n): Promise<BiometricStateService> {\n  return factory(\n    cache,\n    \"biometricStateService\",\n    opts,\n    async () => new DefaultBiometricStateService(await stateProviderFactory(cache, opts)),\n  );\n}\n","import { CryptoService as AbstractCryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\n\nimport {\n  AccountServiceInitOptions,\n  accountServiceFactory,\n} from \"../../../auth/background/service-factories/account-service.factory\";\nimport {\n  StateServiceInitOptions,\n  stateServiceFactory,\n} from \"../../../platform/background/service-factories/state-service.factory\";\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../background/service-factories/log-service.factory\";\nimport { BrowserCryptoService } from \"../../services/browser-crypto.service\";\n\nimport { biometricStateServiceFactory } from \"./biometric-state-service.factory\";\nimport {\n  cryptoFunctionServiceFactory,\n  CryptoFunctionServiceInitOptions,\n} from \"./crypto-function-service.factory\";\nimport { encryptServiceFactory, EncryptServiceInitOptions } from \"./encrypt-service.factory\";\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\nimport {\n  KeyGenerationServiceInitOptions,\n  keyGenerationServiceFactory,\n} from \"./key-generation-service.factory\";\nimport {\n  PlatformUtilsServiceInitOptions,\n  platformUtilsServiceFactory,\n} from \"./platform-utils-service.factory\";\nimport { StateProviderInitOptions, stateProviderFactory } from \"./state-provider.factory\";\n\ntype CryptoServiceFactoryOptions = FactoryOptions;\n\nexport type CryptoServiceInitOptions = CryptoServiceFactoryOptions &\n  KeyGenerationServiceInitOptions &\n  CryptoFunctionServiceInitOptions &\n  EncryptServiceInitOptions &\n  PlatformUtilsServiceInitOptions &\n  LogServiceInitOptions &\n  StateServiceInitOptions &\n  AccountServiceInitOptions &\n  StateProviderInitOptions;\n\nexport function cryptoServiceFactory(\n  cache: { cryptoService?: AbstractCryptoService } & CachedServices,\n  opts: CryptoServiceInitOptions,\n): Promise<AbstractCryptoService> {\n  return factory(\n    cache,\n    \"cryptoService\",\n    opts,\n    async () =>\n      new BrowserCryptoService(\n        await keyGenerationServiceFactory(cache, opts),\n        await cryptoFunctionServiceFactory(cache, opts),\n        await encryptServiceFactory(cache, opts),\n        await platformUtilsServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        await accountServiceFactory(cache, opts),\n        await stateProviderFactory(cache, opts),\n        await biometricStateServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { AuthService as AbstractAuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthService } from \"@bitwarden/common/auth/services/auth.service\";\n\nimport {\n  ApiServiceInitOptions,\n  apiServiceFactory,\n} from \"../../../platform/background/service-factories/api-service.factory\";\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  CachedServices,\n  FactoryOptions,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  MessagingServiceInitOptions,\n  messagingServiceFactory,\n} from \"../../../platform/background/service-factories/messaging-service.factory\";\nimport {\n  StateServiceInitOptions,\n  stateServiceFactory,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\ntype AuthServiceFactoryOptions = FactoryOptions;\n\nexport type AuthServiceInitOptions = AuthServiceFactoryOptions &\n  MessagingServiceInitOptions &\n  CryptoServiceInitOptions &\n  ApiServiceInitOptions &\n  StateServiceInitOptions;\n\nexport function authServiceFactory(\n  cache: { authService?: AbstractAuthService } & CachedServices,\n  opts: AuthServiceInitOptions,\n): Promise<AbstractAuthService> {\n  return factory(\n    cache,\n    \"authService\",\n    opts,\n    async () =>\n      new AuthService(\n        await messagingServiceFactory(cache, opts),\n        await cryptoServiceFactory(cache, opts),\n        await apiServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { OrganizationService as AbstractOrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/services/organization/organization.service\";\n\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport { stateProviderFactory } from \"../../../platform/background/service-factories/state-provider.factory\";\nimport { StateServiceInitOptions } from \"../../../platform/background/service-factories/state-service.factory\";\n\ntype OrganizationServiceFactoryOptions = FactoryOptions;\n\nexport type OrganizationServiceInitOptions = OrganizationServiceFactoryOptions &\n  StateServiceInitOptions;\n\nexport function organizationServiceFactory(\n  cache: { organizationService?: AbstractOrganizationService } & CachedServices,\n  opts: OrganizationServiceInitOptions,\n): Promise<AbstractOrganizationService> {\n  return factory(\n    cache,\n    \"organizationService\",\n    opts,\n    async () => new OrganizationService(await stateProviderFactory(cache, opts)),\n  );\n}\n","import { PolicyService as AbstractPolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/services/policy/policy.service\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  stateProviderFactory,\n  StateProviderInitOptions,\n} from \"../../../platform/background/service-factories/state-provider.factory\";\n\nimport {\n  organizationServiceFactory,\n  OrganizationServiceInitOptions,\n} from \"./organization-service.factory\";\n\ntype PolicyServiceFactoryOptions = FactoryOptions;\n\nexport type PolicyServiceInitOptions = PolicyServiceFactoryOptions &\n  StateProviderInitOptions &\n  OrganizationServiceInitOptions;\n\nexport function policyServiceFactory(\n  cache: { policyService?: AbstractPolicyService } & CachedServices,\n  opts: PolicyServiceInitOptions,\n): Promise<AbstractPolicyService> {\n  return factory(\n    cache,\n    \"policyService\",\n    opts,\n    async () =>\n      new PolicyService(\n        await stateProviderFactory(cache, opts),\n        await organizationServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { AutofillSettingsService } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\n\nimport {\n  policyServiceFactory,\n  PolicyServiceInitOptions,\n} from \"../../../admin-console/background/service-factories/policy-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  stateProviderFactory,\n  StateProviderInitOptions,\n} from \"../../../platform/background/service-factories/state-provider.factory\";\n\nexport type AutofillSettingsServiceInitOptions = FactoryOptions &\n  StateProviderInitOptions &\n  PolicyServiceInitOptions;\n\nexport function autofillSettingsServiceFactory(\n  cache: { autofillSettingsService?: AutofillSettingsService } & CachedServices,\n  opts: AutofillSettingsServiceInitOptions,\n): Promise<AutofillSettingsService> {\n  return factory(\n    cache,\n    \"autofillSettingsService\",\n    opts,\n    async () =>\n      new AutofillSettingsService(\n        await stateProviderFactory(cache, opts),\n        await policyServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { DefaultDomainSettingsService } from \"@bitwarden/common/autofill/services/domain-settings.service\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  stateProviderFactory,\n  StateProviderInitOptions,\n} from \"../../../platform/background/service-factories/state-provider.factory\";\n\nexport type DomainSettingsServiceInitOptions = FactoryOptions & StateProviderInitOptions;\n\nexport function domainSettingsServiceFactory(\n  cache: { domainSettingsService?: DefaultDomainSettingsService } & CachedServices,\n  opts: DomainSettingsServiceInitOptions,\n): Promise<DefaultDomainSettingsService> {\n  return factory(\n    cache,\n    \"domainSettingsService\",\n    opts,\n    async () => new DefaultDomainSettingsService(await stateProviderFactory(cache, opts)),\n  );\n}\n","import { CipherFileUploadService as CipherFileUploadServiceAbstraction } from \"@bitwarden/common/vault/abstractions/file-upload/cipher-file-upload.service\";\nimport { CipherFileUploadService } from \"@bitwarden/common/vault/services/file-upload/cipher-file-upload.service\";\n\nimport {\n  ApiServiceInitOptions,\n  apiServiceFactory,\n} from \"../../platform/background/service-factories/api-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../platform/background/service-factories/factory-options\";\nimport {\n  FileUploadServiceInitOptions,\n  fileUploadServiceFactory,\n} from \"../../platform/background/service-factories/file-upload-service.factory\";\n\ntype CipherFileUploadServiceFactoyOptions = FactoryOptions;\n\nexport type CipherFileUploadServiceInitOptions = CipherFileUploadServiceFactoyOptions &\n  ApiServiceInitOptions &\n  FileUploadServiceInitOptions;\n\nexport function cipherFileUploadServiceFactory(\n  cache: { cipherFileUploadService?: CipherFileUploadServiceAbstraction } & CachedServices,\n  opts: CipherFileUploadServiceInitOptions,\n): Promise<CipherFileUploadServiceAbstraction> {\n  return factory(\n    cache,\n    \"cipherFileUploadService\",\n    opts,\n    async () =>\n      new CipherFileUploadService(\n        await apiServiceFactory(cache, opts),\n        await fileUploadServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { FileUploadService as FileUploadServiceAbstraction } from \"@bitwarden/common/platform/abstractions/file-upload/file-upload.service\";\nimport { FileUploadService } from \"@bitwarden/common/platform/services/file-upload/file-upload.service\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../background/service-factories/factory-options\";\n\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\n\ntype FileUploadServiceFactoryOptions = FactoryOptions;\n\nexport type FileUploadServiceInitOptions = FileUploadServiceFactoryOptions & LogServiceInitOptions;\n\nexport function fileUploadServiceFactory(\n  cache: { fileUploadService?: FileUploadServiceAbstraction } & CachedServices,\n  opts: FileUploadServiceInitOptions,\n): Promise<FileUploadServiceAbstraction> {\n  return factory(\n    cache,\n    \"fileUploadService\",\n    opts,\n    async () => new FileUploadService(await logServiceFactory(cache, opts)),\n  );\n}\n","import { TranslationService as TranslationServiceAbstraction } from \"../abstractions/translation.service\";\n\nexport abstract class TranslationService implements TranslationServiceAbstraction {\n  // First locale is the default (English)\n  supportedTranslationLocales: string[] = [\"en\"];\n  defaultLocale = \"en\";\n  abstract translationLocale: string;\n  collator: Intl.Collator;\n  localeNames = new Map<string, string>([\n    [\"af\", \"Afrikaans\"],\n    [\"ar\", \"العربية الفصحى\"],\n    [\"az\", \"Azərbaycanca\"],\n    [\"be\", \"Беларуская\"],\n    [\"bg\", \"български\"],\n    [\"bn\", \"বাংলা\"],\n    [\"bs\", \"bosanski jezik\"],\n    [\"ca\", \"català\"],\n    [\"cs\", \"čeština\"],\n    [\"cy\", \"Cymraeg, y Gymraeg\"],\n    [\"da\", \"dansk\"],\n    [\"de\", \"Deutsch\"],\n    [\"el\", \"Ελληνικά\"],\n    [\"en\", \"English\"],\n    [\"en-GB\", \"English (British)\"],\n    [\"en-IN\", \"English (India)\"],\n    [\"eo\", \"Esperanto\"],\n    [\"es\", \"español\"],\n    [\"et\", \"eesti\"],\n    [\"eu\", \"euskara\"],\n    [\"fa\", \"فارسی\"],\n    [\"fi\", \"suomi\"],\n    [\"fil\", \"Wikang Filipino\"],\n    [\"fr\", \"français\"],\n    [\"gl\", \"galego\"],\n    [\"he\", \"עברית\"],\n    [\"hi\", \"हिन्दी\"],\n    [\"hr\", \"hrvatski\"],\n    [\"hu\", \"magyar\"],\n    [\"id\", \"Bahasa Indonesia\"],\n    [\"it\", \"italiano\"],\n    [\"ja\", \"日本語\"],\n    [\"ka\", \"ქართული\"],\n    [\"km\", \"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ\"],\n    [\"kn\", \"ಕನ್ನಡ\"],\n    [\"ko\", \"한국어\"],\n    [\"lt\", \"lietuvių kalba\"],\n    [\"lv\", \"Latvietis\"],\n    [\"me\", \"црногорски\"],\n    [\"ml\", \"മലയാളം\"],\n    [\"mr\", \"मराठी\"],\n    [\"my\", \"ဗမာစကား\"],\n    [\"nb\", \"norsk (bokmål)\"],\n    [\"ne\", \"नेपाली\"],\n    [\"nl\", \"Nederlands\"],\n    [\"nn\", \"Norsk Nynorsk\"],\n    [\"or\", \"ଓଡ଼ିଆ\"],\n    [\"pl\", \"polski\"],\n    [\"pt-BR\", \"português do Brasil\"],\n    [\"pt-PT\", \"português\"],\n    [\"ro\", \"română\"],\n    [\"ru\", \"русский\"],\n    [\"si\", \"සිංහල\"],\n    [\"sk\", \"slovenčina\"],\n    [\"sl\", \"Slovenski jezik, Slovenščina\"],\n    [\"sr\", \"Српски\"],\n    [\"sv\", \"svenska\"],\n    [\"te\", \"తెలుగు\"],\n    [\"th\", \"ไทย\"],\n    [\"tr\", \"Türkçe\"],\n    [\"uk\", \"українська\"],\n    [\"vi\", \"Tiếng Việt\"],\n    [\"zh-CN\", \"中文（中国大陆）\"],\n    [\"zh-TW\", \"中文（台灣）\"],\n  ]);\n\n  protected inited: boolean;\n  protected defaultMessages: any = {};\n  protected localeMessages: any = {};\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>,\n  ) {\n    this.systemLanguage = systemLanguage.replace(\"_\", \"-\");\n  }\n\n  async init(locale?: string) {\n    if (this.inited) {\n      throw new Error(\"i18n already initialized.\");\n    }\n    if (this.supportedTranslationLocales == null || this.supportedTranslationLocales.length === 0) {\n      throw new Error(\"supportedTranslationLocales not set.\");\n    }\n\n    this.inited = true;\n    this.translationLocale = locale != null ? locale : this.systemLanguage;\n\n    try {\n      this.collator = new Intl.Collator(this.translationLocale, {\n        numeric: true,\n        sensitivity: \"base\",\n      });\n    } catch {\n      this.collator = null;\n    }\n\n    if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n      this.translationLocale = this.translationLocale.slice(0, 2);\n\n      if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n        this.translationLocale = this.defaultLocale;\n      }\n    }\n\n    if (this.localesDirectory != null) {\n      await this.loadMessages(this.translationLocale, this.localeMessages);\n      if (this.translationLocale !== this.defaultLocale) {\n        await this.loadMessages(this.defaultLocale, this.defaultMessages);\n      }\n    }\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string | number, p2?: string | number, p3?: string | number): string {\n    let result: string;\n    // eslint-disable-next-line\n    if (this.localeMessages.hasOwnProperty(id) && this.localeMessages[id]) {\n      result = this.localeMessages[id];\n      // eslint-disable-next-line\n    } else if (this.defaultMessages.hasOwnProperty(id) && this.defaultMessages[id]) {\n      result = this.defaultMessages[id];\n    } else {\n      result = \"\";\n    }\n\n    if (result !== \"\") {\n      if (p1 != null) {\n        result = result.split(\"__$1__\").join(p1.toString());\n      }\n      if (p2 != null) {\n        result = result.split(\"__$2__\").join(p2.toString());\n      }\n      if (p3 != null) {\n        result = result.split(\"__$3__\").join(p3.toString());\n      }\n    }\n\n    return result;\n  }\n\n  protected async loadMessages(locale: string, messagesObj: any): Promise<any> {\n    const formattedLocale = locale.replace(\"-\", \"_\");\n    const locales = await this.getLocalesJson(formattedLocale);\n    for (const prop in locales) {\n      // eslint-disable-next-line\n      if (!locales.hasOwnProperty(prop)) {\n        continue;\n      }\n      messagesObj[prop] = locales[prop].message;\n\n      if (locales[prop].placeholders) {\n        for (const placeProp in locales[prop].placeholders) {\n          if (\n            !locales[prop].placeholders.hasOwnProperty(placeProp) || // eslint-disable-line\n            !locales[prop].placeholders[placeProp].content\n          ) {\n            continue;\n          }\n\n          const replaceToken = \"\\\\$\" + placeProp.toUpperCase() + \"\\\\$\";\n          let replaceContent = locales[prop].placeholders[placeProp].content;\n          if (replaceContent === \"$1\" || replaceContent === \"$2\" || replaceContent === \"$3\") {\n            replaceContent = \"__$\" + replaceContent + \"__\";\n          }\n          messagesObj[prop] = messagesObj[prop].replace(\n            new RegExp(replaceToken, \"g\"),\n            replaceContent,\n          );\n        }\n      }\n    }\n  }\n}\n","import { Observable, firstValueFrom, map } from \"rxjs\";\n\nimport { I18nService as I18nServiceAbstraction } from \"../abstractions/i18n.service\";\nimport { GlobalState, GlobalStateProvider, KeyDefinition, TRANSLATION_DISK } from \"../state\";\n\nimport { TranslationService } from \"./translation.service\";\n\nconst LOCALE_KEY = new KeyDefinition<string>(TRANSLATION_DISK, \"locale\", {\n  deserializer: (value) => value,\n});\n\nexport class I18nService extends TranslationService implements I18nServiceAbstraction {\n  translationLocale: string;\n  protected translationLocaleState: GlobalState<string>;\n  userSetLocale$: Observable<string | undefined>;\n  locale$: Observable<string>;\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>,\n    globalStateProvider: GlobalStateProvider,\n  ) {\n    super(systemLanguage, localesDirectory, getLocalesJson);\n    this.translationLocaleState = globalStateProvider.get(LOCALE_KEY);\n    this.userSetLocale$ = this.translationLocaleState.state$;\n    this.locale$ = this.userSetLocale$.pipe(map((locale) => locale ?? this.translationLocale));\n  }\n\n  async setLocale(locale: string): Promise<void> {\n    await this.translationLocaleState.update(() => locale);\n  }\n\n  override async init() {\n    const storedLocale = await firstValueFrom(this.translationLocaleState.state$);\n    await super.init(storedLocale);\n  }\n}\n","import { I18nService as BaseI18nService } from \"@bitwarden/common/platform/services/i18n.service\";\nimport { GlobalStateProvider } from \"@bitwarden/common/platform/state\";\n\nexport default class I18nService extends BaseI18nService {\n  constructor(systemLanguage: string, globalStateProvider: GlobalStateProvider) {\n    super(\n      systemLanguage,\n      null,\n      async (formattedLocale: string) => {\n        // Deprecated\n        const file = await fetch(this.localesDirectory + formattedLocale + \"/messages.json\");\n        return await file.json();\n      },\n      globalStateProvider,\n    );\n\n    // Please leave 'en' where it is, as it's our fallback language in case no translation can be found\n    this.supportedTranslationLocales = [\n      \"en\",\n      \"ar\",\n      \"az\",\n      \"be\",\n      \"bg\",\n      \"bn\",\n      \"bs\",\n      \"ca\",\n      \"cs\",\n      \"cy\",\n      \"da\",\n      \"de\",\n      \"el\",\n      \"en-GB\",\n      \"en-IN\",\n      \"es\",\n      \"et\",\n      \"eu\",\n      \"fa\",\n      \"fi\",\n      \"fil\",\n      \"fr\",\n      \"gl\",\n      \"he\",\n      \"hi\",\n      \"hr\",\n      \"hu\",\n      \"id\",\n      \"it\",\n      \"ja\",\n      \"ka\",\n      \"km\",\n      \"kn\",\n      \"ko\",\n      \"lt\",\n      \"lv\",\n      \"ml\",\n      \"mr\",\n      \"my\",\n      \"nb\",\n      \"ne\",\n      \"nl\",\n      \"nn\",\n      \"or\",\n      \"pl\",\n      \"pt-BR\",\n      \"pt-PT\",\n      \"ro\",\n      \"ru\",\n      \"si\",\n      \"sk\",\n      \"sl\",\n      \"sr\",\n      \"sv\",\n      \"te\",\n      \"th\",\n      \"tr\",\n      \"uk\",\n      \"vi\",\n      \"zh-CN\",\n      \"zh-TW\",\n    ];\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    if (this.localesDirectory == null) {\n      const placeholders: string[] = [];\n      if (p1 != null) {\n        placeholders.push(p1);\n      }\n      if (p2 != null) {\n        placeholders.push(p2);\n      }\n      if (p3 != null) {\n        placeholders.push(p3);\n      }\n\n      if (placeholders.length) {\n        return chrome.i18n.getMessage(id, placeholders);\n      } else {\n        return chrome.i18n.getMessage(id);\n      }\n    }\n\n    return super.translate(id, p1, p2, p3);\n  }\n}\n","import { I18nService as AbstractI18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { I18nService as BaseI18nService } from \"@bitwarden/common/platform/services/i18n.service\";\n\nimport I18nService from \"../../services/i18n.service\";\n\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\nimport {\n  GlobalStateProviderInitOptions,\n  globalStateProviderFactory,\n} from \"./global-state-provider.factory\";\n\ntype I18nServiceFactoryOptions = FactoryOptions & {\n  i18nServiceOptions: {\n    systemLanguage: string;\n  };\n};\n\nexport type I18nServiceInitOptions = I18nServiceFactoryOptions & GlobalStateProviderInitOptions;\n\nexport async function i18nServiceFactory(\n  cache: { i18nService?: AbstractI18nService } & CachedServices,\n  opts: I18nServiceInitOptions,\n): Promise<AbstractI18nService> {\n  const service = await factory(\n    cache,\n    \"i18nService\",\n    opts,\n    async () =>\n      new I18nService(\n        opts.i18nServiceOptions.systemLanguage,\n        await globalStateProviderFactory(cache, opts),\n      ),\n  );\n  if (!(service as BaseI18nService as any).inited) {\n    await (service as BaseI18nService).init();\n  }\n  return service;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport {\n  ServerConfigData,\n  ThirdPartyServerConfigData,\n  EnvironmentServerConfigData,\n} from \"../../models/data/server-config.data\";\n\nconst dayInMilliseconds = 24 * 3600 * 1000;\nconst eighteenHoursInMilliseconds = 18 * 3600 * 1000;\n\nexport class ServerConfig {\n  version: string;\n  gitHash: string;\n  server?: ThirdPartyServerConfigData;\n  environment?: EnvironmentServerConfigData;\n  utcDate: Date;\n  featureStates: { [key: string]: string } = {};\n\n  constructor(serverConfigData: ServerConfigData) {\n    this.version = serverConfigData.version;\n    this.gitHash = serverConfigData.gitHash;\n    this.server = serverConfigData.server;\n    this.utcDate = new Date(serverConfigData.utcDate);\n    this.environment = serverConfigData.environment;\n    this.featureStates = serverConfigData.featureStates;\n\n    if (this.server?.name == null && this.server?.url == null) {\n      this.server = null;\n    }\n  }\n\n  private getAgeInMilliseconds(): number {\n    return new Date().getTime() - this.utcDate?.getTime();\n  }\n\n  isValid(): boolean {\n    return this.getAgeInMilliseconds() <= dayInMilliseconds;\n  }\n\n  expiresSoon(): boolean {\n    return this.getAgeInMilliseconds() >= eighteenHoursInMilliseconds;\n  }\n\n  static fromJSON(obj: Jsonify<ServerConfig>): ServerConfig {\n    if (obj == null) {\n      return null;\n    }\n\n    return new ServerConfig(obj);\n  }\n}\n","import {\n  ReplaySubject,\n  Subject,\n  catchError,\n  concatMap,\n  defer,\n  delayWhen,\n  firstValueFrom,\n  map,\n  merge,\n  timer,\n} from \"rxjs\";\nimport { SemVer } from \"semver\";\n\nimport { AuthService } from \"../../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../../auth/enums/authentication-status\";\nimport { FeatureFlag, FeatureFlagValue } from \"../../../enums/feature-flag.enum\";\nimport { ConfigApiServiceAbstraction } from \"../../abstractions/config/config-api.service.abstraction\";\nimport { ConfigServiceAbstraction } from \"../../abstractions/config/config.service.abstraction\";\nimport { ServerConfig } from \"../../abstractions/config/server-config\";\nimport { EnvironmentService, Region } from \"../../abstractions/environment.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { StateService } from \"../../abstractions/state.service\";\nimport { ServerConfigData } from \"../../models/data/server-config.data\";\nimport { StateProvider } from \"../../state\";\n\nconst ONE_HOUR_IN_MILLISECONDS = 1000 * 3600;\n\nexport class ConfigService implements ConfigServiceAbstraction {\n  private inited = false;\n\n  protected _serverConfig = new ReplaySubject<ServerConfig | null>(1);\n  serverConfig$ = this._serverConfig.asObservable();\n\n  private _forceFetchConfig = new Subject<void>();\n  protected refreshTimer$ = timer(ONE_HOUR_IN_MILLISECONDS, ONE_HOUR_IN_MILLISECONDS); // after 1 hour, then every hour\n\n  cloudRegion$ = this.serverConfig$.pipe(\n    map((config) => config?.environment?.cloudRegion ?? Region.US),\n  );\n\n  constructor(\n    private stateService: StateService,\n    private configApiService: ConfigApiServiceAbstraction,\n    private authService: AuthService,\n    private environmentService: EnvironmentService,\n    private logService: LogService,\n    private stateProvider: StateProvider,\n\n    // Used to avoid duplicate subscriptions, e.g. in browser between the background and popup\n    private subscribe = true,\n  ) {}\n\n  init() {\n    if (!this.subscribe || this.inited) {\n      return;\n    }\n\n    const latestServerConfig$ = defer(() => this.configApiService.get()).pipe(\n      map((response) => new ServerConfigData(response)),\n      delayWhen((data) => this.saveConfig(data)),\n      catchError((e: unknown) => {\n        // fall back to stored ServerConfig (if any)\n        this.logService.error(\"Unable to fetch ServerConfig: \" + (e as Error)?.message);\n        return this.stateService.getServerConfig();\n      }),\n    );\n\n    // If you need to fetch a new config when an event occurs, add an observable that emits on that event here\n    merge(\n      this.refreshTimer$, // an overridable interval\n      this.environmentService.environment$, // when environment URLs change (including when app is started)\n      this._forceFetchConfig, // manual\n    )\n      .pipe(\n        concatMap(() => latestServerConfig$),\n        map((data) => (data == null ? null : new ServerConfig(data))),\n      )\n      .subscribe((config) => this._serverConfig.next(config));\n\n    this.inited = true;\n  }\n\n  getFeatureFlag$<T extends FeatureFlagValue>(key: FeatureFlag, defaultValue?: T) {\n    return this.serverConfig$.pipe(\n      map((serverConfig) => {\n        if (serverConfig?.featureStates == null || serverConfig.featureStates[key] == null) {\n          return defaultValue;\n        }\n\n        return serverConfig.featureStates[key] as T;\n      }),\n    );\n  }\n\n  async getFeatureFlag<T extends FeatureFlagValue>(key: FeatureFlag, defaultValue?: T) {\n    return await firstValueFrom(this.getFeatureFlag$(key, defaultValue));\n  }\n\n  triggerServerConfigFetch() {\n    this._forceFetchConfig.next();\n  }\n\n  private async saveConfig(data: ServerConfigData) {\n    if ((await this.authService.getAuthStatus()) === AuthenticationStatus.LoggedOut) {\n      return;\n    }\n\n    const userId = await firstValueFrom(this.stateProvider.activeUserId$);\n    await this.stateService.setServerConfig(data);\n    await this.environmentService.setCloudRegion(userId, data.environment?.cloudRegion);\n  }\n\n  /**\n   * Verifies whether the server version meets the minimum required version\n   * @param minimumRequiredServerVersion The minimum version required\n   * @returns True if the server version is greater than or equal to the minimum required version\n   */\n  checkServerMeetsVersionRequirement$(minimumRequiredServerVersion: SemVer) {\n    return this.serverConfig$.pipe(\n      map((serverConfig) => {\n        if (serverConfig == null) {\n          return false;\n        }\n        const serverVersion = new SemVer(serverConfig.version);\n        return serverVersion.compare(minimumRequiredServerVersion) >= 0;\n      }),\n    );\n  }\n}\n","import { ConfigServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config.service.abstraction\";\nimport { ConfigService } from \"@bitwarden/common/platform/services/config/config.service\";\n\nimport {\n  authServiceFactory,\n  AuthServiceInitOptions,\n} from \"../../../auth/background/service-factories/auth-service.factory\";\n\nimport { configApiServiceFactory, ConfigApiServiceInitOptions } from \"./config-api.service.factory\";\nimport {\n  environmentServiceFactory,\n  EnvironmentServiceInitOptions,\n} from \"./environment-service.factory\";\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\nimport { logServiceFactory, LogServiceInitOptions } from \"./log-service.factory\";\nimport { stateProviderFactory } from \"./state-provider.factory\";\nimport { stateServiceFactory, StateServiceInitOptions } from \"./state-service.factory\";\n\ntype ConfigServiceFactoryOptions = FactoryOptions & {\n  configServiceOptions?: {\n    subscribe?: boolean;\n  };\n};\n\nexport type ConfigServiceInitOptions = ConfigServiceFactoryOptions &\n  StateServiceInitOptions &\n  ConfigApiServiceInitOptions &\n  AuthServiceInitOptions &\n  EnvironmentServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function configServiceFactory(\n  cache: { configService?: ConfigServiceAbstraction } & CachedServices,\n  opts: ConfigServiceInitOptions,\n): Promise<ConfigServiceAbstraction> {\n  return factory(\n    cache,\n    \"configService\",\n    opts,\n    async () =>\n      new ConfigService(\n        await stateServiceFactory(cache, opts),\n        await configApiServiceFactory(cache, opts),\n        await authServiceFactory(cache, opts),\n        await environmentServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await stateProviderFactory(cache, opts),\n        opts.configServiceOptions?.subscribe ?? true,\n      ),\n  );\n}\n","import { ConfigApiServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config-api.service.abstraction\";\nimport { ConfigApiService } from \"@bitwarden/common/platform/services/config/config-api.service\";\n\nimport {\n  authServiceFactory,\n  AuthServiceInitOptions,\n} from \"../../../auth/background/service-factories/auth-service.factory\";\n\nimport { apiServiceFactory, ApiServiceInitOptions } from \"./api-service.factory\";\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\n\ntype ConfigApiServiceFactoyOptions = FactoryOptions;\n\nexport type ConfigApiServiceInitOptions = ConfigApiServiceFactoyOptions &\n  ApiServiceInitOptions &\n  AuthServiceInitOptions;\n\nexport function configApiServiceFactory(\n  cache: { configApiService?: ConfigApiServiceAbstraction } & CachedServices,\n  opts: ConfigApiServiceInitOptions,\n): Promise<ConfigApiServiceAbstraction> {\n  return factory(\n    cache,\n    \"configApiService\",\n    opts,\n    async () =>\n      new ConfigApiService(\n        await apiServiceFactory(cache, opts),\n        await authServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { CipherService as AbstractCipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherService } from \"@bitwarden/common/vault/services/cipher.service\";\n\nimport {\n  AutofillSettingsServiceInitOptions,\n  autofillSettingsServiceFactory,\n} from \"../../../autofill/background/service_factories/autofill-settings-service.factory\";\nimport {\n  DomainSettingsServiceInitOptions,\n  domainSettingsServiceFactory,\n} from \"../../../autofill/background/service_factories/domain-settings-service.factory\";\nimport {\n  CipherFileUploadServiceInitOptions,\n  cipherFileUploadServiceFactory,\n} from \"../../../background/service-factories/cipher-file-upload-service.factory\";\nimport {\n  searchServiceFactory,\n  SearchServiceInitOptions,\n} from \"../../../background/service-factories/search-service.factory\";\nimport {\n  apiServiceFactory,\n  ApiServiceInitOptions,\n} from \"../../../platform/background/service-factories/api-service.factory\";\nimport {\n  configServiceFactory,\n  ConfigServiceInitOptions,\n} from \"../../../platform/background/service-factories/config-service.factory\";\nimport {\n  cryptoServiceFactory,\n  CryptoServiceInitOptions,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  EncryptServiceInitOptions,\n  encryptServiceFactory,\n} from \"../../../platform/background/service-factories/encrypt-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  i18nServiceFactory,\n  I18nServiceInitOptions,\n} from \"../../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\ntype CipherServiceFactoryOptions = FactoryOptions;\n\nexport type CipherServiceInitOptions = CipherServiceFactoryOptions &\n  CryptoServiceInitOptions &\n  ApiServiceInitOptions &\n  CipherFileUploadServiceInitOptions &\n  I18nServiceInitOptions &\n  SearchServiceInitOptions &\n  StateServiceInitOptions &\n  AutofillSettingsServiceInitOptions &\n  DomainSettingsServiceInitOptions &\n  EncryptServiceInitOptions &\n  ConfigServiceInitOptions;\n\nexport function cipherServiceFactory(\n  cache: { cipherService?: AbstractCipherService } & CachedServices,\n  opts: CipherServiceInitOptions,\n): Promise<AbstractCipherService> {\n  return factory(\n    cache,\n    \"cipherService\",\n    opts,\n    async () =>\n      new CipherService(\n        await cryptoServiceFactory(cache, opts),\n        await domainSettingsServiceFactory(cache, opts),\n        await apiServiceFactory(cache, opts),\n        await i18nServiceFactory(cache, opts),\n        await searchServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        await autofillSettingsServiceFactory(cache, opts),\n        await encryptServiceFactory(cache, opts),\n        await cipherFileUploadServiceFactory(cache, opts),\n        await configServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { SearchService as AbstractSearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { SearchService } from \"@bitwarden/common/services/search.service\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../platform/background/service-factories/factory-options\";\nimport {\n  i18nServiceFactory,\n  I18nServiceInitOptions,\n} from \"../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  logServiceFactory,\n  LogServiceInitOptions,\n} from \"../../platform/background/service-factories/log-service.factory\";\n\ntype SearchServiceFactoryOptions = FactoryOptions;\n\nexport type SearchServiceInitOptions = SearchServiceFactoryOptions &\n  LogServiceInitOptions &\n  I18nServiceInitOptions;\n\nexport function searchServiceFactory(\n  cache: { searchService?: AbstractSearchService } & CachedServices,\n  opts: SearchServiceInitOptions,\n): Promise<AbstractSearchService> {\n  return factory(\n    cache,\n    \"searchService\",\n    opts,\n    async () =>\n      new SearchService(\n        await logServiceFactory(cache, opts),\n        await i18nServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { DefaultBillingAccountProfileStateService } from \"@bitwarden/common/billing/services/account/billing-account-profile-state.service\";\n\nimport { FactoryOptions, CachedServices, factory } from \"./factory-options\";\nimport { StateProviderInitOptions, stateProviderFactory } from \"./state-provider.factory\";\n\ntype BillingAccountProfileStateServiceFactoryOptions = FactoryOptions;\n\nexport type BillingAccountProfileStateServiceInitOptions =\n  BillingAccountProfileStateServiceFactoryOptions & StateProviderInitOptions;\n\nexport function billingAccountProfileStateServiceFactory(\n  cache: {\n    billingAccountProfileStateService?: BillingAccountProfileStateService;\n  } & CachedServices,\n  opts: BillingAccountProfileStateServiceInitOptions,\n): Promise<BillingAccountProfileStateService> {\n  return factory(\n    cache,\n    \"billingAccountProfileStateService\",\n    opts,\n    async () =>\n      new DefaultBillingAccountProfileStateService(await stateProviderFactory(cache, opts)),\n  );\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport {\n  AUTOFILL_CARD_ID,\n  AUTOFILL_ID,\n  AUTOFILL_IDENTITY_ID,\n  COPY_IDENTIFIER_ID,\n  COPY_PASSWORD_ID,\n  COPY_USERNAME_ID,\n  COPY_VERIFICATION_CODE_ID,\n  CREATE_CARD_ID,\n  CREATE_IDENTITY_ID,\n  CREATE_LOGIN_ID,\n  GENERATE_PASSWORD_ID,\n  NOOP_COMMAND_SUFFIX,\n  ROOT_ID,\n  SEPARATOR_ID,\n} from \"@bitwarden/common/autofill/constants\";\nimport { AutofillSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { autofillSettingsServiceFactory } from \"../../autofill/background/service_factories/autofill-settings-service.factory\";\nimport { Account } from \"../../models/account\";\nimport { billingAccountProfileStateServiceFactory } from \"../../platform/background/service-factories/billing-account-profile-state-service.factory\";\nimport { CachedServices } from \"../../platform/background/service-factories/factory-options\";\nimport {\n  i18nServiceFactory,\n  I18nServiceInitOptions,\n} from \"../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  logServiceFactory,\n  LogServiceInitOptions,\n} from \"../../platform/background/service-factories/log-service.factory\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../platform/background/service-factories/state-service.factory\";\nimport { BrowserStateService } from \"../../platform/services/abstractions/browser-state.service\";\n\nimport { InitContextMenuItems } from \"./abstractions/main-context-menu-handler\";\n\nexport class MainContextMenuHandler {\n  initRunning = false;\n  private initContextMenuItems: InitContextMenuItems[] = [\n    {\n      id: ROOT_ID,\n      title: \"Bitwarden\",\n    },\n    {\n      id: AUTOFILL_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"autoFillLogin\"),\n    },\n    {\n      id: COPY_USERNAME_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"copyUsername\"),\n    },\n    {\n      id: COPY_PASSWORD_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"copyPassword\"),\n    },\n    {\n      id: COPY_VERIFICATION_CODE_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"copyVerificationCode\"),\n      checkPremiumAccess: true,\n    },\n    {\n      id: SEPARATOR_ID + 1,\n      type: \"separator\",\n      parentId: ROOT_ID,\n    },\n    {\n      id: AUTOFILL_IDENTITY_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"autoFillIdentity\"),\n    },\n    {\n      id: AUTOFILL_CARD_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"autoFillCard\"),\n    },\n    {\n      id: SEPARATOR_ID + 2,\n      type: \"separator\",\n      parentId: ROOT_ID,\n    },\n    {\n      id: GENERATE_PASSWORD_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"generatePasswordCopied\"),\n    },\n    {\n      id: COPY_IDENTIFIER_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"copyElementIdentifier\"),\n    },\n  ];\n  private noCardsContextMenuItems: chrome.contextMenus.CreateProperties[] = [\n    {\n      id: `${AUTOFILL_CARD_ID}_NOTICE`,\n      enabled: false,\n      parentId: AUTOFILL_CARD_ID,\n      title: this.i18nService.t(\"noCards\"),\n      type: \"normal\",\n    },\n    {\n      id: `${AUTOFILL_CARD_ID}_${SEPARATOR_ID}`,\n      parentId: AUTOFILL_CARD_ID,\n      type: \"separator\",\n    },\n    {\n      id: `${AUTOFILL_CARD_ID}_${CREATE_CARD_ID}`,\n      parentId: AUTOFILL_CARD_ID,\n      title: this.i18nService.t(\"addCardMenu\"),\n      type: \"normal\",\n    },\n  ];\n  private noIdentitiesContextMenuItems: chrome.contextMenus.CreateProperties[] = [\n    {\n      id: `${AUTOFILL_IDENTITY_ID}_NOTICE`,\n      enabled: false,\n      parentId: AUTOFILL_IDENTITY_ID,\n      title: this.i18nService.t(\"noIdentities\"),\n      type: \"normal\",\n    },\n    {\n      id: `${AUTOFILL_IDENTITY_ID}_${SEPARATOR_ID}`,\n      parentId: AUTOFILL_IDENTITY_ID,\n      type: \"separator\",\n    },\n    {\n      id: `${AUTOFILL_IDENTITY_ID}_${CREATE_IDENTITY_ID}`,\n      parentId: AUTOFILL_IDENTITY_ID,\n      title: this.i18nService.t(\"addIdentityMenu\"),\n      type: \"normal\",\n    },\n  ];\n  private noLoginsContextMenuItems: chrome.contextMenus.CreateProperties[] = [\n    {\n      id: `${AUTOFILL_ID}_NOTICE`,\n      enabled: false,\n      parentId: AUTOFILL_ID,\n      title: this.i18nService.t(\"noMatchingLogins\"),\n      type: \"normal\",\n    },\n    {\n      id: `${AUTOFILL_ID}_${SEPARATOR_ID}1`,\n      parentId: AUTOFILL_ID,\n      type: \"separator\",\n    },\n  ];\n\n  constructor(\n    private stateService: BrowserStateService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private i18nService: I18nService,\n    private logService: LogService,\n    private billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {}\n\n  static async mv3Create(cachedServices: CachedServices) {\n    const stateFactory = new StateFactory(GlobalState, Account);\n    const serviceOptions: StateServiceInitOptions & I18nServiceInitOptions & LogServiceInitOptions =\n      {\n        cryptoFunctionServiceOptions: {\n          win: self,\n        },\n        encryptServiceOptions: {\n          logMacFailures: false,\n        },\n        i18nServiceOptions: {\n          systemLanguage: chrome.i18n.getUILanguage(),\n        },\n        logServiceOptions: {\n          isDev: false,\n        },\n        stateServiceOptions: {\n          stateFactory: stateFactory,\n        },\n        platformUtilsServiceOptions: {\n          clipboardWriteCallback: () => Promise.resolve(),\n          biometricCallback: () => Promise.resolve(false),\n          win: self,\n        },\n      };\n\n    return new MainContextMenuHandler(\n      await stateServiceFactory(cachedServices, serviceOptions),\n      await autofillSettingsServiceFactory(cachedServices, serviceOptions),\n      await i18nServiceFactory(cachedServices, serviceOptions),\n      await logServiceFactory(cachedServices, serviceOptions),\n      await billingAccountProfileStateServiceFactory(cachedServices, serviceOptions),\n    );\n  }\n\n  /**\n   *\n   * @returns a boolean showing whether or not items were created\n   */\n  async init(): Promise<boolean> {\n    const menuEnabled = await firstValueFrom(this.autofillSettingsService.enableContextMenu$);\n    if (!menuEnabled) {\n      await MainContextMenuHandler.removeAll();\n      return false;\n    }\n\n    if (this.initRunning) {\n      return true;\n    }\n    this.initRunning = true;\n\n    try {\n      for (const options of this.initContextMenuItems) {\n        if (\n          options.checkPremiumAccess &&\n          !(await firstValueFrom(this.billingAccountProfileStateService.hasPremiumFromAnySource$))\n        ) {\n          continue;\n        }\n\n        delete options.checkPremiumAccess;\n        await MainContextMenuHandler.create({ ...options, contexts: [\"all\"] });\n      }\n    } catch (error) {\n      this.logService.warning(error.message);\n    } finally {\n      this.initRunning = false;\n    }\n    return true;\n  }\n\n  /**\n   * Creates a context menu item\n   *\n   * @param options - the options for the context menu item\n   */\n  private static create = async (options: chrome.contextMenus.CreateProperties) => {\n    if (!chrome.contextMenus) {\n      return;\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      chrome.contextMenus.create(options, () => {\n        if (chrome.runtime.lastError) {\n          return reject(chrome.runtime.lastError);\n        }\n        resolve();\n      });\n    });\n  };\n\n  static async removeAll() {\n    return new Promise<void>((resolve, reject) => {\n      chrome.contextMenus.removeAll(() => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n          return;\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  static remove(menuItemId: string) {\n    return new Promise<void>((resolve, reject) => {\n      chrome.contextMenus.remove(menuItemId, () => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n          return;\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  async loadOptions(title: string, optionId: string, cipher?: CipherView) {\n    try {\n      const sanitizedTitle = MainContextMenuHandler.sanitizeContextMenuTitle(title);\n\n      const createChildItem = async (parentId: string) => {\n        const menuItemId = `${parentId}_${optionId}`;\n\n        return await MainContextMenuHandler.create({\n          type: \"normal\",\n          id: menuItemId,\n          parentId,\n          title: sanitizedTitle,\n          contexts: [\"all\"],\n        });\n      };\n\n      if (\n        !cipher ||\n        (cipher.type === CipherType.Login && !Utils.isNullOrEmpty(cipher.login?.password))\n      ) {\n        await createChildItem(AUTOFILL_ID);\n\n        if (cipher?.viewPassword ?? true) {\n          await createChildItem(COPY_PASSWORD_ID);\n        }\n      }\n\n      if (\n        !cipher ||\n        (cipher.type === CipherType.Login && !Utils.isNullOrEmpty(cipher.login?.username))\n      ) {\n        await createChildItem(COPY_USERNAME_ID);\n      }\n\n      const canAccessPremium = await firstValueFrom(\n        this.billingAccountProfileStateService.hasPremiumFromAnySource$,\n      );\n      if (canAccessPremium && (!cipher || !Utils.isNullOrEmpty(cipher.login?.totp))) {\n        await createChildItem(COPY_VERIFICATION_CODE_ID);\n      }\n\n      if ((!cipher || cipher.type === CipherType.Card) && optionId !== CREATE_LOGIN_ID) {\n        await createChildItem(AUTOFILL_CARD_ID);\n      }\n\n      if ((!cipher || cipher.type === CipherType.Identity) && optionId !== CREATE_LOGIN_ID) {\n        await createChildItem(AUTOFILL_IDENTITY_ID);\n      }\n    } catch (error) {\n      this.logService.warning(error.message);\n    }\n  }\n\n  static sanitizeContextMenuTitle(title: string): string {\n    return title.replace(/&/g, \"&&\");\n  }\n\n  async noAccess() {\n    if (await this.init()) {\n      const authed = await this.stateService.getIsAuthenticated();\n      this.loadOptions(\n        this.i18nService.t(authed ? \"unlockVaultMenu\" : \"loginToVaultMenu\"),\n        NOOP_COMMAND_SUFFIX,\n      ).catch((error) => this.logService.warning(error.message));\n    }\n  }\n\n  async noCards() {\n    try {\n      for (const option of this.noCardsContextMenuItems) {\n        await MainContextMenuHandler.create(option);\n      }\n    } catch (error) {\n      this.logService.warning(error.message);\n    }\n  }\n\n  async noIdentities() {\n    try {\n      for (const option of this.noIdentitiesContextMenuItems) {\n        await MainContextMenuHandler.create(option);\n      }\n    } catch (error) {\n      this.logService.warning(error.message);\n    }\n  }\n\n  async noLogins() {\n    try {\n      for (const option of this.noLoginsContextMenuItems) {\n        await MainContextMenuHandler.create(option);\n      }\n\n      await this.loadOptions(this.i18nService.t(\"addLoginMenu\"), CREATE_LOGIN_ID);\n    } catch (error) {\n      this.logService.warning(error.message);\n    }\n  }\n}\n","import { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  authServiceFactory,\n  AuthServiceInitOptions,\n} from \"../../auth/background/service-factories/auth-service.factory\";\nimport { Account } from \"../../models/account\";\nimport { CachedServices } from \"../../platform/background/service-factories/factory-options\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport {\n  cipherServiceFactory,\n  CipherServiceInitOptions,\n} from \"../../vault/background/service_factories/cipher-service.factory\";\nimport { AutofillCipherTypeId } from \"../types\";\n\nimport { MainContextMenuHandler } from \"./main-context-menu-handler\";\n\nconst NOT_IMPLEMENTED = (..._args: unknown[]) => Promise.resolve();\n\nconst LISTENED_TO_COMMANDS = [\n  \"loggedIn\",\n  \"unlocked\",\n  \"syncCompleted\",\n  \"bgUpdateContextMenu\",\n  \"editedCipher\",\n  \"addedCipher\",\n  \"deletedCipher\",\n];\n\nexport class CipherContextMenuHandler {\n  constructor(\n    private mainContextMenuHandler: MainContextMenuHandler,\n    private authService: AuthService,\n    private cipherService: CipherService,\n  ) {}\n\n  static async create(cachedServices: CachedServices) {\n    const stateFactory = new StateFactory(GlobalState, Account);\n    const serviceOptions: AuthServiceInitOptions & CipherServiceInitOptions = {\n      apiServiceOptions: {\n        logoutCallback: NOT_IMPLEMENTED,\n      },\n      cryptoFunctionServiceOptions: {\n        win: self,\n      },\n      encryptServiceOptions: {\n        logMacFailures: false,\n      },\n      i18nServiceOptions: {\n        systemLanguage: chrome.i18n.getUILanguage(),\n      },\n      keyConnectorServiceOptions: {\n        logoutCallback: NOT_IMPLEMENTED,\n      },\n      logServiceOptions: {\n        isDev: false,\n      },\n      platformUtilsServiceOptions: {\n        biometricCallback: () => Promise.resolve(false),\n        clipboardWriteCallback: NOT_IMPLEMENTED,\n        win: self,\n      },\n      stateServiceOptions: {\n        stateFactory: stateFactory,\n      },\n    };\n    return new CipherContextMenuHandler(\n      await MainContextMenuHandler.mv3Create(cachedServices),\n      await authServiceFactory(cachedServices, serviceOptions),\n      await cipherServiceFactory(cachedServices, serviceOptions),\n    );\n  }\n\n  static async windowsOnFocusChangedListener(windowId: number, serviceCache: CachedServices) {\n    const cipherContextMenuHandler = await CipherContextMenuHandler.create(serviceCache);\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    await cipherContextMenuHandler.update(tab?.url);\n  }\n\n  static async tabsOnActivatedListener(\n    activeInfo: chrome.tabs.TabActiveInfo,\n    serviceCache: CachedServices,\n  ) {\n    const cipherContextMenuHandler = await CipherContextMenuHandler.create(serviceCache);\n    const tab = await BrowserApi.getTab(activeInfo.tabId);\n    await cipherContextMenuHandler.update(tab.url);\n  }\n\n  static async tabsOnReplacedListener(\n    addedTabId: number,\n    removedTabId: number,\n    serviceCache: CachedServices,\n  ) {\n    const cipherContextMenuHandler = await CipherContextMenuHandler.create(serviceCache);\n    const tab = await BrowserApi.getTab(addedTabId);\n    await cipherContextMenuHandler.update(tab.url);\n  }\n\n  static async tabsOnUpdatedListener(\n    tabId: number,\n    changeInfo: chrome.tabs.TabChangeInfo,\n    tab: chrome.tabs.Tab,\n    serviceCache: CachedServices,\n  ) {\n    if (changeInfo.status !== \"complete\") {\n      return;\n    }\n    const cipherContextMenuHandler = await CipherContextMenuHandler.create(serviceCache);\n    await cipherContextMenuHandler.update(tab.url);\n  }\n\n  static async messageListener(\n    message: { command: string },\n    sender: chrome.runtime.MessageSender,\n    cachedServices: CachedServices,\n  ) {\n    if (!CipherContextMenuHandler.shouldListen(message)) {\n      return;\n    }\n    const cipherContextMenuHandler = await CipherContextMenuHandler.create(cachedServices);\n    await cipherContextMenuHandler.messageListener(message);\n  }\n\n  private static shouldListen(message: { command: string }) {\n    return LISTENED_TO_COMMANDS.includes(message.command);\n  }\n\n  async messageListener(message: { command: string }, sender?: chrome.runtime.MessageSender) {\n    if (!CipherContextMenuHandler.shouldListen(message)) {\n      return;\n    }\n\n    const activeTabs = await BrowserApi.getActiveTabs();\n    if (!activeTabs || activeTabs.length === 0) {\n      return;\n    }\n\n    await this.update(activeTabs[0].url);\n  }\n\n  async update(url: string) {\n    if (this.mainContextMenuHandler.initRunning) {\n      return;\n    }\n\n    const authStatus = await this.authService.getAuthStatus();\n    await MainContextMenuHandler.removeAll();\n    if (authStatus !== AuthenticationStatus.Unlocked) {\n      // Should I pass in the auth status or even have two separate methods for this\n      // on MainContextMenuHandler\n      await this.mainContextMenuHandler.noAccess();\n      return;\n    }\n\n    const menuEnabled = await this.mainContextMenuHandler.init();\n    if (!menuEnabled) {\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(url, [\n      CipherType.Card,\n      CipherType.Identity,\n    ]);\n    ciphers.sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));\n\n    const groupedCiphers: Record<AutofillCipherTypeId, CipherView[]> = ciphers.reduce(\n      (ciphersByType, cipher) => {\n        if (!cipher?.type) {\n          return ciphersByType;\n        }\n\n        const existingCiphersOfType = ciphersByType[cipher.type as AutofillCipherTypeId] || [];\n\n        return {\n          ...ciphersByType,\n          [cipher.type]: [...existingCiphersOfType, cipher],\n        };\n      },\n      {\n        [CipherType.Login]: [],\n        [CipherType.Card]: [],\n        [CipherType.Identity]: [],\n      },\n    );\n\n    if (groupedCiphers[CipherType.Login].length === 0) {\n      await this.mainContextMenuHandler.noLogins();\n    }\n\n    if (groupedCiphers[CipherType.Identity].length === 0) {\n      await this.mainContextMenuHandler.noIdentities();\n    }\n\n    if (groupedCiphers[CipherType.Card].length === 0) {\n      await this.mainContextMenuHandler.noCards();\n    }\n\n    for (const cipher of ciphers) {\n      await this.updateForCipher(cipher);\n    }\n  }\n\n  private async updateForCipher(cipher: CipherView) {\n    if (\n      cipher == null ||\n      !new Set([CipherType.Login, CipherType.Card, CipherType.Identity]).has(cipher.type)\n    ) {\n      return;\n    }\n\n    let title = cipher.name;\n\n    if (cipher.type === CipherType.Login && !Utils.isNullOrEmpty(title) && cipher.login?.username) {\n      title += ` (${cipher.login.username})`;\n    }\n\n    if (cipher.type === CipherType.Card && cipher.card?.subTitle) {\n      title += ` ${cipher.card.subTitle}`;\n    }\n\n    await this.mainContextMenuHandler.loadOptions(title, cipher.id, cipher);\n  }\n}\n","import {\n  InternalUserDecryptionOptionsServiceAbstraction,\n  UserDecryptionOptionsService,\n  UserDecryptionOptionsServiceAbstraction,\n} from \"@bitwarden/auth/common\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  stateProviderFactory,\n  StateProviderInitOptions,\n} from \"../../../platform/background/service-factories/state-provider.factory\";\n\ntype UserDecryptionOptionsServiceFactoryOptions = FactoryOptions;\n\nexport type UserDecryptionOptionsServiceInitOptions = UserDecryptionOptionsServiceFactoryOptions &\n  StateProviderInitOptions;\n\nexport function userDecryptionOptionsServiceFactory(\n  cache: {\n    userDecryptionOptionsService?: InternalUserDecryptionOptionsServiceAbstraction;\n  } & CachedServices,\n  opts: UserDecryptionOptionsServiceInitOptions,\n): Promise<UserDecryptionOptionsServiceAbstraction> {\n  return factory(\n    cache,\n    \"userDecryptionOptionsService\",\n    opts,\n    async () => new UserDecryptionOptionsService(await stateProviderFactory(cache, opts)),\n  );\n}\n\nexport async function internalUserDecryptionOptionServiceFactory(\n  cache: {\n    userDecryptionOptionsService?: InternalUserDecryptionOptionsServiceAbstraction;\n  } & CachedServices,\n  opts: UserDecryptionOptionsServiceInitOptions,\n): Promise<InternalUserDecryptionOptionsServiceAbstraction> {\n  return (await userDecryptionOptionsServiceFactory(\n    cache,\n    opts,\n  )) as InternalUserDecryptionOptionsServiceAbstraction;\n}\n","import { VaultTimeoutSettingsService as AbstractVaultTimeoutSettingsService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { VaultTimeoutSettingsService } from \"@bitwarden/common/services/vault-timeout/vault-timeout-settings.service\";\n\nimport {\n  policyServiceFactory,\n  PolicyServiceInitOptions,\n} from \"../../admin-console/background/service-factories/policy-service.factory\";\nimport {\n  tokenServiceFactory,\n  TokenServiceInitOptions,\n} from \"../../auth/background/service-factories/token-service.factory\";\nimport {\n  userDecryptionOptionsServiceFactory,\n  UserDecryptionOptionsServiceInitOptions,\n} from \"../../auth/background/service-factories/user-decryption-options-service.factory\";\nimport {\n  biometricStateServiceFactory,\n  BiometricStateServiceInitOptions,\n} from \"../../platform/background/service-factories/biometric-state-service.factory\";\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../platform/background/service-factories/factory-options\";\nimport {\n  StateServiceInitOptions,\n  stateServiceFactory,\n} from \"../../platform/background/service-factories/state-service.factory\";\n\ntype VaultTimeoutSettingsServiceFactoryOptions = FactoryOptions;\n\nexport type VaultTimeoutSettingsServiceInitOptions = VaultTimeoutSettingsServiceFactoryOptions &\n  UserDecryptionOptionsServiceInitOptions &\n  CryptoServiceInitOptions &\n  TokenServiceInitOptions &\n  PolicyServiceInitOptions &\n  StateServiceInitOptions &\n  BiometricStateServiceInitOptions;\n\nexport function vaultTimeoutSettingsServiceFactory(\n  cache: { vaultTimeoutSettingsService?: AbstractVaultTimeoutSettingsService } & CachedServices,\n  opts: VaultTimeoutSettingsServiceInitOptions,\n): Promise<AbstractVaultTimeoutSettingsService> {\n  return factory(\n    cache,\n    \"vaultTimeoutSettingsService\",\n    opts,\n    async () =>\n      new VaultTimeoutSettingsService(\n        await userDecryptionOptionsServiceFactory(cache, opts),\n        await cryptoServiceFactory(cache, opts),\n        await tokenServiceFactory(cache, opts),\n        await policyServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        await biometricStateServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { UserVerificationService as AbstractUserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/services/user-verification/user-verification.service\";\n\nimport {\n  VaultTimeoutSettingsServiceInitOptions,\n  vaultTimeoutSettingsServiceFactory,\n} from \"../../../background/service-factories/vault-timeout-settings-service.factory\";\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  I18nServiceInitOptions,\n  i18nServiceFactory,\n} from \"../../../platform/background/service-factories/i18n-service.factory\";\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../../platform/background/service-factories/log-service.factory\";\nimport {\n  platformUtilsServiceFactory,\n  PlatformUtilsServiceInitOptions,\n} from \"../../../platform/background/service-factories/platform-utils-service.factory\";\nimport {\n  StateServiceInitOptions,\n  stateServiceFactory,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\nimport { PinCryptoServiceInitOptions, pinCryptoServiceFactory } from \"./pin-crypto-service.factory\";\nimport {\n  userDecryptionOptionsServiceFactory,\n  UserDecryptionOptionsServiceInitOptions,\n} from \"./user-decryption-options-service.factory\";\nimport {\n  UserVerificationApiServiceInitOptions,\n  userVerificationApiServiceFactory,\n} from \"./user-verification-api-service.factory\";\n\ntype UserVerificationServiceFactoryOptions = FactoryOptions;\n\nexport type UserVerificationServiceInitOptions = UserVerificationServiceFactoryOptions &\n  StateServiceInitOptions &\n  CryptoServiceInitOptions &\n  I18nServiceInitOptions &\n  UserVerificationApiServiceInitOptions &\n  UserDecryptionOptionsServiceInitOptions &\n  PinCryptoServiceInitOptions &\n  LogServiceInitOptions &\n  VaultTimeoutSettingsServiceInitOptions &\n  PlatformUtilsServiceInitOptions;\n\nexport function userVerificationServiceFactory(\n  cache: { userVerificationService?: AbstractUserVerificationService } & CachedServices,\n  opts: UserVerificationServiceInitOptions,\n): Promise<AbstractUserVerificationService> {\n  return factory(\n    cache,\n    \"userVerificationService\",\n    opts,\n    async () =>\n      new UserVerificationService(\n        await stateServiceFactory(cache, opts),\n        await cryptoServiceFactory(cache, opts),\n        await i18nServiceFactory(cache, opts),\n        await userVerificationApiServiceFactory(cache, opts),\n        await userDecryptionOptionsServiceFactory(cache, opts),\n        await pinCryptoServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await vaultTimeoutSettingsServiceFactory(cache, opts),\n        await platformUtilsServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { UserVerificationApiServiceAbstraction } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { UserVerificationApiService } from \"@bitwarden/common/auth/services/user-verification/user-verification-api.service\";\n\nimport {\n  ApiServiceInitOptions,\n  apiServiceFactory,\n} from \"../../../platform/background/service-factories/api-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\n\ntype UserVerificationApiServiceFactoryOptions = FactoryOptions;\n\nexport type UserVerificationApiServiceInitOptions = UserVerificationApiServiceFactoryOptions &\n  ApiServiceInitOptions;\n\nexport function userVerificationApiServiceFactory(\n  cache: { userVerificationApiService?: UserVerificationApiServiceAbstraction } & CachedServices,\n  opts: UserVerificationApiServiceInitOptions,\n): Promise<UserVerificationApiServiceAbstraction> {\n  return factory(\n    cache,\n    \"userVerificationApiService\",\n    opts,\n    async () => new UserVerificationApiService(await apiServiceFactory(cache, opts)),\n  );\n}\n","import { PinCryptoServiceAbstraction, PinCryptoService } from \"@bitwarden/auth/common\";\n\nimport {\n  VaultTimeoutSettingsServiceInitOptions,\n  vaultTimeoutSettingsServiceFactory,\n} from \"../../../background/service-factories/vault-timeout-settings-service.factory\";\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../../platform/background/service-factories/log-service.factory\";\nimport {\n  StateServiceInitOptions,\n  stateServiceFactory,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\ntype PinCryptoServiceFactoryOptions = FactoryOptions;\n\nexport type PinCryptoServiceInitOptions = PinCryptoServiceFactoryOptions &\n  StateServiceInitOptions &\n  CryptoServiceInitOptions &\n  VaultTimeoutSettingsServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function pinCryptoServiceFactory(\n  cache: { pinCryptoService?: PinCryptoServiceAbstraction } & CachedServices,\n  opts: PinCryptoServiceInitOptions,\n): Promise<PinCryptoServiceAbstraction> {\n  return factory(\n    cache,\n    \"pinCryptoService\",\n    opts,\n    async () =>\n      new PinCryptoService(\n        await stateServiceFactory(cache, opts),\n        await cryptoServiceFactory(cache, opts),\n        await vaultTimeoutSettingsServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { EventCollectionService as AbstractEventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { EventCollectionService } from \"@bitwarden/common/services/event/event-collection.service\";\n\nimport {\n  organizationServiceFactory,\n  OrganizationServiceInitOptions,\n} from \"../../admin-console/background/service-factories/organization-service.factory\";\nimport { accountServiceFactory } from \"../../auth/background/service-factories/account-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../platform/background/service-factories/factory-options\";\nimport { stateProviderFactory } from \"../../platform/background/service-factories/state-provider.factory\";\nimport { StateServiceInitOptions } from \"../../platform/background/service-factories/state-service.factory\";\nimport {\n  cipherServiceFactory,\n  CipherServiceInitOptions,\n} from \"../../vault/background/service_factories/cipher-service.factory\";\n\nimport {\n  eventUploadServiceFactory,\n  EventUploadServiceInitOptions,\n} from \"./event-upload-service.factory\";\n\ntype EventCollectionServiceOptions = FactoryOptions;\n\nexport type EventCollectionServiceInitOptions = EventCollectionServiceOptions &\n  CipherServiceInitOptions &\n  StateServiceInitOptions &\n  OrganizationServiceInitOptions &\n  EventUploadServiceInitOptions;\n\nexport function eventCollectionServiceFactory(\n  cache: { eventCollectionService?: AbstractEventCollectionService } & CachedServices,\n  opts: EventCollectionServiceInitOptions,\n): Promise<AbstractEventCollectionService> {\n  return factory(\n    cache,\n    \"eventCollectionService\",\n    opts,\n    async () =>\n      new EventCollectionService(\n        await cipherServiceFactory(cache, opts),\n        await stateProviderFactory(cache, opts),\n        await organizationServiceFactory(cache, opts),\n        await eventUploadServiceFactory(cache, opts),\n        await accountServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { EventUploadService as AbstractEventUploadService } from \"@bitwarden/common/abstractions/event/event-upload.service\";\nimport { EventUploadService } from \"@bitwarden/common/services/event/event-upload.service\";\n\nimport { accountServiceFactory } from \"../../auth/background/service-factories/account-service.factory\";\nimport {\n  ApiServiceInitOptions,\n  apiServiceFactory,\n} from \"../../platform/background/service-factories/api-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../platform/background/service-factories/factory-options\";\nimport {\n  logServiceFactory,\n  LogServiceInitOptions,\n} from \"../../platform/background/service-factories/log-service.factory\";\nimport { stateProviderFactory } from \"../../platform/background/service-factories/state-provider.factory\";\nimport { StateServiceInitOptions } from \"../../platform/background/service-factories/state-service.factory\";\n\ntype EventUploadServiceOptions = FactoryOptions;\n\nexport type EventUploadServiceInitOptions = EventUploadServiceOptions &\n  ApiServiceInitOptions &\n  StateServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function eventUploadServiceFactory(\n  cache: { eventUploadService?: AbstractEventUploadService } & CachedServices,\n  opts: EventUploadServiceInitOptions,\n): Promise<AbstractEventUploadService> {\n  return factory(\n    cache,\n    \"eventUploadService\",\n    opts,\n    async () =>\n      new EventUploadService(\n        await apiServiceFactory(cache, opts),\n        await stateProviderFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await accountServiceFactory(cache, opts),\n      ),\n  );\n}\n","import {\n  PasswordGenerationService,\n  PasswordGenerationServiceAbstraction,\n} from \"@bitwarden/common/tools/generator/password\";\n\nimport {\n  policyServiceFactory,\n  PolicyServiceInitOptions,\n} from \"../../../admin-console/background/service-factories/policy-service.factory\";\nimport {\n  CryptoServiceInitOptions,\n  cryptoServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\n\ntype PasswordGenerationServiceFactoryOptions = FactoryOptions;\n\nexport type PasswordGenerationServiceInitOptions = PasswordGenerationServiceFactoryOptions &\n  CryptoServiceInitOptions &\n  PolicyServiceInitOptions &\n  StateServiceInitOptions;\n\nexport function passwordGenerationServiceFactory(\n  cache: { passwordGenerationService?: PasswordGenerationServiceAbstraction } & CachedServices,\n  opts: PasswordGenerationServiceInitOptions,\n): Promise<PasswordGenerationServiceAbstraction> {\n  return factory(\n    cache,\n    \"passwordGenerationService\",\n    opts,\n    async () =>\n      new PasswordGenerationService(\n        await cryptoServiceFactory(cache, opts),\n        await policyServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { TotpService as AbstractTotpService } from \"@bitwarden/common/vault/abstractions/totp.service\";\nimport { TotpService } from \"@bitwarden/common/vault/services/totp.service\";\n\nimport {\n  CryptoFunctionServiceInitOptions,\n  cryptoFunctionServiceFactory,\n} from \"../../../platform/background/service-factories/crypto-function-service.factory\";\nimport {\n  FactoryOptions,\n  CachedServices,\n  factory,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  LogServiceInitOptions,\n  logServiceFactory,\n} from \"../../../platform/background/service-factories/log-service.factory\";\n\ntype TotpServiceOptions = FactoryOptions;\n\nexport type TotpServiceInitOptions = TotpServiceOptions &\n  CryptoFunctionServiceInitOptions &\n  LogServiceInitOptions;\n\nexport function totpServiceFactory(\n  cache: { totpService?: AbstractTotpService } & CachedServices,\n  opts: TotpServiceInitOptions,\n): Promise<AbstractTotpService> {\n  return factory(\n    cache,\n    \"totpService\",\n    opts,\n    async () =>\n      new TotpService(\n        await cryptoFunctionServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n      ),\n  );\n}\n","const AutofillPort = {\n  InjectedScript: \"autofill-injected-script-port\",\n} as const;\n\nexport { AutofillPort };\n","// String values affect code flow in autofill.ts and must not be changed\nexport type FillScriptActions = \"click_on_opid\" | \"focus_by_opid\" | \"fill_by_opid\";\n\nexport type FillScript = [action: FillScriptActions, opid: string, value?: string];\n\nexport type AutofillScriptProperties = {\n  delay_between_operations?: number;\n};\n\nexport type AutofillInsertActions = {\n  fill_by_opid: ({ opid, value }: { opid: string; value: string }) => void;\n  click_on_opid: ({ opid }: { opid: string }) => void;\n  focus_by_opid: ({ opid }: { opid: string }) => void;\n};\n\nexport default class AutofillScript {\n  script: FillScript[] = [];\n  properties: AutofillScriptProperties = {};\n  metadata: any = {}; // Unused, not written or read\n  autosubmit: any = null; // Appears to be unused, read but not written\n  savedUrls: string[];\n  untrustedIframe: boolean;\n  itemType: string; // Appears to be unused, read but not written\n}\n","export class AutoFillConstants {\n  static readonly UsernameFieldNames: string[] = [\n    // English\n    \"username\",\n    \"user name\",\n    \"email\",\n    \"email address\",\n    \"e-mail\",\n    \"e-mail address\",\n    \"userid\",\n    \"user id\",\n    \"customer id\",\n    \"login id\",\n    \"login\",\n    // German\n    \"benutzername\",\n    \"benutzer name\",\n    \"email adresse\",\n    \"e-mail adresse\",\n    \"benutzerid\",\n    \"benutzer id\",\n  ];\n\n  static readonly TotpFieldNames: string[] = [\n    \"totp\",\n    \"2fa\",\n    \"mfa\",\n    \"totpcode\",\n    \"2facode\",\n    \"approvals_code\",\n    \"code\",\n    \"mfacode\",\n    \"otc\",\n    \"otc-code\",\n    \"otp-code\",\n    \"otpcode\",\n    \"pin\",\n    \"security_code\",\n    \"twofactor\",\n    \"twofa\",\n    \"twofactorcode\",\n    \"verificationCode\",\n  ];\n\n  static readonly SearchFieldNames: string[] = [\"search\", \"query\", \"find\", \"go\"];\n\n  static readonly FieldIgnoreList: string[] = [\"captcha\", \"findanything\", \"forgot\"];\n\n  static readonly PasswordFieldExcludeList: string[] = [\n    ...AutoFillConstants.FieldIgnoreList,\n    \"onetimepassword\",\n  ];\n\n  static readonly ExcludedAutofillLoginTypes: string[] = [\n    \"hidden\",\n    \"file\",\n    \"button\",\n    \"image\",\n    \"reset\",\n    \"search\",\n  ];\n\n  static readonly ExcludedAutofillTypes: string[] = [\n    \"radio\",\n    \"checkbox\",\n    ...AutoFillConstants.ExcludedAutofillLoginTypes,\n  ];\n\n  static readonly ExcludedOverlayTypes: string[] = [\n    \"textarea\",\n    ...AutoFillConstants.ExcludedAutofillTypes,\n  ];\n}\n\nexport class CreditCardAutoFillConstants {\n  static readonly CardAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly CardAttributesExtended: string[] = [\n    ...CreditCardAutoFillConstants.CardAttributes,\n    \"label-right\",\n  ];\n\n  static readonly CardHolderFieldNames: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"name\",\n    \"nom\",\n  ];\n\n  static readonly CardHolderFieldNameValues: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"tbName\",\n  ];\n\n  static readonly CardNumberFieldNames: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"number\",\n    \"cc\",\n    \"cc-no\",\n    \"card-no\",\n    \"credit-card\",\n    \"numero-carte\",\n    \"carte\",\n    \"carte-credit\",\n    \"num-carte\",\n    \"cb-num\",\n    \"card-pan\",\n  ];\n\n  static readonly CardNumberFieldNameValues: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"cc-no\",\n    \"card-no\",\n    \"numero-carte\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardExpiryFieldNames: string[] = [\n    \"cc-exp\",\n    \"card-exp\",\n    \"cc-expiration\",\n    \"card-expiration\",\n    \"cc-ex\",\n    \"card-ex\",\n    \"card-expire\",\n    \"card-expiry\",\n    \"validite\",\n    \"expiration\",\n    \"expiry\",\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n    \"payment-cc-date\",\n  ];\n\n  static readonly CardExpiryFieldNameValues: string[] = [\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n  ];\n\n  static readonly ExpiryMonthFieldNames: string[] = [\n    \"exp-month\",\n    \"cc-exp-month\",\n    \"cc-month\",\n    \"card-month\",\n    \"cc-mo\",\n    \"card-mo\",\n    \"exp-mo\",\n    \"card-exp-mo\",\n    \"cc-exp-mo\",\n    \"card-expiration-month\",\n    \"expiration-month\",\n    \"cc-mm\",\n    \"cc-m\",\n    \"card-mm\",\n    \"card-m\",\n    \"card-exp-mm\",\n    \"cc-exp-mm\",\n    \"exp-mm\",\n    \"exp-m\",\n    \"expire-month\",\n    \"expire-mo\",\n    \"expiry-month\",\n    \"expiry-mo\",\n    \"card-expire-month\",\n    \"card-expire-mo\",\n    \"card-expiry-month\",\n    \"card-expiry-mo\",\n    \"mois-validite\",\n    \"mois-expiration\",\n    \"m-validite\",\n    \"m-expiration\",\n    \"expiry-date-field-month\",\n    \"expiration-date-month\",\n    \"expiration-date-mm\",\n    \"exp-mon\",\n    \"validity-mo\",\n    \"exp-date-mo\",\n    \"cb-date-mois\",\n    \"date-m\",\n  ];\n\n  static readonly ExpiryYearFieldNames: string[] = [\n    \"exp-year\",\n    \"cc-exp-year\",\n    \"cc-year\",\n    \"card-year\",\n    \"cc-yr\",\n    \"card-yr\",\n    \"exp-yr\",\n    \"card-exp-yr\",\n    \"cc-exp-yr\",\n    \"card-expiration-year\",\n    \"expiration-year\",\n    \"cc-yy\",\n    \"cc-y\",\n    \"card-yy\",\n    \"card-y\",\n    \"card-exp-yy\",\n    \"cc-exp-yy\",\n    \"exp-yy\",\n    \"exp-y\",\n    \"cc-yyyy\",\n    \"card-yyyy\",\n    \"card-exp-yyyy\",\n    \"cc-exp-yyyy\",\n    \"expire-year\",\n    \"expire-yr\",\n    \"expiry-year\",\n    \"expiry-yr\",\n    \"card-expire-year\",\n    \"card-expire-yr\",\n    \"card-expiry-year\",\n    \"card-expiry-yr\",\n    \"an-validite\",\n    \"an-expiration\",\n    \"annee-validite\",\n    \"annee-expiration\",\n    \"expiry-date-field-year\",\n    \"expiration-date-year\",\n    \"cb-date-ann\",\n    \"expiration-date-yy\",\n    \"expiration-date-yyyy\",\n    \"validity-year\",\n    \"exp-date-year\",\n    \"date-y\",\n  ];\n\n  static readonly CVVFieldNames: string[] = [\n    \"cvv\",\n    \"cvc\",\n    \"cvv2\",\n    \"cc-csc\",\n    \"cc-cvv\",\n    \"card-csc\",\n    \"card-cvv\",\n    \"cvd\",\n    \"cid\",\n    \"cvc2\",\n    \"cnv\",\n    \"cvn2\",\n    \"cc-code\",\n    \"card-code\",\n    \"code-securite\",\n    \"security-code\",\n    \"crypto\",\n    \"card-verif\",\n    \"verification-code\",\n    \"csc\",\n    \"ccv\",\n  ];\n\n  static readonly CardBrandFieldNames: string[] = [\n    \"cc-type\",\n    \"card-type\",\n    \"card-brand\",\n    \"cc-brand\",\n    \"cb-type\",\n  ];\n\n  // Each index represents a language. These three arrays should all be the same length.\n  // 0: English, 1: Danish, 2: German/Dutch, 3: French/Spanish/Italian, 4: Russian, 5: Portuguese\n  static readonly MonthAbbr = [\"mm\", \"mm\", \"mm\", \"mm\", \"мм\", \"mm\"];\n  static readonly YearAbbrShort = [\"yy\", \"åå\", \"jj\", \"aa\", \"гг\", \"rr\"];\n  static readonly YearAbbrLong = [\"yyyy\", \"åååå\", \"jjjj\", \"aa\", \"гггг\", \"rrrr\"];\n}\n\nexport class IdentityAutoFillConstants {\n  static readonly IdentityAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly FullNameFieldNames: string[] = [\"name\", \"full-name\", \"your-name\"];\n\n  static readonly FullNameFieldNameValues: string[] = [\"full-name\", \"your-name\"];\n\n  static readonly TitleFieldNames: string[] = [\n    \"honorific-prefix\",\n    \"prefix\",\n    \"title\",\n    // German\n    \"anrede\",\n  ];\n\n  static readonly FirstnameFieldNames: string[] = [\n    // English\n    \"f-name\",\n    \"first-name\",\n    \"given-name\",\n    \"first-n\",\n    // German\n    \"vorname\",\n  ];\n\n  static readonly MiddlenameFieldNames: string[] = [\n    \"m-name\",\n    \"middle-name\",\n    \"additional-name\",\n    \"middle-initial\",\n    \"middle-n\",\n    \"middle-i\",\n  ];\n\n  static readonly LastnameFieldNames: string[] = [\n    // English\n    \"l-name\",\n    \"last-name\",\n    \"s-name\",\n    \"surname\",\n    \"family-name\",\n    \"family-n\",\n    \"last-n\",\n    // German\n    \"nachname\",\n    \"familienname\",\n  ];\n\n  static readonly EmailFieldNames: string[] = [\"e-mail\", \"email-address\"];\n\n  static readonly AddressFieldNames: string[] = [\n    \"address\",\n    \"street-address\",\n    \"addr\",\n    \"street\",\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n    // German\n    \"strasse\",\n    \"adresse\",\n  ];\n\n  static readonly AddressFieldNameValues: string[] = [\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly Address1FieldNames: string[] = [\n    \"address-1\",\n    \"address-line-1\",\n    \"addr-1\",\n    \"street-1\",\n  ];\n\n  static readonly Address2FieldNames: string[] = [\n    \"address-2\",\n    \"address-line-2\",\n    \"addr-2\",\n    \"street-2\",\n  ];\n\n  static readonly Address3FieldNames: string[] = [\n    \"address-3\",\n    \"address-line-3\",\n    \"addr-3\",\n    \"street-3\",\n  ];\n\n  static readonly PostalCodeFieldNames: string[] = [\n    \"postal\",\n    \"zip\",\n    \"zip2\",\n    \"zip-code\",\n    \"postal-code\",\n    \"post-code\",\n    \"address-zip\",\n    \"address-postal\",\n    \"address-code\",\n    \"address-postal-code\",\n    \"address-zip-code\",\n    // German\n    \"plz\",\n    \"postleitzahl\",\n  ];\n\n  static readonly CityFieldNames: string[] = [\n    \"city\",\n    \"town\",\n    \"address-level-2\",\n    \"address-city\",\n    \"address-town\",\n    // German\n    \"ort\",\n    \"stadt\",\n    \"wohnort\",\n  ];\n\n  static readonly StateFieldNames: string[] = [\n    \"state\",\n    \"province\",\n    \"provence\",\n    \"address-level-1\",\n    \"address-state\",\n    \"address-province\",\n    // German\n    \"bundesland\",\n  ];\n\n  static readonly CountryFieldNames: string[] = [\n    \"country\",\n    \"country-code\",\n    \"country-name\",\n    \"address-country\",\n    \"address-country-name\",\n    \"address-country-code\",\n    // German\n    \"land\",\n  ];\n\n  static readonly PhoneFieldNames: string[] = [\n    \"phone\",\n    \"mobile\",\n    \"mobile-phone\",\n    \"tel\",\n    \"telephone\",\n    \"phone-number\",\n    // German\n    \"telefon\",\n    \"telefonnummer\",\n    \"mobil\",\n    \"handy\",\n  ];\n\n  static readonly UserNameFieldNames: string[] = [\"user-name\", \"user-id\", \"screen-name\"];\n\n  static readonly CompanyFieldNames: string[] = [\n    \"company\",\n    \"company-name\",\n    \"organization\",\n    \"organization-name\",\n    // German\n    \"firma\",\n  ];\n\n  static readonly IsoCountries: { [id: string]: string } = {\n    afghanistan: \"AF\",\n    \"aland islands\": \"AX\",\n    albania: \"AL\",\n    algeria: \"DZ\",\n    \"american samoa\": \"AS\",\n    andorra: \"AD\",\n    angola: \"AO\",\n    anguilla: \"AI\",\n    antarctica: \"AQ\",\n    \"antigua and barbuda\": \"AG\",\n    argentina: \"AR\",\n    armenia: \"AM\",\n    aruba: \"AW\",\n    australia: \"AU\",\n    austria: \"AT\",\n    azerbaijan: \"AZ\",\n    bahamas: \"BS\",\n    bahrain: \"BH\",\n    bangladesh: \"BD\",\n    barbados: \"BB\",\n    belarus: \"BY\",\n    belgium: \"BE\",\n    belize: \"BZ\",\n    benin: \"BJ\",\n    bermuda: \"BM\",\n    bhutan: \"BT\",\n    bolivia: \"BO\",\n    \"bosnia and herzegovina\": \"BA\",\n    botswana: \"BW\",\n    \"bouvet island\": \"BV\",\n    brazil: \"BR\",\n    \"british indian ocean territory\": \"IO\",\n    \"brunei darussalam\": \"BN\",\n    bulgaria: \"BG\",\n    \"burkina faso\": \"BF\",\n    burundi: \"BI\",\n    cambodia: \"KH\",\n    cameroon: \"CM\",\n    canada: \"CA\",\n    \"cape verde\": \"CV\",\n    \"cayman islands\": \"KY\",\n    \"central african republic\": \"CF\",\n    chad: \"TD\",\n    chile: \"CL\",\n    china: \"CN\",\n    \"christmas island\": \"CX\",\n    \"cocos (keeling) islands\": \"CC\",\n    colombia: \"CO\",\n    comoros: \"KM\",\n    congo: \"CG\",\n    \"congo, democratic republic\": \"CD\",\n    \"cook islands\": \"CK\",\n    \"costa rica\": \"CR\",\n    \"cote d'ivoire\": \"CI\",\n    croatia: \"HR\",\n    cuba: \"CU\",\n    cyprus: \"CY\",\n    \"czech republic\": \"CZ\",\n    denmark: \"DK\",\n    djibouti: \"DJ\",\n    dominica: \"DM\",\n    \"dominican republic\": \"DO\",\n    ecuador: \"EC\",\n    egypt: \"EG\",\n    \"el salvador\": \"SV\",\n    \"equatorial guinea\": \"GQ\",\n    eritrea: \"ER\",\n    estonia: \"EE\",\n    ethiopia: \"ET\",\n    \"falkland islands\": \"FK\",\n    \"faroe islands\": \"FO\",\n    fiji: \"FJ\",\n    finland: \"FI\",\n    france: \"FR\",\n    \"french guiana\": \"GF\",\n    \"french polynesia\": \"PF\",\n    \"french southern territories\": \"TF\",\n    gabon: \"GA\",\n    gambia: \"GM\",\n    georgia: \"GE\",\n    germany: \"DE\",\n    ghana: \"GH\",\n    gibraltar: \"GI\",\n    greece: \"GR\",\n    greenland: \"GL\",\n    grenada: \"GD\",\n    guadeloupe: \"GP\",\n    guam: \"GU\",\n    guatemala: \"GT\",\n    guernsey: \"GG\",\n    guinea: \"GN\",\n    \"guinea-bissau\": \"GW\",\n    guyana: \"GY\",\n    haiti: \"HT\",\n    \"heard island & mcdonald islands\": \"HM\",\n    \"holy see (vatican city state)\": \"VA\",\n    honduras: \"HN\",\n    \"hong kong\": \"HK\",\n    hungary: \"HU\",\n    iceland: \"IS\",\n    india: \"IN\",\n    indonesia: \"ID\",\n    \"iran, islamic republic of\": \"IR\",\n    iraq: \"IQ\",\n    ireland: \"IE\",\n    \"isle of man\": \"IM\",\n    israel: \"IL\",\n    italy: \"IT\",\n    jamaica: \"JM\",\n    japan: \"JP\",\n    jersey: \"JE\",\n    jordan: \"JO\",\n    kazakhstan: \"KZ\",\n    kenya: \"KE\",\n    kiribati: \"KI\",\n    \"republic of korea\": \"KR\",\n    \"south korea\": \"KR\",\n    \"democratic people's republic of korea\": \"KP\",\n    \"north korea\": \"KP\",\n    kuwait: \"KW\",\n    kyrgyzstan: \"KG\",\n    \"lao people's democratic republic\": \"LA\",\n    latvia: \"LV\",\n    lebanon: \"LB\",\n    lesotho: \"LS\",\n    liberia: \"LR\",\n    \"libyan arab jamahiriya\": \"LY\",\n    liechtenstein: \"LI\",\n    lithuania: \"LT\",\n    luxembourg: \"LU\",\n    macao: \"MO\",\n    macedonia: \"MK\",\n    madagascar: \"MG\",\n    malawi: \"MW\",\n    malaysia: \"MY\",\n    maldives: \"MV\",\n    mali: \"ML\",\n    malta: \"MT\",\n    \"marshall islands\": \"MH\",\n    martinique: \"MQ\",\n    mauritania: \"MR\",\n    mauritius: \"MU\",\n    mayotte: \"YT\",\n    mexico: \"MX\",\n    \"micronesia, federated states of\": \"FM\",\n    moldova: \"MD\",\n    monaco: \"MC\",\n    mongolia: \"MN\",\n    montenegro: \"ME\",\n    montserrat: \"MS\",\n    morocco: \"MA\",\n    mozambique: \"MZ\",\n    myanmar: \"MM\",\n    namibia: \"NA\",\n    nauru: \"NR\",\n    nepal: \"NP\",\n    netherlands: \"NL\",\n    \"netherlands antilles\": \"AN\",\n    \"new caledonia\": \"NC\",\n    \"new zealand\": \"NZ\",\n    nicaragua: \"NI\",\n    niger: \"NE\",\n    nigeria: \"NG\",\n    niue: \"NU\",\n    \"norfolk island\": \"NF\",\n    \"northern mariana islands\": \"MP\",\n    norway: \"NO\",\n    oman: \"OM\",\n    pakistan: \"PK\",\n    palau: \"PW\",\n    \"palestinian territory, occupied\": \"PS\",\n    panama: \"PA\",\n    \"papua new guinea\": \"PG\",\n    paraguay: \"PY\",\n    peru: \"PE\",\n    philippines: \"PH\",\n    pitcairn: \"PN\",\n    poland: \"PL\",\n    portugal: \"PT\",\n    \"puerto rico\": \"PR\",\n    qatar: \"QA\",\n    reunion: \"RE\",\n    romania: \"RO\",\n    \"russian federation\": \"RU\",\n    rwanda: \"RW\",\n    \"saint barthelemy\": \"BL\",\n    \"saint helena\": \"SH\",\n    \"saint kitts and nevis\": \"KN\",\n    \"saint lucia\": \"LC\",\n    \"saint martin\": \"MF\",\n    \"saint pierre and miquelon\": \"PM\",\n    \"saint vincent and grenadines\": \"VC\",\n    samoa: \"WS\",\n    \"san marino\": \"SM\",\n    \"sao tome and principe\": \"ST\",\n    \"saudi arabia\": \"SA\",\n    senegal: \"SN\",\n    serbia: \"RS\",\n    seychelles: \"SC\",\n    \"sierra leone\": \"SL\",\n    singapore: \"SG\",\n    slovakia: \"SK\",\n    slovenia: \"SI\",\n    \"solomon islands\": \"SB\",\n    somalia: \"SO\",\n    \"south africa\": \"ZA\",\n    \"south georgia and sandwich isl.\": \"GS\",\n    spain: \"ES\",\n    \"sri lanka\": \"LK\",\n    sudan: \"SD\",\n    suriname: \"SR\",\n    \"svalbard and jan mayen\": \"SJ\",\n    swaziland: \"SZ\",\n    sweden: \"SE\",\n    switzerland: \"CH\",\n    \"syrian arab republic\": \"SY\",\n    taiwan: \"TW\",\n    tajikistan: \"TJ\",\n    tanzania: \"TZ\",\n    thailand: \"TH\",\n    \"timor-leste\": \"TL\",\n    togo: \"TG\",\n    tokelau: \"TK\",\n    tonga: \"TO\",\n    \"trinidad and tobago\": \"TT\",\n    tunisia: \"TN\",\n    turkey: \"TR\",\n    turkmenistan: \"TM\",\n    \"turks and caicos islands\": \"TC\",\n    tuvalu: \"TV\",\n    uganda: \"UG\",\n    ukraine: \"UA\",\n    \"united arab emirates\": \"AE\",\n    \"united kingdom\": \"GB\",\n    \"united states\": \"US\",\n    \"united states outlying islands\": \"UM\",\n    uruguay: \"UY\",\n    uzbekistan: \"UZ\",\n    vanuatu: \"VU\",\n    venezuela: \"VE\",\n    vietnam: \"VN\",\n    \"virgin islands, british\": \"VG\",\n    \"virgin islands, u.s.\": \"VI\",\n    \"wallis and futuna\": \"WF\",\n    \"western sahara\": \"EH\",\n    yemen: \"YE\",\n    zambia: \"ZM\",\n    zimbabwe: \"ZW\",\n  };\n\n  static readonly IsoStates: { [id: string]: string } = {\n    alabama: \"AL\",\n    alaska: \"AK\",\n    \"american samoa\": \"AS\",\n    arizona: \"AZ\",\n    arkansas: \"AR\",\n    california: \"CA\",\n    colorado: \"CO\",\n    connecticut: \"CT\",\n    delaware: \"DE\",\n    \"district of columbia\": \"DC\",\n    \"federated states of micronesia\": \"FM\",\n    florida: \"FL\",\n    georgia: \"GA\",\n    guam: \"GU\",\n    hawaii: \"HI\",\n    idaho: \"ID\",\n    illinois: \"IL\",\n    indiana: \"IN\",\n    iowa: \"IA\",\n    kansas: \"KS\",\n    kentucky: \"KY\",\n    louisiana: \"LA\",\n    maine: \"ME\",\n    \"marshall islands\": \"MH\",\n    maryland: \"MD\",\n    massachusetts: \"MA\",\n    michigan: \"MI\",\n    minnesota: \"MN\",\n    mississippi: \"MS\",\n    missouri: \"MO\",\n    montana: \"MT\",\n    nebraska: \"NE\",\n    nevada: \"NV\",\n    \"new hampshire\": \"NH\",\n    \"new jersey\": \"NJ\",\n    \"new mexico\": \"NM\",\n    \"new york\": \"NY\",\n    \"north carolina\": \"NC\",\n    \"north dakota\": \"ND\",\n    \"northern mariana islands\": \"MP\",\n    ohio: \"OH\",\n    oklahoma: \"OK\",\n    oregon: \"OR\",\n    palau: \"PW\",\n    pennsylvania: \"PA\",\n    \"puerto rico\": \"PR\",\n    \"rhode island\": \"RI\",\n    \"south carolina\": \"SC\",\n    \"south dakota\": \"SD\",\n    tennessee: \"TN\",\n    texas: \"TX\",\n    utah: \"UT\",\n    vermont: \"VT\",\n    \"virgin islands\": \"VI\",\n    virginia: \"VA\",\n    washington: \"WA\",\n    \"west virginia\": \"WV\",\n    wisconsin: \"WI\",\n    wyoming: \"WY\",\n  };\n\n  static readonly IsoProvinces: { [id: string]: string } = {\n    alberta: \"AB\",\n    \"british columbia\": \"BC\",\n    manitoba: \"MB\",\n    \"new brunswick\": \"NB\",\n    \"newfoundland and labrador\": \"NL\",\n    \"nova scotia\": \"NS\",\n    ontario: \"ON\",\n    \"prince edward island\": \"PE\",\n    quebec: \"QC\",\n    saskatchewan: \"SK\",\n  };\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { AutofillSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport { DomainSettingsService } from \"@bitwarden/common/autofill/services/domain-settings.service\";\nimport { InlineMenuVisibilitySetting } from \"@bitwarden/common/autofill/types\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport {\n  UriMatchStrategySetting,\n  UriMatchStrategy,\n} from \"@bitwarden/common/models/domain/domain-service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { TotpService } from \"@bitwarden/common/vault/abstractions/totp.service\";\nimport { FieldType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\n\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { BrowserStateService } from \"../../platform/services/abstractions/browser-state.service\";\nimport { openVaultItemPasswordRepromptPopout } from \"../../vault/popup/utils/vault-popout-window\";\nimport { AutofillPort } from \"../enums/autofill-port.enums\";\nimport AutofillField from \"../models/autofill-field\";\nimport AutofillPageDetails from \"../models/autofill-page-details\";\nimport AutofillScript from \"../models/autofill-script\";\n\nimport {\n  AutoFillOptions,\n  AutofillService as AutofillServiceInterface,\n  FormData,\n  GenerateFillScriptOptions,\n  PageDetail,\n} from \"./abstractions/autofill.service\";\nimport {\n  AutoFillConstants,\n  CreditCardAutoFillConstants,\n  IdentityAutoFillConstants,\n} from \"./autofill-constants\";\n\nexport default class AutofillService implements AutofillServiceInterface {\n  private openVaultItemPasswordRepromptPopout = openVaultItemPasswordRepromptPopout;\n  private openPasswordRepromptPopoutDebounce: NodeJS.Timeout;\n  private currentlyOpeningPasswordRepromptPopout = false;\n  private autofillScriptPortsSet = new Set<chrome.runtime.Port>();\n  static searchFieldNamesSet = new Set(AutoFillConstants.SearchFieldNames);\n\n  constructor(\n    private cipherService: CipherService,\n    private stateService: BrowserStateService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private totpService: TotpService,\n    private eventCollectionService: EventCollectionService,\n    private logService: LogService,\n    private domainSettingsService: DomainSettingsService,\n    private userVerificationService: UserVerificationService,\n    private billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {}\n\n  /**\n   * Triggers on installation of the extension Handles injecting\n   * content scripts into all tabs that are currently open, and\n   * sets up a listener to ensure content scripts can identify\n   * if the extension context has been disconnected.\n   */\n  async loadAutofillScriptsOnInstall() {\n    BrowserApi.addListener(chrome.runtime.onConnect, this.handleInjectedScriptPortConnection);\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.injectAutofillScriptsInAllTabs();\n  }\n\n  /**\n   * Triggers a complete reload of all autofill scripts on tabs open within\n   * the user's browsing session. This is done by first disconnecting all\n   * existing autofill content script ports, which cleans up existing object\n   * instances, and then re-injecting the autofill scripts into all tabs.\n   */\n  async reloadAutofillScripts() {\n    this.autofillScriptPortsSet.forEach((port) => {\n      port.disconnect();\n      this.autofillScriptPortsSet.delete(port);\n    });\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.injectAutofillScriptsInAllTabs();\n  }\n\n  /**\n   * Injects the autofill scripts into the current tab and all frames\n   * found within the tab. Temporarily, will conditionally inject\n   * the refactor of the core autofill script if the feature flag\n   * is enabled.\n   * @param {chrome.tabs.Tab} tab\n   * @param {number} frameId\n   * @param {boolean} triggeringOnPageLoad\n   */\n  async injectAutofillScripts(\n    tab: chrome.tabs.Tab,\n    frameId = 0,\n    triggeringOnPageLoad = true,\n  ): Promise<void> {\n    const mainAutofillScript = (await this.getOverlayVisibility())\n      ? \"bootstrap-autofill-overlay.js\"\n      : \"bootstrap-autofill.js\";\n\n    const injectedScripts = [mainAutofillScript];\n\n    const autoFillOnPageLoadIsEnabled = await this.getAutofillOnPageLoad();\n\n    if (triggeringOnPageLoad && autoFillOnPageLoadIsEnabled) {\n      injectedScripts.push(\"autofiller.js\");\n    } else {\n      await BrowserApi.executeScriptInTab(tab.id, {\n        file: \"content/content-message-handler.js\",\n        runAt: \"document_start\",\n      });\n    }\n\n    injectedScripts.push(\"notificationBar.js\", \"contextMenuHandler.js\");\n\n    for (const injectedScript of injectedScripts) {\n      await BrowserApi.executeScriptInTab(tab.id, {\n        file: `content/${injectedScript}`,\n        frameId,\n        runAt: \"document_start\",\n      });\n    }\n  }\n\n  /**\n   * Gets all forms with password fields and formats the data\n   * for both forms and password input elements.\n   * @param {AutofillPageDetails} pageDetails\n   * @returns {FormData[]}\n   */\n  getFormsWithPasswordFields(pageDetails: AutofillPageDetails): FormData[] {\n    const formData: FormData[] = [];\n\n    const passwordFields = AutofillService.loadPasswordFields(pageDetails, true, true, false, true);\n\n    // TODO: this logic prevents multi-step account creation forms (that just start with email)\n    // from being passed on to the notification bar content script - even if autofill-init.js found the form and email field.\n    // ex: https://signup.live.com/\n    if (passwordFields.length === 0) {\n      return formData;\n    }\n\n    // Back up check for cases where there are several password fields detected,\n    // but they are not all part of the form b/c of bad HTML\n\n    // gather password fields that don't have an enclosing form\n    const passwordFieldsWithoutForm = passwordFields.filter((pf) => pf.form === undefined);\n    const formKeys = Object.keys(pageDetails.forms);\n    const formCount = formKeys.length;\n\n    // if we have 3 password fields and only 1 form, and there are password fields that are not within a form\n    // but there is at least one password field within the form, then most likely this is a poorly built password change form\n    if (passwordFields.length === 3 && formCount == 1 && passwordFieldsWithoutForm.length > 0) {\n      // Only one form so get the singular form key\n      const soloFormKey = formKeys[0];\n\n      const atLeastOnePasswordFieldWithinSoloForm =\n        passwordFields.filter((pf) => pf.form !== null && pf.form === soloFormKey).length > 0;\n\n      if (atLeastOnePasswordFieldWithinSoloForm) {\n        // We have a form with at least one password field,\n        // so let's make an assumption that the password fields without a form are actually part of this form\n        passwordFieldsWithoutForm.forEach((pf) => {\n          pf.form = soloFormKey;\n        });\n      }\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const formPasswordFields = passwordFields.filter((pf) => formKey === pf.form);\n      if (formPasswordFields.length > 0) {\n        let uf = this.findUsernameField(pageDetails, formPasswordFields[0], false, false, false);\n        if (uf == null) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          uf = this.findUsernameField(pageDetails, formPasswordFields[0], true, true, false);\n        }\n        formData.push({\n          form: pageDetails.forms[formKey],\n          password: formPasswordFields[0],\n          username: uf,\n          passwords: formPasswordFields,\n        });\n      }\n    }\n\n    return formData;\n  }\n\n  /**\n   * Gets the overlay's visibility setting from the autofill settings service.\n   */\n  async getOverlayVisibility(): Promise<InlineMenuVisibilitySetting> {\n    return await firstValueFrom(this.autofillSettingsService.inlineMenuVisibility$);\n  }\n\n  /**\n   * Gets the setting for automatically copying TOTP upon autofill from the autofill settings service.\n   */\n  async getShouldAutoCopyTotp(): Promise<boolean> {\n    return await firstValueFrom(this.autofillSettingsService.autoCopyTotp$);\n  }\n\n  /**\n   * Gets the autofill on page load setting from the autofill settings service.\n   */\n  async getAutofillOnPageLoad(): Promise<boolean> {\n    return await firstValueFrom(this.autofillSettingsService.autofillOnPageLoad$);\n  }\n\n  /**\n   * Gets the default URI match strategy setting from the domain settings service.\n   */\n  async getDefaultUriMatchStrategy(): Promise<UriMatchStrategySetting> {\n    return await firstValueFrom(this.domainSettingsService.defaultUriMatchStrategy$);\n  }\n\n  /**\n   * Autofill a given tab with a given login item\n   * @param {AutoFillOptions} options Instructions about the autofill operation, including tab and login item\n   * @returns {Promise<string | null>} The TOTP code of the successfully autofilled login, if any\n   */\n  async doAutoFill(options: AutoFillOptions): Promise<string | null> {\n    const tab = options.tab;\n    if (!tab || !options.cipher || !options.pageDetails || !options.pageDetails.length) {\n      throw new Error(\"Nothing to auto-fill.\");\n    }\n\n    let totp: string | null = null;\n\n    const canAccessPremium = await firstValueFrom(\n      this.billingAccountProfileStateService.hasPremiumFromAnySource$,\n    );\n    const defaultUriMatch = await this.getDefaultUriMatchStrategy();\n\n    if (!canAccessPremium) {\n      options.cipher.login.totp = null;\n    }\n\n    let didAutofill = false;\n    await Promise.all(\n      options.pageDetails.map(async (pd) => {\n        // make sure we're still on correct tab\n        if (pd.tab.id !== tab.id || pd.tab.url !== tab.url) {\n          return;\n        }\n\n        const fillScript = await this.generateFillScript(pd.details, {\n          skipUsernameOnlyFill: options.skipUsernameOnlyFill || false,\n          onlyEmptyFields: options.onlyEmptyFields || false,\n          onlyVisibleFields: options.onlyVisibleFields || false,\n          fillNewPassword: options.fillNewPassword || false,\n          allowTotpAutofill: options.allowTotpAutofill || false,\n          cipher: options.cipher,\n          tabUrl: tab.url,\n          defaultUriMatch: defaultUriMatch,\n        });\n\n        if (!fillScript || !fillScript.script || !fillScript.script.length) {\n          return;\n        }\n\n        if (\n          fillScript.untrustedIframe &&\n          options.allowUntrustedIframe != undefined &&\n          !options.allowUntrustedIframe\n        ) {\n          this.logService.info(\"Auto-fill on page load was blocked due to an untrusted iframe.\");\n          return;\n        }\n\n        // Add a small delay between operations\n        fillScript.properties.delay_between_operations = 20;\n\n        didAutofill = true;\n        if (!options.skipLastUsed) {\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.cipherService.updateLastUsedDate(options.cipher.id);\n        }\n\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        BrowserApi.tabSendMessage(\n          tab,\n          {\n            command: \"fillForm\",\n            fillScript: fillScript,\n            url: tab.url,\n            pageDetailsUrl: pd.details.url,\n          },\n          { frameId: pd.frameId },\n        );\n\n        // Skip getting the TOTP code for clipboard in these cases\n        if (\n          options.cipher.type !== CipherType.Login ||\n          totp !== null ||\n          !options.cipher.login.totp ||\n          (!canAccessPremium && !options.cipher.organizationUseTotp)\n        ) {\n          return;\n        }\n\n        const shouldAutoCopyTotp = await this.getShouldAutoCopyTotp();\n\n        totp = shouldAutoCopyTotp\n          ? await this.totpService.getCode(options.cipher.login.totp)\n          : null;\n      }),\n    );\n\n    if (didAutofill) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.eventCollectionService.collect(EventType.Cipher_ClientAutofilled, options.cipher.id);\n      if (totp !== null) {\n        return totp;\n      } else {\n        return null;\n      }\n    } else {\n      throw new Error(\"Did not auto-fill.\");\n    }\n  }\n\n  /**\n   * Autofill the specified tab with the next login item from the cache\n   * @param {PageDetail[]} pageDetails The data scraped from the page\n   * @param {chrome.tabs.Tab} tab The tab to be autofilled\n   * @param {boolean} fromCommand Whether the autofill is triggered by a keyboard shortcut (`true`) or autofill on page load (`false`)\n   * @returns {Promise<string | null>} The TOTP code of the successfully autofilled login, if any\n   */\n  async doAutoFillOnTab(\n    pageDetails: PageDetail[],\n    tab: chrome.tabs.Tab,\n    fromCommand: boolean,\n  ): Promise<string | null> {\n    let cipher: CipherView;\n    if (fromCommand) {\n      cipher = await this.cipherService.getNextCipherForUrl(tab.url);\n    } else {\n      const lastLaunchedCipher = await this.cipherService.getLastLaunchedForUrl(tab.url, true);\n      if (\n        lastLaunchedCipher &&\n        Date.now().valueOf() - lastLaunchedCipher.localData?.lastLaunched?.valueOf() < 30000\n      ) {\n        cipher = lastLaunchedCipher;\n      } else {\n        cipher = await this.cipherService.getLastUsedForUrl(tab.url, true);\n      }\n    }\n\n    if (cipher == null || (cipher.reprompt === CipherRepromptType.Password && !fromCommand)) {\n      return null;\n    }\n\n    if (await this.isPasswordRepromptRequired(cipher, tab)) {\n      if (fromCommand) {\n        this.cipherService.updateLastUsedIndexForUrl(tab.url);\n      }\n\n      return null;\n    }\n\n    const totpCode = await this.doAutoFill({\n      tab: tab,\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: fromCommand,\n      allowUntrustedIframe: fromCommand,\n      allowTotpAutofill: fromCommand,\n    });\n\n    // Update last used index as autofill has succeeded\n    if (fromCommand) {\n      this.cipherService.updateLastUsedIndexForUrl(tab.url);\n    }\n\n    return totpCode;\n  }\n\n  async isPasswordRepromptRequired(cipher: CipherView, tab: chrome.tabs.Tab): Promise<boolean> {\n    const userHasMasterPasswordAndKeyHash =\n      await this.userVerificationService.hasMasterPasswordAndMasterKeyHash();\n    if (cipher.reprompt === CipherRepromptType.Password && userHasMasterPasswordAndKeyHash) {\n      if (!this.isDebouncingPasswordRepromptPopout()) {\n        await this.openVaultItemPasswordRepromptPopout(tab, {\n          cipherId: cipher.id,\n          action: \"autofill\",\n        });\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Autofill the active tab with the next cipher from the cache\n   * @param {PageDetail[]} pageDetails The data scraped from the page\n   * @param {boolean} fromCommand Whether the autofill is triggered by a keyboard shortcut (`true`) or autofill on page load (`false`)\n   * @returns {Promise<string | null>} The TOTP code of the successfully autofilled login, if any\n   */\n  async doAutoFillActiveTab(\n    pageDetails: PageDetail[],\n    fromCommand: boolean,\n    cipherType?: CipherType,\n  ): Promise<string | null> {\n    if (!pageDetails[0]?.details?.fields?.length) {\n      return null;\n    }\n\n    const tab = await this.getActiveTab();\n\n    if (!tab || !tab.url) {\n      return null;\n    }\n\n    if (!cipherType || cipherType === CipherType.Login) {\n      return await this.doAutoFillOnTab(pageDetails, tab, fromCommand);\n    }\n\n    // Cipher is a non-login type\n    const cipher: CipherView = (\n      (await this.cipherService.getAllDecryptedForUrl(tab.url, [cipherType])) || []\n    ).find(({ type }) => type === cipherType);\n\n    if (!cipher || cipher.reprompt !== CipherRepromptType.None) {\n      return null;\n    }\n\n    return await this.doAutoFill({\n      tab: tab,\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: false,\n      allowUntrustedIframe: fromCommand,\n      allowTotpAutofill: false,\n    });\n  }\n\n  /**\n   * Gets the active tab from the current window.\n   * Throws an error if no tab is found.\n   * @returns {Promise<chrome.tabs.Tab>}\n   * @private\n   */\n  private async getActiveTab(): Promise<chrome.tabs.Tab> {\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (!tab) {\n      throw new Error(\"No tab found.\");\n    }\n\n    return tab;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and cipher.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {GenerateFillScriptOptions} options\n   * @returns {Promise<AutofillScript | null>}\n   * @private\n   */\n  private async generateFillScript(\n    pageDetails: AutofillPageDetails,\n    options: GenerateFillScriptOptions,\n  ): Promise<AutofillScript | null> {\n    if (!pageDetails || !options.cipher) {\n      return null;\n    }\n\n    let fillScript = new AutofillScript();\n    const filledFields: { [id: string]: AutofillField } = {};\n    const fields = options.cipher.fields;\n\n    if (fields && fields.length) {\n      const fieldNames: string[] = [];\n\n      fields.forEach((f) => {\n        if (AutofillService.hasValue(f.name)) {\n          fieldNames.push(f.name.toLowerCase());\n        }\n      });\n\n      pageDetails.fields.forEach((field) => {\n        // eslint-disable-next-line\n        if (filledFields.hasOwnProperty(field.opid)) {\n          return;\n        }\n\n        if (!field.viewable && field.tagName !== \"span\") {\n          return;\n        }\n\n        // Check if the input is an untyped/mistyped search input\n        if (AutofillService.isSearchField(field)) {\n          return;\n        }\n\n        const matchingIndex = this.findMatchingFieldIndex(field, fieldNames);\n        if (matchingIndex > -1) {\n          const matchingField: FieldView = fields[matchingIndex];\n          let val: string;\n          if (matchingField.type === FieldType.Linked) {\n            // Assumption: Linked Field is not being used to autofill a boolean value\n            val = options.cipher.linkedFieldValue(matchingField.linkedId) as string;\n          } else {\n            val = matchingField.value;\n            if (val == null && matchingField.type === FieldType.Boolean) {\n              val = \"false\";\n            }\n          }\n\n          filledFields[field.opid] = field;\n          AutofillService.fillByOpid(fillScript, field, val);\n        }\n      });\n    }\n\n    switch (options.cipher.type) {\n      case CipherType.Login:\n        fillScript = await this.generateLoginFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options,\n        );\n        break;\n      case CipherType.Card:\n        fillScript = this.generateCardFillScript(fillScript, pageDetails, filledFields, options);\n        break;\n      case CipherType.Identity:\n        fillScript = this.generateIdentityFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options,\n        );\n        break;\n      default:\n        return null;\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and login cipher item.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillPageDetails} pageDetails\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {GenerateFillScriptOptions} options\n   * @returns {Promise<AutofillScript | null>}\n   * @private\n   */\n  private async generateLoginFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions,\n  ): Promise<AutofillScript | null> {\n    if (!options.cipher.login) {\n      return null;\n    }\n\n    const passwords: AutofillField[] = [];\n    const usernames: AutofillField[] = [];\n    const totps: AutofillField[] = [];\n    let pf: AutofillField = null;\n    let username: AutofillField = null;\n    let totp: AutofillField = null;\n    const login = options.cipher.login;\n    fillScript.savedUrls =\n      login?.uris?.filter((u) => u.match != UriMatchStrategy.Never).map((u) => u.uri) ?? [];\n\n    fillScript.untrustedIframe = await this.inUntrustedIframe(pageDetails.url, options);\n\n    let passwordFields = AutofillService.loadPasswordFields(\n      pageDetails,\n      false,\n      false,\n      options.onlyEmptyFields,\n      options.fillNewPassword,\n    );\n    if (!passwordFields.length && !options.onlyVisibleFields) {\n      // not able to find any viewable password fields. maybe there are some \"hidden\" ones?\n      passwordFields = AutofillService.loadPasswordFields(\n        pageDetails,\n        true,\n        true,\n        options.onlyEmptyFields,\n        options.fillNewPassword,\n      );\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      passwordFields.forEach((passField) => {\n        pf = passField;\n        passwords.push(pf);\n\n        if (login.username) {\n          username = this.findUsernameField(pageDetails, pf, false, false, false);\n\n          if (!username && !options.onlyVisibleFields) {\n            // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n            username = this.findUsernameField(pageDetails, pf, true, true, false);\n          }\n\n          if (username) {\n            usernames.push(username);\n          }\n        }\n\n        if (options.allowTotpAutofill && login.totp) {\n          totp = this.findTotpField(pageDetails, pf, false, false, false);\n\n          if (!totp && !options.onlyVisibleFields) {\n            // not able to find any viewable totp fields. maybe there are some \"hidden\" ones?\n            totp = this.findTotpField(pageDetails, pf, true, true, false);\n          }\n\n          if (totp) {\n            totps.push(totp);\n          }\n        }\n      });\n    }\n\n    if (passwordFields.length && !passwords.length) {\n      // The page does not have any forms with password fields. Use the first password field on the page and the\n      // input field just before it as the username.\n\n      pf = passwordFields[0];\n      passwords.push(pf);\n\n      if (login.username && pf.elementNumber > 0) {\n        username = this.findUsernameField(pageDetails, pf, false, false, true);\n\n        if (!username && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          username = this.findUsernameField(pageDetails, pf, true, true, true);\n        }\n\n        if (username) {\n          usernames.push(username);\n        }\n      }\n\n      if (options.allowTotpAutofill && login.totp && pf.elementNumber > 0) {\n        totp = this.findTotpField(pageDetails, pf, false, false, true);\n\n        if (!totp && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          totp = this.findTotpField(pageDetails, pf, true, true, true);\n        }\n\n        if (totp) {\n          totps.push(totp);\n        }\n      }\n    }\n\n    if (!passwordFields.length) {\n      // No password fields on this page. Let's try to just fuzzy fill the username.\n      pageDetails.fields.forEach((f) => {\n        if (\n          !options.skipUsernameOnlyFill &&\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\") &&\n          AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.UsernameFieldNames)\n        ) {\n          usernames.push(f);\n        }\n\n        if (\n          options.allowTotpAutofill &&\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"number\") &&\n          (AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.TotpFieldNames) ||\n            f.autoCompleteType === \"one-time-code\")\n        ) {\n          totps.push(f);\n        }\n      });\n    }\n\n    usernames.forEach((u) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(u.opid)) {\n        return;\n      }\n\n      filledFields[u.opid] = u;\n      AutofillService.fillByOpid(fillScript, u, login.username);\n    });\n\n    passwords.forEach((p) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(p.opid)) {\n        return;\n      }\n\n      filledFields[p.opid] = p;\n      AutofillService.fillByOpid(fillScript, p, login.password);\n    });\n\n    if (options.allowTotpAutofill) {\n      await Promise.all(\n        totps.map(async (t) => {\n          if (Object.prototype.hasOwnProperty.call(filledFields, t.opid)) {\n            return;\n          }\n\n          filledFields[t.opid] = t;\n          const totpValue = await this.totpService.getCode(login.totp);\n          AutofillService.fillByOpid(fillScript, t, totpValue);\n        }),\n      );\n    }\n\n    fillScript = AutofillService.setFillScriptForFocus(filledFields, fillScript);\n    return fillScript;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and credit card cipher item.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillPageDetails} pageDetails\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {GenerateFillScriptOptions} options\n   * @returns {AutofillScript|null}\n   * @private\n   */\n  private generateCardFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions,\n  ): AutofillScript | null {\n    if (!options.cipher.card) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.isExcludedFieldType(f, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < CreditCardAutoFillConstants.CardAttributes.length; i++) {\n        const attr = CreditCardAutoFillConstants.CardAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.cardholderName &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardHolderFieldNames,\n            CreditCardAutoFillConstants.CardHolderFieldNameValues,\n          )\n        ) {\n          fillFields.cardholderName = f;\n          break;\n        } else if (\n          !fillFields.number &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardNumberFieldNames,\n            CreditCardAutoFillConstants.CardNumberFieldNameValues,\n          )\n        ) {\n          fillFields.number = f;\n          break;\n        } else if (\n          !fillFields.exp &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardExpiryFieldNames,\n            CreditCardAutoFillConstants.CardExpiryFieldNameValues,\n          )\n        ) {\n          fillFields.exp = f;\n          break;\n        } else if (\n          !fillFields.expMonth &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryMonthFieldNames)\n        ) {\n          fillFields.expMonth = f;\n          break;\n        } else if (\n          !fillFields.expYear &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryYearFieldNames)\n        ) {\n          fillFields.expYear = f;\n          break;\n        } else if (\n          !fillFields.code &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.CVVFieldNames)\n        ) {\n          fillFields.code = f;\n          break;\n        } else if (\n          !fillFields.brand &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.CardBrandFieldNames)\n        ) {\n          fillFields.brand = f;\n          break;\n        }\n      }\n    });\n\n    const card = options.cipher.card;\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"cardholderName\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"number\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"code\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"brand\");\n\n    if (fillFields.expMonth && AutofillService.hasValue(card.expMonth)) {\n      let expMonth: string = card.expMonth;\n\n      if (fillFields.expMonth.selectInfo && fillFields.expMonth.selectInfo.options) {\n        let index: number = null;\n        const siOptions = fillFields.expMonth.selectInfo.options;\n        if (siOptions.length === 12) {\n          index = parseInt(card.expMonth, null) - 1;\n        } else if (siOptions.length === 13) {\n          if (\n            siOptions[0][0] != null &&\n            siOptions[0][0] !== \"\" &&\n            (siOptions[12][0] == null || siOptions[12][0] === \"\")\n          ) {\n            index = parseInt(card.expMonth, null) - 1;\n          } else {\n            index = parseInt(card.expMonth, null);\n          }\n        }\n\n        if (index != null) {\n          const option = siOptions[index];\n          if (option.length > 1) {\n            expMonth = option[1];\n          }\n        }\n      } else if (\n        (this.fieldAttrsContain(fillFields.expMonth, \"mm\") ||\n          fillFields.expMonth.maxLength === 2) &&\n        expMonth.length === 1\n      ) {\n        expMonth = \"0\" + expMonth;\n      }\n\n      filledFields[fillFields.expMonth.opid] = fillFields.expMonth;\n      AutofillService.fillByOpid(fillScript, fillFields.expMonth, expMonth);\n    }\n\n    if (fillFields.expYear && AutofillService.hasValue(card.expYear)) {\n      let expYear: string = card.expYear;\n      if (fillFields.expYear.selectInfo && fillFields.expYear.selectInfo.options) {\n        for (let i = 0; i < fillFields.expYear.selectInfo.options.length; i++) {\n          const o: [string, string] = fillFields.expYear.selectInfo.options[i];\n          if (o[0] === card.expYear || o[1] === card.expYear) {\n            expYear = o[1];\n            break;\n          }\n          if (\n            o[1].length === 2 &&\n            card.expYear.length === 4 &&\n            o[1] === card.expYear.substring(2)\n          ) {\n            expYear = o[1];\n            break;\n          }\n          const colonIndex = o[1].indexOf(\":\");\n          if (colonIndex > -1 && o[1].length > colonIndex + 1) {\n            const val = o[1].substring(colonIndex + 2);\n            if (val != null && val.trim() !== \"\" && val === card.expYear) {\n              expYear = o[1];\n              break;\n            }\n          }\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yyyy\") ||\n        fillFields.expYear.maxLength === 4\n      ) {\n        if (expYear.length === 2) {\n          expYear = \"20\" + expYear;\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yy\") ||\n        fillFields.expYear.maxLength === 2\n      ) {\n        if (expYear.length === 4) {\n          expYear = expYear.substr(2);\n        }\n      }\n\n      filledFields[fillFields.expYear.opid] = fillFields.expYear;\n      AutofillService.fillByOpid(fillScript, fillFields.expYear, expYear);\n    }\n\n    if (\n      fillFields.exp &&\n      AutofillService.hasValue(card.expMonth) &&\n      AutofillService.hasValue(card.expYear)\n    ) {\n      const fullMonth = (\"0\" + card.expMonth).slice(-2);\n\n      let fullYear: string = card.expYear;\n      let partYear: string = null;\n      if (fullYear.length === 2) {\n        partYear = fullYear;\n        fullYear = \"20\" + fullYear;\n      } else if (fullYear.length === 4) {\n        partYear = fullYear.substr(2, 2);\n      }\n\n      let exp: string = null;\n      for (let i = 0; i < CreditCardAutoFillConstants.MonthAbbr.length; i++) {\n        if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i],\n          )\n        ) {\n          exp = fullMonth + \"/\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i],\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"/\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i],\n          )\n        ) {\n          exp = fullYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"/\" +\n              CreditCardAutoFillConstants.MonthAbbr[i],\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"/\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrLong[i],\n          )\n        ) {\n          exp = fullMonth + \"-\" + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.YearAbbrShort[i],\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + \"-\" + partYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i],\n          )\n        ) {\n          exp = fullYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] +\n              \"-\" +\n              CreditCardAutoFillConstants.MonthAbbr[i],\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + \"-\" + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrLong[i] + CreditCardAutoFillConstants.MonthAbbr[i],\n          )\n        ) {\n          exp = fullYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.YearAbbrShort[i] + CreditCardAutoFillConstants.MonthAbbr[i],\n          ) &&\n          partYear != null\n        ) {\n          exp = partYear + fullMonth;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrLong[i],\n          )\n        ) {\n          exp = fullMonth + fullYear;\n        } else if (\n          this.fieldAttrsContain(\n            fillFields.exp,\n            CreditCardAutoFillConstants.MonthAbbr[i] + CreditCardAutoFillConstants.YearAbbrShort[i],\n          ) &&\n          partYear != null\n        ) {\n          exp = fullMonth + partYear;\n        }\n\n        if (exp != null) {\n          break;\n        }\n      }\n\n      if (exp == null) {\n        exp = fullYear + \"-\" + fullMonth;\n      }\n\n      this.makeScriptActionWithValue(fillScript, exp, fillFields.exp, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Determines whether an iframe is potentially dangerous (\"untrusted\") to autofill\n   * @param {string} pageUrl The url of the page/iframe, usually from AutofillPageDetails\n   * @param {GenerateFillScriptOptions} options The GenerateFillScript options\n   * @returns {boolean} `true` if the iframe is untrusted and a warning should be shown, `false` otherwise\n   * @private\n   */\n  private async inUntrustedIframe(\n    pageUrl: string,\n    options: GenerateFillScriptOptions,\n  ): Promise<boolean> {\n    // If the pageUrl (from the content script) matches the tabUrl (from the sender tab), we are not in an iframe\n    // This also avoids a false positive if no URI is saved and the user triggers auto-fill anyway\n    if (pageUrl === options.tabUrl) {\n      return false;\n    }\n\n    // Check the pageUrl against cipher URIs using the configured match detection.\n    // Remember: if we are in this function, the tabUrl already matches a saved URI for the login.\n    // We need to verify the pageUrl also matches.\n    const equivalentDomains = await firstValueFrom(\n      this.domainSettingsService.getUrlEquivalentDomains(pageUrl),\n    );\n    const matchesUri = options.cipher.login.matchesUri(\n      pageUrl,\n      equivalentDomains,\n      options.defaultUriMatch,\n    );\n    return !matchesUri;\n  }\n\n  /**\n   * Used when handling autofill on credit card fields. Determines whether\n   * the field has an attribute that matches the given value.\n   * @param {AutofillField} field\n   * @param {string} containsVal\n   * @returns {boolean}\n   * @private\n   */\n  private fieldAttrsContain(field: AutofillField, containsVal: string): boolean {\n    if (!field) {\n      return false;\n    }\n\n    let doesContain = false;\n    CreditCardAutoFillConstants.CardAttributesExtended.forEach((attr) => {\n      // eslint-disable-next-line\n      if (doesContain || !field.hasOwnProperty(attr) || !field[attr]) {\n        return;\n      }\n\n      let val = field[attr];\n      val = val.replace(/ /g, \"\").toLowerCase();\n      doesContain = val.indexOf(containsVal) > -1;\n    });\n\n    return doesContain;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and identify cipher item.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillPageDetails} pageDetails\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {GenerateFillScriptOptions} options\n   * @returns {AutofillScript}\n   * @private\n   */\n  private generateIdentityFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions,\n  ): AutofillScript {\n    if (!options.cipher.identity) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.isExcludedFieldType(f, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < IdentityAutoFillConstants.IdentityAttributes.length; i++) {\n        const attr = IdentityAutoFillConstants.IdentityAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.name &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.FullNameFieldNames,\n            IdentityAutoFillConstants.FullNameFieldNameValues,\n          )\n        ) {\n          fillFields.name = f;\n          break;\n        } else if (\n          !fillFields.firstName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.FirstnameFieldNames)\n        ) {\n          fillFields.firstName = f;\n          break;\n        } else if (\n          !fillFields.middleName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.MiddlenameFieldNames)\n        ) {\n          fillFields.middleName = f;\n          break;\n        } else if (\n          !fillFields.lastName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.LastnameFieldNames)\n        ) {\n          fillFields.lastName = f;\n          break;\n        } else if (\n          !fillFields.title &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.TitleFieldNames)\n        ) {\n          fillFields.title = f;\n          break;\n        } else if (\n          !fillFields.email &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.EmailFieldNames)\n        ) {\n          fillFields.email = f;\n          break;\n        } else if (\n          !fillFields.address &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.AddressFieldNames,\n            IdentityAutoFillConstants.AddressFieldNameValues,\n          )\n        ) {\n          fillFields.address = f;\n          break;\n        } else if (\n          !fillFields.address1 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address1FieldNames)\n        ) {\n          fillFields.address1 = f;\n          break;\n        } else if (\n          !fillFields.address2 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address2FieldNames)\n        ) {\n          fillFields.address2 = f;\n          break;\n        } else if (\n          !fillFields.address3 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address3FieldNames)\n        ) {\n          fillFields.address3 = f;\n          break;\n        } else if (\n          !fillFields.postalCode &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.PostalCodeFieldNames)\n        ) {\n          fillFields.postalCode = f;\n          break;\n        } else if (\n          !fillFields.city &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CityFieldNames)\n        ) {\n          fillFields.city = f;\n          break;\n        } else if (\n          !fillFields.state &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.StateFieldNames)\n        ) {\n          fillFields.state = f;\n          break;\n        } else if (\n          !fillFields.country &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CountryFieldNames)\n        ) {\n          fillFields.country = f;\n          break;\n        } else if (\n          !fillFields.phone &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.PhoneFieldNames)\n        ) {\n          fillFields.phone = f;\n          break;\n        } else if (\n          !fillFields.username &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.UserNameFieldNames)\n        ) {\n          fillFields.username = f;\n          break;\n        } else if (\n          !fillFields.company &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CompanyFieldNames)\n        ) {\n          fillFields.company = f;\n          break;\n        }\n      }\n    });\n\n    const identity = options.cipher.identity;\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"title\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"firstName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"middleName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"lastName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address1\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address2\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address3\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"city\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"postalCode\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"company\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"email\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"phone\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"username\");\n\n    let filledState = false;\n    if (fillFields.state && identity.state && identity.state.length > 2) {\n      const stateLower = identity.state.toLowerCase();\n      const isoState =\n        IdentityAutoFillConstants.IsoStates[stateLower] ||\n        IdentityAutoFillConstants.IsoProvinces[stateLower];\n      if (isoState) {\n        filledState = true;\n        this.makeScriptActionWithValue(fillScript, isoState, fillFields.state, filledFields);\n      }\n    }\n\n    if (!filledState) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"state\");\n    }\n\n    let filledCountry = false;\n    if (fillFields.country && identity.country && identity.country.length > 2) {\n      const countryLower = identity.country.toLowerCase();\n      const isoCountry = IdentityAutoFillConstants.IsoCountries[countryLower];\n      if (isoCountry) {\n        filledCountry = true;\n        this.makeScriptActionWithValue(fillScript, isoCountry, fillFields.country, filledFields);\n      }\n    }\n\n    if (!filledCountry) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"country\");\n    }\n\n    if (fillFields.name && (identity.firstName || identity.lastName)) {\n      let fullName = \"\";\n      if (AutofillService.hasValue(identity.firstName)) {\n        fullName = identity.firstName;\n      }\n      if (AutofillService.hasValue(identity.middleName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.middleName;\n      }\n      if (AutofillService.hasValue(identity.lastName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.lastName;\n      }\n\n      this.makeScriptActionWithValue(fillScript, fullName, fillFields.name, filledFields);\n    }\n\n    if (fillFields.address && AutofillService.hasValue(identity.address1)) {\n      let address = \"\";\n      if (AutofillService.hasValue(identity.address1)) {\n        address = identity.address1;\n      }\n      if (AutofillService.hasValue(identity.address2)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address2;\n      }\n      if (AutofillService.hasValue(identity.address3)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address3;\n      }\n\n      this.makeScriptActionWithValue(fillScript, address, fillFields.address, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Accepts an HTMLInputElement type value and a list of\n   * excluded types and returns true if the type is excluded.\n   * @param {string} type\n   * @param {string[]} excludedTypes\n   * @returns {boolean}\n   * @private\n   */\n  private static isExcludedType(type: string, excludedTypes: string[]) {\n    return excludedTypes.indexOf(type) > -1;\n  }\n\n  /**\n   * Identifies if a passed field contains text artifacts that identify it as a search field.\n   *\n   * @param field - The autofill field that we are validating as a search field\n   */\n  private static isSearchField(field: AutofillField) {\n    const matchFieldAttributeValues = [field.type, field.htmlName, field.htmlID, field.placeholder];\n    for (let attrIndex = 0; attrIndex < matchFieldAttributeValues.length; attrIndex++) {\n      if (!matchFieldAttributeValues[attrIndex]) {\n        continue;\n      }\n\n      // Separate camel case words and case them to lower case values\n      const camelCaseSeparatedFieldAttribute = matchFieldAttributeValues[attrIndex]\n        .replace(/([a-z])([A-Z])/g, \"$1 $2\")\n        .toLowerCase();\n      // Split the attribute by non-alphabetical characters to get the keywords\n      const attributeKeywords = camelCaseSeparatedFieldAttribute.split(/[^a-z]/gi);\n\n      for (let keywordIndex = 0; keywordIndex < attributeKeywords.length; keywordIndex++) {\n        if (AutofillService.searchFieldNamesSet.has(attributeKeywords[keywordIndex])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  static isExcludedFieldType(field: AutofillField, excludedTypes: string[]) {\n    if (AutofillService.forCustomFieldsOnly(field)) {\n      return true;\n    }\n\n    if (this.isExcludedType(field.type, excludedTypes)) {\n      return true;\n    }\n\n    // Check if the input is an untyped/mistyped search input\n    return this.isSearchField(field);\n  }\n\n  /**\n   * Accepts the value of a field, a list of possible options that define if\n   * a field can be matched to a vault cipher, and a secondary optional list\n   * of options that define if a field can be matched to a vault cipher. Returns\n   * true if the field value matches one of the options.\n   * @param {string} value\n   * @param {string[]} options\n   * @param {string[]} containsOptions\n   * @returns {boolean}\n   * @private\n   */\n  private static isFieldMatch(\n    value: string,\n    options: string[],\n    containsOptions?: string[],\n  ): boolean {\n    value = value\n      .trim()\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+/g, \"\");\n    for (let i = 0; i < options.length; i++) {\n      let option = options[i];\n      const checkValueContains = containsOptions == null || containsOptions.indexOf(option) > -1;\n      option = option.toLowerCase().replace(/-/g, \"\");\n      if (value === option || (checkValueContains && value.indexOf(option) > -1)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Helper method used to create a script action for a field. Conditionally\n   * accepts a fieldProp value that will be used in place of the dataProp value.\n   * @param {AutofillScript} fillScript\n   * @param cipherData\n   * @param {{[p: string]: AutofillField}} fillFields\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {string} dataProp\n   * @param {string} fieldProp\n   * @private\n   */\n  private makeScriptAction(\n    fillScript: AutofillScript,\n    cipherData: any,\n    fillFields: { [id: string]: AutofillField },\n    filledFields: { [id: string]: AutofillField },\n    dataProp: string,\n    fieldProp?: string,\n  ) {\n    fieldProp = fieldProp || dataProp;\n    this.makeScriptActionWithValue(\n      fillScript,\n      cipherData[dataProp],\n      fillFields[fieldProp],\n      filledFields,\n    );\n  }\n\n  /**\n   * Handles updating the list of filled fields and adding a script action\n   * to the fill script. If a select field is passed as part of the fill options,\n   * we iterate over the options to check if the passed value matches one of the\n   * options. If it does, we add a script action to select the option.\n   * @param {AutofillScript} fillScript\n   * @param dataValue\n   * @param {AutofillField} field\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @private\n   */\n  private makeScriptActionWithValue(\n    fillScript: AutofillScript,\n    dataValue: any,\n    field: AutofillField,\n    filledFields: { [id: string]: AutofillField },\n  ) {\n    let doFill = false;\n    if (AutofillService.hasValue(dataValue) && field) {\n      if (field.type === \"select-one\" && field.selectInfo && field.selectInfo.options) {\n        for (let i = 0; i < field.selectInfo.options.length; i++) {\n          const option = field.selectInfo.options[i];\n          for (let j = 0; j < option.length; j++) {\n            if (\n              AutofillService.hasValue(option[j]) &&\n              option[j].toLowerCase() === dataValue.toLowerCase()\n            ) {\n              doFill = true;\n              if (option.length > 1) {\n                dataValue = option[1];\n              }\n              break;\n            }\n          }\n\n          if (doFill) {\n            break;\n          }\n        }\n      } else {\n        doFill = true;\n      }\n    }\n\n    if (doFill) {\n      filledFields[field.opid] = field;\n      AutofillService.fillByOpid(fillScript, field, dataValue);\n    }\n  }\n\n  static valueIsLikePassword(value: string) {\n    if (value == null) {\n      return false;\n    }\n    // Removes all whitespace, _ and - characters\n    const cleanedValue = value.toLowerCase().replace(/[\\s_-]/g, \"\");\n\n    if (cleanedValue.indexOf(\"password\") < 0) {\n      return false;\n    }\n\n    return !AutoFillConstants.PasswordFieldExcludeList.some((i) => cleanedValue.indexOf(i) > -1);\n  }\n\n  static fieldHasDisqualifyingAttributeValue(field: AutofillField) {\n    const checkedAttributeValues = [field.htmlID, field.htmlName, field.placeholder];\n    let valueIsOnExclusionList = false;\n\n    for (let i = 0; i < checkedAttributeValues.length; i++) {\n      const checkedAttributeValue = checkedAttributeValues[i];\n      const cleanedValue = checkedAttributeValue?.toLowerCase().replace(/[\\s_-]/g, \"\");\n\n      valueIsOnExclusionList = Boolean(\n        cleanedValue && AutoFillConstants.FieldIgnoreList.some((i) => cleanedValue.indexOf(i) > -1),\n      );\n\n      if (valueIsOnExclusionList) {\n        break;\n      }\n    }\n\n    return valueIsOnExclusionList;\n  }\n\n  /**\n   * Accepts a pageDetails object with a list of fields and returns a list of\n   * fields that are likely to be password fields.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {boolean} canBeHidden\n   * @param {boolean} canBeReadOnly\n   * @param {boolean} mustBeEmpty\n   * @param {boolean} fillNewPassword\n   * @returns {AutofillField[]}\n   */\n  static loadPasswordFields(\n    pageDetails: AutofillPageDetails,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    mustBeEmpty: boolean,\n    fillNewPassword: boolean,\n  ) {\n    const arr: AutofillField[] = [];\n\n    pageDetails.fields.forEach((f) => {\n      const isPassword = f.type === \"password\";\n      if (\n        !isPassword &&\n        AutofillService.isExcludedFieldType(f, AutoFillConstants.ExcludedAutofillLoginTypes)\n      ) {\n        return;\n      }\n\n      // If any attribute values match disqualifying values, the entire field should not be used\n      if (AutofillService.fieldHasDisqualifyingAttributeValue(f)) {\n        return;\n      }\n\n      const isLikePassword = () => {\n        if (f.type !== \"text\") {\n          return false;\n        }\n\n        const testedValues = [f.htmlID, f.htmlName, f.placeholder];\n        for (let i = 0; i < testedValues.length; i++) {\n          if (AutofillService.valueIsLikePassword(testedValues[i])) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (isPassword || isLikePassword()) &&\n        (canBeHidden || f.viewable) &&\n        (!mustBeEmpty || f.value == null || f.value.trim() === \"\") &&\n        (fillNewPassword || f.autoCompleteType !== \"new-password\")\n      ) {\n        arr.push(f);\n      }\n    });\n\n    return arr;\n  }\n\n  /**\n   * Accepts a pageDetails object with a list of fields and returns a list of\n   * fields that are likely to be username fields.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {AutofillField} passwordField\n   * @param {boolean} canBeHidden\n   * @param {boolean} canBeReadOnly\n   * @param {boolean} withoutForm\n   * @returns {AutofillField}\n   * @private\n   */\n  private findUsernameField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean,\n  ): AutofillField | null {\n    let usernameField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      if (f.elementNumber >= passwordField.elementNumber) {\n        break;\n      }\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\")\n      ) {\n        usernameField = f;\n\n        if (this.findMatchingFieldIndex(f, AutoFillConstants.UsernameFieldNames) > -1) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return usernameField;\n  }\n\n  /**\n   * Accepts a pageDetails object with a list of fields and returns a list of\n   * fields that are likely to be TOTP fields.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {AutofillField} passwordField\n   * @param {boolean} canBeHidden\n   * @param {boolean} canBeReadOnly\n   * @param {boolean} withoutForm\n   * @returns {AutofillField}\n   * @private\n   */\n  private findTotpField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean,\n  ): AutofillField | null {\n    let totpField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      const fieldIsDisqualified = AutofillService.fieldHasDisqualifyingAttributeValue(f);\n\n      if (\n        !fieldIsDisqualified &&\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"number\") &&\n        AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.TotpFieldNames)\n      ) {\n        totpField = f;\n\n        if (\n          this.findMatchingFieldIndex(f, AutoFillConstants.TotpFieldNames) > -1 ||\n          f.autoCompleteType === \"one-time-code\"\n        ) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return totpField;\n  }\n\n  /**\n   * Accepts a field and returns the index of the first matching property\n   * present in a list of attribute names.\n   * @param {AutofillField} field\n   * @param {string[]} names\n   * @returns {number}\n   * @private\n   */\n  private findMatchingFieldIndex(field: AutofillField, names: string[]): number {\n    for (let i = 0; i < names.length; i++) {\n      if (names[i].indexOf(\"=\") > -1) {\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlID\", names[i], \"id\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlName\", names[i], \"name\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-left\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-right\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-tag\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-aria\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"placeholder\", names[i], \"placeholder\")) {\n          return i;\n        }\n      }\n\n      if (this.fieldPropertyIsMatch(field, \"htmlID\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"htmlName\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-left\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-right\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-tag\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-aria\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"placeholder\", names[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Accepts a field, property, name, and prefix and returns true if the field\n   * contains a value that matches the given prefixed property.\n   * @param field\n   * @param {string} property\n   * @param {string} name\n   * @param {string} prefix\n   * @param {string} separator\n   * @returns {boolean}\n   * @private\n   */\n  private fieldPropertyIsPrefixMatch(\n    field: any,\n    property: string,\n    name: string,\n    prefix: string,\n    separator = \"=\",\n  ): boolean {\n    if (name.indexOf(prefix + separator) === 0) {\n      const sepIndex = name.indexOf(separator);\n      const val = name.substring(sepIndex + 1);\n      return val != null && this.fieldPropertyIsMatch(field, property, val);\n    }\n    return false;\n  }\n\n  /**\n   * Identifies if a given property within a field matches the value\n   * of the passed \"name\" parameter. If the name starts with \"regex=\",\n   * the value is tested against a case-insensitive regular expression.\n   * If the name starts with \"csv=\", the value is treated as a\n   * comma-separated list of values to match.\n   * @param field\n   * @param {string} property\n   * @param {string} name\n   * @returns {boolean}\n   * @private\n   */\n  private fieldPropertyIsMatch(field: any, property: string, name: string): boolean {\n    let fieldVal = field[property] as string;\n    if (!AutofillService.hasValue(fieldVal)) {\n      return false;\n    }\n\n    fieldVal = fieldVal.trim().replace(/(?:\\r\\n|\\r|\\n)/g, \"\");\n    if (name.startsWith(\"regex=\")) {\n      try {\n        const regexParts = name.split(\"=\", 2);\n        if (regexParts.length === 2) {\n          const regex = new RegExp(regexParts[1], \"i\");\n          return regex.test(fieldVal);\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else if (name.startsWith(\"csv=\")) {\n      const csvParts = name.split(\"=\", 2);\n      if (csvParts.length === 2) {\n        const csvVals = csvParts[1].split(\",\");\n        for (let i = 0; i < csvVals.length; i++) {\n          const val = csvVals[i];\n          if (val != null && val.trim().toLowerCase() === fieldVal.toLowerCase()) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    return fieldVal.toLowerCase() === name;\n  }\n\n  /**\n   * Accepts a field and returns true if the field contains a\n   * value that matches any of the names in the provided list.\n   * @param {AutofillField} field\n   * @param {string[]} names\n   * @returns {boolean}\n   */\n  static fieldIsFuzzyMatch(field: AutofillField, names: string[]): boolean {\n    if (AutofillService.hasValue(field.htmlID) && this.fuzzyMatch(names, field.htmlID)) {\n      return true;\n    }\n    if (AutofillService.hasValue(field.htmlName) && this.fuzzyMatch(names, field.htmlName)) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-tag\"]) &&\n      this.fuzzyMatch(names, field[\"label-tag\"])\n    ) {\n      return true;\n    }\n    if (AutofillService.hasValue(field.placeholder) && this.fuzzyMatch(names, field.placeholder)) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-left\"]) &&\n      this.fuzzyMatch(names, field[\"label-left\"])\n    ) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-top\"]) &&\n      this.fuzzyMatch(names, field[\"label-top\"])\n    ) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-aria\"]) &&\n      this.fuzzyMatch(names, field[\"label-aria\"])\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Accepts a list of options and a value and returns\n   * true if the value matches any of the options.\n   * @param {string[]} options\n   * @param {string} value\n   * @returns {boolean}\n   * @private\n   */\n  private static fuzzyMatch(options: string[], value: string): boolean {\n    if (options == null || options.length === 0 || value == null || value === \"\") {\n      return false;\n    }\n\n    value = value\n      .replace(/(?:\\r\\n|\\r|\\n)/g, \"\")\n      .trim()\n      .toLowerCase();\n\n    for (let i = 0; i < options.length; i++) {\n      if (value.indexOf(options[i]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Accepts a string and returns true if the\n   * string is not falsy and not empty.\n   * @param {string} str\n   * @returns {boolean}\n   */\n  static hasValue(str: string): boolean {\n    return Boolean(str && str !== \"\");\n  }\n\n  /**\n   * Sets the `focus_by_opid` autofill script\n   * action to the last field that was filled.\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {AutofillScript} fillScript\n   * @returns {AutofillScript}\n   */\n  static setFillScriptForFocus(\n    filledFields: { [id: string]: AutofillField },\n    fillScript: AutofillScript,\n  ): AutofillScript {\n    let lastField: AutofillField = null;\n    let lastPasswordField: AutofillField = null;\n\n    for (const opid in filledFields) {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(opid) && filledFields[opid].viewable) {\n        lastField = filledFields[opid];\n\n        if (filledFields[opid].type === \"password\") {\n          lastPasswordField = filledFields[opid];\n        }\n      }\n    }\n\n    // Prioritize password field over others.\n    if (lastPasswordField) {\n      fillScript.script.push([\"focus_by_opid\", lastPasswordField.opid]);\n    } else if (lastField) {\n      fillScript.script.push([\"focus_by_opid\", lastField.opid]);\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Updates a fill script to place the `cilck_on_opid`, `focus_on_opid`, and `fill_by_opid`\n   * fill script actions associated with the provided field.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillField} field\n   * @param {string} value\n   */\n  static fillByOpid(fillScript: AutofillScript, field: AutofillField, value: string): void {\n    if (field.maxLength && value && value.length > field.maxLength) {\n      value = value.substr(0, value.length);\n    }\n    if (field.tagName !== \"span\") {\n      fillScript.script.push([\"click_on_opid\", field.opid]);\n      fillScript.script.push([\"focus_by_opid\", field.opid]);\n    }\n    fillScript.script.push([\"fill_by_opid\", field.opid, value]);\n  }\n\n  /**\n   * Identifies if the field is a custom field, a custom\n   * field is defined as a field that is a `span` element.\n   * @param {AutofillField} field\n   * @returns {boolean}\n   */\n  static forCustomFieldsOnly(field: AutofillField): boolean {\n    return field.tagName === \"span\";\n  }\n\n  /**\n   * Handles debouncing the opening of the master password reprompt popout.\n   */\n  private isDebouncingPasswordRepromptPopout() {\n    if (this.currentlyOpeningPasswordRepromptPopout) {\n      return true;\n    }\n\n    this.currentlyOpeningPasswordRepromptPopout = true;\n    clearTimeout(this.openPasswordRepromptPopoutDebounce);\n\n    this.openPasswordRepromptPopoutDebounce = setTimeout(() => {\n      this.currentlyOpeningPasswordRepromptPopout = false;\n    }, 100);\n\n    return false;\n  }\n\n  /**\n   * Handles incoming long-lived connections from injected autofill scripts.\n   * Stores the port in a set to facilitate disconnecting ports if the extension\n   * needs to re-inject the autofill scripts.\n   *\n   * @param port - The port that was connected\n   */\n  private handleInjectedScriptPortConnection = (port: chrome.runtime.Port) => {\n    if (port.name !== AutofillPort.InjectedScript) {\n      return;\n    }\n\n    this.autofillScriptPortsSet.add(port);\n    port.onDisconnect.addListener(this.handleInjectScriptPortOnDisconnect);\n  };\n\n  /**\n   * Handles disconnecting ports that relate to injected autofill scripts.\n\n   * @param port - The port that was disconnected\n   */\n  private handleInjectScriptPortOnDisconnect = (port: chrome.runtime.Port) => {\n    if (port.name !== AutofillPort.InjectedScript) {\n      return;\n    }\n\n    this.autofillScriptPortsSet.delete(port);\n  };\n\n  /**\n   * Queries all open tabs in the user's browsing session\n   * and injects the autofill scripts into the page.\n   */\n  private async injectAutofillScriptsInAllTabs() {\n    const tabs = await BrowserApi.tabsQuery({});\n    for (let index = 0; index < tabs.length; index++) {\n      const tab = tabs[index];\n      if (tab.url?.startsWith(\"http\")) {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.injectAutofillScripts(tab, 0, false);\n      }\n    }\n  }\n}\n","import {\n  UserVerificationServiceInitOptions,\n  userVerificationServiceFactory,\n} from \"../../../auth/background/service-factories/user-verification-service.factory\";\nimport {\n  EventCollectionServiceInitOptions,\n  eventCollectionServiceFactory,\n} from \"../../../background/service-factories/event-collection-service.factory\";\nimport { billingAccountProfileStateServiceFactory } from \"../../../platform/background/service-factories/billing-account-profile-state-service.factory\";\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  logServiceFactory,\n  LogServiceInitOptions,\n} from \"../../../platform/background/service-factories/log-service.factory\";\nimport {\n  stateServiceFactory,\n  StateServiceInitOptions,\n} from \"../../../platform/background/service-factories/state-service.factory\";\nimport {\n  cipherServiceFactory,\n  CipherServiceInitOptions,\n} from \"../../../vault/background/service_factories/cipher-service.factory\";\nimport {\n  TotpServiceInitOptions,\n  totpServiceFactory,\n} from \"../../../vault/background/service_factories/totp-service.factory\";\nimport { AutofillService as AbstractAutoFillService } from \"../../services/abstractions/autofill.service\";\nimport AutofillService from \"../../services/autofill.service\";\n\nimport {\n  AutofillSettingsServiceInitOptions,\n  autofillSettingsServiceFactory,\n} from \"./autofill-settings-service.factory\";\nimport {\n  DomainSettingsServiceInitOptions,\n  domainSettingsServiceFactory,\n} from \"./domain-settings-service.factory\";\n\ntype AutoFillServiceOptions = FactoryOptions;\n\nexport type AutoFillServiceInitOptions = AutoFillServiceOptions &\n  CipherServiceInitOptions &\n  StateServiceInitOptions &\n  AutofillSettingsServiceInitOptions &\n  TotpServiceInitOptions &\n  EventCollectionServiceInitOptions &\n  LogServiceInitOptions &\n  UserVerificationServiceInitOptions &\n  DomainSettingsServiceInitOptions;\n\nexport function autofillServiceFactory(\n  cache: { autofillService?: AbstractAutoFillService } & CachedServices,\n  opts: AutoFillServiceInitOptions,\n): Promise<AbstractAutoFillService> {\n  return factory(\n    cache,\n    \"autofillService\",\n    opts,\n    async () =>\n      new AutofillService(\n        await cipherServiceFactory(cache, opts),\n        await stateServiceFactory(cache, opts),\n        await autofillSettingsServiceFactory(cache, opts),\n        await totpServiceFactory(cache, opts),\n        await eventCollectionServiceFactory(cache, opts),\n        await logServiceFactory(cache, opts),\n        await domainSettingsServiceFactory(cache, opts),\n        await userVerificationServiceFactory(cache, opts),\n        await billingAccountProfileStateServiceFactory(cache, opts),\n      ),\n  );\n}\n","import { BrowserApi } from \"../../platform/browser/browser-api\";\n\nexport const clearClipboardAlarmName = \"clearClipboard\";\n\nexport class ClearClipboard {\n  /**\n    We currently rely on an active tab with an injected content script (`../content/misc-utils.ts`) to clear the clipboard via `window.navigator.clipboard.writeText(text)`\n    \n    With https://bugs.chromium.org/p/chromium/issues/detail?id=1160302 it was said that service workers,\n    would have access to the clipboard api and then we could migrate to a simpler solution\n    */\n  static async run() {\n    const activeTabs = await BrowserApi.getActiveTabs();\n    if (!activeTabs || activeTabs.length === 0) {\n      return;\n    }\n\n    BrowserApi.sendTabsMessage(activeTabs[0].id, {\n      command: \"clearClipboard\",\n    });\n  }\n}\n","import { BrowserApi } from \"../../platform/browser/browser-api\";\n\n/**\n * Copies text to the clipboard in a MV3 safe way.\n * @param tab - The tab that the text will be sent to so that it can be copied to the users clipboard this needs to be an active tab or the DOM won't be able to be used to do the action. The tab sent in here should be from a user started action or queried for active tabs.\n * @param text - The text that you want added to the users clipboard.\n */\nexport const copyToClipboard = async (tab: chrome.tabs.Tab, text: string) => {\n  if (tab.id == null) {\n    throw new Error(\"Cannot copy text to clipboard with a tab that does not have an id.\");\n  }\n\n  BrowserApi.sendTabsMessage(tab.id, {\n    command: \"copyText\",\n    text: text,\n  });\n};\n","import { clearClipboardAlarmName } from \"../../autofill/clipboard\";\nimport { BrowserApi } from \"../browser/browser-api\";\n\nexport const alarmKeys = [clearClipboardAlarmName] as const;\nexport type AlarmKeys = (typeof alarmKeys)[number];\n\ntype AlarmState = { [T in AlarmKeys]: number | undefined };\n\nconst alarmState: AlarmState = {\n  clearClipboard: null,\n  //TODO once implemented vaultTimeout: null;\n  //TODO once implemented checkNotifications: null;\n  //TODO once implemented (if necessary) processReload: null;\n};\n\n/**\n * Retrieves the set alarm time (planned execution) for a give an commandName {@link AlarmState}\n * @param commandName A command that has been previously registered with {@link AlarmState}\n * @returns {Promise<number>} null or Unix epoch timestamp when the alarm action is supposed to execute\n * @example\n * // getAlarmTime(clearClipboard)\n */\nexport async function getAlarmTime(commandName: AlarmKeys): Promise<number> {\n  let alarmTime: number;\n  if (BrowserApi.isManifestVersion(3)) {\n    const fromSessionStore = await chrome.storage.session.get(commandName);\n    alarmTime = fromSessionStore[commandName];\n  } else {\n    alarmTime = alarmState[commandName];\n  }\n\n  return alarmTime;\n}\n\n/**\n * Registers an action that should execute after the given time has passed\n * @param commandName A command that has been previously registered with {@link AlarmState}\n * @param delay_ms The number of ms from now in which the command should execute from\n * @example\n * // setAlarmTime(clearClipboard, 5000) register the clearClipboard action which will execute when at least 5 seconds from now have passed\n */\nexport async function setAlarmTime(commandName: AlarmKeys, delay_ms: number): Promise<void> {\n  if (!delay_ms || delay_ms === 0) {\n    await this.clearAlarmTime(commandName);\n    return;\n  }\n\n  const time = Date.now() + delay_ms;\n  await setAlarmTimeInternal(commandName, time);\n}\n\n/**\n * Clears the time currently set for a given command\n * @param commandName A command that has been previously registered with {@link AlarmState}\n */\nexport async function clearAlarmTime(commandName: AlarmKeys): Promise<void> {\n  await setAlarmTimeInternal(commandName, null);\n}\n\nasync function setAlarmTimeInternal(commandName: AlarmKeys, time: number): Promise<void> {\n  if (BrowserApi.isManifestVersion(3)) {\n    await chrome.storage.session.set({ [commandName]: time });\n  } else {\n    alarmState[commandName] = time;\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AutofillSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport { PasswordGenerationServiceAbstraction } from \"@bitwarden/common/tools/generator/password\";\n\nimport { setAlarmTime } from \"../../platform/alarms/alarm-state\";\n\nimport { clearClipboardAlarmName } from \"./clear-clipboard\";\nimport { copyToClipboard } from \"./copy-to-clipboard-command\";\n\nexport class GeneratePasswordToClipboardCommand {\n  constructor(\n    private passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n  ) {}\n\n  async getClearClipboard() {\n    return await firstValueFrom(this.autofillSettingsService.clearClipboardDelay$);\n  }\n\n  async generatePasswordToClipboard(tab: chrome.tabs.Tab) {\n    const [options] = await this.passwordGenerationService.getOptions();\n    const password = await this.passwordGenerationService.generatePassword(options);\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    copyToClipboard(tab, password);\n\n    const clearClipboard = await this.getClearClipboard();\n\n    if (clearClipboard != null) {\n      await setAlarmTime(clearClipboardAlarmName, clearClipboard * 1000);\n    }\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport AutofillPageDetails from \"../models/autofill-page-details\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\n\nexport class AutofillTabCommand {\n  constructor(private autofillService: AutofillService) {}\n\n  async doAutofillTabCommand(tab: chrome.tabs.Tab) {\n    if (!tab.id) {\n      throw new Error(\"Tab does not have an id, cannot complete autofill.\");\n    }\n\n    const details = await this.collectPageDetails(tab.id);\n    await this.autofillService.doAutoFillOnTab(\n      [\n        {\n          frameId: 0,\n          tab: tab,\n          details: details,\n        },\n      ],\n      tab,\n      true,\n    );\n  }\n\n  async doAutofillTabWithCipherCommand(tab: chrome.tabs.Tab, cipher: CipherView) {\n    if (!tab.id) {\n      throw new Error(\"Tab does not have an id, cannot complete autofill.\");\n    }\n\n    const details = await this.collectPageDetails(tab.id);\n    await this.autofillService.doAutoFill({\n      tab: tab,\n      cipher: cipher,\n      pageDetails: [\n        {\n          frameId: 0,\n          tab: tab,\n          details: details,\n        },\n      ],\n      skipLastUsed: false,\n      skipUsernameOnlyFill: false,\n      onlyEmptyFields: false,\n      onlyVisibleFields: false,\n      fillNewPassword: true,\n      allowTotpAutofill: true,\n    });\n  }\n\n  private async collectPageDetails(tabId: number): Promise<AutofillPageDetails> {\n    return new Promise((resolve, reject) => {\n      chrome.tabs.sendMessage(\n        tabId,\n        {\n          command: \"collectPageDetailsImmediately\",\n        },\n        (response: AutofillPageDetails) => {\n          if (chrome.runtime.lastError) {\n            reject(chrome.runtime.lastError);\n            return;\n          }\n\n          resolve(response);\n        },\n      );\n    });\n  }\n}\n","import { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport {\n  AUTOFILL_CARD_ID,\n  AUTOFILL_ID,\n  AUTOFILL_IDENTITY_ID,\n  COPY_IDENTIFIER_ID,\n  COPY_PASSWORD_ID,\n  COPY_USERNAME_ID,\n  COPY_VERIFICATION_CODE_ID,\n  CREATE_CARD_ID,\n  CREATE_IDENTITY_ID,\n  CREATE_LOGIN_ID,\n  GENERATE_PASSWORD_ID,\n  NOOP_COMMAND_SUFFIX,\n} from \"@bitwarden/common/autofill/constants\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { TotpService } from \"@bitwarden/common/vault/abstractions/totp.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  authServiceFactory,\n  AuthServiceInitOptions,\n} from \"../../auth/background/service-factories/auth-service.factory\";\nimport { userVerificationServiceFactory } from \"../../auth/background/service-factories/user-verification-service.factory\";\nimport { openUnlockPopout } from \"../../auth/popup/utils/auth-popout-window\";\nimport { autofillSettingsServiceFactory } from \"../../autofill/background/service_factories/autofill-settings-service.factory\";\nimport { eventCollectionServiceFactory } from \"../../background/service-factories/event-collection-service.factory\";\nimport { Account } from \"../../models/account\";\nimport { CachedServices } from \"../../platform/background/service-factories/factory-options\";\nimport { stateServiceFactory } from \"../../platform/background/service-factories/state-service.factory\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { passwordGenerationServiceFactory } from \"../../tools/background/service_factories/password-generation-service.factory\";\nimport {\n  cipherServiceFactory,\n  CipherServiceInitOptions,\n} from \"../../vault/background/service_factories/cipher-service.factory\";\nimport { totpServiceFactory } from \"../../vault/background/service_factories/totp-service.factory\";\nimport {\n  openAddEditVaultItemPopout,\n  openVaultItemPasswordRepromptPopout,\n} from \"../../vault/popup/utils/vault-popout-window\";\nimport { LockedVaultPendingNotificationsData } from \"../background/abstractions/notification.background\";\nimport { autofillServiceFactory } from \"../background/service_factories/autofill-service.factory\";\nimport { copyToClipboard, GeneratePasswordToClipboardCommand } from \"../clipboard\";\nimport { AutofillTabCommand } from \"../commands/autofill-tab-command\";\nimport { AutofillCipherTypeId } from \"../types\";\n\nexport type CopyToClipboardOptions = { text: string; tab: chrome.tabs.Tab };\nexport type CopyToClipboardAction = (options: CopyToClipboardOptions) => void;\nexport type AutofillAction = (tab: chrome.tabs.Tab, cipher: CipherView) => Promise<void>;\n\nexport type GeneratePasswordToClipboardAction = (tab: chrome.tabs.Tab) => Promise<void>;\n\nconst NOT_IMPLEMENTED = (..._args: unknown[]) =>\n  Promise.reject<never>(\"This action is not implemented inside of a service worker context.\");\n\nexport class ContextMenuClickedHandler {\n  constructor(\n    private copyToClipboard: CopyToClipboardAction,\n    private generatePasswordToClipboard: GeneratePasswordToClipboardAction,\n    private autofillAction: AutofillAction,\n    private authService: AuthService,\n    private cipherService: CipherService,\n    private stateService: StateService,\n    private totpService: TotpService,\n    private eventCollectionService: EventCollectionService,\n    private userVerificationService: UserVerificationService,\n  ) {}\n\n  static async mv3Create(cachedServices: CachedServices) {\n    const stateFactory = new StateFactory(GlobalState, Account);\n    const serviceOptions: AuthServiceInitOptions & CipherServiceInitOptions = {\n      apiServiceOptions: {\n        logoutCallback: NOT_IMPLEMENTED,\n      },\n      cryptoFunctionServiceOptions: {\n        win: self,\n      },\n      encryptServiceOptions: {\n        logMacFailures: false,\n      },\n      i18nServiceOptions: {\n        systemLanguage: chrome.i18n.getUILanguage(),\n      },\n      keyConnectorServiceOptions: {\n        logoutCallback: NOT_IMPLEMENTED,\n      },\n      logServiceOptions: {\n        isDev: false,\n      },\n      platformUtilsServiceOptions: {\n        biometricCallback: NOT_IMPLEMENTED,\n        clipboardWriteCallback: NOT_IMPLEMENTED,\n        win: self,\n      },\n      stateServiceOptions: {\n        stateFactory: stateFactory,\n      },\n      autofillSettingsServiceOptions: {\n        stateFactory: autofillSettingsServiceFactory,\n      },\n    };\n\n    const generatePasswordToClipboardCommand = new GeneratePasswordToClipboardCommand(\n      await passwordGenerationServiceFactory(cachedServices, serviceOptions),\n      await autofillSettingsServiceFactory(cachedServices, serviceOptions),\n    );\n\n    const autofillCommand = new AutofillTabCommand(\n      await autofillServiceFactory(cachedServices, serviceOptions),\n    );\n\n    return new ContextMenuClickedHandler(\n      (options) => copyToClipboard(options.tab, options.text),\n      (tab) => generatePasswordToClipboardCommand.generatePasswordToClipboard(tab),\n      (tab, cipher) => autofillCommand.doAutofillTabWithCipherCommand(tab, cipher),\n      await authServiceFactory(cachedServices, serviceOptions),\n      await cipherServiceFactory(cachedServices, serviceOptions),\n      await stateServiceFactory(cachedServices, serviceOptions),\n      await totpServiceFactory(cachedServices, serviceOptions),\n      await eventCollectionServiceFactory(cachedServices, serviceOptions),\n      await userVerificationServiceFactory(cachedServices, serviceOptions),\n    );\n  }\n\n  static async onClickedListener(\n    info: chrome.contextMenus.OnClickData,\n    tab?: chrome.tabs.Tab,\n    cachedServices: CachedServices = {},\n  ) {\n    const contextMenuClickedHandler = await ContextMenuClickedHandler.mv3Create(cachedServices);\n    await contextMenuClickedHandler.run(info, tab);\n  }\n\n  static async messageListener(\n    message: { command: string; data: LockedVaultPendingNotificationsData },\n    sender: chrome.runtime.MessageSender,\n    cachedServices: CachedServices,\n  ) {\n    if (\n      message.command !== \"unlockCompleted\" ||\n      message.data.target !== \"contextmenus.background\"\n    ) {\n      return;\n    }\n\n    const contextMenuClickedHandler = await ContextMenuClickedHandler.mv3Create(cachedServices);\n    await contextMenuClickedHandler.run(\n      message.data.commandToRetry.message.contextMenuOnClickData,\n      message.data.commandToRetry.sender.tab,\n    );\n  }\n\n  async run(info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) {\n    if (!tab) {\n      return;\n    }\n\n    switch (info.menuItemId) {\n      case GENERATE_PASSWORD_ID:\n        await this.generatePasswordToClipboard(tab);\n        break;\n      case COPY_IDENTIFIER_ID:\n        this.copyToClipboard({ text: await this.getIdentifier(tab, info), tab: tab });\n        break;\n      default:\n        await this.cipherAction(info, tab);\n    }\n  }\n\n  async cipherAction(info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) {\n    if (!tab) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsData = {\n        commandToRetry: {\n          message: { command: NOOP_COMMAND_SUFFIX, contextMenuOnClickData: info },\n          sender: { tab: tab },\n        },\n        target: \"contextmenus.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage,\n      );\n\n      await openUnlockPopout(tab);\n      return;\n    }\n\n    // NOTE: We don't actually use the first part of this ID, we further switch based on the parentMenuItemId\n    // I would really love to not add it but that is a departure from how it currently works.\n    const menuItemId = (info.menuItemId as string).split(\"_\")[1]; // We create all the ids, we can guarantee they are strings\n    let cipher: CipherView | undefined;\n    const isCreateCipherAction = [CREATE_LOGIN_ID, CREATE_IDENTITY_ID, CREATE_CARD_ID].includes(\n      menuItemId as string,\n    );\n\n    if (isCreateCipherAction) {\n      // pass; defer to logic below\n    } else if (menuItemId === NOOP_COMMAND_SUFFIX) {\n      const additionalCiphersToGet =\n        info.parentMenuItemId === AUTOFILL_IDENTITY_ID\n          ? [CipherType.Identity]\n          : info.parentMenuItemId === AUTOFILL_CARD_ID\n            ? [CipherType.Card]\n            : [];\n\n      // This NOOP item has come through which is generally only for no access state but since we got here\n      // we are actually unlocked we will do our best to find a good match of an item to autofill this is useful\n      // in scenarios like unlock on autofill\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        tab.url,\n        additionalCiphersToGet,\n      );\n\n      cipher = ciphers[0];\n    } else {\n      const ciphers = await this.cipherService.getAllDecrypted();\n      cipher = ciphers.find(({ id }) => id === menuItemId);\n    }\n\n    if (!cipher && !isCreateCipherAction) {\n      return;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.stateService.setLastActive(new Date().getTime());\n    switch (info.parentMenuItemId) {\n      case AUTOFILL_ID:\n      case AUTOFILL_IDENTITY_ID:\n      case AUTOFILL_CARD_ID: {\n        const cipherType = this.getCipherCreationType(menuItemId);\n\n        if (cipherType) {\n          await openAddEditVaultItemPopout(tab, { cipherType });\n          break;\n        }\n\n        if (await this.isPasswordRepromptRequired(cipher)) {\n          await openVaultItemPasswordRepromptPopout(tab, {\n            cipherId: cipher.id,\n            // The action here is passed on to the single-use reprompt window and doesn't change based on cipher type\n            action: AUTOFILL_ID,\n          });\n        } else {\n          await this.autofillAction(tab, cipher);\n        }\n\n        break;\n      }\n      case COPY_USERNAME_ID:\n        if (menuItemId === CREATE_LOGIN_ID) {\n          await openAddEditVaultItemPopout(tab, { cipherType: CipherType.Login });\n          break;\n        }\n\n        this.copyToClipboard({ text: cipher.login.username, tab: tab });\n        break;\n      case COPY_PASSWORD_ID:\n        if (menuItemId === CREATE_LOGIN_ID) {\n          await openAddEditVaultItemPopout(tab, { cipherType: CipherType.Login });\n          break;\n        }\n\n        if (await this.isPasswordRepromptRequired(cipher)) {\n          await openVaultItemPasswordRepromptPopout(tab, {\n            cipherId: cipher.id,\n            action: COPY_PASSWORD_ID,\n          });\n        } else {\n          this.copyToClipboard({ text: cipher.login.password, tab: tab });\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.eventCollectionService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n        }\n\n        break;\n      case COPY_VERIFICATION_CODE_ID:\n        if (menuItemId === CREATE_LOGIN_ID) {\n          await openAddEditVaultItemPopout(tab, { cipherType: CipherType.Login });\n          break;\n        }\n\n        if (await this.isPasswordRepromptRequired(cipher)) {\n          await openVaultItemPasswordRepromptPopout(tab, {\n            cipherId: cipher.id,\n            action: COPY_VERIFICATION_CODE_ID,\n          });\n        } else {\n          this.copyToClipboard({\n            text: await this.totpService.getCode(cipher.login.totp),\n            tab: tab,\n          });\n        }\n\n        break;\n    }\n  }\n\n  private async isPasswordRepromptRequired(cipher: CipherView): Promise<boolean> {\n    return (\n      cipher.reprompt === CipherRepromptType.Password &&\n      (await this.userVerificationService.hasMasterPasswordAndMasterKeyHash())\n    );\n  }\n\n  private getCipherCreationType(menuItemId?: string): AutofillCipherTypeId | null {\n    return menuItemId === CREATE_IDENTITY_ID\n      ? CipherType.Identity\n      : menuItemId === CREATE_CARD_ID\n        ? CipherType.Card\n        : menuItemId === CREATE_LOGIN_ID\n          ? CipherType.Login\n          : null;\n  }\n\n  private async getIdentifier(tab: chrome.tabs.Tab, info: chrome.contextMenus.OnClickData) {\n    return new Promise<string>((resolve, reject) => {\n      BrowserApi.sendTabsMessage(\n        tab.id,\n        { command: \"getClickedElement\" },\n        { frameId: info.frameId },\n        (identifier: string) => {\n          if (chrome.runtime.lastError) {\n            reject(chrome.runtime.lastError);\n            return;\n          }\n\n          resolve(identifier);\n        },\n      );\n    });\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { BadgeSettingsService } from \"@bitwarden/common/autofill/services/badge-settings.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { ContainerService } from \"@bitwarden/common/platform/services/container.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\n\nimport { authServiceFactory } from \"../../auth/background/service-factories/auth-service.factory\";\nimport { badgeSettingsServiceFactory } from \"../../autofill/background/service_factories/badge-settings-service.factory\";\nimport { Account } from \"../../models/account\";\nimport IconDetails from \"../../vault/background/models/icon-details\";\nimport { cipherServiceFactory } from \"../../vault/background/service_factories/cipher-service.factory\";\nimport { BrowserApi } from \"../browser/browser-api\";\nimport { BrowserPlatformUtilsService } from \"../services/platform-utils/browser-platform-utils.service\";\n\nexport type BadgeOptions = {\n  tab?: chrome.tabs.Tab;\n  windowId?: number;\n};\n\nexport class UpdateBadge {\n  private authService: AuthService;\n  private badgeSettingsService: BadgeSettingsService;\n  private cipherService: CipherService;\n  private badgeAction: typeof chrome.action | typeof chrome.browserAction;\n  private sidebarAction: OperaSidebarAction | FirefoxSidebarAction;\n  private inited = false;\n  private win: Window & typeof globalThis;\n\n  private static readonly listenedToCommands = [\n    \"updateBadge\",\n    \"loggedIn\",\n    \"unlocked\",\n    \"syncCompleted\",\n    \"bgUpdateContextMenu\",\n    \"editedCipher\",\n    \"addedCipher\",\n    \"deletedCipher\",\n  ];\n\n  static async windowsOnFocusChangedListener(\n    windowId: number,\n    serviceCache: Record<string, unknown>,\n  ) {\n    await new UpdateBadge(self).run({ windowId, existingServices: serviceCache });\n  }\n\n  static async tabsOnActivatedListener(\n    activeInfo: chrome.tabs.TabActiveInfo,\n    serviceCache: Record<string, unknown>,\n  ) {\n    await new UpdateBadge(self).run({\n      tabId: activeInfo.tabId,\n      existingServices: serviceCache,\n      windowId: activeInfo.windowId,\n    });\n  }\n\n  static async tabsOnReplacedListener(\n    addedTabId: number,\n    removedTabId: number,\n    serviceCache: Record<string, unknown>,\n  ) {\n    await new UpdateBadge(self).run({ tabId: addedTabId, existingServices: serviceCache });\n  }\n\n  static async tabsOnUpdatedListener(\n    tabId: number,\n    changeInfo: chrome.tabs.TabChangeInfo,\n    tab: chrome.tabs.Tab,\n    serviceCache: Record<string, unknown>,\n  ) {\n    await new UpdateBadge(self).run({\n      tabId,\n      existingServices: serviceCache,\n      windowId: tab.windowId,\n    });\n  }\n\n  static async messageListener(\n    message: { command: string; tabId: number },\n    serviceCache: Record<string, unknown>,\n  ) {\n    if (!UpdateBadge.listenedToCommands.includes(message.command)) {\n      return;\n    }\n\n    await new UpdateBadge(self).run({ existingServices: serviceCache });\n  }\n\n  constructor(win: Window & typeof globalThis) {\n    this.badgeAction = BrowserApi.getBrowserAction();\n    this.sidebarAction = BrowserApi.getSidebarAction(self);\n    this.win = win;\n  }\n\n  async run(opts?: {\n    tabId?: number;\n    windowId?: number;\n    existingServices?: Record<string, unknown>;\n  }): Promise<void> {\n    await this.initServices(opts?.existingServices);\n\n    const authStatus = await this.authService.getAuthStatus();\n\n    await this.setBadgeBackgroundColor();\n\n    switch (authStatus) {\n      case AuthenticationStatus.LoggedOut: {\n        await this.setLoggedOut();\n        break;\n      }\n      case AuthenticationStatus.Locked: {\n        await this.setLocked();\n        break;\n      }\n      case AuthenticationStatus.Unlocked: {\n        const tab = await this.getTab(opts?.tabId, opts?.windowId);\n        await this.setUnlocked({ tab, windowId: tab?.windowId });\n        break;\n      }\n    }\n  }\n\n  async setLoggedOut(): Promise<void> {\n    await this.setBadgeIcon(\"_gray\");\n    await this.clearBadgeText();\n  }\n\n  async setLocked() {\n    await this.setBadgeIcon(\"_locked\");\n    await this.clearBadgeText();\n  }\n\n  private async clearBadgeText() {\n    const tabs = await BrowserApi.getActiveTabs();\n    if (tabs != null) {\n      tabs.forEach(async (tab) => {\n        if (tab.id != null) {\n          await this.setBadgeText(\"\", tab.id);\n        }\n      });\n    }\n  }\n\n  async setUnlocked(opts: BadgeOptions) {\n    await this.initServices();\n\n    await this.setBadgeIcon(\"\");\n\n    const enableBadgeCounter = await firstValueFrom(this.badgeSettingsService.enableBadgeCounter$);\n    if (!enableBadgeCounter) {\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(opts?.tab?.url);\n    let countText = ciphers.length == 0 ? \"\" : ciphers.length.toString();\n    if (ciphers.length > 9) {\n      countText = \"9+\";\n    }\n    await this.setBadgeText(countText, opts?.tab?.id);\n  }\n\n  setBadgeBackgroundColor(color = \"#294e5f\") {\n    if (this.badgeAction?.setBadgeBackgroundColor) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.badgeAction.setBadgeBackgroundColor({ color });\n    }\n    if (this.isOperaSidebar(this.sidebarAction)) {\n      this.sidebarAction.setBadgeBackgroundColor({ color });\n    }\n  }\n\n  setBadgeText(text: string, tabId?: number) {\n    this.setActionText(text, tabId);\n    this.setSideBarText(text, tabId);\n  }\n\n  async setBadgeIcon(iconSuffix: string, windowId?: number) {\n    const options: IconDetails = {\n      path: {\n        19: \"/images/icon19\" + iconSuffix + \".png\",\n        38: \"/images/icon38\" + iconSuffix + \".png\",\n      },\n    };\n    if (windowId && BrowserPlatformUtilsService.isFirefox()) {\n      options.windowId = windowId;\n    }\n\n    await this.setActionIcon(options);\n    await this.setSidebarActionIcon(options);\n  }\n\n  private setActionText(text: string, tabId?: number) {\n    if (this.badgeAction?.setBadgeText) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.badgeAction.setBadgeText({ text, tabId });\n    }\n  }\n\n  private setSideBarText(text: string, tabId?: number) {\n    if (this.isOperaSidebar(this.sidebarAction)) {\n      this.sidebarAction.setBadgeText({ text, tabId });\n    } else if (this.sidebarAction) {\n      // Firefox\n      const title = `Bitwarden${Utils.isNullOrEmpty(text) ? \"\" : ` [${text}]`}`;\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.sidebarAction.setTitle({ title, tabId });\n    }\n  }\n\n  private async setActionIcon(options: IconDetails) {\n    if (!this.badgeAction?.setIcon) {\n      return;\n    }\n\n    if (this.useSyncApiCalls) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.badgeAction.setIcon(options);\n    } else {\n      await new Promise<void>((resolve) => this.badgeAction.setIcon(options, () => resolve()));\n    }\n  }\n\n  private async setSidebarActionIcon(options: IconDetails) {\n    if (!this.sidebarAction?.setIcon) {\n      return;\n    }\n\n    if (this.isOperaSidebar(this.sidebarAction)) {\n      await new Promise<void>((resolve) =>\n        (this.sidebarAction as OperaSidebarAction).setIcon(options, () => resolve()),\n      );\n    } else {\n      await this.sidebarAction.setIcon(options);\n    }\n  }\n\n  private async getTab(tabId?: number, windowId?: number) {\n    return (\n      (await BrowserApi.getTab(tabId)) ??\n      (windowId\n        ? await BrowserApi.tabsQueryFirst({ active: true, windowId })\n        : await BrowserApi.tabsQueryFirst({ active: true, currentWindow: true })) ??\n      (await BrowserApi.tabsQueryFirst({ active: true, lastFocusedWindow: true })) ??\n      (await BrowserApi.tabsQueryFirst({ active: true }))\n    );\n  }\n\n  private get useSyncApiCalls() {\n    return (\n      BrowserPlatformUtilsService.isFirefox() || BrowserPlatformUtilsService.isSafari(this.win)\n    );\n  }\n\n  private async initServices(existingServiceCache?: Record<string, unknown>): Promise<UpdateBadge> {\n    if (this.inited) {\n      return this;\n    }\n\n    const serviceCache: Record<string, unknown> = existingServiceCache || {};\n    const opts = {\n      cryptoFunctionServiceOptions: { win: self },\n      encryptServiceOptions: { logMacFailures: false },\n      logServiceOptions: { isDev: false },\n      platformUtilsServiceOptions: {\n        clipboardWriteCallback: (clipboardValue: string, clearMs: number) =>\n          Promise.reject(\"not implemented\"),\n        biometricCallback: () => Promise.reject(\"not implemented\"),\n        win: self,\n      },\n      stateServiceOptions: {\n        stateFactory: new StateFactory(GlobalState, Account),\n      },\n      apiServiceOptions: {\n        logoutCallback: () => Promise.reject(\"not implemented\"),\n      },\n      keyConnectorServiceOptions: {\n        logoutCallback: () => Promise.reject(\"not implemented\"),\n      },\n      i18nServiceOptions: {\n        systemLanguage: BrowserApi.getUILanguage(),\n      },\n    };\n    this.badgeSettingsService = await badgeSettingsServiceFactory(serviceCache, opts);\n    this.authService = await authServiceFactory(serviceCache, opts);\n    this.cipherService = await cipherServiceFactory(serviceCache, opts);\n\n    // Needed for cipher decryption\n    if (!self.bitwardenContainerService) {\n      new ContainerService(\n        serviceCache.cryptoService as CryptoService,\n        serviceCache.encryptService as EncryptService,\n      ).attachToGlobal(self);\n    }\n\n    this.inited = true;\n\n    return this;\n  }\n\n  private isOperaSidebar(\n    action: OperaSidebarAction | FirefoxSidebarAction,\n  ): action is OperaSidebarAction {\n    return action != null && (action as OperaSidebarAction).setBadgeText != null;\n  }\n}\n","import { BadgeSettingsService } from \"@bitwarden/common/autofill/services/badge-settings.service\";\n\nimport {\n  CachedServices,\n  factory,\n  FactoryOptions,\n} from \"../../../platform/background/service-factories/factory-options\";\nimport {\n  stateProviderFactory,\n  StateProviderInitOptions,\n} from \"../../../platform/background/service-factories/state-provider.factory\";\n\nexport type BadgeSettingsServiceInitOptions = FactoryOptions & StateProviderInitOptions;\n\nexport function badgeSettingsServiceFactory(\n  cache: { badgeSettingsService?: BadgeSettingsService } & CachedServices,\n  opts: BadgeSettingsServiceInitOptions,\n): Promise<BadgeSettingsService> {\n  return factory(\n    cache,\n    \"badgeSettingsService\",\n    opts,\n    async () => new BadgeSettingsService(await stateProviderFactory(cache, opts)),\n  );\n}\n","import { ReplaySubject } from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { ConfigApiServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config-api.service.abstraction\";\nimport { ServerConfig } from \"@bitwarden/common/platform/abstractions/config/server-config\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { ConfigService } from \"@bitwarden/common/platform/services/config/config.service\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\n\nimport { browserSession, sessionSync } from \"../decorators/session-sync-observable\";\n\n@browserSession\nexport class BrowserConfigService extends ConfigService {\n  @sessionSync<ServerConfig>({ initializer: ServerConfig.fromJSON })\n  protected _serverConfig: ReplaySubject<ServerConfig | null>;\n\n  constructor(\n    stateService: StateService,\n    configApiService: ConfigApiServiceAbstraction,\n    authService: AuthService,\n    environmentService: EnvironmentService,\n    logService: LogService,\n    stateProvider: StateProvider,\n    subscribe = false,\n  ) {\n    super(\n      stateService,\n      configApiService,\n      authService,\n      environmentService,\n      logService,\n      stateProvider,\n      subscribe,\n    );\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { AdminAuthRequestStorable } from \"../../auth/models/domain/admin-auth-req-storable\";\nimport { ForceSetPasswordReason } from \"../../auth/models/domain/force-set-password-reason\";\nimport { KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport { BiometricKey } from \"../../auth/types/biometric-key\";\nimport { GeneratorOptions } from \"../../tools/generator/generator-options\";\nimport { GeneratedPasswordHistory, PasswordGeneratorOptions } from \"../../tools/generator/password\";\nimport { UsernameGeneratorOptions } from \"../../tools/generator/username\";\nimport { SendData } from \"../../tools/send/models/data/send.data\";\nimport { SendView } from \"../../tools/send/models/view/send.view\";\nimport { UserId } from \"../../types/guid\";\nimport { DeviceKey, MasterKey } from \"../../types/key\";\nimport { CipherData } from \"../../vault/models/data/cipher.data\";\nimport { LocalData } from \"../../vault/models/data/local.data\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { AddEditCipherInfo } from \"../../vault/types/add-edit-cipher-info\";\nimport { KdfType } from \"../enums\";\nimport { ServerConfigData } from \"../models/data/server-config.data\";\nimport { Account } from \"../models/domain/account\";\nimport { EncString } from \"../models/domain/enc-string\";\nimport { StorageOptions } from \"../models/domain/storage-options\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\n/**\n * Options for customizing the initiation behavior.\n */\nexport type InitOptions = {\n  /**\n   * Whether or not to run state migrations as part of the init process. Defaults to true.\n   *\n   * If false, the init method will instead wait for migrations to complete before doing its\n   * other init operations. Make sure migrations have either already completed, or will complete\n   * before calling {@link StateService.init} with `runMigrations: false`.\n   */\n  runMigrations?: boolean;\n};\n\nexport abstract class StateService<T extends Account = Account> {\n  accounts$: Observable<{ [userId: string]: T }>;\n  activeAccount$: Observable<string>;\n  /**\n   * @deprecated use accountService.activeAccount$ instead\n   */\n  activeAccountUnlocked$: Observable<boolean>;\n\n  addAccount: (account: T) => Promise<void>;\n  setActiveUser: (userId: string) => Promise<void>;\n  clean: (options?: StorageOptions) => Promise<UserId>;\n  init: (initOptions?: InitOptions) => Promise<void>;\n\n  getAddEditCipherInfo: (options?: StorageOptions) => Promise<AddEditCipherInfo>;\n  setAddEditCipherInfo: (value: AddEditCipherInfo, options?: StorageOptions) => Promise<void>;\n  getBiometricFingerprintValidated: (options?: StorageOptions) => Promise<boolean>;\n  setBiometricFingerprintValidated: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getConvertAccountToKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setConvertAccountToKeyConnector: (value: boolean, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user's master key\n   */\n  getMasterKey: (options?: StorageOptions) => Promise<MasterKey>;\n  /**\n   * Sets the user's master key\n   */\n  setMasterKey: (value: MasterKey, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user key encrypted by the master key\n   */\n  getMasterKeyEncryptedUserKey: (options?: StorageOptions) => Promise<string>;\n  /**\n   * Sets the user key encrypted by the master key\n   */\n  setMasterKeyEncryptedUserKey: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user's auto key\n   */\n  getUserKeyAutoUnlock: (options?: StorageOptions) => Promise<string>;\n  /**\n   * Sets the user's auto key\n   */\n  setUserKeyAutoUnlock: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user's biometric key\n   */\n  getUserKeyBiometric: (options?: StorageOptions) => Promise<string>;\n  /**\n   * Checks if the user has a biometric key available\n   */\n  hasUserKeyBiometric: (options?: StorageOptions) => Promise<boolean>;\n  /**\n   * Sets the user's biometric key\n   */\n  setUserKeyBiometric: (value: BiometricKey, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user key encrypted by the Pin key.\n   * Used when Lock with MP on Restart is disabled\n   */\n  getPinKeyEncryptedUserKey: (options?: StorageOptions) => Promise<EncString>;\n  /**\n   * Sets the user key encrypted by the Pin key.\n   * Used when Lock with MP on Restart is disabled\n   */\n  setPinKeyEncryptedUserKey: (value: EncString, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the ephemeral version of the user key encrypted by the Pin key.\n   * Used when Lock with MP on Restart is enabled\n   */\n  getPinKeyEncryptedUserKeyEphemeral: (options?: StorageOptions) => Promise<EncString>;\n  /**\n   * Sets the ephemeral version of the user key encrypted by the Pin key.\n   * Used when Lock with MP on Restart is enabled\n   */\n  setPinKeyEncryptedUserKeyEphemeral: (value: EncString, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated For migration purposes only, use getUserKeyMasterKey instead\n   */\n  getEncryptedCryptoSymmetricKey: (options?: StorageOptions) => Promise<string>;\n  /**\n   * @deprecated For legacy purposes only, use getMasterKey instead\n   */\n  getCryptoMasterKey: (options?: StorageOptions) => Promise<SymmetricCryptoKey>;\n  /**\n   * @deprecated For migration purposes only, use getUserKeyAuto instead\n   */\n  getCryptoMasterKeyAuto: (options?: StorageOptions) => Promise<string>;\n  /**\n   * @deprecated For migration purposes only, use setUserKeyAuto instead\n   */\n  setCryptoMasterKeyAuto: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated For migration purposes only, use getUserKeyBiometric instead\n   */\n  getCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<string>;\n  /**\n   * @deprecated For migration purposes only, use hasUserKeyBiometric instead\n   */\n  hasCryptoMasterKeyBiometric: (options?: StorageOptions) => Promise<boolean>;\n  /**\n   * @deprecated For migration purposes only, use setUserKeyBiometric instead\n   */\n  setCryptoMasterKeyBiometric: (value: BiometricKey, options?: StorageOptions) => Promise<void>;\n  getDecryptedCiphers: (options?: StorageOptions) => Promise<CipherView[]>;\n  setDecryptedCiphers: (value: CipherView[], options?: StorageOptions) => Promise<void>;\n  getDecryptedPasswordGenerationHistory: (\n    options?: StorageOptions,\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setDecryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions,\n  ) => Promise<void>;\n  /**\n   * @deprecated For migration purposes only, use getDecryptedUserKeyPin instead\n   */\n  getDecryptedPinProtected: (options?: StorageOptions) => Promise<EncString>;\n  /**\n   * @deprecated For migration purposes only, use setDecryptedUserKeyPin instead\n   */\n  setDecryptedPinProtected: (value: EncString, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use SendService\n   */\n  getDecryptedSends: (options?: StorageOptions) => Promise<SendView[]>;\n  /**\n   * @deprecated Do not call this directly, use SendService\n   */\n  setDecryptedSends: (value: SendView[], options?: StorageOptions) => Promise<void>;\n  getDisableGa: (options?: StorageOptions) => Promise<boolean>;\n  setDisableGa: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getDuckDuckGoSharedKey: (options?: StorageOptions) => Promise<string>;\n  setDuckDuckGoSharedKey: (value: string, options?: StorageOptions) => Promise<void>;\n  getDeviceKey: (options?: StorageOptions) => Promise<DeviceKey | null>;\n  setDeviceKey: (value: DeviceKey | null, options?: StorageOptions) => Promise<void>;\n  getAdminAuthRequest: (options?: StorageOptions) => Promise<AdminAuthRequestStorable | null>;\n  setAdminAuthRequest: (\n    adminAuthRequest: AdminAuthRequestStorable,\n    options?: StorageOptions,\n  ) => Promise<void>;\n  getShouldTrustDevice: (options?: StorageOptions) => Promise<boolean | null>;\n  setShouldTrustDevice: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEmail: (options?: StorageOptions) => Promise<string>;\n  setEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getEmailVerified: (options?: StorageOptions) => Promise<boolean>;\n  setEmailVerified: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegration: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegration: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getEnableBrowserIntegrationFingerprint: (options?: StorageOptions) => Promise<boolean>;\n  setEnableBrowserIntegrationFingerprint: (\n    value: boolean,\n    options?: StorageOptions,\n  ) => Promise<void>;\n  getEncryptedCiphers: (options?: StorageOptions) => Promise<{ [id: string]: CipherData }>;\n  setEncryptedCiphers: (\n    value: { [id: string]: CipherData },\n    options?: StorageOptions,\n  ) => Promise<void>;\n  getEncryptedPasswordGenerationHistory: (\n    options?: StorageOptions,\n  ) => Promise<GeneratedPasswordHistory[]>;\n  setEncryptedPasswordGenerationHistory: (\n    value: GeneratedPasswordHistory[],\n    options?: StorageOptions,\n  ) => Promise<void>;\n  /**\n   * @deprecated For migration purposes only, use getEncryptedUserKeyPin instead\n   */\n  getEncryptedPinProtected: (options?: StorageOptions) => Promise<string>;\n  /**\n   * @deprecated For migration purposes only, use setEncryptedUserKeyPin instead\n   */\n  setEncryptedPinProtected: (value: string, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use SendService\n   */\n  getEncryptedSends: (options?: StorageOptions) => Promise<{ [id: string]: SendData }>;\n  /**\n   * @deprecated Do not call this directly, use SendService\n   */\n  setEncryptedSends: (value: { [id: string]: SendData }, options?: StorageOptions) => Promise<void>;\n  getEverBeenUnlocked: (options?: StorageOptions) => Promise<boolean>;\n  setEverBeenUnlocked: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getForceSetPasswordReason: (options?: StorageOptions) => Promise<ForceSetPasswordReason>;\n  setForceSetPasswordReason: (\n    value: ForceSetPasswordReason,\n    options?: StorageOptions,\n  ) => Promise<void>;\n  getInstalledVersion: (options?: StorageOptions) => Promise<string>;\n  setInstalledVersion: (value: string, options?: StorageOptions) => Promise<void>;\n  getIsAuthenticated: (options?: StorageOptions) => Promise<boolean>;\n  getKdfConfig: (options?: StorageOptions) => Promise<KdfConfig>;\n  setKdfConfig: (kdfConfig: KdfConfig, options?: StorageOptions) => Promise<void>;\n  getKdfType: (options?: StorageOptions) => Promise<KdfType>;\n  setKdfType: (value: KdfType, options?: StorageOptions) => Promise<void>;\n  getKeyHash: (options?: StorageOptions) => Promise<string>;\n  setKeyHash: (value: string, options?: StorageOptions) => Promise<void>;\n  getLastActive: (options?: StorageOptions) => Promise<number>;\n  setLastActive: (value: number, options?: StorageOptions) => Promise<void>;\n  getLastSync: (options?: StorageOptions) => Promise<string>;\n  setLastSync: (value: string, options?: StorageOptions) => Promise<void>;\n  getLocalData: (options?: StorageOptions) => Promise<{ [cipherId: string]: LocalData }>;\n  setLocalData: (\n    value: { [cipherId: string]: LocalData },\n    options?: StorageOptions,\n  ) => Promise<void>;\n  getMinimizeOnCopyToClipboard: (options?: StorageOptions) => Promise<boolean>;\n  setMinimizeOnCopyToClipboard: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getOrganizationInvitation: (options?: StorageOptions) => Promise<any>;\n  setOrganizationInvitation: (value: any, options?: StorageOptions) => Promise<void>;\n  getPasswordGenerationOptions: (options?: StorageOptions) => Promise<PasswordGeneratorOptions>;\n  setPasswordGenerationOptions: (\n    value: PasswordGeneratorOptions,\n    options?: StorageOptions,\n  ) => Promise<void>;\n  getUsernameGenerationOptions: (options?: StorageOptions) => Promise<UsernameGeneratorOptions>;\n  setUsernameGenerationOptions: (\n    value: UsernameGeneratorOptions,\n    options?: StorageOptions,\n  ) => Promise<void>;\n  getGeneratorOptions: (options?: StorageOptions) => Promise<GeneratorOptions>;\n  setGeneratorOptions: (value: GeneratorOptions, options?: StorageOptions) => Promise<void>;\n  /**\n   * Gets the user's Pin, encrypted by the user key\n   */\n  getProtectedPin: (options?: StorageOptions) => Promise<string>;\n  /**\n   * Sets the user's Pin, encrypted by the user key\n   */\n  setProtectedPin: (value: string, options?: StorageOptions) => Promise<void>;\n  getRememberedEmail: (options?: StorageOptions) => Promise<string>;\n  setRememberedEmail: (value: string, options?: StorageOptions) => Promise<void>;\n  getSecurityStamp: (options?: StorageOptions) => Promise<string>;\n  setSecurityStamp: (value: string, options?: StorageOptions) => Promise<void>;\n  getUserId: (options?: StorageOptions) => Promise<string>;\n  getUsesKeyConnector: (options?: StorageOptions) => Promise<boolean>;\n  setUsesKeyConnector: (value: boolean, options?: StorageOptions) => Promise<void>;\n  getVaultTimeout: (options?: StorageOptions) => Promise<number>;\n  setVaultTimeout: (value: number, options?: StorageOptions) => Promise<void>;\n  getVaultTimeoutAction: (options?: StorageOptions) => Promise<string>;\n  setVaultTimeoutAction: (value: string, options?: StorageOptions) => Promise<void>;\n  getApproveLoginRequests: (options?: StorageOptions) => Promise<boolean>;\n  setApproveLoginRequests: (value: boolean, options?: StorageOptions) => Promise<void>;\n  /**\n   * @deprecated Do not call this directly, use ConfigService\n   */\n  getServerConfig: (options?: StorageOptions) => Promise<ServerConfigData>;\n  /**\n   * @deprecated Do not call this directly, use ConfigService\n   */\n  setServerConfig: (value: ServerConfigData, options?: StorageOptions) => Promise<void>;\n  /**\n   * fetches string value of URL user tried to navigate to while unauthenticated.\n   * @param options Defines the storage options for the URL; Defaults to session Storage.\n   * @returns route called prior to successful login.\n   */\n  getDeepLinkRedirectUrl: (options?: StorageOptions) => Promise<string>;\n  /**\n   * Store URL in session storage by default, but can be configured. Developed to handle\n   * unauthN interrupted navigation.\n   * @param url URL of route\n   * @param options Defines the storage options for the URL; Defaults to session Storage.\n   */\n  setDeepLinkRedirectUrl: (url: string, options?: StorageOptions) => Promise<void>;\n  nextUpActiveUser: () => Promise<UserId>;\n}\n","import { ServerConfigResponse } from \"../../models/response/server-config.response\";\n\nexport abstract class ConfigApiServiceAbstraction {\n  get: () => Promise<ServerConfigResponse>;\n}\n","import { AuthenticationStatus } from \"../enums/authentication-status\";\n\nexport abstract class AuthService {\n  getAuthStatus: (userId?: string) => Promise<AuthenticationStatus>;\n  logOut: (callback: () => void) => void;\n}\n","import { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\n\nexport default class BrowserMessagingPrivateModeBackgroundService implements MessagingService {\n  send(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    (window as any).bitwardenPopupMainMessageListener(message);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../../platform/models/domain/symmetric-crypto-key\";\nimport { SendFileData } from \"../data/send-file.data\";\nimport { SendFileView } from \"../view/send-file.view\";\n\nexport class SendFile extends Domain {\n  id: string;\n  size: string;\n  sizeName: string;\n  fileName: EncString;\n\n  constructor(obj?: SendFileData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        sizeName: null,\n        fileName: null,\n      },\n      [\"id\", \"sizeName\"],\n    );\n  }\n\n  async decrypt(key: SymmetricCryptoKey): Promise<SendFileView> {\n    const view = await this.decryptObj(\n      new SendFileView(this),\n      {\n        fileName: null,\n      },\n      null,\n      key,\n    );\n    return view;\n  }\n\n  static fromJSON(obj: Jsonify<SendFile>) {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new SendFile(), obj, {\n      fileName: EncString.fromJSON(obj.fileName),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../../platform/models/domain/symmetric-crypto-key\";\nimport { SendTextData } from \"../data/send-text.data\";\nimport { SendTextView } from \"../view/send-text.view\";\n\nexport class SendText extends Domain {\n  text: EncString;\n  hidden: boolean;\n\n  constructor(obj?: SendTextData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.hidden = obj.hidden;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        text: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(key: SymmetricCryptoKey): Promise<SendTextView> {\n    return this.decryptObj(\n      new SendTextView(this),\n      {\n        text: null,\n      },\n      null,\n      key,\n    );\n  }\n\n  static fromJSON(obj: Jsonify<SendText>) {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new SendText(), obj, {\n      text: EncString.fromJSON(obj.text),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../../platform/misc/utils\";\nimport Domain from \"../../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\nimport { SendType } from \"../../enums/send-type\";\nimport { SendData } from \"../data/send.data\";\nimport { SendView } from \"../view/send.view\";\n\nimport { SendFile } from \"./send-file\";\nimport { SendText } from \"./send-text\";\n\nexport class Send extends Domain {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: EncString;\n  notes: EncString;\n  file: SendFile;\n  text: SendText;\n  key: EncString;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: Date;\n  expirationDate: Date;\n  deletionDate: Date;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(obj?: SendData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        accessId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"accessId\"],\n    );\n\n    this.type = obj.type;\n    this.maxAccessCount = obj.maxAccessCount;\n    this.accessCount = obj.accessCount;\n    this.password = obj.password;\n    this.disabled = obj.disabled;\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.deletionDate = obj.deletionDate != null ? new Date(obj.deletionDate) : null;\n    this.expirationDate = obj.expirationDate != null ? new Date(obj.expirationDate) : null;\n    this.hideEmail = obj.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendText(obj.text);\n        break;\n      case SendType.File:\n        this.file = new SendFile(obj.file);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async decrypt(): Promise<SendView> {\n    const model = new SendView(this);\n\n    const cryptoService = Utils.getContainerService().getCryptoService();\n\n    try {\n      model.key = await cryptoService.decryptToBytes(this.key, null);\n      model.cryptoKey = await cryptoService.makeSendKey(model.key);\n    } catch (e) {\n      // TODO: error?\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      null,\n      model.cryptoKey,\n    );\n\n    switch (this.type) {\n      case SendType.File:\n        model.file = await this.file.decrypt(model.cryptoKey);\n        break;\n      case SendType.Text:\n        model.text = await this.text.decrypt(model.cryptoKey);\n        break;\n      default:\n        break;\n    }\n\n    return model;\n  }\n\n  static fromJSON(obj: Jsonify<Send>) {\n    if (obj == null) {\n      return null;\n    }\n\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const expirationDate = obj.expirationDate == null ? null : new Date(obj.expirationDate);\n    const deletionDate = obj.deletionDate == null ? null : new Date(obj.deletionDate);\n\n    return Object.assign(new Send(), obj, {\n      key: EncString.fromJSON(obj.key),\n      name: EncString.fromJSON(obj.name),\n      notes: EncString.fromJSON(obj.notes),\n      text: SendText.fromJSON(obj.text),\n      file: SendFile.fromJSON(obj.file),\n      revisionDate,\n      expirationDate,\n      deletionDate,\n    });\n  }\n}\n","import { Send } from \"../domain/send\";\n\nimport { SendRequest } from \"./send.request\";\n\nexport class SendWithIdRequest extends SendRequest {\n  id: string;\n\n  constructor(send: Send) {\n    super(send);\n    this.id = send.id;\n  }\n}\n","import { BehaviorSubject, Observable, concatMap, distinctUntilChanged, map } from \"rxjs\";\n\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { KeyGenerationService } from \"../../../platform/abstractions/key-generation.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { KdfType } from \"../../../platform/enums\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncArrayBuffer } from \"../../../platform/models/domain/enc-array-buffer\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { UserKey } from \"../../../types/key\";\nimport { SendType } from \"../enums/send-type\";\nimport { SendData } from \"../models/data/send.data\";\nimport { Send } from \"../models/domain/send\";\nimport { SendFile } from \"../models/domain/send-file\";\nimport { SendText } from \"../models/domain/send-text\";\nimport { SendWithIdRequest } from \"../models/request/send-with-id.request\";\nimport { SendView } from \"../models/view/send.view\";\nimport { SEND_KDF_ITERATIONS } from \"../send-kdf\";\n\nimport { InternalSendService as InternalSendServiceAbstraction } from \"./send.service.abstraction\";\n\nexport class SendService implements InternalSendServiceAbstraction {\n  readonly sendKeySalt = \"bitwarden-send\";\n  readonly sendKeyPurpose = \"send\";\n\n  protected _sends: BehaviorSubject<Send[]> = new BehaviorSubject([]);\n  protected _sendViews: BehaviorSubject<SendView[]> = new BehaviorSubject([]);\n\n  sends$ = this._sends.asObservable();\n  sendViews$ = this._sendViews.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private keyGenerationService: KeyGenerationService,\n    private stateService: StateService,\n  ) {\n    this.stateService.activeAccountUnlocked$\n      .pipe(\n        concatMap(async (unlocked) => {\n          if (Utils.global.bitwardenContainerService == null) {\n            return;\n          }\n\n          if (!unlocked) {\n            this._sends.next([]);\n            this._sendViews.next([]);\n            return;\n          }\n\n          const data = await this.stateService.getEncryptedSends();\n\n          await this.updateObservables(data);\n        }),\n      )\n      .subscribe();\n  }\n\n  async clearCache(): Promise<void> {\n    await this._sendViews.next([]);\n  }\n\n  async encrypt(\n    model: SendView,\n    file: File | ArrayBuffer,\n    password: string,\n    key?: SymmetricCryptoKey,\n  ): Promise<[Send, EncArrayBuffer]> {\n    let fileData: EncArrayBuffer = null;\n    const send = new Send();\n    send.id = model.id;\n    send.type = model.type;\n    send.disabled = model.disabled;\n    send.hideEmail = model.hideEmail;\n    send.maxAccessCount = model.maxAccessCount;\n    if (model.key == null) {\n      const key = await this.keyGenerationService.createKeyWithPurpose(\n        128,\n        this.sendKeyPurpose,\n        this.sendKeySalt,\n      );\n      model.key = key.material;\n      model.cryptoKey = key.derivedKey;\n    }\n    if (password != null) {\n      const passwordKey = await this.keyGenerationService.deriveKeyFromPassword(\n        password,\n        model.key,\n        KdfType.PBKDF2_SHA256,\n        { iterations: SEND_KDF_ITERATIONS },\n      );\n      send.password = passwordKey.keyB64;\n    }\n    send.key = await this.cryptoService.encrypt(model.key, key);\n    send.name = await this.cryptoService.encrypt(model.name, model.cryptoKey);\n    send.notes = await this.cryptoService.encrypt(model.notes, model.cryptoKey);\n    if (send.type === SendType.Text) {\n      send.text = new SendText();\n      send.text.text = await this.cryptoService.encrypt(model.text.text, model.cryptoKey);\n      send.text.hidden = model.text.hidden;\n    } else if (send.type === SendType.File) {\n      send.file = new SendFile();\n      if (file != null) {\n        if (file instanceof ArrayBuffer) {\n          const [name, data] = await this.encryptFileData(\n            model.file.fileName,\n            file,\n            model.cryptoKey,\n          );\n          send.file.fileName = name;\n          fileData = data;\n        } else {\n          fileData = await this.parseFile(send, file, model.cryptoKey);\n        }\n      }\n    }\n\n    return [send, fileData];\n  }\n\n  get(id: string): Send {\n    const sends = this._sends.getValue();\n    return sends.find((send) => send.id === id);\n  }\n\n  get$(id: string): Observable<Send | undefined> {\n    return this.sends$.pipe(\n      distinctUntilChanged((oldSends, newSends) => {\n        const oldSend = oldSends.find((oldSend) => oldSend.id === id);\n        const newSend = newSends.find((newSend) => newSend.id === id);\n        if (!oldSend || !newSend) {\n          // If either oldSend or newSend is not found, consider them different\n          return false;\n        }\n\n        // Compare each property of the old and new Send objects\n        const allPropertiesSame = Object.keys(newSend).every((key) => {\n          if (\n            (oldSend[key as keyof Send] != null && newSend[key as keyof Send] === null) ||\n            (oldSend[key as keyof Send] === null && newSend[key as keyof Send] != null)\n          ) {\n            // If a key from either old or new send is not found, and the key from the other send has a value, consider them different\n            return false;\n          }\n\n          switch (key) {\n            case \"name\":\n            case \"notes\":\n            case \"key\":\n              if (oldSend[key] === null && newSend[key] === null) {\n                return true;\n              }\n\n              return oldSend[key].encryptedString === newSend[key].encryptedString;\n            case \"text\":\n              if (oldSend[key].text == null && newSend[key].text == null) {\n                return true;\n              }\n              if (\n                (oldSend[key].text != null && newSend[key].text == null) ||\n                (oldSend[key].text == null && newSend[key].text != null)\n              ) {\n                return false;\n              }\n              return oldSend[key].text.encryptedString === newSend[key].text.encryptedString;\n            case \"file\":\n              //Files are never updated so never will be changed.\n              return true;\n            case \"revisionDate\":\n            case \"expirationDate\":\n            case \"deletionDate\":\n              if (oldSend[key] === null && newSend[key] === null) {\n                return true;\n              }\n              return oldSend[key].getTime() === newSend[key].getTime();\n            default:\n              // For other properties, compare directly\n              return oldSend[key as keyof Send] === newSend[key as keyof Send];\n          }\n        });\n\n        return allPropertiesSame;\n      }),\n      map((sends) => sends.find((o) => o.id === id)),\n    );\n  }\n\n  async getFromState(id: string): Promise<Send> {\n    const sends = await this.stateService.getEncryptedSends();\n    // eslint-disable-next-line\n    if (sends == null || !sends.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Send(sends[id]);\n  }\n\n  async getAll(): Promise<Send[]> {\n    const sends = await this.stateService.getEncryptedSends();\n    const response: Send[] = [];\n    for (const id in sends) {\n      // eslint-disable-next-line\n      if (sends.hasOwnProperty(id)) {\n        response.push(new Send(sends[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecryptedFromState(): Promise<SendView[]> {\n    let decSends = await this.stateService.getDecryptedSends();\n    if (decSends != null) {\n      return decSends;\n    }\n\n    decSends = [];\n    const hasKey = await this.cryptoService.hasUserKey();\n    if (!hasKey) {\n      throw new Error(\"No user key found.\");\n    }\n\n    const promises: Promise<any>[] = [];\n    const sends = await this.getAll();\n    sends.forEach((send) => {\n      promises.push(send.decrypt().then((f) => decSends.push(f)));\n    });\n\n    await Promise.all(promises);\n    decSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    await this.stateService.setDecryptedSends(decSends);\n    return decSends;\n  }\n\n  async upsert(send: SendData | SendData[]): Promise<any> {\n    let sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      sends = {};\n    }\n    if (send instanceof SendData) {\n      const s = send as SendData;\n      sends[s.id] = s;\n    } else {\n      (send as SendData[]).forEach((s) => {\n        sends[s.id] = s;\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async clear(userId?: string): Promise<any> {\n    if (userId == null || userId == (await this.stateService.getUserId())) {\n      this._sends.next([]);\n      this._sendViews.next([]);\n    }\n    await this.stateService.setDecryptedSends(null, { userId: userId });\n    await this.stateService.setEncryptedSends(null, { userId: userId });\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const sends = await this.stateService.getEncryptedSends();\n    if (sends == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (sends[id] == null) {\n        return;\n      }\n      delete sends[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete sends[i];\n      });\n    }\n\n    await this.replace(sends);\n  }\n\n  async replace(sends: { [id: string]: SendData }): Promise<any> {\n    await this.updateObservables(sends);\n    await this.stateService.setEncryptedSends(sends);\n  }\n\n  async getRotatedKeys(newUserKey: UserKey): Promise<SendWithIdRequest[]> {\n    if (newUserKey == null) {\n      throw new Error(\"New user key is required for rotation.\");\n    }\n\n    const requests = await Promise.all(\n      this._sends.value.map(async (send) => {\n        const sendKey = await this.cryptoService.decryptToBytes(send.key);\n        send.key = await this.cryptoService.encrypt(sendKey, newUserKey);\n        return new SendWithIdRequest(send);\n      }),\n    );\n    // separate return for easier debugging\n    return requests;\n  }\n\n  private parseFile(send: Send, file: File, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (evt) => {\n        try {\n          const [name, data] = await this.encryptFileData(\n            file.name,\n            evt.target.result as ArrayBuffer,\n            key,\n          );\n          send.file.fileName = name;\n          resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  private async encryptFileData(\n    fileName: string,\n    data: ArrayBuffer,\n    key: SymmetricCryptoKey,\n  ): Promise<[EncString, EncArrayBuffer]> {\n    const encFileName = await this.cryptoService.encrypt(fileName, key);\n    const encFileData = await this.cryptoService.encryptToBytes(new Uint8Array(data), key);\n    return [encFileName, encFileData];\n  }\n\n  private async updateObservables(sendsMap: { [id: string]: SendData }) {\n    const sends = Object.values(sendsMap || {}).map((f) => new Send(f));\n    this._sends.next(sends);\n\n    if (await this.cryptoService.hasUserKey()) {\n      this._sendViews.next(await this.decryptSends(sends));\n    }\n  }\n\n  private async decryptSends(sends: Send[]) {\n    const decryptSendPromises = sends.map((s) => s.decrypt());\n    const decryptedSends = await Promise.all(decryptSendPromises);\n\n    decryptedSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n    return decryptedSends;\n  }\n}\n","export const SEND_KDF_ITERATIONS = 100000;\n","import { BehaviorSubject } from \"rxjs\";\n\nimport { Send } from \"@bitwarden/common/tools/send/models/domain/send\";\nimport { SendView } from \"@bitwarden/common/tools/send/models/view/send.view\";\nimport { SendService } from \"@bitwarden/common/tools/send/services/send.service\";\n\nimport { browserSession, sessionSync } from \"../platform/decorators/session-sync-observable\";\n\n@browserSession\nexport class BrowserSendService extends SendService {\n  @sessionSync({ initializer: Send.fromJSON, initializeAs: \"array\" })\n  protected _sends: BehaviorSubject<Send[]>;\n  @sessionSync({ initializer: SendView.fromJSON, initializeAs: \"array\" })\n  protected _sendViews: BehaviorSubject<SendView[]>;\n}\n","import { firstValueFrom, timeout } from \"rxjs\";\n\nimport { SearchService } from \"../../abstractions/search.service\";\nimport { VaultTimeoutSettingsService } from \"../../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"../../abstractions/vault-timeout/vault-timeout.service\";\nimport { AuthService } from \"../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { ClientType } from \"../../enums\";\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { StateEventRunnerService } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { CipherService } from \"../../vault/abstractions/cipher.service\";\nimport { CollectionService } from \"../../vault/abstractions/collection.service\";\nimport { FolderService } from \"../../vault/abstractions/folder/folder.service.abstraction\";\n\nexport class VaultTimeoutService implements VaultTimeoutServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService,\n    protected platformUtilsService: PlatformUtilsService,\n    private messagingService: MessagingService,\n    private searchService: SearchService,\n    private stateService: StateService,\n    private authService: AuthService,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsService,\n    private stateEventRunnerService: StateEventRunnerService,\n    private lockedCallback: (userId?: string) => Promise<void> = null,\n    private loggedOutCallback: (expired: boolean, userId?: string) => Promise<void> = null,\n  ) {}\n\n  async init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n    // TODO: Remove after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3483)\n    await this.migrateKeyForNeverLockIfNeeded();\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.startCheck();\n    }\n  }\n\n  startCheck() {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.checkVaultTimeout();\n    setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n  }\n\n  async checkVaultTimeout(): Promise<void> {\n    // Get whether or not the view is open a single time so it can be compared for each user\n    const isViewOpen = await this.platformUtilsService.isViewOpen();\n\n    const activeUserId = await firstValueFrom(this.stateService.activeAccount$.pipe(timeout(500)));\n\n    const accounts = await firstValueFrom(this.stateService.accounts$);\n    for (const userId in accounts) {\n      if (userId != null && (await this.shouldLock(userId, activeUserId, isViewOpen))) {\n        await this.executeTimeoutAction(userId);\n      }\n    }\n  }\n\n  async lock(userId?: string): Promise<void> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n\n    const availableActions = await firstValueFrom(\n      this.vaultTimeoutSettingsService.availableVaultTimeoutActions$(userId),\n    );\n    const supportsLock = availableActions.includes(VaultTimeoutAction.Lock);\n    if (!supportsLock) {\n      await this.logOut(userId);\n    }\n\n    const currentUserId = await this.stateService.getUserId();\n\n    if (userId == null || userId === currentUserId) {\n      this.searchService.clearIndex();\n      await this.folderService.clearCache();\n      await this.collectionService.clearActiveUserCache();\n    }\n\n    await this.stateService.setEverBeenUnlocked(true, { userId: userId });\n    await this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n\n    await this.cryptoService.clearUserKey(false, userId);\n    await this.cryptoService.clearMasterKey(userId);\n    await this.cryptoService.clearOrgKeys(true, userId);\n    await this.cryptoService.clearKeyPair(true, userId);\n\n    await this.cipherService.clearCache(userId);\n\n    await this.stateEventRunnerService.handleEvent(\"lock\", (userId ?? currentUserId) as UserId);\n\n    // FIXME: We should send the userId of the user that was locked, in the case of this method being passed\n    // undefined then it should give back the currentUserId. Better yet, this method shouldn't take\n    // an undefined userId at all. All receivers need to be checked for how they handle getting undefined.\n    this.messagingService.send(\"locked\", { userId: userId });\n\n    if (this.lockedCallback != null) {\n      await this.lockedCallback(userId);\n    }\n  }\n\n  async logOut(userId?: string): Promise<void> {\n    if (this.loggedOutCallback != null) {\n      await this.loggedOutCallback(false, userId);\n    }\n  }\n\n  private async shouldLock(\n    userId: string,\n    activeUserId: string,\n    isViewOpen: boolean,\n  ): Promise<boolean> {\n    if (isViewOpen && userId === activeUserId) {\n      // We know a view is open and this is the currently active user\n      // which means they are likely looking at their vault\n      // and they should not lock.\n      return false;\n    }\n\n    const authStatus = await this.authService.getAuthStatus(userId);\n    if (\n      authStatus === AuthenticationStatus.Locked ||\n      authStatus === AuthenticationStatus.LoggedOut\n    ) {\n      return false;\n    }\n\n    const vaultTimeout = await this.vaultTimeoutSettingsService.getVaultTimeout(userId);\n    if (vaultTimeout == null || vaultTimeout < 0) {\n      return false;\n    }\n\n    const lastActive = await this.stateService.getLastActive({ userId: userId });\n    if (lastActive == null) {\n      return false;\n    }\n\n    const vaultTimeoutSeconds = vaultTimeout * 60;\n    const diffSeconds = (new Date().getTime() - lastActive) / 1000;\n    return diffSeconds >= vaultTimeoutSeconds;\n  }\n\n  private async executeTimeoutAction(userId: string): Promise<void> {\n    const timeoutAction = await firstValueFrom(\n      this.vaultTimeoutSettingsService.vaultTimeoutAction$(userId),\n    );\n    timeoutAction === VaultTimeoutAction.LogOut\n      ? await this.logOut(userId)\n      : await this.lock(userId);\n  }\n\n  private async migrateKeyForNeverLockIfNeeded(): Promise<void> {\n    // Web can't set vault timeout to never\n    if (this.platformUtilsService.getClientType() == ClientType.Web) {\n      return;\n    }\n    const accounts = await firstValueFrom(this.stateService.accounts$);\n    for (const userId in accounts) {\n      if (userId != null) {\n        await this.cryptoService.migrateAutoKeyIfNeeded(userId);\n        // Legacy users should be logged out since we're not on the web vault and can't migrate.\n        if (await this.cryptoService.isLegacyUser(null, userId)) {\n          await this.logOut(userId);\n        }\n      }\n    }\n  }\n}\n","export enum FeatureFlag {\n  BrowserFilelessImport = \"browser-fileless-import\",\n  ItemShare = \"item-share\",\n  FlexibleCollectionsV1 = \"flexible-collections-v-1\", // v-1 is intentional\n  BulkCollectionAccess = \"bulk-collection-access\",\n  VaultOnboarding = \"vault-onboarding\",\n  GeneratorToolsModernization = \"generator-tools-modernization\",\n  KeyRotationImprovements = \"key-rotation-improvements\",\n  FlexibleCollectionsMigration = \"flexible-collections-migration\",\n  ShowPaymentMethodWarningBanners = \"show-payment-method-warning-banners\",\n}\n\n// Replace this with a type safe lookup of the feature flag values in PM-2282\nexport type FeatureFlagValue = number | string | boolean;\n","import { VaultTimeoutService as BaseVaultTimeoutService } from \"@bitwarden/common/services/vault-timeout/vault-timeout.service\";\n\nimport { SafariApp } from \"../../browser/safariApp\";\n\nexport default class VaultTimeoutService extends BaseVaultTimeoutService {\n  startCheck() {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.checkVaultTimeout();\n    if (this.platformUtilsService.isSafari()) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.checkSafari();\n    } else {\n      setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds\n    }\n  }\n\n  // This is a work-around to safari adding an arbitrary delay to setTimeout and\n  //  setIntervals. It works by calling the native extension which sleeps for 10s,\n  //  efficiently replicating setInterval.\n  async checkSafari() {\n    // eslint-disable-next-line\n    while (true) {\n      try {\n        await SafariApp.sendMessageToApp(\"sleep\");\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.checkVaultTimeout();\n      } catch (e) {\n        // eslint-disable-next-line\n        console.log(\"Exception Safari VaultTimeout\", e);\n      }\n    }\n  }\n}\n","import { SuppressDownloadScriptInjectionConfig } from \"../background/abstractions/fileless-importer.background\";\n\ntype FilelessImporterInjectedScriptsConfigurations = {\n  LpSuppressImportDownload: {\n    mv2: SuppressDownloadScriptInjectionConfig;\n    mv3: SuppressDownloadScriptInjectionConfig;\n  };\n};\n\nconst FilelessImporterInjectedScriptsConfig: FilelessImporterInjectedScriptsConfigurations = {\n  LpSuppressImportDownload: {\n    mv2: {\n      file: \"content/lp-suppress-import-download-script-append-mv2.js\",\n    },\n    mv3: {\n      file: \"content/lp-suppress-import-download.js\",\n      scriptingApiDetails: { world: \"MAIN\" },\n    },\n  },\n} as const;\n\nexport { FilelessImporterInjectedScriptsConfig };\n","const FilelessImportType = {\n  LP: \"LP\",\n} as const;\n\ntype FilelessImportTypeKeys = (typeof FilelessImportType)[keyof typeof FilelessImportType];\n\nconst FilelessImportPort = {\n  NotificationBar: \"fileless-importer-notification-bar\",\n  LpImporter: \"lp-fileless-importer\",\n} as const;\n\nexport { FilelessImportType, FilelessImportTypeKeys, FilelessImportPort };\n","import { firstValueFrom } from \"rxjs\";\n\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config.service.abstraction\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { ImportServiceAbstraction } from \"@bitwarden/importer/core\";\n\nimport NotificationBackground from \"../../autofill/background/notification.background\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { FilelessImporterInjectedScriptsConfig } from \"../config/fileless-importer-injected-scripts\";\nimport {\n  FilelessImportPort,\n  FilelessImportType,\n  FilelessImportTypeKeys,\n} from \"../enums/fileless-import.enums\";\n\nimport {\n  ImportNotificationMessageHandlers,\n  LpImporterMessageHandlers,\n  FilelessImporterBackground as FilelessImporterBackgroundInterface,\n  FilelessImportPortMessage,\n  SuppressDownloadScriptInjectionConfig,\n} from \"./abstractions/fileless-importer.background\";\n\nclass FilelessImporterBackground implements FilelessImporterBackgroundInterface {\n  private static readonly filelessImporterPortNames: Set<string> = new Set([\n    FilelessImportPort.LpImporter,\n    FilelessImportPort.NotificationBar,\n  ]);\n  private importNotificationsPort: chrome.runtime.Port;\n  private lpImporterPort: chrome.runtime.Port;\n  private readonly importNotificationsPortMessageHandlers: ImportNotificationMessageHandlers = {\n    startFilelessImport: ({ message }) => this.startFilelessImport(message.importType),\n    cancelFilelessImport: ({ message, port }) =>\n      this.cancelFilelessImport(message.importType, port.sender),\n  };\n  private readonly lpImporterPortMessageHandlers: LpImporterMessageHandlers = {\n    displayLpImportNotification: ({ port }) =>\n      this.displayFilelessImportNotification(port.sender.tab, FilelessImportType.LP),\n    startLpImport: ({ message }) => this.triggerLpImport(message.data),\n  };\n\n  /**\n   * Creates a new instance of the fileless importer background logic.\n   *\n   * @param configService - Identifies if the feature flag is enabled.\n   * @param authService - Verifies if the auth status of the user.\n   * @param policyService - Identifies if the user account has a policy that disables personal ownership.\n   * @param notificationBackground - Used to inject the notification bar into the tab.\n   * @param importService - Used to import the export data into the vault.\n   * @param syncService - Used to trigger a full sync after the import is completed.\n   */\n  constructor(\n    private configService: ConfigServiceAbstraction,\n    private authService: AuthService,\n    private policyService: PolicyService,\n    private notificationBackground: NotificationBackground,\n    private importService: ImportServiceAbstraction,\n    private syncService: SyncService,\n  ) {}\n\n  /**\n   * Initializes the fileless importer background logic.\n   */\n  init() {\n    this.setupPortMessageListeners();\n  }\n\n  /**\n   * Starts an import of the export data pulled from the tab.\n   *\n   * @param importType - The type of import to start. Identifies the used content script.\n   */\n  private startFilelessImport(importType: FilelessImportTypeKeys) {\n    if (importType === FilelessImportType.LP) {\n      this.lpImporterPort?.postMessage({ command: \"startLpFilelessImport\" });\n    }\n  }\n\n  /**\n   * Cancels an import of the export data pulled from the tab. This closes any\n   * existing notifications that are present in the tab, and triggers importer\n   * specific behavior based on the import type.\n   *\n   * @param importType - The type of import to cancel. Identifies the used content script.\n   * @param sender - The sender of the message.\n   */\n  private async cancelFilelessImport(\n    importType: FilelessImportTypeKeys,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (importType === FilelessImportType.LP) {\n      this.triggerLpImporterCsvDownload();\n    }\n\n    await BrowserApi.tabSendMessage(sender.tab, { command: \"closeNotificationBar\" });\n  }\n\n  /**\n   * Injects the notification bar into the passed tab.\n   *\n   * @param tab\n   * @param importType\n   */\n  private async displayFilelessImportNotification(tab: chrome.tabs.Tab, importType: string) {\n    await this.notificationBackground.requestFilelessImport(tab, importType);\n  }\n\n  /**\n   * Injects the script used to suppress the download of the LP importer export file.\n   *\n   * @param sender - The sender of the message.\n   * @param injectionConfig - The configuration for the injection.\n   */\n  private async injectScriptConfig(\n    sender: chrome.runtime.MessageSender,\n    injectionConfig: SuppressDownloadScriptInjectionConfig,\n  ) {\n    await BrowserApi.executeScriptInTab(\n      sender.tab.id,\n      { file: injectionConfig.file, runAt: \"document_start\" },\n      injectionConfig.scriptingApiDetails,\n    );\n  }\n\n  /**\n   * Triggers the download of the CSV file from the LP importer. This is triggered\n   * when the user opts to not save the export to Bitwarden within the notification bar.\n   */\n  private triggerLpImporterCsvDownload() {\n    this.lpImporterPort?.postMessage({ command: \"triggerCsvDownload\" });\n    this.lpImporterPort?.disconnect();\n  }\n\n  /**\n   * Completes the import process for the LP importer. This is triggered when the\n   * user opts to save the export to Bitwarden within the notification bar.\n   *\n   * @param data - The export data to import.\n   * @param sender - The sender of the message.\n   */\n  private async triggerLpImport(data: string) {\n    if (!data) {\n      return;\n    }\n\n    const promptForPassword_callback = async () => \"\";\n    const importer = this.importService.getImporter(\n      \"lastpasscsv\",\n      promptForPassword_callback,\n      null,\n    );\n\n    try {\n      const result = await this.importService.import(importer, data, null, null, false);\n      if (result.success) {\n        this.importNotificationsPort?.postMessage({ command: \"filelessImportCompleted\" });\n        await this.syncService.fullSync(true);\n      }\n    } catch (error) {\n      this.importNotificationsPort?.postMessage({\n        command: \"filelessImportFailed\",\n        importErrorMessage: Object.values(error).length\n          ? error\n          : chrome.i18n.getMessage(\"importNetworkError\"),\n      });\n    }\n  }\n\n  /**\n   * Identifies if the user account has a policy that disables personal ownership.\n   */\n  private async removeIndividualVault(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n    );\n  }\n\n  /**\n   * Sets up onConnect listeners for the extension.\n   */\n  private setupPortMessageListeners() {\n    chrome.runtime.onConnect.addListener(this.handlePortOnConnect);\n  }\n\n  /**\n   * Handles connections from content scripts that affect the fileless importer behavior.\n   * Is used to facilitate the passing of data and user actions to enact the import\n   * of web content to the Bitwarden vault. Along with this, a check is made to ensure\n   * that the feature flag is enabled and the user is authenticated.\n   */\n  private handlePortOnConnect = async (port: chrome.runtime.Port) => {\n    if (!FilelessImporterBackground.filelessImporterPortNames.has(port.name)) {\n      return;\n    }\n\n    const filelessImportFeatureFlagEnabled = await this.configService.getFeatureFlag<boolean>(\n      FeatureFlag.BrowserFilelessImport,\n    );\n    const userAuthStatus = await this.authService.getAuthStatus();\n    const removeIndividualVault = await this.removeIndividualVault();\n    const filelessImportEnabled =\n      filelessImportFeatureFlagEnabled &&\n      userAuthStatus === AuthenticationStatus.Unlocked &&\n      !removeIndividualVault;\n    port.postMessage({ command: \"verifyFeatureFlag\", filelessImportEnabled });\n\n    if (!filelessImportEnabled) {\n      return;\n    }\n\n    port.onMessage.addListener(this.handleImporterPortMessage);\n    port.onDisconnect.addListener(this.handleImporterPortDisconnect);\n\n    switch (port.name) {\n      case FilelessImportPort.LpImporter:\n        this.lpImporterPort = port;\n        await this.injectScriptConfig(\n          port.sender,\n          BrowserApi.manifestVersion === 3\n            ? FilelessImporterInjectedScriptsConfig.LpSuppressImportDownload.mv3\n            : FilelessImporterInjectedScriptsConfig.LpSuppressImportDownload.mv2,\n        );\n        break;\n      case FilelessImportPort.NotificationBar:\n        this.importNotificationsPort = port;\n        break;\n    }\n  };\n\n  /**\n   * Handles messages that are sent from fileless importer content scripts.\n   * @param message - The message that was sent.\n   * @param port - The port that the message was sent from.\n   */\n  private handleImporterPortMessage = (\n    message: FilelessImportPortMessage,\n    port: chrome.runtime.Port,\n  ) => {\n    let handler: CallableFunction | undefined;\n\n    switch (port.name) {\n      case FilelessImportPort.LpImporter:\n        handler = this.lpImporterPortMessageHandlers[message.command];\n        break;\n      case FilelessImportPort.NotificationBar:\n        handler = this.importNotificationsPortMessageHandlers[message.command];\n        break;\n    }\n\n    if (!handler) {\n      return;\n    }\n\n    handler({ message, port });\n  };\n\n  /**\n   * Handles disconnections from fileless importer content scripts.\n   * @param port - The port that was disconnected.\n   */\n  private handleImporterPortDisconnect = (port: chrome.runtime.Port) => {\n    switch (port.name) {\n      case FilelessImportPort.LpImporter:\n        this.lpImporterPort = null;\n        break;\n      case FilelessImportPort.NotificationBar:\n        this.importNotificationsPort = null;\n        break;\n    }\n  };\n}\n\nexport default FilelessImporterBackground;\n","import {\n  BehaviorSubject,\n  EmptyError,\n  filter,\n  firstValueFrom,\n  fromEvent,\n  fromEventPattern,\n  merge,\n  Observable,\n  Subject,\n  switchMap,\n  take,\n  takeUntil,\n  throwError,\n} from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { UserRequestedFallbackAbortReason } from \"@bitwarden/common/vault/abstractions/fido2/fido2-client.service.abstraction\";\nimport {\n  Fido2UserInterfaceService as Fido2UserInterfaceServiceAbstraction,\n  Fido2UserInterfaceSession,\n  NewCredentialParams,\n  PickCredentialParams,\n} from \"@bitwarden/common/vault/abstractions/fido2/fido2-user-interface.service.abstraction\";\n\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { closeFido2Popout, openFido2Popout } from \"../popup/utils/vault-popout-window\";\n\nconst BrowserFido2MessageName = \"BrowserFido2UserInterfaceServiceMessage\";\n\nexport class SessionClosedError extends Error {\n  constructor() {\n    super(\"Fido2UserInterfaceSession was closed\");\n  }\n}\n\nexport type BrowserFido2Message = { sessionId: string } & (\n  | /**\n   * This message is used by popouts to announce that they are ready\n   * to recieve messages.\n   **/ {\n      type: \"ConnectResponse\";\n    }\n  /**\n   * This message is used to announce the creation of a new session.\n   * It is used by popouts to know when to close.\n   **/\n  | {\n      type: \"NewSessionCreatedRequest\";\n    }\n  | {\n      type: \"PickCredentialRequest\";\n      cipherIds: string[];\n      userVerification: boolean;\n      fallbackSupported: boolean;\n    }\n  | {\n      type: \"PickCredentialResponse\";\n      cipherId?: string;\n      userVerified: boolean;\n    }\n  | {\n      type: \"ConfirmNewCredentialRequest\";\n      credentialName: string;\n      userName: string;\n      userVerification: boolean;\n      fallbackSupported: boolean;\n      rpId: string;\n    }\n  | {\n      type: \"ConfirmNewCredentialResponse\";\n      cipherId: string;\n      userVerified: boolean;\n    }\n  | {\n      type: \"InformExcludedCredentialRequest\";\n      existingCipherIds: string[];\n      fallbackSupported: boolean;\n    }\n  | {\n      type: \"InformCredentialNotFoundRequest\";\n      fallbackSupported: boolean;\n    }\n  | {\n      type: \"AbortRequest\";\n    }\n  | {\n      type: \"AbortResponse\";\n      fallbackRequested: boolean;\n    }\n);\n\n/**\n * Browser implementation of the {@link Fido2UserInterfaceService}.\n * The user interface is implemented as a popout and the service uses the browser's messaging API to communicate with it.\n */\nexport class BrowserFido2UserInterfaceService implements Fido2UserInterfaceServiceAbstraction {\n  constructor(private authService: AuthService) {}\n\n  async newSession(\n    fallbackSupported: boolean,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ): Promise<Fido2UserInterfaceSession> {\n    return await BrowserFido2UserInterfaceSession.create(\n      this.authService,\n      fallbackSupported,\n      tab,\n      abortController,\n    );\n  }\n}\n\nexport class BrowserFido2UserInterfaceSession implements Fido2UserInterfaceSession {\n  static async create(\n    authService: AuthService,\n    fallbackSupported: boolean,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ): Promise<BrowserFido2UserInterfaceSession> {\n    return new BrowserFido2UserInterfaceSession(\n      authService,\n      fallbackSupported,\n      tab,\n      abortController,\n    );\n  }\n\n  static sendMessage(msg: BrowserFido2Message) {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.sendMessage(BrowserFido2MessageName, msg);\n  }\n\n  static abortPopout(sessionId: string, fallbackRequested = false) {\n    this.sendMessage({\n      sessionId: sessionId,\n      type: \"AbortResponse\",\n      fallbackRequested: fallbackRequested,\n    });\n  }\n\n  static confirmNewCredentialResponse(sessionId: string, cipherId: string, userVerified: boolean) {\n    this.sendMessage({\n      sessionId: sessionId,\n      type: \"ConfirmNewCredentialResponse\",\n      cipherId,\n      userVerified,\n    });\n  }\n\n  private closed = false;\n  private messages$ = (BrowserApi.messageListener$() as Observable<BrowserFido2Message>).pipe(\n    filter((msg) => msg.sessionId === this.sessionId),\n  );\n  private connected$ = new BehaviorSubject(false);\n  private windowClosed$: Observable<number>;\n  private destroy$ = new Subject<void>();\n\n  private constructor(\n    private readonly authService: AuthService,\n    private readonly fallbackSupported: boolean,\n    private readonly tab: chrome.tabs.Tab,\n    readonly abortController = new AbortController(),\n    readonly sessionId = Utils.newGuid(),\n  ) {\n    this.messages$\n      .pipe(\n        filter((msg) => msg.type === \"ConnectResponse\"),\n        take(1),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(() => {\n        this.connected$.next(true);\n      });\n\n    // Handle session aborted by RP\n    fromEvent(abortController.signal, \"abort\")\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.close();\n        BrowserFido2UserInterfaceSession.sendMessage({\n          type: \"AbortRequest\",\n          sessionId: this.sessionId,\n        });\n      });\n\n    // Handle session aborted by user\n    this.messages$\n      .pipe(\n        filter((msg) => msg.type === \"AbortResponse\"),\n        take(1),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((msg) => {\n        if (msg.type === \"AbortResponse\") {\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.close();\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.abort(msg.fallbackRequested);\n        }\n      });\n\n    this.windowClosed$ = fromEventPattern(\n      // FIXME: Make sure that is does not cause a memory leak in Safari or use BrowserApi.AddListener\n      // and test that it doesn't break. Tracking Ticket: https://bitwarden.atlassian.net/browse/PM-4735\n      // eslint-disable-next-line no-restricted-syntax\n      (handler: any) => chrome.windows.onRemoved.addListener(handler),\n      (handler: any) => chrome.windows.onRemoved.removeListener(handler),\n    );\n\n    BrowserFido2UserInterfaceSession.sendMessage({\n      type: \"NewSessionCreatedRequest\",\n      sessionId,\n    });\n  }\n\n  async pickCredential({\n    cipherIds,\n    userVerification,\n  }: PickCredentialParams): Promise<{ cipherId: string; userVerified: boolean }> {\n    const data: BrowserFido2Message = {\n      type: \"PickCredentialRequest\",\n      cipherIds,\n      sessionId: this.sessionId,\n      userVerification,\n      fallbackSupported: this.fallbackSupported,\n    };\n\n    await this.send(data);\n    const response = await this.receive(\"PickCredentialResponse\");\n\n    return { cipherId: response.cipherId, userVerified: response.userVerified };\n  }\n\n  async confirmNewCredential({\n    credentialName,\n    userName,\n    userVerification,\n    rpId,\n  }: NewCredentialParams): Promise<{ cipherId: string; userVerified: boolean }> {\n    const data: BrowserFido2Message = {\n      type: \"ConfirmNewCredentialRequest\",\n      sessionId: this.sessionId,\n      credentialName,\n      userName,\n      userVerification,\n      fallbackSupported: this.fallbackSupported,\n      rpId,\n    };\n\n    await this.send(data);\n    const response = await this.receive(\"ConfirmNewCredentialResponse\");\n\n    return { cipherId: response.cipherId, userVerified: response.userVerified };\n  }\n\n  async informExcludedCredential(existingCipherIds: string[]): Promise<void> {\n    const data: BrowserFido2Message = {\n      type: \"InformExcludedCredentialRequest\",\n      sessionId: this.sessionId,\n      existingCipherIds,\n      fallbackSupported: this.fallbackSupported,\n    };\n\n    await this.send(data);\n    await this.receive(\"AbortResponse\");\n  }\n\n  async ensureUnlockedVault(): Promise<void> {\n    if ((await this.authService.getAuthStatus()) !== AuthenticationStatus.Unlocked) {\n      await this.connect();\n    }\n  }\n\n  async informCredentialNotFound(): Promise<void> {\n    const data: BrowserFido2Message = {\n      type: \"InformCredentialNotFoundRequest\",\n      sessionId: this.sessionId,\n      fallbackSupported: this.fallbackSupported,\n    };\n\n    await this.send(data);\n    await this.receive(\"AbortResponse\");\n  }\n\n  async close() {\n    await closeFido2Popout(this.sessionId);\n    this.closed = true;\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async abort(fallback = false) {\n    this.abortController.abort(fallback ? UserRequestedFallbackAbortReason : undefined);\n  }\n\n  private async send(msg: BrowserFido2Message): Promise<void> {\n    if (!this.connected$.value) {\n      await this.connect();\n    }\n    BrowserFido2UserInterfaceSession.sendMessage(msg);\n  }\n\n  private async receive<T extends BrowserFido2Message[\"type\"]>(\n    type: T,\n  ): Promise<BrowserFido2Message & { type: T }> {\n    try {\n      const response = await firstValueFrom(\n        this.messages$.pipe(\n          filter((msg) => msg.sessionId === this.sessionId && msg.type === type),\n          takeUntil(this.destroy$),\n        ),\n      );\n      return response as BrowserFido2Message & { type: T };\n    } catch (error) {\n      if (error instanceof EmptyError) {\n        throw new SessionClosedError();\n      }\n      throw error;\n    }\n  }\n\n  private async connect(): Promise<void> {\n    if (this.closed) {\n      throw new Error(\"Cannot re-open closed session\");\n    }\n\n    const connectPromise = firstValueFrom(\n      merge(\n        this.connected$.pipe(filter((connected) => connected === true)),\n        fromEvent(this.abortController.signal, \"abort\").pipe(\n          switchMap(() => throwError(() => new SessionClosedError())),\n        ),\n      ),\n    );\n\n    const popoutId = await openFido2Popout(this.tab, {\n      sessionId: this.sessionId,\n      fallbackSupported: this.fallbackSupported,\n    });\n\n    this.windowClosed$\n      .pipe(\n        filter((windowId) => {\n          return popoutId === windowId;\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(() => {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.close();\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.abort(true);\n      });\n\n    await connectPromise;\n  }\n}\n","import { BrowserApi } from \"../../platform/browser/browser-api\";\n\nimport { Fido2Service as Fido2ServiceInterface } from \"./abstractions/fido2.service\";\n\nexport default class Fido2Service implements Fido2ServiceInterface {\n  async init() {\n    const tabs = await BrowserApi.tabsQuery({});\n    tabs.forEach((tab) => {\n      if (tab.url?.startsWith(\"https\")) {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.injectFido2ContentScripts({ tab } as chrome.runtime.MessageSender);\n      }\n    });\n\n    BrowserApi.addListener(chrome.runtime.onConnect, (port) => {\n      if (port.name === \"fido2ContentScriptReady\") {\n        port.postMessage({ command: \"fido2ContentScriptInit\" });\n      }\n    });\n  }\n\n  /**\n   * Injects the FIDO2 content script into the current tab.\n   * @param {chrome.runtime.MessageSender}  sender\n   * @returns {Promise<void>}\n   */\n  async injectFido2ContentScripts(sender: chrome.runtime.MessageSender): Promise<void> {\n    await BrowserApi.executeScriptInTab(sender.tab.id, {\n      file: \"content/fido2/content-script.js\",\n      frameId: sender.frameId,\n      runAt: \"document_start\",\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { CipherStatus } from \"./cipher-status.model\";\n\nexport type VaultFilterFunction = (cipher: CipherView) => boolean;\n\nexport class VaultFilter {\n  cipherType?: CipherType;\n  selectedCollection = false; // This is needed because of how the \"Unassigned\" collection works. It has a null id.\n  selectedCollectionId?: string;\n  status?: CipherStatus;\n  selectedFolder = false; // This is needed because of how the \"No Folder\" folder works. It has a null id.\n  selectedFolderId?: string;\n  selectedOrganizationId?: string;\n  myVaultOnly = false;\n  refreshCollectionsAndFolders = false;\n\n  constructor(init?: Partial<VaultFilter>) {\n    Object.assign(this, init);\n  }\n\n  resetFilter() {\n    this.cipherType = null;\n    this.status = null;\n    this.selectedCollection = false;\n    this.selectedCollectionId = null;\n    this.selectedFolder = false;\n    this.selectedFolderId = null;\n  }\n\n  resetOrganization() {\n    this.myVaultOnly = false;\n    this.selectedOrganizationId = null;\n    this.resetFilter();\n  }\n\n  buildFilter(): VaultFilterFunction {\n    return (cipher) => {\n      let cipherPassesFilter = true;\n      if (this.status === \"favorites\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.favorite;\n      }\n      if (this.status === \"trash\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.isDeleted;\n      }\n      if (this.cipherType != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.type === this.cipherType;\n      }\n      if (this.selectedFolder && this.selectedFolderId == null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId == null;\n      }\n      if (this.selectedFolder && this.selectedFolderId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId === this.selectedFolderId;\n      }\n      if (this.selectedCollection && this.selectedCollectionId == null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.organizationId != null &&\n          (cipher.collectionIds == null || cipher.collectionIds.length === 0);\n      }\n      if (this.selectedCollection && this.selectedCollectionId != null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.collectionIds != null && cipher.collectionIds.includes(this.selectedCollectionId);\n      }\n      if (this.selectedOrganizationId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === this.selectedOrganizationId;\n      }\n      if (this.myVaultOnly && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === null;\n      }\n      return cipherPassesFilter;\n    };\n  }\n}\n","import { map, Observable } from \"rxjs\";\n\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { UserId } from \"../../../types/guid\";\nimport { OrganizationData } from \"../../models/data/organization.data\";\nimport { Organization } from \"../../models/domain/organization\";\n\nexport function canAccessVaultTab(org: Organization): boolean {\n  return org.canViewAssignedCollections || org.canViewAllCollections;\n}\n\nexport function canAccessSettingsTab(org: Organization): boolean {\n  return (\n    org.isOwner ||\n    org.canManagePolicies ||\n    org.canManageSso ||\n    org.canManageScim ||\n    org.canAccessImportExport ||\n    org.canManageDeviceApprovals\n  );\n}\n\nexport function canAccessMembersTab(org: Organization): boolean {\n  return org.canManageUsers || org.canManageUsersPassword;\n}\n\nexport function canAccessGroupsTab(org: Organization): boolean {\n  return org.canManageGroups;\n}\n\nexport function canAccessReportingTab(org: Organization): boolean {\n  return org.canAccessReports || org.canAccessEventLogs;\n}\n\nexport function canAccessBillingTab(org: Organization): boolean {\n  return org.isOwner;\n}\n\nexport function canAccessOrgAdmin(org: Organization): boolean {\n  // Admin console can only be accessed by Owners for disabled organizations\n  if (!org.enabled && !org.isOwner) {\n    return false;\n  }\n  return (\n    canAccessMembersTab(org) ||\n    canAccessGroupsTab(org) ||\n    canAccessReportingTab(org) ||\n    canAccessBillingTab(org) ||\n    canAccessSettingsTab(org) ||\n    canAccessVaultTab(org)\n  );\n}\n\nexport function getOrganizationById(id: string) {\n  return map<Organization[], Organization | undefined>((orgs) => orgs.find((o) => o.id === id));\n}\n\nexport function canAccessAdmin(i18nService: I18nService) {\n  return map<Organization[], Organization[]>((orgs) =>\n    orgs.filter(canAccessOrgAdmin).sort(Utils.getSortFunction(i18nService, \"name\")),\n  );\n}\n\n/**\n * @deprecated\n * To be removed after Flexible Collections.\n **/\nexport function canAccessImportExport(i18nService: I18nService) {\n  return map<Organization[], Organization[]>((orgs) =>\n    orgs\n      .filter((org) => org.canAccessImportExport)\n      .sort(Utils.getSortFunction(i18nService, \"name\")),\n  );\n}\n\nexport function canAccessImport(i18nService: I18nService) {\n  return map<Organization[], Organization[]>((orgs) =>\n    orgs\n      .filter(\n        (org) =>\n          org.canAccessImportExport || (org.canCreateNewCollections && org.flexibleCollections),\n      )\n      .sort(Utils.getSortFunction(i18nService, \"name\")),\n  );\n}\n\n/**\n * Returns `true` if a user is a member of an organization (rather than only being a ProviderUser)\n * @deprecated Use organizationService.organizations$ with a filter instead\n */\nexport function isMember(org: Organization): boolean {\n  return org.isMember;\n}\n\n/**\n * Publishes an observable stream of organizations. This service is meant to\n * be used widely across Bitwarden as the primary way of fetching organizations.\n * Risky operations like updates are isolated to the\n * internal extension `InternalOrganizationServiceAbstraction`.\n */\nexport abstract class OrganizationService {\n  /**\n   * Publishes state for all organizations under the active user.\n   * @returns An observable list of organizations\n   */\n  organizations$: Observable<Organization[]>;\n\n  // @todo Clean these up. Continuing to expand them is not recommended.\n  // @see https://bitwarden.atlassian.net/browse/AC-2252\n  memberOrganizations$: Observable<Organization[]>;\n  /**\n   * @deprecated This is currently only used in the CLI, and should not be\n   * used in any new calls. Use get$ instead for the time being, and we'll be\n   * removing this method soon. See Jira for details:\n   * https://bitwarden.atlassian.net/browse/AC-2252.\n   */\n  getFromState: (id: string) => Promise<Organization>;\n  canManageSponsorships: () => Promise<boolean>;\n  hasOrganizations: () => Promise<boolean>;\n  get$: (id: string) => Observable<Organization | undefined>;\n  get: (id: string) => Promise<Organization>;\n  getAll: (userId?: string) => Promise<Organization[]>;\n  //\n}\n\n/**\n * Big scary buttons that **update** organization state. These should only be\n * called from within admin-console scoped code. Extends the base\n * `OrganizationService` for easy access to `get` calls.\n * @internal\n */\nexport abstract class InternalOrganizationServiceAbstraction extends OrganizationService {\n  /**\n   * Replaces state for the provided organization, or creates it if not found.\n   * @param organization The organization state being saved.\n   * @param userId The userId to replace state for. Defaults to the active\n   * user.\n   */\n  upsert: (OrganizationData: OrganizationData) => Promise<void>;\n\n  /**\n   * Replaces state for the entire registered organization list for the active user.\n   * You probably don't want this unless you're calling from a full sync\n   * operation or a logout. See `upsert` for creating & updating a single\n   * organization in the state.\n   * @param organizations A complete list of all organization state for the active\n   * user.\n   * @param userId The userId to replace state for. Defaults to the active\n   * user.\n   */\n  replace: (organizations: { [id: string]: OrganizationData }, userId?: UserId) => Promise<void>;\n}\n","import { ITreeNodeObject, TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\n\nexport class DynamicTreeNode<T extends ITreeNodeObject> {\n  fullList: T[];\n  nestedList: TreeNode<T>[];\n\n  hasId(id: string): boolean {\n    return this.fullList != null && this.fullList.filter((i: T) => i.id === id).length > 0;\n  }\n\n  constructor(init?: Partial<DynamicTreeNode<T>>) {\n    Object.assign(this, init);\n  }\n}\n","import { KeyDefinition, VAULT_FILTER_DISK } from \"../../../platform/state\";\n\nexport const COLLAPSED_GROUPINGS = KeyDefinition.array<string>(\n  VAULT_FILTER_DISK,\n  \"collapsedGroupings\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n","import { Observable } from \"rxjs\";\n\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { FolderData } from \"../../models/data/folder.data\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { FolderView } from \"../../models/view/folder.view\";\n\nexport abstract class FolderService {\n  folders$: Observable<Folder[]>;\n  folderViews$: Observable<FolderView[]>;\n\n  clearCache: () => Promise<void>;\n  encrypt: (model: FolderView, key?: SymmetricCryptoKey) => Promise<Folder>;\n  get: (id: string) => Promise<Folder>;\n  getAllFromState: () => Promise<Folder[]>;\n  /**\n   * @deprecated Only use in CLI!\n   */\n  getFromState: (id: string) => Promise<Folder>;\n  /**\n   * @deprecated Only use in CLI!\n   */\n  getAllDecryptedFromState: () => Promise<FolderView[]>;\n  decryptFolders: (folders: Folder[]) => Promise<FolderView[]>;\n}\n\nexport abstract class InternalFolderService extends FolderService {\n  upsert: (folder: FolderData | FolderData[]) => Promise<void>;\n  replace: (folders: { [id: string]: FolderData }) => Promise<void>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { UriMatchStrategySetting } from \"../../models/domain/domain-service\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { CipherId, CollectionId, OrganizationId } from \"../../types/guid\";\nimport { CipherType } from \"../enums/cipher-type\";\nimport { CipherData } from \"../models/data/cipher.data\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Field } from \"../models/domain/field\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { FieldView } from \"../models/view/field.view\";\n\nexport abstract class CipherService {\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (\n    model: CipherView,\n    keyForEncryption?: SymmetricCryptoKey,\n    keyForCipherKeyDecryption?: SymmetricCryptoKey,\n    originalCipher?: Cipher,\n  ) => Promise<Cipher>;\n  encryptFields: (fieldsModel: FieldView[], key: SymmetricCryptoKey) => Promise<Field[]>;\n  encryptField: (fieldModel: FieldView, key: SymmetricCryptoKey) => Promise<Field>;\n  get: (id: string) => Promise<Cipher>;\n  getAll: () => Promise<Cipher[]>;\n  getAllDecrypted: () => Promise<CipherView[]>;\n  getAllDecryptedForGrouping: (groupingId: string, folder?: boolean) => Promise<CipherView[]>;\n  getAllDecryptedForUrl: (\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch?: UriMatchStrategySetting,\n  ) => Promise<CipherView[]>;\n  getAllFromApiForOrganization: (organizationId: string) => Promise<CipherView[]>;\n  /**\n   * Gets ciphers belonging to the specified organization that the user has explicit collection level access to.\n   * Ciphers that are not assigned to any collections are only included for users with admin access.\n   */\n  getManyFromApiForOrganization: (organizationId: string) => Promise<CipherView[]>;\n  getLastUsedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getLastLaunchedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getNextCipherForUrl: (url: string) => Promise<CipherView>;\n  updateLastUsedIndexForUrl: (url: string) => void;\n  updateLastUsedDate: (id: string) => Promise<void>;\n  updateLastLaunchedDate: (id: string) => Promise<void>;\n  saveNeverDomain: (domain: string) => Promise<void>;\n  createWithServer: (cipher: Cipher, orgAdmin?: boolean) => Promise<any>;\n  updateWithServer: (cipher: Cipher, orgAdmin?: boolean, isNotClone?: boolean) => Promise<any>;\n  shareWithServer: (\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[],\n  ) => Promise<any>;\n  shareManyWithServer: (\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[],\n  ) => Promise<any>;\n  saveAttachmentWithServer: (\n    cipher: Cipher,\n    unencryptedFile: any,\n    admin?: boolean,\n  ) => Promise<Cipher>;\n  saveAttachmentRawWithServer: (\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    admin?: boolean,\n  ) => Promise<Cipher>;\n  saveCollectionsWithServer: (cipher: Cipher) => Promise<any>;\n  /**\n   * Bulk update collections for many ciphers with the server\n   * @param orgId\n   * @param cipherIds\n   * @param collectionIds\n   * @param removeCollections - If true, the collections will be removed from the ciphers, otherwise they will be added\n   */\n  bulkUpdateCollectionsWithServer: (\n    orgId: OrganizationId,\n    cipherIds: CipherId[],\n    collectionIds: CollectionId[],\n    removeCollections: boolean,\n  ) => Promise<void>;\n  upsert: (cipher: CipherData | CipherData[]) => Promise<any>;\n  replace: (ciphers: { [id: string]: CipherData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  moveManyWithServer: (ids: string[], folderId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n  deleteWithServer: (id: string, asAdmin?: boolean) => Promise<any>;\n  deleteManyWithServer: (ids: string[], asAdmin?: boolean) => Promise<any>;\n  deleteAttachment: (id: string, attachmentId: string) => Promise<void>;\n  deleteAttachmentWithServer: (id: string, attachmentId: string) => Promise<void>;\n  sortCiphersByLastUsed: (a: CipherView, b: CipherView) => number;\n  sortCiphersByLastUsedThenName: (a: CipherView, b: CipherView) => number;\n  getLocaleSortingFunction: () => (a: CipherView, b: CipherView) => number;\n  softDelete: (id: string | string[]) => Promise<any>;\n  softDeleteWithServer: (id: string, asAdmin?: boolean) => Promise<any>;\n  softDeleteManyWithServer: (ids: string[], asAdmin?: boolean) => Promise<any>;\n  restore: (\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[],\n  ) => Promise<any>;\n  restoreWithServer: (id: string, asAdmin?: boolean) => Promise<any>;\n  restoreManyWithServer: (\n    ids: string[],\n    organizationId?: string,\n    asAdmin?: boolean,\n  ) => Promise<void>;\n  getKeyForCipherKeyDecryption: (cipher: Cipher) => Promise<any>;\n}\n","import { Observable } from \"rxjs\";\n\nimport { CollectionId } from \"../../types/guid\";\nimport { CollectionData } from \"../models/data/collection.data\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/tree-node\";\nimport { CollectionView } from \"../models/view/collection.view\";\n\nexport abstract class CollectionService {\n  decryptedCollections$: Observable<CollectionView[]>;\n\n  clearActiveUserCache: () => Promise<void>;\n  encrypt: (model: CollectionView) => Promise<Collection>;\n  decryptedCollectionViews$: (ids: CollectionId[]) => Observable<CollectionView[]>;\n  /**\n   * @deprecated This method will soon be made private, use `decryptedCollectionViews$` instead.\n   */\n  decryptMany: (collections: Collection[]) => Promise<CollectionView[]>;\n  get: (id: string) => Promise<Collection>;\n  getAll: () => Promise<Collection[]>;\n  getAllDecrypted: () => Promise<CollectionView[]>;\n  getAllNested: (collections?: CollectionView[]) => Promise<TreeNode<CollectionView>[]>;\n  getNested: (id: string) => Promise<TreeNode<CollectionView>>;\n  upsert: (collection: CollectionData | CollectionData[]) => Promise<any>;\n  replace: (collections: { [id: string]: CollectionData }) => Promise<any>;\n  clear: (userId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../../types/guid\";\nimport { PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../../models/data/policy.data\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/master-password-policy-options\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../../models/domain/reset-password-policy-options\";\n\nexport abstract class PolicyService {\n  /**\n   * All policies for the active user from sync data.\n   * May include policies that are disabled or otherwise do not apply to the user. Be careful using this!\n   * Consider using {@link get$} or {@link getAll$} instead, which will only return policies that should be enforced against the user.\n   */\n  policies$: Observable<Policy[]>;\n\n  /**\n   * @returns the first {@link Policy} found that applies to the active user.\n   * A policy \"applies\" if it is enabled and the user is not exempt (e.g. because they are an Owner).\n   * @param policyType the {@link PolicyType} to search for\n   * @see {@link getAll$} if you need all policies of a given type\n   */\n  get$: (policyType: PolicyType) => Observable<Policy>;\n\n  /**\n   * @returns all {@link Policy} objects of a given type that apply to the specified user (or the active user if not specified).\n   * A policy \"applies\" if it is enabled and the user is not exempt (e.g. because they are an Owner).\n   * @param policyType the {@link PolicyType} to search for\n   */\n  getAll$: (policyType: PolicyType, userId?: UserId) => Observable<Policy[]>;\n\n  /**\n   * All {@link Policy} objects for the specified user (from sync data).\n   * May include policies that are disabled or otherwise do not apply to the user.\n   * Consider using {@link getAll$} instead, which will only return policies that should be enforced against the user.\n   */\n  getAll: (policyType: PolicyType) => Promise<Policy[]>;\n\n  /**\n   * @returns true if a policy of the specified type applies to the active user, otherwise false.\n   * A policy \"applies\" if it is enabled and the user is not exempt (e.g. because they are an Owner).\n   * This does not take into account the policy's configuration - if that is important, use {@link getAll$} to get the\n   * {@link Policy} objects and then filter by Policy.data.\n   */\n  policyAppliesToActiveUser$: (policyType: PolicyType) => Observable<boolean>;\n\n  policyAppliesToUser: (policyType: PolicyType) => Promise<boolean>;\n\n  // Policy specific interfaces\n\n  /**\n   * Combines all Master Password policies that apply to the user.\n   * @returns a set of options which represent the minimum Master Password settings that the user must\n   * comply with in order to comply with **all** Master Password policies.\n   */\n  masterPasswordPolicyOptions$: (policies?: Policy[]) => Observable<MasterPasswordPolicyOptions>;\n\n  /**\n   * Evaluates whether a proposed Master Password complies with all Master Password policies that apply to the user.\n   */\n  evaluateMasterPassword: (\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions?: MasterPasswordPolicyOptions,\n  ) => boolean;\n\n  /**\n   * @returns Reset Password policy options for the specified organization and a boolean indicating whether the policy\n   * is enabled\n   */\n  getResetPasswordPolicyOptions: (\n    policies: Policy[],\n    orgId: string,\n  ) => [ResetPasswordPolicyOptions, boolean];\n}\n\nexport abstract class InternalPolicyService extends PolicyService {\n  upsert: (policy: PolicyData) => Promise<void>;\n  replace: (policies: { [id: string]: PolicyData }) => Promise<void>;\n  clear: (userId?: string) => Promise<void>;\n}\n","import { Injectable } from \"@angular/core\";\nimport { firstValueFrom, from, map, mergeMap, Observable } from \"rxjs\";\n\nimport {\n  isMember,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ActiveUserState, StateProvider } from \"@bitwarden/common/platform/state\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { ServiceUtils } from \"@bitwarden/common/vault/service-utils\";\n\nimport { DeprecatedVaultFilterService as DeprecatedVaultFilterServiceAbstraction } from \"../../abstractions/deprecated-vault-filter.service\";\nimport { DynamicTreeNode } from \"../models/dynamic-tree-node.model\";\n\nimport { COLLAPSED_GROUPINGS } from \"./../../../../../common/src/vault/services/key-state/collapsed-groupings.state\";\n\nconst NestingDelimiter = \"/\";\n\n@Injectable()\nexport class VaultFilterService implements DeprecatedVaultFilterServiceAbstraction {\n  private collapsedGroupingsState: ActiveUserState<string[]> =\n    this.stateProvider.getActive(COLLAPSED_GROUPINGS);\n  private readonly collapsedGroupings$: Observable<Set<string>> =\n    this.collapsedGroupingsState.state$.pipe(map((c) => new Set(c)));\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected folderService: FolderService,\n    protected cipherService: CipherService,\n    protected collectionService: CollectionService,\n    protected policyService: PolicyService,\n    protected stateProvider: StateProvider,\n  ) {}\n\n  async storeCollapsedFilterNodes(collapsedFilterNodes: Set<string>): Promise<void> {\n    await this.collapsedGroupingsState.update(() => Array.from(collapsedFilterNodes));\n  }\n\n  async buildCollapsedFilterNodes(): Promise<Set<string>> {\n    return await firstValueFrom(this.collapsedGroupings$);\n  }\n\n  async buildOrganizations(): Promise<Organization[]> {\n    let organizations = await this.organizationService.getAll();\n    if (organizations != null) {\n      organizations = organizations.filter(isMember).sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    return organizations;\n  }\n\n  buildNestedFolders(organizationId?: string): Observable<DynamicTreeNode<FolderView>> {\n    const transformation = async (storedFolders: FolderView[]) => {\n      let folders: FolderView[];\n\n      // If no org or \"My Vault\" is selected, show all folders\n      if (organizationId == null || organizationId == \"MyVault\") {\n        folders = storedFolders;\n      } else {\n        // Otherwise, show only folders that have ciphers from the selected org and the \"no folder\" folder\n        const ciphers = await this.cipherService.getAllDecrypted();\n        const orgCiphers = ciphers.filter((c) => c.organizationId == organizationId);\n        folders = storedFolders.filter(\n          (f) => orgCiphers.some((oc) => oc.folderId == f.id) || f.id == null,\n        );\n      }\n\n      const nestedFolders = await this.getAllFoldersNested(folders);\n      return new DynamicTreeNode<FolderView>({\n        fullList: folders,\n        nestedList: nestedFolders,\n      });\n    };\n\n    return this.folderService.folderViews$.pipe(\n      mergeMap((folders) => from(transformation(folders))),\n    );\n  }\n\n  async buildCollections(organizationId?: string): Promise<DynamicTreeNode<CollectionView>> {\n    const storedCollections = await this.collectionService.getAllDecrypted();\n    let collections: CollectionView[];\n    if (organizationId != null) {\n      collections = storedCollections.filter((c) => c.organizationId === organizationId);\n    } else {\n      collections = storedCollections;\n    }\n    const nestedCollections = await this.collectionService.getAllNested(collections);\n    return new DynamicTreeNode<CollectionView>({\n      fullList: collections,\n      nestedList: nestedCollections,\n    });\n  }\n\n  async checkForSingleOrganizationPolicy(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.SingleOrg),\n    );\n  }\n\n  async checkForPersonalOwnershipPolicy(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n    );\n  }\n\n  protected async getAllFoldersNested(folders: FolderView[]): Promise<TreeNode<FolderView>[]> {\n    const nodes: TreeNode<FolderView>[] = [];\n    folders.forEach((f) => {\n      const folderCopy = new FolderView();\n      folderCopy.id = f.id;\n      folderCopy.revisionDate = f.revisionDate;\n      const parts = f.name != null ? f.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, folderCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getFolderNested(id: string): Promise<TreeNode<FolderView>> {\n    const folders = await this.getAllFoldersNested(\n      await firstValueFrom(this.folderService.folderViews$),\n    );\n    return ServiceUtils.getTreeNodeObjectFromList(folders, id) as TreeNode<FolderView>;\n  }\n}\n","import { VaultFilter } from \"@bitwarden/angular/vault/vault-filter/models/vault-filter.model\";\nimport { VaultFilterService as BaseVaultFilterService } from \"@bitwarden/angular/vault/vault-filter/services/vault-filter.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class VaultFilterService extends BaseVaultFilterService {\n  vaultFilter: VaultFilter = new VaultFilter();\n\n  allVaults = \"allVaults\";\n  myVault = \"myVault\";\n\n  constructor(\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    collectionService: CollectionService,\n    policyService: PolicyService,\n    stateProvider: StateProvider,\n    private accountService: AccountService,\n  ) {\n    super(\n      organizationService,\n      folderService,\n      cipherService,\n      collectionService,\n      policyService,\n      stateProvider,\n    );\n    this.vaultFilter.myVaultOnly = false;\n    this.vaultFilter.selectedOrganizationId = null;\n\n    this.accountService.activeAccount$.subscribe((account) => {\n      this.setVaultFilter(this.allVaults);\n    });\n  }\n\n  getVaultFilter() {\n    return this.vaultFilter;\n  }\n\n  setVaultFilter(filter: string) {\n    if (filter === this.allVaults) {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else if (filter === this.myVault) {\n      this.vaultFilter.myVaultOnly = true;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = filter;\n    }\n  }\n\n  clear() {\n    this.setVaultFilter(this.allVaults);\n  }\n\n  filterCipherForSelectedVault(cipher: CipherView) {\n    if (!this.vaultFilter.selectedOrganizationId && !this.vaultFilter.myVaultOnly) {\n      return false;\n    }\n    if (this.vaultFilter.selectedOrganizationId) {\n      if (cipher.organizationId === this.vaultFilter.selectedOrganizationId) {\n        return false;\n      }\n    } else if (this.vaultFilter.myVaultOnly) {\n      if (!cipher.organizationId) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { VaultTimeoutService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { PasswordGenerationServiceAbstraction } from \"@bitwarden/common/tools/generator/password\";\n\nimport { openUnlockPopout } from \"../auth/popup/utils/auth-popout-window\";\nimport { LockedVaultPendingNotificationsData } from \"../autofill/background/abstractions/notification.background\";\nimport { BrowserApi } from \"../platform/browser/browser-api\";\n\nimport MainBackground from \"./main.background\";\n\nexport default class CommandsBackground {\n  private isSafari: boolean;\n  private isVivaldi: boolean;\n\n  constructor(\n    private main: MainBackground,\n    private passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private vaultTimeoutService: VaultTimeoutService,\n    private authService: AuthService,\n  ) {\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.isVivaldi = this.platformUtilsService.isVivaldi();\n  }\n\n  async init() {\n    BrowserApi.messageListener(\"commands.background\", (msg: any) => {\n      if (msg.command === \"unlockCompleted\" && msg.data.target === \"commands.background\") {\n        this.processCommand(\n          msg.data.commandToRetry.message.command,\n          msg.data.commandToRetry.sender,\n        ).catch((error) => this.main.logService.error(error));\n      }\n    });\n\n    if (chrome && chrome.commands) {\n      chrome.commands.onCommand.addListener(async (command: string) => {\n        await this.processCommand(command);\n      });\n    }\n  }\n\n  private async processCommand(command: string, sender?: chrome.runtime.MessageSender) {\n    switch (command) {\n      case \"generate_password\":\n        await this.generatePasswordToClipboard();\n        break;\n      case \"autofill_login\":\n        await this.autoFillLogin(sender ? sender.tab : null);\n        break;\n      case \"open_popup\":\n        await this.openPopup();\n        break;\n      case \"lock_vault\":\n        await this.vaultTimeoutService.lock();\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())?.[0] ?? {};\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password);\n    await this.passwordGenerationService.addHistory(password);\n  }\n\n  private async autoFillLogin(tab?: chrome.tabs.Tab) {\n    if (!tab) {\n      tab = await BrowserApi.getTabFromCurrentWindowId();\n    }\n\n    if (tab == null) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsData = {\n        commandToRetry: {\n          message: { command: \"autofill_login\" },\n          sender: { tab: tab },\n        },\n        target: \"commands.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage,\n      );\n\n      await openUnlockPopout(tab);\n      return;\n    }\n\n    await this.main.collectPageDetailsForContentScript(tab, \"autofill_cmd\");\n  }\n\n  private async openPopup() {\n    // Chrome APIs cannot open popup\n    if (!this.isSafari) {\n      return;\n    }\n\n    await this.main.openPopup();\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { VaultTimeoutService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout.service\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { VaultTimeoutAction } from \"@bitwarden/common/enums/vault-timeout-action.enum\";\n\nimport { BrowserStateService } from \"../platform/services/abstractions/browser-state.service\";\n\nconst IdleInterval = 60 * 5; // 5 minutes\n\nexport default class IdleBackground {\n  private idle: typeof chrome.idle | typeof browser.idle | null;\n  private idleTimer: number = null;\n  private idleState = \"active\";\n\n  constructor(\n    private vaultTimeoutService: VaultTimeoutService,\n    private stateService: BrowserStateService,\n    private notificationsService: NotificationsService,\n    private accountService: AccountService,\n  ) {\n    this.idle = chrome.idle || (browser != null ? browser.idle : null);\n  }\n\n  async init() {\n    if (!this.idle) {\n      return;\n    }\n\n    const idleHandler = (newState: string) => {\n      if (newState === \"active\") {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.notificationsService.reconnectFromActivity();\n      } else {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.notificationsService.disconnectFromInactivity();\n      }\n    };\n    if (this.idle.onStateChanged && this.idle.setDetectionInterval) {\n      this.idle.setDetectionInterval(IdleInterval);\n      this.idle.onStateChanged.addListener(idleHandler);\n    } else {\n      this.pollIdle(idleHandler);\n    }\n\n    if (this.idle.onStateChanged) {\n      this.idle.onStateChanged.addListener(\n        async (newState: chrome.idle.IdleState | browser.idle.IdleState) => {\n          if (newState === \"locked\") {\n            // Need to check if any of the current users have their timeout set to `onLocked`\n            const allUsers = await firstValueFrom(this.accountService.accounts$);\n            for (const userId in allUsers) {\n              // If the screen is locked or the screensaver activates\n              const timeout = await this.stateService.getVaultTimeout({ userId: userId });\n              if (timeout === -2) {\n                // On System Lock vault timeout option\n                const action = await this.stateService.getVaultTimeoutAction({ userId: userId });\n                if (action === VaultTimeoutAction.LogOut) {\n                  await this.vaultTimeoutService.logOut(userId);\n                } else {\n                  await this.vaultTimeoutService.lock(userId);\n                }\n              }\n            }\n          }\n        },\n      );\n    }\n  }\n\n  private pollIdle(handler: (newState: string) => void) {\n    if (this.idleTimer != null) {\n      window.clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.idle.queryState(IdleInterval, (state: string) => {\n      if (state !== this.idleState) {\n        this.idleState = state;\n        handler(state);\n      }\n      this.idleTimer = window.setTimeout(() => this.pollIdle(handler), 5000);\n    });\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { BiometricStateService } from \"@bitwarden/common/platform/biometrics/biometric-state.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { UserKey, MasterKey } from \"@bitwarden/common/types/key\";\n\nimport { BrowserApi } from \"../platform/browser/browser-api\";\n\nimport RuntimeBackground from \"./runtime.background\";\n\nconst MessageValidTimeout = 10 * 1000;\nconst EncryptionAlgorithm = \"sha1\";\n\ntype Message = {\n  command: string;\n\n  // Filled in by this service\n  userId?: string;\n  timestamp?: number;\n\n  // Used for sharing secret\n  publicKey?: string;\n};\n\ntype OuterMessage = {\n  message: Message | EncString;\n  appId: string;\n};\n\ntype ReceiveMessage = {\n  timestamp: number;\n  command: string;\n  response?: any;\n\n  // Unlock key\n  keyB64?: string;\n  userKeyB64?: string;\n};\n\ntype ReceiveMessageOuter = {\n  command: string;\n  appId: string;\n\n  // Should only have one of these.\n  message?: EncString;\n  sharedSecret?: string;\n};\n\nexport class NativeMessagingBackground {\n  private connected = false;\n  private connecting: boolean;\n  private port: browser.runtime.Port | chrome.runtime.Port;\n\n  private resolver: any = null;\n  private privateKey: Uint8Array = null;\n  private publicKey: Uint8Array = null;\n  private secureSetupResolve: any = null;\n  private sharedSecret: SymmetricCryptoKey;\n  private appId: string;\n  private validatingFingerprint: boolean;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private runtimeBackground: RuntimeBackground,\n    private messagingService: MessagingService,\n    private appIdService: AppIdService,\n    private platformUtilsService: PlatformUtilsService,\n    private stateService: StateService,\n    private logService: LogService,\n    private authService: AuthService,\n    private biometricStateService: BiometricStateService,\n  ) {\n    if (chrome?.permissions?.onAdded) {\n      // Reload extension to activate nativeMessaging\n      chrome.permissions.onAdded.addListener((permissions) => {\n        if (permissions.permissions?.includes(\"nativeMessaging\")) {\n          BrowserApi.reloadExtension(null);\n        }\n      });\n    }\n  }\n\n  async connect() {\n    this.appId = await this.appIdService.getAppId();\n    await this.biometricStateService.setFingerprintValidated(false);\n\n    return new Promise<void>((resolve, reject) => {\n      this.port = BrowserApi.connectNative(\"com.8bit.bitwarden\");\n\n      this.connecting = true;\n\n      const connectedCallback = () => {\n        this.connected = true;\n        this.connecting = false;\n        resolve();\n      };\n\n      // Safari has a bundled native component which is always available, no need to\n      // check if the desktop app is running.\n      if (this.platformUtilsService.isSafari()) {\n        connectedCallback();\n      }\n\n      this.port.onMessage.addListener(async (message: ReceiveMessageOuter) => {\n        switch (message.command) {\n          case \"connected\":\n            connectedCallback();\n            break;\n          case \"disconnected\":\n            if (this.connecting) {\n              reject(new Error(\"startDesktop\"));\n            }\n            this.connected = false;\n            this.port.disconnect();\n            break;\n          case \"setupEncryption\": {\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            const encrypted = Utils.fromB64ToArray(message.sharedSecret);\n            const decrypted = await this.cryptoFunctionService.rsaDecrypt(\n              encrypted,\n              this.privateKey,\n              EncryptionAlgorithm,\n            );\n\n            if (this.validatingFingerprint) {\n              this.validatingFingerprint = false;\n              await this.biometricStateService.setFingerprintValidated(true);\n            }\n            this.sharedSecret = new SymmetricCryptoKey(decrypted);\n            this.secureSetupResolve();\n            break;\n          }\n          case \"invalidateEncryption\":\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            this.sharedSecret = null;\n            this.privateKey = null;\n            this.connected = false;\n\n            this.messagingService.send(\"showDialog\", {\n              title: { key: \"nativeMessagingInvalidEncryptionTitle\" },\n              content: { key: \"nativeMessagingInvalidEncryptionDesc\" },\n              acceptButtonText: { key: \"ok\" },\n              cancelButtonText: null,\n              type: \"danger\",\n            });\n            break;\n          case \"verifyFingerprint\": {\n            if (this.sharedSecret == null) {\n              this.validatingFingerprint = true;\n              // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              this.showFingerprintDialog();\n            }\n            break;\n          }\n          case \"wrongUserId\":\n            this.showWrongUserDialog();\n            break;\n          default:\n            // Ignore since it belongs to another device\n            if (!this.platformUtilsService.isSafari() && message.appId !== this.appId) {\n              return;\n            }\n\n            // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.onMessage(message.message);\n        }\n      });\n\n      this.port.onDisconnect.addListener((p: any) => {\n        let error;\n        if (BrowserApi.isWebExtensionsApi) {\n          error = p.error.message;\n        } else {\n          error = chrome.runtime.lastError.message;\n        }\n\n        this.sharedSecret = null;\n        this.privateKey = null;\n        this.connected = false;\n\n        const reason = error != null ? \"desktopIntegrationDisabled\" : null;\n        reject(new Error(reason));\n      });\n    });\n  }\n\n  showWrongUserDialog() {\n    this.messagingService.send(\"showDialog\", {\n      title: { key: \"nativeMessagingWrongUserTitle\" },\n      content: { key: \"nativeMessagingWrongUserDesc\" },\n      acceptButtonText: { key: \"ok\" },\n      cancelButtonText: null,\n      type: \"danger\",\n    });\n  }\n\n  async send(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.userId = await this.stateService.getUserId();\n    message.timestamp = Date.now();\n\n    if (this.platformUtilsService.isSafari()) {\n      this.postMessage(message as any);\n    } else {\n      this.postMessage({ appId: this.appId, message: await this.encryptMessage(message) });\n    }\n  }\n\n  async encryptMessage(message: Message) {\n    if (this.sharedSecret == null) {\n      await this.secureCommunication();\n    }\n\n    return await this.cryptoService.encrypt(JSON.stringify(message), this.sharedSecret);\n  }\n\n  getResponse(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.resolver = resolve;\n    });\n  }\n\n  private postMessage(message: OuterMessage) {\n    // Wrap in try-catch to when the port disconnected without triggering `onDisconnect`.\n    try {\n      const msg: any = message;\n      if (message.message instanceof EncString) {\n        // Alternative, backwards-compatible serialization of EncString\n        msg.message = {\n          encryptedString: message.message.encryptedString,\n          encryptionType: message.message.encryptionType,\n          data: message.message.data,\n          iv: message.message.iv,\n          mac: message.message.mac,\n        };\n      }\n      this.port.postMessage(msg);\n    } catch (e) {\n      this.logService.error(\"NativeMessaging port disconnected, disconnecting.\");\n\n      this.sharedSecret = null;\n      this.privateKey = null;\n      this.connected = false;\n\n      this.messagingService.send(\"showDialog\", {\n        title: { key: \"nativeMessagingInvalidEncryptionTitle\" },\n        content: { key: \"nativeMessagingInvalidEncryptionDesc\" },\n        acceptButtonText: { key: \"ok\" },\n        cancelButtonText: null,\n        type: \"danger\",\n      });\n    }\n  }\n\n  private async onMessage(rawMessage: ReceiveMessage | EncString) {\n    let message = rawMessage as ReceiveMessage;\n    if (!this.platformUtilsService.isSafari()) {\n      message = JSON.parse(\n        await this.cryptoService.decryptToUtf8(rawMessage as EncString, this.sharedSecret),\n      );\n    }\n\n    if (Math.abs(message.timestamp - Date.now()) > MessageValidTimeout) {\n      this.logService.error(\"NativeMessage is to old, ignoring.\");\n      return;\n    }\n\n    switch (message.command) {\n      case \"biometricUnlock\": {\n        if (message.response === \"not enabled\") {\n          this.messagingService.send(\"showDialog\", {\n            title: { key: \"biometricsNotEnabledTitle\" },\n            content: { key: \"biometricsNotEnabledDesc\" },\n            acceptButtonText: { key: \"ok\" },\n            cancelButtonText: null,\n            type: \"danger\",\n          });\n          break;\n        } else if (message.response === \"not supported\") {\n          this.messagingService.send(\"showDialog\", {\n            title: { key: \"biometricsNotSupportedTitle\" },\n            content: { key: \"biometricsNotSupportedDesc\" },\n            acceptButtonText: { key: \"ok\" },\n            cancelButtonText: null,\n            type: \"danger\",\n          });\n          break;\n        } else if (message.response === \"canceled\") {\n          break;\n        }\n\n        // Check for initial setup of biometric unlock\n        const enabled = await firstValueFrom(this.biometricStateService.biometricUnlockEnabled$);\n        if (enabled === null || enabled === false) {\n          if (message.response === \"unlocked\") {\n            await this.biometricStateService.setBiometricUnlockEnabled(true);\n          }\n          break;\n        }\n\n        // Ignore unlock if already unlocked\n        if ((await this.authService.getAuthStatus()) === AuthenticationStatus.Unlocked) {\n          break;\n        }\n\n        if (message.response === \"unlocked\") {\n          try {\n            if (message.userKeyB64) {\n              const userKey = new SymmetricCryptoKey(\n                Utils.fromB64ToArray(message.userKeyB64),\n              ) as UserKey;\n              await this.cryptoService.setUserKey(userKey);\n            } else if (message.keyB64) {\n              // Backwards compatibility to support cases in which the user hasn't updated their desktop app\n              // TODO: Remove after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3472)\n              let encUserKey = await this.stateService.getEncryptedCryptoSymmetricKey();\n              encUserKey ||= await this.stateService.getMasterKeyEncryptedUserKey();\n              if (!encUserKey) {\n                throw new Error(\"No encrypted user key found\");\n              }\n              const masterKey = new SymmetricCryptoKey(\n                Utils.fromB64ToArray(message.keyB64),\n              ) as MasterKey;\n              const userKey = await this.cryptoService.decryptUserKeyWithMasterKey(\n                masterKey,\n                new EncString(encUserKey),\n              );\n              await this.cryptoService.setMasterKey(masterKey);\n              await this.cryptoService.setUserKey(userKey);\n            } else {\n              throw new Error(\"No key received\");\n            }\n          } catch (e) {\n            this.logService.error(\"Unable to set key: \" + e);\n            this.messagingService.send(\"showDialog\", {\n              title: { key: \"biometricsFailedTitle\" },\n              content: { key: \"biometricsFailedDesc\" },\n              acceptButtonText: { key: \"ok\" },\n              cancelButtonText: null,\n              type: \"danger\",\n            });\n\n            // Exit early\n            if (this.resolver) {\n              this.resolver(message);\n            }\n            return;\n          }\n\n          // Verify key is correct by attempting to decrypt a secret\n          try {\n            await this.cryptoService.getFingerprint(await this.stateService.getUserId());\n          } catch (e) {\n            this.logService.error(\"Unable to verify key: \" + e);\n            await this.cryptoService.clearKeys();\n            this.showWrongUserDialog();\n\n            // Exit early\n            if (this.resolver) {\n              this.resolver(message);\n            }\n            return;\n          }\n\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.runtimeBackground.processMessage({ command: \"unlocked\" }, null);\n        }\n        break;\n      }\n      default:\n        this.logService.error(\"NativeMessage, got unknown command: \" + message.command);\n        break;\n    }\n\n    if (this.resolver) {\n      this.resolver(message);\n    }\n  }\n\n  private async secureCommunication() {\n    const [publicKey, privateKey] = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendUnencrypted({\n      command: \"setupEncryption\",\n      publicKey: Utils.fromBufferToB64(publicKey),\n      userId: await this.stateService.getUserId(),\n    });\n\n    return new Promise((resolve, reject) => (this.secureSetupResolve = resolve));\n  }\n\n  private async sendUnencrypted(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.timestamp = Date.now();\n\n    this.postMessage({ appId: this.appId, message: message });\n  }\n\n  private async showFingerprintDialog() {\n    const fingerprint = await this.cryptoService.getFingerprint(\n      await this.stateService.getUserId(),\n      this.publicKey,\n    );\n\n    this.messagingService.send(\"showNativeMessagingFinterprintDialog\", {\n      fingerprint: fingerprint,\n    });\n  }\n}\n","type Runner<T> = (abortController: AbortController) => Promise<T>;\n\n/**\n * Manages abort controllers for long running tasks and allow separate\n * execution contexts to abort each other by using ids.\n */\nexport class AbortManager {\n  private abortControllers = new Map<string, AbortController>();\n\n  runWithAbortController<T>(id: string, runner: Runner<T>): Promise<T> {\n    const abortController = new AbortController();\n    this.abortControllers.set(id, abortController);\n    return runner(abortController).finally(() => {\n      this.abortControllers.delete(id);\n    });\n  }\n\n  abort(id: string) {\n    this.abortControllers.get(id)?.abort();\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { AutofillOverlayVisibility } from \"@bitwarden/common/autofill/constants\";\nimport { AutofillSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport { ConfigServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { SystemService } from \"@bitwarden/common/platform/abstractions/system.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\n\nimport {\n  closeUnlockPopout,\n  openSsoAuthResultPopout,\n  openTwoFactorAuthPopout,\n} from \"../auth/popup/utils/auth-popout-window\";\nimport { LockedVaultPendingNotificationsData } from \"../autofill/background/abstractions/notification.background\";\nimport { AutofillService } from \"../autofill/services/abstractions/autofill.service\";\nimport { BrowserApi } from \"../platform/browser/browser-api\";\nimport { BrowserStateService } from \"../platform/services/abstractions/browser-state.service\";\nimport { BrowserEnvironmentService } from \"../platform/services/browser-environment.service\";\nimport { BrowserPlatformUtilsService } from \"../platform/services/platform-utils/browser-platform-utils.service\";\nimport { AbortManager } from \"../vault/background/abort-manager\";\nimport { Fido2Service } from \"../vault/services/abstractions/fido2.service\";\n\nimport MainBackground from \"./main.background\";\n\nexport default class RuntimeBackground {\n  private autofillTimeout: any;\n  private pageDetailsToAutoFill: any[] = [];\n  private onInstalledReason: string = null;\n  private lockedVaultPendingNotifications: LockedVaultPendingNotificationsData[] = [];\n  private abortManager = new AbortManager();\n\n  constructor(\n    private main: MainBackground,\n    private autofillService: AutofillService,\n    private platformUtilsService: BrowserPlatformUtilsService,\n    private i18nService: I18nService,\n    private notificationsService: NotificationsService,\n    private stateService: BrowserStateService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private systemService: SystemService,\n    private environmentService: BrowserEnvironmentService,\n    private messagingService: MessagingService,\n    private logService: LogService,\n    private configService: ConfigServiceAbstraction,\n    private fido2Service: Fido2Service,\n  ) {\n    // onInstalled listener must be wired up before anything else, so we do it in the ctor\n    chrome.runtime.onInstalled.addListener((details: any) => {\n      this.onInstalledReason = details.reason;\n    });\n  }\n\n  async init() {\n    if (!chrome.runtime) {\n      return;\n    }\n\n    await this.checkOnInstalled();\n    const backgroundMessageListener = (\n      msg: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: any,\n    ) => {\n      const messagesWithResponse = [\n        \"checkFido2FeatureEnabled\",\n        \"fido2RegisterCredentialRequest\",\n        \"fido2GetCredentialRequest\",\n        \"biometricUnlock\",\n      ];\n\n      if (messagesWithResponse.includes(msg.command)) {\n        this.processMessage(msg, sender).then(\n          (value) => sendResponse({ result: value }),\n          (error) => sendResponse({ error: { ...error, message: error.message } }),\n        );\n        return true;\n      }\n\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.processMessage(msg, sender);\n      return false;\n    };\n\n    BrowserApi.messageListener(\"runtime.background\", backgroundMessageListener);\n    if (this.main.popupOnlyContext) {\n      (window as any).bitwardenBackgroundMessageListener = backgroundMessageListener;\n    }\n  }\n\n  async processMessage(msg: any, sender: chrome.runtime.MessageSender) {\n    switch (msg.command) {\n      case \"loggedIn\":\n      case \"unlocked\": {\n        let item: LockedVaultPendingNotificationsData;\n\n        if (msg.command === \"loggedIn\") {\n          await this.sendBwInstalledMessageToVault();\n        }\n\n        if (this.lockedVaultPendingNotifications?.length > 0) {\n          item = this.lockedVaultPendingNotifications.pop();\n          await closeUnlockPopout();\n        }\n\n        await this.notificationsService.updateConnection(msg.command === \"loggedIn\");\n        await this.main.refreshBadge();\n        await this.main.refreshMenu(false);\n        this.systemService.cancelProcessReload();\n\n        if (item) {\n          await BrowserApi.focusWindow(item.commandToRetry.sender.tab.windowId);\n          await BrowserApi.focusTab(item.commandToRetry.sender.tab.id);\n          await BrowserApi.tabSendMessageData(\n            item.commandToRetry.sender.tab,\n            \"unlockCompleted\",\n            item,\n          );\n        }\n        break;\n      }\n      case \"addToLockedVaultPendingNotifications\":\n        this.lockedVaultPendingNotifications.push(msg.data);\n        break;\n      case \"logout\":\n        await this.main.logout(msg.expired, msg.userId);\n        break;\n      case \"syncCompleted\":\n        if (msg.successfully) {\n          setTimeout(async () => {\n            await this.main.refreshBadge();\n            await this.main.refreshMenu();\n          }, 2000);\n          this.configService.triggerServerConfigFetch();\n        }\n        break;\n      case \"openPopup\":\n        await this.main.openPopup();\n        break;\n      case \"triggerAutofillScriptInjection\":\n        await this.autofillService.injectAutofillScripts(sender.tab, sender.frameId);\n        break;\n      case \"bgCollectPageDetails\":\n        await this.main.collectPageDetailsForContentScript(sender.tab, msg.sender, sender.frameId);\n        break;\n      case \"bgUpdateContextMenu\":\n      case \"editedCipher\":\n      case \"addedCipher\":\n      case \"deletedCipher\":\n        await this.main.refreshBadge();\n        await this.main.refreshMenu();\n        break;\n      case \"bgReseedStorage\":\n        await this.main.reseedStorage();\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"autofiller\":\n          case \"autofill_cmd\": {\n            // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.stateService.setLastActive(new Date().getTime());\n            const totpCode = await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              msg.sender === \"autofill_cmd\",\n            );\n            if (totpCode != null) {\n              this.platformUtilsService.copyToClipboard(totpCode);\n            }\n            break;\n          }\n          case \"autofill_card\": {\n            await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              false,\n              CipherType.Card,\n            );\n            break;\n          }\n          case \"autofill_identity\": {\n            await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              false,\n              CipherType.Identity,\n            );\n            break;\n          }\n          case \"contextMenu\":\n            clearTimeout(this.autofillTimeout);\n            this.pageDetailsToAutoFill.push({\n              frameId: sender.frameId,\n              tab: msg.tab,\n              details: msg.details,\n            });\n            this.autofillTimeout = setTimeout(async () => await this.autofillPage(msg.tab), 300);\n            break;\n          default:\n            break;\n        }\n        break;\n      case \"authResult\": {\n        const env = await firstValueFrom(this.environmentService.environment$);\n        const vaultUrl = env.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        if (msg.lastpass) {\n          this.messagingService.send(\"importCallbackLastPass\", {\n            code: msg.code,\n            state: msg.state,\n          });\n        } else {\n          try {\n            await openSsoAuthResultPopout(msg);\n          } catch {\n            this.logService.error(\"Unable to open sso popout tab\");\n          }\n        }\n        break;\n      }\n      case \"webAuthnResult\": {\n        const env = await firstValueFrom(this.environmentService.environment$);\n        const vaultUrl = env.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        await openTwoFactorAuthPopout(msg);\n        break;\n      }\n      case \"reloadPopup\":\n        this.messagingService.send(\"reloadPopup\");\n        break;\n      case \"emailVerificationRequired\":\n        this.messagingService.send(\"showDialog\", {\n          title: { key: \"emailVerificationRequired\" },\n          content: { key: \"emailVerificationRequiredDesc\" },\n          acceptButtonText: { key: \"ok\" },\n          cancelButtonText: null,\n          type: \"info\",\n        });\n        break;\n      case \"getClickedElementResponse\":\n        this.platformUtilsService.copyToClipboard(msg.identifier);\n        break;\n      case \"triggerFido2ContentScriptInjection\":\n        await this.fido2Service.injectFido2ContentScripts(sender);\n        break;\n      case \"fido2AbortRequest\":\n        this.abortManager.abort(msg.abortedRequestId);\n        break;\n      case \"checkFido2FeatureEnabled\":\n        return await this.main.fido2ClientService.isFido2FeatureEnabled(msg.hostname, msg.origin);\n      case \"fido2RegisterCredentialRequest\":\n        return await this.abortManager.runWithAbortController(\n          msg.requestId,\n          async (abortController) => {\n            try {\n              return await this.main.fido2ClientService.createCredential(\n                msg.data,\n                sender.tab,\n                abortController,\n              );\n            } finally {\n              await BrowserApi.focusTab(sender.tab.id);\n              await BrowserApi.focusWindow(sender.tab.windowId);\n            }\n          },\n        );\n      case \"fido2GetCredentialRequest\":\n        return await this.abortManager.runWithAbortController(\n          msg.requestId,\n          async (abortController) => {\n            try {\n              return await this.main.fido2ClientService.assertCredential(\n                msg.data,\n                sender.tab,\n                abortController,\n              );\n            } finally {\n              await BrowserApi.focusTab(sender.tab.id);\n              await BrowserApi.focusWindow(sender.tab.windowId);\n            }\n          },\n        );\n      case \"switchAccount\": {\n        await this.main.switchAccount(msg.userId);\n        break;\n      }\n      case \"clearClipboard\": {\n        await this.main.clearClipboard(msg.clipboardValue, msg.timeoutMs);\n        break;\n      }\n      case \"biometricUnlock\": {\n        return await this.main.biometricUnlock();\n      }\n    }\n  }\n\n  private async autofillPage(tabToAutoFill: chrome.tabs.Tab) {\n    const totpCode = await this.autofillService.doAutoFill({\n      tab: tabToAutoFill,\n      cipher: this.main.loginToAutoFill,\n      pageDetails: this.pageDetailsToAutoFill,\n      fillNewPassword: true,\n      allowTotpAutofill: true,\n    });\n\n    if (totpCode != null) {\n      this.platformUtilsService.copyToClipboard(totpCode);\n    }\n\n    // reset\n    this.main.loginToAutoFill = null;\n    this.pageDetailsToAutoFill = [];\n  }\n\n  private async checkOnInstalled() {\n    setTimeout(async () => {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.autofillService.loadAutofillScriptsOnInstall();\n\n      if (this.onInstalledReason != null) {\n        if (this.onInstalledReason === \"install\") {\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n          await this.autofillSettingsService.setInlineMenuVisibility(\n            AutofillOverlayVisibility.OnFieldFocus,\n          );\n\n          if (await this.environmentService.hasManagedEnvironment()) {\n            await this.environmentService.setUrlsToManagedEnvironment();\n          }\n        }\n\n        this.onInstalledReason = null;\n      }\n    }, 100);\n  }\n\n  async sendBwInstalledMessageToVault() {\n    try {\n      const env = await firstValueFrom(this.environmentService.environment$);\n      const vaultUrl = env.getWebVaultUrl();\n      const urlObj = new URL(vaultUrl);\n\n      const tabs = await BrowserApi.tabsQuery({ url: `${urlObj.href}*` });\n\n      if (!tabs?.length) {\n        return;\n      }\n\n      for (const tab of tabs) {\n        await BrowserApi.executeScriptInTab(tab.id, {\n          file: \"content/send-on-installed-message.js\",\n          runAt: \"document_end\",\n        });\n      }\n    } catch (e) {\n      this.logService.error(`Error sending on installed message to vault: ${e}`);\n    }\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport {\n  PinCryptoServiceAbstraction,\n  PinCryptoService,\n  LoginStrategyServiceAbstraction,\n  LoginStrategyService,\n  InternalUserDecryptionOptionsServiceAbstraction,\n  UserDecryptionOptionsService,\n  AuthRequestServiceAbstraction,\n  AuthRequestService,\n} from \"@bitwarden/auth/common\";\nimport { ApiService as ApiServiceAbstraction } from \"@bitwarden/common/abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"@bitwarden/common/abstractions/audit.service\";\nimport { EventCollectionService as EventCollectionServiceAbstraction } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { EventUploadService as EventUploadServiceAbstraction } from \"@bitwarden/common/abstractions/event/event-upload.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { SearchService as SearchServiceAbstraction } from \"@bitwarden/common/abstractions/search.service\";\nimport { VaultTimeoutSettingsService as VaultTimeoutSettingsServiceAbstraction } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { InternalOrganizationServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyApiServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/policy/policy-api.service.abstraction\";\nimport { InternalPolicyService as InternalPolicyServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { ProviderService as ProviderServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/provider.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/services/organization/organization.service\";\nimport { PolicyApiService } from \"@bitwarden/common/admin-console/services/policy/policy-api.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/services/policy/policy.service\";\nimport { ProviderService } from \"@bitwarden/common/admin-console/services/provider.service\";\nimport { AccountService as AccountServiceAbstraction } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AuthService as AuthServiceAbstraction } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { DeviceTrustCryptoServiceAbstraction } from \"@bitwarden/common/auth/abstractions/device-trust-crypto.service.abstraction\";\nimport { DevicesServiceAbstraction } from \"@bitwarden/common/auth/abstractions/devices/devices.service.abstraction\";\nimport { DevicesApiServiceAbstraction } from \"@bitwarden/common/auth/abstractions/devices-api.service.abstraction\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"@bitwarden/common/auth/abstractions/key-connector.service\";\nimport { SsoLoginServiceAbstraction } from \"@bitwarden/common/auth/abstractions/sso-login.service.abstraction\";\nimport { TokenService as TokenServiceAbstraction } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { TwoFactorService as TwoFactorServiceAbstraction } from \"@bitwarden/common/auth/abstractions/two-factor.service\";\nimport { UserVerificationApiServiceAbstraction } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { ForceSetPasswordReason } from \"@bitwarden/common/auth/models/domain/force-set-password-reason\";\nimport { AccountServiceImplementation } from \"@bitwarden/common/auth/services/account.service\";\nimport { AuthService } from \"@bitwarden/common/auth/services/auth.service\";\nimport { AvatarService } from \"@bitwarden/common/auth/services/avatar.service\";\nimport { DeviceTrustCryptoService } from \"@bitwarden/common/auth/services/device-trust-crypto.service.implementation\";\nimport { DevicesServiceImplementation } from \"@bitwarden/common/auth/services/devices/devices.service.implementation\";\nimport { DevicesApiServiceImplementation } from \"@bitwarden/common/auth/services/devices-api.service.implementation\";\nimport { KeyConnectorService } from \"@bitwarden/common/auth/services/key-connector.service\";\nimport { SsoLoginService } from \"@bitwarden/common/auth/services/sso-login.service\";\nimport { TokenService } from \"@bitwarden/common/auth/services/token.service\";\nimport { TwoFactorService } from \"@bitwarden/common/auth/services/two-factor.service\";\nimport { UserVerificationApiService } from \"@bitwarden/common/auth/services/user-verification/user-verification-api.service\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/services/user-verification/user-verification.service\";\nimport {\n  AutofillSettingsServiceAbstraction,\n  AutofillSettingsService,\n} from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport {\n  BadgeSettingsServiceAbstraction,\n  BadgeSettingsService,\n} from \"@bitwarden/common/autofill/services/badge-settings.service\";\nimport {\n  DomainSettingsService,\n  DefaultDomainSettingsService,\n} from \"@bitwarden/common/autofill/services/domain-settings.service\";\nimport {\n  UserNotificationSettingsService,\n  UserNotificationSettingsServiceAbstraction,\n} from \"@bitwarden/common/autofill/services/user-notification-settings.service\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { DefaultBillingAccountProfileStateService } from \"@bitwarden/common/billing/services/account/billing-account-profile-state.service\";\nimport { AppIdService as AppIdServiceAbstraction } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { ConfigApiServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config-api.service.abstraction\";\nimport { CryptoFunctionService as CryptoFunctionServiceAbstraction } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"@bitwarden/common/platform/abstractions/file-upload/file-upload.service\";\nimport { I18nService as I18nServiceAbstraction } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { KeyGenerationService as KeyGenerationServiceAbstraction } from \"@bitwarden/common/platform/abstractions/key-generation.service\";\nimport { LogService as LogServiceAbstraction } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService as MessagingServiceAbstraction } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService as PlatformUtilsServiceAbstraction } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport {\n  AbstractMemoryStorageService,\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { SystemService as SystemServiceAbstraction } from \"@bitwarden/common/platform/abstractions/system.service\";\nimport {\n  BiometricStateService,\n  DefaultBiometricStateService,\n} from \"@bitwarden/common/platform/biometrics/biometric-state.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { AppIdService } from \"@bitwarden/common/platform/services/app-id.service\";\nimport { ConfigApiService } from \"@bitwarden/common/platform/services/config/config-api.service\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { ContainerService } from \"@bitwarden/common/platform/services/container.service\";\nimport { EncryptServiceImplementation } from \"@bitwarden/common/platform/services/cryptography/encrypt.service.implementation\";\nimport { MultithreadEncryptServiceImplementation } from \"@bitwarden/common/platform/services/cryptography/multithread-encrypt.service.implementation\";\nimport { FileUploadService } from \"@bitwarden/common/platform/services/file-upload/file-upload.service\";\nimport { KeyGenerationService } from \"@bitwarden/common/platform/services/key-generation.service\";\nimport { MemoryStorageService } from \"@bitwarden/common/platform/services/memory-storage.service\";\nimport { MigrationBuilderService } from \"@bitwarden/common/platform/services/migration-builder.service\";\nimport { MigrationRunner } from \"@bitwarden/common/platform/services/migration-runner\";\nimport { StorageServiceProvider } from \"@bitwarden/common/platform/services/storage-service.provider\";\nimport { SystemService } from \"@bitwarden/common/platform/services/system.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/platform/services/web-crypto-function.service\";\nimport {\n  ActiveUserStateProvider,\n  DerivedStateProvider,\n  GlobalStateProvider,\n  SingleUserStateProvider,\n  StateEventRunnerService,\n  StateProvider,\n} from \"@bitwarden/common/platform/state\";\n/* eslint-disable import/no-restricted-paths -- We need the implementation to inject, but generally these should not be accessed */\nimport { DefaultActiveUserStateProvider } from \"@bitwarden/common/platform/state/implementations/default-active-user-state.provider\";\nimport { DefaultGlobalStateProvider } from \"@bitwarden/common/platform/state/implementations/default-global-state.provider\";\nimport { DefaultSingleUserStateProvider } from \"@bitwarden/common/platform/state/implementations/default-single-user-state.provider\";\nimport { DefaultStateProvider } from \"@bitwarden/common/platform/state/implementations/default-state.provider\";\nimport { StateEventRegistrarService } from \"@bitwarden/common/platform/state/state-event-registrar.service\";\n/* eslint-enable import/no-restricted-paths */\nimport { DefaultThemeStateService } from \"@bitwarden/common/platform/theming/theme-state.service\";\nimport { ApiService } from \"@bitwarden/common/services/api.service\";\nimport { AuditService } from \"@bitwarden/common/services/audit.service\";\nimport { EventCollectionService } from \"@bitwarden/common/services/event/event-collection.service\";\nimport { EventUploadService } from \"@bitwarden/common/services/event/event-upload.service\";\nimport { NotificationsService } from \"@bitwarden/common/services/notifications.service\";\nimport { SearchService } from \"@bitwarden/common/services/search.service\";\nimport { VaultTimeoutSettingsService } from \"@bitwarden/common/services/vault-timeout/vault-timeout-settings.service\";\nimport { AvatarService as AvatarServiceAbstraction } from \"@bitwarden/common/src/auth/abstractions/avatar.service\";\nimport {\n  PasswordGenerationService,\n  PasswordGenerationServiceAbstraction,\n} from \"@bitwarden/common/tools/generator/password\";\nimport {\n  UsernameGenerationService,\n  UsernameGenerationServiceAbstraction,\n} from \"@bitwarden/common/tools/generator/username\";\nimport {\n  PasswordStrengthService,\n  PasswordStrengthServiceAbstraction,\n} from \"@bitwarden/common/tools/password-strength\";\nimport { SendApiService } from \"@bitwarden/common/tools/send/services/send-api.service\";\nimport { SendApiService as SendApiServiceAbstraction } from \"@bitwarden/common/tools/send/services/send-api.service.abstraction\";\nimport { InternalSendService as InternalSendServiceAbstraction } from \"@bitwarden/common/tools/send/services/send.service.abstraction\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { CipherService as CipherServiceAbstraction } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService as CollectionServiceAbstraction } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { Fido2AuthenticatorService as Fido2AuthenticatorServiceAbstraction } from \"@bitwarden/common/vault/abstractions/fido2/fido2-authenticator.service.abstraction\";\nimport { Fido2ClientService as Fido2ClientServiceAbstraction } from \"@bitwarden/common/vault/abstractions/fido2/fido2-client.service.abstraction\";\nimport { Fido2UserInterfaceService as Fido2UserInterfaceServiceAbstraction } from \"@bitwarden/common/vault/abstractions/fido2/fido2-user-interface.service.abstraction\";\nimport { CipherFileUploadService as CipherFileUploadServiceAbstraction } from \"@bitwarden/common/vault/abstractions/file-upload/cipher-file-upload.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { SyncNotifierService as SyncNotifierServiceAbstraction } from \"@bitwarden/common/vault/abstractions/sync/sync-notifier.service.abstraction\";\nimport { SyncService as SyncServiceAbstraction } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { TotpService as TotpServiceAbstraction } from \"@bitwarden/common/vault/abstractions/totp.service\";\nimport { VaultSettingsService as VaultSettingsServiceAbstraction } from \"@bitwarden/common/vault/abstractions/vault-settings/vault-settings.service\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CipherService } from \"@bitwarden/common/vault/services/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/services/collection.service\";\nimport { Fido2AuthenticatorService } from \"@bitwarden/common/vault/services/fido2/fido2-authenticator.service\";\nimport { Fido2ClientService } from \"@bitwarden/common/vault/services/fido2/fido2-client.service\";\nimport { CipherFileUploadService } from \"@bitwarden/common/vault/services/file-upload/cipher-file-upload.service\";\nimport { FolderApiService } from \"@bitwarden/common/vault/services/folder/folder-api.service\";\nimport { FolderService } from \"@bitwarden/common/vault/services/folder/folder.service\";\nimport { SyncNotifierService } from \"@bitwarden/common/vault/services/sync/sync-notifier.service\";\nimport { SyncService } from \"@bitwarden/common/vault/services/sync/sync.service\";\nimport { TotpService } from \"@bitwarden/common/vault/services/totp.service\";\nimport { VaultSettingsService } from \"@bitwarden/common/vault/services/vault-settings/vault-settings.service\";\nimport {\n  ImportApiService,\n  ImportApiServiceAbstraction,\n  ImportService,\n  ImportServiceAbstraction,\n} from \"@bitwarden/importer/core\";\nimport {\n  IndividualVaultExportService,\n  IndividualVaultExportServiceAbstraction,\n  OrganizationVaultExportService,\n  OrganizationVaultExportServiceAbstraction,\n  VaultExportService,\n  VaultExportServiceAbstraction,\n} from \"@bitwarden/vault-export-core\";\n\nimport ContextMenusBackground from \"../autofill/background/context-menus.background\";\nimport NotificationBackground from \"../autofill/background/notification.background\";\nimport OverlayBackground from \"../autofill/background/overlay.background\";\nimport TabsBackground from \"../autofill/background/tabs.background\";\nimport WebRequestBackground from \"../autofill/background/web-request.background\";\nimport { CipherContextMenuHandler } from \"../autofill/browser/cipher-context-menu-handler\";\nimport { ContextMenuClickedHandler } from \"../autofill/browser/context-menu-clicked-handler\";\nimport { MainContextMenuHandler } from \"../autofill/browser/main-context-menu-handler\";\nimport { AutofillService as AutofillServiceAbstraction } from \"../autofill/services/abstractions/autofill.service\";\nimport AutofillService from \"../autofill/services/autofill.service\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { Account } from \"../models/account\";\nimport { BrowserApi } from \"../platform/browser/browser-api\";\nimport { flagEnabled } from \"../platform/flags\";\nimport { UpdateBadge } from \"../platform/listeners/update-badge\";\nimport { BrowserStateService as StateServiceAbstraction } from \"../platform/services/abstractions/browser-state.service\";\nimport { BrowserConfigService } from \"../platform/services/browser-config.service\";\nimport { BrowserCryptoService } from \"../platform/services/browser-crypto.service\";\nimport { BrowserEnvironmentService } from \"../platform/services/browser-environment.service\";\nimport BrowserLocalStorageService from \"../platform/services/browser-local-storage.service\";\nimport BrowserMessagingPrivateModeBackgroundService from \"../platform/services/browser-messaging-private-mode-background.service\";\nimport BrowserMessagingService from \"../platform/services/browser-messaging.service\";\nimport { BrowserStateService } from \"../platform/services/browser-state.service\";\nimport I18nService from \"../platform/services/i18n.service\";\nimport { LocalBackedSessionStorageService } from \"../platform/services/local-backed-session-storage.service\";\nimport { BackgroundPlatformUtilsService } from \"../platform/services/platform-utils/background-platform-utils.service\";\nimport { BrowserPlatformUtilsService } from \"../platform/services/platform-utils/browser-platform-utils.service\";\nimport { BackgroundDerivedStateProvider } from \"../platform/state/background-derived-state.provider\";\nimport { BackgroundMemoryStorageService } from \"../platform/storage/background-memory-storage.service\";\nimport { BrowserSendService } from \"../services/browser-send.service\";\nimport VaultTimeoutService from \"../services/vault-timeout/vault-timeout.service\";\nimport FilelessImporterBackground from \"../tools/background/fileless-importer.background\";\nimport { BrowserFido2UserInterfaceService } from \"../vault/fido2/browser-fido2-user-interface.service\";\nimport { Fido2Service as Fido2ServiceAbstraction } from \"../vault/services/abstractions/fido2.service\";\nimport Fido2Service from \"../vault/services/fido2.service\";\nimport { VaultFilterService } from \"../vault/services/vault-filter.service\";\n\nimport CommandsBackground from \"./commands.background\";\nimport IdleBackground from \"./idle.background\";\nimport { NativeMessagingBackground } from \"./nativeMessaging.background\";\nimport RuntimeBackground from \"./runtime.background\";\n\nexport default class MainBackground {\n  messagingService: MessagingServiceAbstraction;\n  storageService: AbstractStorageService;\n  secureStorageService: AbstractStorageService;\n  memoryStorageService: AbstractMemoryStorageService;\n  memoryStorageForStateProviders: AbstractMemoryStorageService & ObservableStorageService;\n  i18nService: I18nServiceAbstraction;\n  platformUtilsService: PlatformUtilsServiceAbstraction;\n  logService: LogServiceAbstraction;\n  keyGenerationService: KeyGenerationServiceAbstraction;\n  cryptoService: CryptoServiceAbstraction;\n  cryptoFunctionService: CryptoFunctionServiceAbstraction;\n  tokenService: TokenServiceAbstraction;\n  appIdService: AppIdServiceAbstraction;\n  apiService: ApiServiceAbstraction;\n  environmentService: BrowserEnvironmentService;\n  cipherService: CipherServiceAbstraction;\n  folderService: InternalFolderServiceAbstraction;\n  userDecryptionOptionsService: InternalUserDecryptionOptionsServiceAbstraction;\n  collectionService: CollectionServiceAbstraction;\n  vaultTimeoutService: VaultTimeoutService;\n  vaultTimeoutSettingsService: VaultTimeoutSettingsServiceAbstraction;\n  syncService: SyncServiceAbstraction;\n  passwordGenerationService: PasswordGenerationServiceAbstraction;\n  passwordStrengthService: PasswordStrengthServiceAbstraction;\n  totpService: TotpServiceAbstraction;\n  autofillService: AutofillServiceAbstraction;\n  containerService: ContainerService;\n  auditService: AuditServiceAbstraction;\n  authService: AuthServiceAbstraction;\n  loginStrategyService: LoginStrategyServiceAbstraction;\n  importApiService: ImportApiServiceAbstraction;\n  importService: ImportServiceAbstraction;\n  exportService: VaultExportServiceAbstraction;\n  searchService: SearchServiceAbstraction;\n  notificationsService: NotificationsServiceAbstraction;\n  stateService: StateServiceAbstraction;\n  userNotificationSettingsService: UserNotificationSettingsServiceAbstraction;\n  autofillSettingsService: AutofillSettingsServiceAbstraction;\n  badgeSettingsService: BadgeSettingsServiceAbstraction;\n  domainSettingsService: DomainSettingsService;\n  systemService: SystemServiceAbstraction;\n  eventCollectionService: EventCollectionServiceAbstraction;\n  eventUploadService: EventUploadServiceAbstraction;\n  policyService: InternalPolicyServiceAbstraction;\n  sendService: InternalSendServiceAbstraction;\n  fileUploadService: FileUploadServiceAbstraction;\n  cipherFileUploadService: CipherFileUploadServiceAbstraction;\n  organizationService: InternalOrganizationServiceAbstraction;\n  providerService: ProviderServiceAbstraction;\n  keyConnectorService: KeyConnectorServiceAbstraction;\n  userVerificationService: UserVerificationServiceAbstraction;\n  twoFactorService: TwoFactorServiceAbstraction;\n  vaultFilterService: VaultFilterService;\n  usernameGenerationService: UsernameGenerationServiceAbstraction;\n  encryptService: EncryptService;\n  folderApiService: FolderApiServiceAbstraction;\n  policyApiService: PolicyApiServiceAbstraction;\n  sendApiService: SendApiServiceAbstraction;\n  userVerificationApiService: UserVerificationApiServiceAbstraction;\n  syncNotifierService: SyncNotifierServiceAbstraction;\n  fido2UserInterfaceService: Fido2UserInterfaceServiceAbstraction;\n  fido2AuthenticatorService: Fido2AuthenticatorServiceAbstraction;\n  fido2ClientService: Fido2ClientServiceAbstraction;\n  avatarService: AvatarServiceAbstraction;\n  mainContextMenuHandler: MainContextMenuHandler;\n  cipherContextMenuHandler: CipherContextMenuHandler;\n  configService: BrowserConfigService;\n  configApiService: ConfigApiServiceAbstraction;\n  devicesApiService: DevicesApiServiceAbstraction;\n  devicesService: DevicesServiceAbstraction;\n  deviceTrustCryptoService: DeviceTrustCryptoServiceAbstraction;\n  authRequestService: AuthRequestServiceAbstraction;\n  accountService: AccountServiceAbstraction;\n  globalStateProvider: GlobalStateProvider;\n  pinCryptoService: PinCryptoServiceAbstraction;\n  singleUserStateProvider: SingleUserStateProvider;\n  activeUserStateProvider: ActiveUserStateProvider;\n  derivedStateProvider: DerivedStateProvider;\n  stateProvider: StateProvider;\n  fido2Service: Fido2ServiceAbstraction;\n  individualVaultExportService: IndividualVaultExportServiceAbstraction;\n  organizationVaultExportService: OrganizationVaultExportServiceAbstraction;\n  vaultSettingsService: VaultSettingsServiceAbstraction;\n  biometricStateService: BiometricStateService;\n  stateEventRunnerService: StateEventRunnerService;\n  ssoLoginService: SsoLoginServiceAbstraction;\n  billingAccountProfileStateService: BillingAccountProfileStateService;\n\n  onUpdatedRan: boolean;\n  onReplacedRan: boolean;\n  loginToAutoFill: CipherView = null;\n\n  private commandsBackground: CommandsBackground;\n  private contextMenusBackground: ContextMenusBackground;\n  private idleBackground: IdleBackground;\n  private notificationBackground: NotificationBackground;\n  private overlayBackground: OverlayBackground;\n  private filelessImporterBackground: FilelessImporterBackground;\n  private runtimeBackground: RuntimeBackground;\n  private tabsBackground: TabsBackground;\n  private webRequestBackground: WebRequestBackground;\n\n  private syncTimeout: any;\n  private isSafari: boolean;\n  private nativeMessagingBackground: NativeMessagingBackground;\n  popupOnlyContext: boolean;\n\n  constructor(public isPrivateMode: boolean = false) {\n    this.popupOnlyContext = isPrivateMode || BrowserApi.isManifestVersion(3);\n\n    // Services\n    const lockedCallback = async (userId?: string) => {\n      if (this.notificationsService != null) {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.notificationsService.updateConnection(false);\n      }\n      await this.refreshBadge();\n      await this.refreshMenu(true);\n      if (this.systemService != null) {\n        await this.systemService.clearPendingClipboard();\n        await this.systemService.startProcessReload(this.authService);\n      }\n    };\n\n    const logoutCallback = async (expired: boolean, userId?: UserId) =>\n      await this.logout(expired, userId);\n\n    this.messagingService = this.popupOnlyContext\n      ? new BrowserMessagingPrivateModeBackgroundService()\n      : new BrowserMessagingService();\n    this.logService = new ConsoleLogService(false);\n    this.cryptoFunctionService = new WebCryptoFunctionService(self);\n    this.keyGenerationService = new KeyGenerationService(this.cryptoFunctionService);\n    this.storageService = new BrowserLocalStorageService();\n    this.secureStorageService = this.storageService; // secure storage is not supported in browsers, so we use local storage and warn users when it is used\n    this.memoryStorageService = BrowserApi.isManifestVersion(3)\n      ? new LocalBackedSessionStorageService(\n          new EncryptServiceImplementation(this.cryptoFunctionService, this.logService, false),\n          this.keyGenerationService,\n        )\n      : new MemoryStorageService();\n    this.memoryStorageForStateProviders = BrowserApi.isManifestVersion(3)\n      ? new LocalBackedSessionStorageService(\n          new EncryptServiceImplementation(this.cryptoFunctionService, this.logService, false),\n          this.keyGenerationService,\n        )\n      : new BackgroundMemoryStorageService();\n\n    const storageServiceProvider = new StorageServiceProvider(\n      this.storageService as BrowserLocalStorageService,\n      this.memoryStorageForStateProviders,\n    );\n\n    this.globalStateProvider = new DefaultGlobalStateProvider(storageServiceProvider);\n\n    const stateEventRegistrarService = new StateEventRegistrarService(\n      this.globalStateProvider,\n      storageServiceProvider,\n    );\n\n    this.stateEventRunnerService = new StateEventRunnerService(\n      this.globalStateProvider,\n      storageServiceProvider,\n    );\n\n    this.encryptService = flagEnabled(\"multithreadDecryption\")\n      ? new MultithreadEncryptServiceImplementation(\n          this.cryptoFunctionService,\n          this.logService,\n          true,\n        )\n      : new EncryptServiceImplementation(this.cryptoFunctionService, this.logService, true);\n\n    this.singleUserStateProvider = new DefaultSingleUserStateProvider(\n      storageServiceProvider,\n      stateEventRegistrarService,\n    );\n    this.accountService = new AccountServiceImplementation(\n      this.messagingService,\n      this.logService,\n      this.globalStateProvider,\n    );\n    this.activeUserStateProvider = new DefaultActiveUserStateProvider(\n      this.accountService,\n      this.singleUserStateProvider,\n    );\n    this.derivedStateProvider = new BackgroundDerivedStateProvider(\n      this.memoryStorageForStateProviders,\n    );\n    this.stateProvider = new DefaultStateProvider(\n      this.activeUserStateProvider,\n      this.singleUserStateProvider,\n      this.globalStateProvider,\n      this.derivedStateProvider,\n    );\n    this.environmentService = new BrowserEnvironmentService(\n      this.logService,\n      this.stateProvider,\n      this.accountService,\n    );\n    this.biometricStateService = new DefaultBiometricStateService(this.stateProvider);\n\n    this.userNotificationSettingsService = new UserNotificationSettingsService(this.stateProvider);\n    this.platformUtilsService = new BackgroundPlatformUtilsService(\n      this.messagingService,\n      (clipboardValue, clearMs) => this.clearClipboard(clipboardValue, clearMs),\n      async () => this.biometricUnlock(),\n      self,\n    );\n\n    this.tokenService = new TokenService(\n      this.singleUserStateProvider,\n      this.globalStateProvider,\n      this.platformUtilsService.supportsSecureStorage(),\n      this.secureStorageService,\n      this.keyGenerationService,\n      this.encryptService,\n      this.logService,\n    );\n\n    const migrationRunner = new MigrationRunner(\n      this.storageService,\n      this.logService,\n      new MigrationBuilderService(),\n    );\n\n    this.stateService = new BrowserStateService(\n      this.storageService,\n      this.secureStorageService,\n      this.memoryStorageService,\n      this.logService,\n      new StateFactory(GlobalState, Account),\n      this.accountService,\n      this.environmentService,\n      this.tokenService,\n      migrationRunner,\n    );\n\n    const themeStateService = new DefaultThemeStateService(this.globalStateProvider);\n\n    this.i18nService = new I18nService(BrowserApi.getUILanguage(), this.globalStateProvider);\n    this.cryptoService = new BrowserCryptoService(\n      this.keyGenerationService,\n      this.cryptoFunctionService,\n      this.encryptService,\n      this.platformUtilsService,\n      this.logService,\n      this.stateService,\n      this.accountService,\n      this.stateProvider,\n      this.biometricStateService,\n    );\n\n    this.appIdService = new AppIdService(this.globalStateProvider);\n    this.apiService = new ApiService(\n      this.tokenService,\n      this.platformUtilsService,\n      this.environmentService,\n      this.appIdService,\n      this.stateService,\n      (expired: boolean) => this.logout(expired),\n    );\n    this.domainSettingsService = new DefaultDomainSettingsService(this.stateProvider);\n    this.fileUploadService = new FileUploadService(this.logService);\n    this.cipherFileUploadService = new CipherFileUploadService(\n      this.apiService,\n      this.fileUploadService,\n    );\n    this.searchService = new SearchService(this.logService, this.i18nService);\n\n    this.collectionService = new CollectionService(\n      this.cryptoService,\n      this.i18nService,\n      this.stateProvider,\n    );\n    this.syncNotifierService = new SyncNotifierService();\n    this.organizationService = new OrganizationService(this.stateProvider);\n    this.policyService = new PolicyService(this.stateProvider, this.organizationService);\n    this.autofillSettingsService = new AutofillSettingsService(\n      this.stateProvider,\n      this.policyService,\n    );\n    this.badgeSettingsService = new BadgeSettingsService(this.stateProvider);\n    this.policyApiService = new PolicyApiService(this.policyService, this.apiService);\n    this.keyConnectorService = new KeyConnectorService(\n      this.stateService,\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.logService,\n      this.organizationService,\n      this.keyGenerationService,\n      logoutCallback,\n    );\n\n    this.passwordStrengthService = new PasswordStrengthService();\n\n    this.passwordGenerationService = new PasswordGenerationService(\n      this.cryptoService,\n      this.policyService,\n      this.stateService,\n    );\n\n    this.twoFactorService = new TwoFactorService(this.i18nService, this.platformUtilsService);\n\n    // eslint-disable-next-line\n    const that = this;\n    const backgroundMessagingService = new (class extends MessagingServiceAbstraction {\n      // AuthService should send the messages to the background not popup.\n      send = (subscriber: string, arg: any = {}) => {\n        const message = Object.assign({}, { command: subscriber }, arg);\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        that.runtimeBackground.processMessage(message, that as any);\n      };\n    })();\n\n    this.userDecryptionOptionsService = new UserDecryptionOptionsService(this.stateProvider);\n\n    this.devicesApiService = new DevicesApiServiceImplementation(this.apiService);\n    this.deviceTrustCryptoService = new DeviceTrustCryptoService(\n      this.keyGenerationService,\n      this.cryptoFunctionService,\n      this.cryptoService,\n      this.encryptService,\n      this.stateService,\n      this.appIdService,\n      this.devicesApiService,\n      this.i18nService,\n      this.platformUtilsService,\n      this.userDecryptionOptionsService,\n    );\n\n    this.devicesService = new DevicesServiceImplementation(this.devicesApiService);\n\n    this.authRequestService = new AuthRequestService(\n      this.appIdService,\n      this.cryptoService,\n      this.apiService,\n      this.stateService,\n    );\n\n    this.authService = new AuthService(\n      backgroundMessagingService,\n      this.cryptoService,\n      this.apiService,\n      this.stateService,\n    );\n\n    this.billingAccountProfileStateService = new DefaultBillingAccountProfileStateService(\n      this.stateProvider,\n    );\n\n    this.loginStrategyService = new LoginStrategyService(\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.appIdService,\n      this.platformUtilsService,\n      backgroundMessagingService,\n      this.logService,\n      this.keyConnectorService,\n      this.environmentService,\n      this.stateService,\n      this.twoFactorService,\n      this.i18nService,\n      this.encryptService,\n      this.passwordStrengthService,\n      this.policyService,\n      this.deviceTrustCryptoService,\n      this.authRequestService,\n      this.userDecryptionOptionsService,\n      this.globalStateProvider,\n      this.billingAccountProfileStateService,\n    );\n\n    this.ssoLoginService = new SsoLoginService(this.stateProvider);\n\n    this.userVerificationApiService = new UserVerificationApiService(this.apiService);\n\n    this.configApiService = new ConfigApiService(this.apiService, this.authService);\n\n    this.configService = new BrowserConfigService(\n      this.stateService,\n      this.configApiService,\n      this.authService,\n      this.environmentService,\n      this.logService,\n      this.stateProvider,\n      true,\n    );\n\n    this.cipherService = new CipherService(\n      this.cryptoService,\n      this.domainSettingsService,\n      this.apiService,\n      this.i18nService,\n      this.searchService,\n      this.stateService,\n      this.autofillSettingsService,\n      this.encryptService,\n      this.cipherFileUploadService,\n      this.configService,\n    );\n    this.folderService = new FolderService(\n      this.cryptoService,\n      this.i18nService,\n      this.cipherService,\n      this.stateService,\n      this.stateProvider,\n    );\n    this.folderApiService = new FolderApiService(this.folderService, this.apiService);\n\n    this.vaultTimeoutSettingsService = new VaultTimeoutSettingsService(\n      this.userDecryptionOptionsService,\n      this.cryptoService,\n      this.tokenService,\n      this.policyService,\n      this.stateService,\n      this.biometricStateService,\n    );\n\n    this.pinCryptoService = new PinCryptoService(\n      this.stateService,\n      this.cryptoService,\n      this.vaultTimeoutSettingsService,\n      this.logService,\n    );\n\n    this.userVerificationService = new UserVerificationService(\n      this.stateService,\n      this.cryptoService,\n      this.i18nService,\n      this.userVerificationApiService,\n      this.userDecryptionOptionsService,\n      this.pinCryptoService,\n      this.logService,\n      this.vaultTimeoutSettingsService,\n      this.platformUtilsService,\n    );\n\n    this.vaultFilterService = new VaultFilterService(\n      this.organizationService,\n      this.folderService,\n      this.cipherService,\n      this.collectionService,\n      this.policyService,\n      this.stateProvider,\n      this.accountService,\n    );\n\n    this.vaultSettingsService = new VaultSettingsService(this.stateProvider);\n\n    this.vaultTimeoutService = new VaultTimeoutService(\n      this.cipherService,\n      this.folderService,\n      this.collectionService,\n      this.cryptoService,\n      this.platformUtilsService,\n      this.messagingService,\n      this.searchService,\n      this.stateService,\n      this.authService,\n      this.vaultTimeoutSettingsService,\n      this.stateEventRunnerService,\n      lockedCallback,\n      logoutCallback,\n    );\n    this.containerService = new ContainerService(this.cryptoService, this.encryptService);\n    this.sendService = new BrowserSendService(\n      this.cryptoService,\n      this.i18nService,\n      this.keyGenerationService,\n      this.stateService,\n    );\n    this.sendApiService = new SendApiService(\n      this.apiService,\n      this.fileUploadService,\n      this.sendService,\n    );\n\n    this.avatarService = new AvatarService(this.apiService, this.stateProvider);\n\n    this.providerService = new ProviderService(this.stateProvider);\n\n    this.syncService = new SyncService(\n      this.apiService,\n      this.domainSettingsService,\n      this.folderService,\n      this.cipherService,\n      this.cryptoService,\n      this.collectionService,\n      this.messagingService,\n      this.policyService,\n      this.sendService,\n      this.logService,\n      this.keyConnectorService,\n      this.stateService,\n      this.providerService,\n      this.folderApiService,\n      this.organizationService,\n      this.sendApiService,\n      this.userDecryptionOptionsService,\n      this.avatarService,\n      logoutCallback,\n      this.billingAccountProfileStateService,\n    );\n    this.eventUploadService = new EventUploadService(\n      this.apiService,\n      this.stateProvider,\n      this.logService,\n      this.accountService,\n    );\n    this.eventCollectionService = new EventCollectionService(\n      this.cipherService,\n      this.stateProvider,\n      this.organizationService,\n      this.eventUploadService,\n      this.accountService,\n    );\n    this.totpService = new TotpService(this.cryptoFunctionService, this.logService);\n\n    this.autofillService = new AutofillService(\n      this.cipherService,\n      this.stateService,\n      this.autofillSettingsService,\n      this.totpService,\n      this.eventCollectionService,\n      this.logService,\n      this.domainSettingsService,\n      this.userVerificationService,\n      this.billingAccountProfileStateService,\n    );\n    this.auditService = new AuditService(this.cryptoFunctionService, this.apiService);\n\n    this.importApiService = new ImportApiService(this.apiService);\n\n    this.importService = new ImportService(\n      this.cipherService,\n      this.folderService,\n      this.importApiService,\n      this.i18nService,\n      this.collectionService,\n      this.cryptoService,\n    );\n\n    this.individualVaultExportService = new IndividualVaultExportService(\n      this.folderService,\n      this.cipherService,\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.stateService,\n    );\n\n    this.organizationVaultExportService = new OrganizationVaultExportService(\n      this.cipherService,\n      this.apiService,\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.stateService,\n      this.collectionService,\n    );\n\n    this.exportService = new VaultExportService(\n      this.individualVaultExportService,\n      this.organizationVaultExportService,\n    );\n\n    this.notificationsService = new NotificationsService(\n      this.logService,\n      this.syncService,\n      this.appIdService,\n      this.apiService,\n      this.environmentService,\n      logoutCallback,\n      this.stateService,\n      this.authService,\n      this.messagingService,\n    );\n\n    this.fido2Service = new Fido2Service();\n    this.fido2UserInterfaceService = new BrowserFido2UserInterfaceService(this.authService);\n    this.fido2AuthenticatorService = new Fido2AuthenticatorService(\n      this.cipherService,\n      this.fido2UserInterfaceService,\n      this.syncService,\n      this.logService,\n    );\n    this.fido2ClientService = new Fido2ClientService(\n      this.fido2AuthenticatorService,\n      this.configService,\n      this.authService,\n      this.vaultSettingsService,\n      this.domainSettingsService,\n      this.logService,\n    );\n\n    const systemUtilsServiceReloadCallback = () => {\n      const forceWindowReload =\n        this.platformUtilsService.isSafari() ||\n        this.platformUtilsService.isFirefox() ||\n        this.platformUtilsService.isOpera();\n      BrowserApi.reloadExtension(forceWindowReload ? self : null);\n      return Promise.resolve();\n    };\n\n    this.systemService = new SystemService(\n      this.messagingService,\n      this.platformUtilsService,\n      systemUtilsServiceReloadCallback,\n      this.stateService,\n      this.autofillSettingsService,\n      this.vaultTimeoutSettingsService,\n      this.biometricStateService,\n    );\n\n    // Other fields\n    this.isSafari = this.platformUtilsService.isSafari();\n\n    // Background\n    this.runtimeBackground = new RuntimeBackground(\n      this,\n      this.autofillService,\n      this.platformUtilsService as BrowserPlatformUtilsService,\n      this.i18nService,\n      this.notificationsService,\n      this.stateService,\n      this.autofillSettingsService,\n      this.systemService,\n      this.environmentService,\n      this.messagingService,\n      this.logService,\n      this.configService,\n      this.fido2Service,\n    );\n    this.nativeMessagingBackground = new NativeMessagingBackground(\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.runtimeBackground,\n      this.messagingService,\n      this.appIdService,\n      this.platformUtilsService,\n      this.stateService,\n      this.logService,\n      this.authService,\n      this.biometricStateService,\n    );\n    this.commandsBackground = new CommandsBackground(\n      this,\n      this.passwordGenerationService,\n      this.platformUtilsService,\n      this.vaultTimeoutService,\n      this.authService,\n    );\n    this.notificationBackground = new NotificationBackground(\n      this.autofillService,\n      this.cipherService,\n      this.authService,\n      this.policyService,\n      this.folderService,\n      this.stateService,\n      this.userNotificationSettingsService,\n      this.domainSettingsService,\n      this.environmentService,\n      this.logService,\n      themeStateService,\n    );\n    this.overlayBackground = new OverlayBackground(\n      this.cipherService,\n      this.autofillService,\n      this.authService,\n      this.environmentService,\n      this.domainSettingsService,\n      this.stateService,\n      this.autofillSettingsService,\n      this.i18nService,\n      this.platformUtilsService,\n      themeStateService,\n    );\n    this.filelessImporterBackground = new FilelessImporterBackground(\n      this.configService,\n      this.authService,\n      this.policyService,\n      this.notificationBackground,\n      this.importService,\n      this.syncService,\n    );\n    this.tabsBackground = new TabsBackground(\n      this,\n      this.notificationBackground,\n      this.overlayBackground,\n    );\n    if (!this.popupOnlyContext) {\n      const contextMenuClickedHandler = new ContextMenuClickedHandler(\n        (options) => this.platformUtilsService.copyToClipboard(options.text),\n        async (_tab) => {\n          const options = (await this.passwordGenerationService.getOptions())?.[0] ?? {};\n          const password = await this.passwordGenerationService.generatePassword(options);\n          this.platformUtilsService.copyToClipboard(password);\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.passwordGenerationService.addHistory(password);\n        },\n        async (tab, cipher) => {\n          this.loginToAutoFill = cipher;\n          if (tab == null) {\n            return;\n          }\n\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          BrowserApi.tabSendMessage(tab, {\n            command: \"collectPageDetails\",\n            tab: tab,\n            sender: \"contextMenu\",\n          });\n        },\n        this.authService,\n        this.cipherService,\n        this.stateService,\n        this.totpService,\n        this.eventCollectionService,\n        this.userVerificationService,\n      );\n\n      this.contextMenusBackground = new ContextMenusBackground(contextMenuClickedHandler);\n    }\n\n    this.idleBackground = new IdleBackground(\n      this.vaultTimeoutService,\n      this.stateService,\n      this.notificationsService,\n      this.accountService,\n    );\n    this.webRequestBackground = new WebRequestBackground(\n      this.platformUtilsService,\n      this.cipherService,\n      this.authService,\n    );\n\n    this.usernameGenerationService = new UsernameGenerationService(\n      this.cryptoService,\n      this.stateService,\n      this.apiService,\n    );\n\n    if (!this.popupOnlyContext) {\n      this.mainContextMenuHandler = new MainContextMenuHandler(\n        this.stateService,\n        this.autofillSettingsService,\n        this.i18nService,\n        this.logService,\n        this.billingAccountProfileStateService,\n      );\n\n      this.cipherContextMenuHandler = new CipherContextMenuHandler(\n        this.mainContextMenuHandler,\n        this.authService,\n        this.cipherService,\n      );\n    }\n  }\n\n  async bootstrap() {\n    this.containerService.attachToGlobal(window);\n\n    await this.stateService.init();\n\n    await this.vaultTimeoutService.init(true);\n    await (this.i18nService as I18nService).init();\n    await (this.eventUploadService as EventUploadService).init(true);\n    await this.runtimeBackground.init();\n    await this.notificationBackground.init();\n    this.filelessImporterBackground.init();\n    await this.commandsBackground.init();\n\n    this.configService.init();\n    this.twoFactorService.init();\n\n    await this.overlayBackground.init();\n\n    await this.tabsBackground.init();\n    if (!this.popupOnlyContext) {\n      this.contextMenusBackground?.init();\n    }\n    await this.idleBackground.init();\n    await this.webRequestBackground.init();\n\n    await this.fido2Service.init();\n\n    if (this.platformUtilsService.isFirefox() && !this.isPrivateMode) {\n      // Set Private Mode windows to the default icon - they do not share state with the background page\n      const privateWindows = await BrowserApi.getPrivateModeWindows();\n      privateWindows.forEach(async (win) => {\n        await new UpdateBadge(self).setBadgeIcon(\"\", win.id);\n      });\n\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      BrowserApi.onWindowCreated(async (win) => {\n        if (win.incognito) {\n          await new UpdateBadge(self).setBadgeIcon(\"\", win.id);\n        }\n      });\n    }\n\n    return new Promise<void>((resolve) => {\n      setTimeout(async () => {\n        if (!this.isPrivateMode) {\n          await this.refreshBadge();\n        }\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.fullSync(true);\n        setTimeout(() => this.notificationsService.init(), 2500);\n        resolve();\n      }, 500);\n    });\n  }\n\n  async refreshBadge() {\n    await new UpdateBadge(self).run({ existingServices: this as any });\n  }\n\n  async refreshMenu(forLocked = false) {\n    if (!chrome.windows || !chrome.contextMenus) {\n      return;\n    }\n\n    await MainContextMenuHandler.removeAll();\n\n    if (forLocked) {\n      await this.mainContextMenuHandler?.noAccess();\n      this.onUpdatedRan = this.onReplacedRan = false;\n      return;\n    }\n\n    await this.mainContextMenuHandler?.init();\n\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (tab) {\n      await this.cipherContextMenuHandler?.update(tab.url);\n      this.onUpdatedRan = this.onReplacedRan = false;\n    }\n  }\n\n  /**\n   * Switch accounts to indicated userId -- null is no active user\n   */\n  async switchAccount(userId: UserId) {\n    try {\n      await this.stateService.setActiveUser(userId);\n\n      if (userId == null) {\n        await this.stateService.setRememberedEmail(null);\n        await this.refreshBadge();\n        await this.refreshMenu();\n        await this.overlayBackground.updateOverlayCiphers();\n        return;\n      }\n\n      const status = await this.authService.getAuthStatus(userId);\n      const forcePasswordReset =\n        (await this.stateService.getForceSetPasswordReason({ userId: userId })) !=\n        ForceSetPasswordReason.None;\n\n      await this.systemService.clearPendingClipboard();\n      await this.notificationsService.updateConnection(false);\n\n      if (status === AuthenticationStatus.Locked) {\n        this.messagingService.send(\"locked\", { userId: userId });\n      } else if (forcePasswordReset) {\n        this.messagingService.send(\"update-temp-password\", { userId: userId });\n      } else {\n        this.messagingService.send(\"unlocked\", { userId: userId });\n        await this.refreshBadge();\n        await this.refreshMenu();\n        await this.overlayBackground.updateOverlayCiphers();\n        await this.syncService.fullSync(false);\n      }\n    } finally {\n      this.messagingService.send(\"switchAccountFinish\", { userId: userId });\n    }\n  }\n\n  async logout(expired: boolean, userId?: UserId) {\n    userId ??= (await firstValueFrom(this.accountService.activeAccount$))?.id;\n\n    await this.eventUploadService.uploadEvents(userId as UserId);\n\n    await Promise.all([\n      this.syncService.setLastSync(new Date(0), userId),\n      this.cryptoService.clearKeys(userId),\n      this.cipherService.clear(userId),\n      this.folderService.clear(userId),\n      this.collectionService.clear(userId),\n      this.policyService.clear(userId),\n      this.passwordGenerationService.clear(userId),\n      this.vaultTimeoutSettingsService.clear(userId),\n      this.keyConnectorService.clear(),\n      this.vaultFilterService.clear(),\n      this.biometricStateService.logout(userId),\n      this.providerService.save(null, userId),\n      /* We intentionally do not clear:\n       *  - autofillSettingsService\n       *  - badgeSettingsService\n       *  - userNotificationSettingsService\n       */\n    ]);\n\n    //Needs to be checked before state is cleaned\n    const needStorageReseed = await this.needsStorageReseed();\n\n    const currentUserId = await this.stateService.getUserId();\n    const newActiveUser = await this.stateService.clean({ userId: userId });\n\n    if (userId == null || userId === currentUserId) {\n      this.searchService.clearIndex();\n    }\n\n    await this.stateEventRunnerService.handleEvent(\"logout\", currentUserId as UserId);\n\n    if (newActiveUser != null) {\n      // we have a new active user, do not continue tearing down application\n      await this.switchAccount(newActiveUser as UserId);\n      this.messagingService.send(\"switchAccountFinish\");\n    } else {\n      this.messagingService.send(\"doneLoggingOut\", { expired: expired, userId: userId });\n    }\n\n    if (needStorageReseed) {\n      await this.reseedStorage();\n    }\n\n    if (BrowserApi.isManifestVersion(3)) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      BrowserApi.sendMessage(\"updateBadge\");\n    }\n    await this.refreshBadge();\n    await this.mainContextMenuHandler.noAccess();\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.notificationsService.updateConnection(false);\n    await this.systemService.clearPendingClipboard();\n    await this.systemService.startProcessReload(this.authService);\n  }\n\n  private async needsStorageReseed(): Promise<boolean> {\n    const currentVaultTimeout = await this.stateService.getVaultTimeout();\n    return currentVaultTimeout == null ? false : true;\n  }\n\n  async collectPageDetailsForContentScript(tab: any, sender: string, frameId: number = null) {\n    if (tab == null || !tab.id) {\n      return;\n    }\n\n    const options: any = {};\n    if (frameId != null) {\n      options.frameId = frameId;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.tabSendMessage(\n      tab,\n      {\n        command: \"collectPageDetails\",\n        tab: tab,\n        sender: sender,\n      },\n      options,\n    );\n  }\n\n  async openPopup() {\n    // Chrome APIs cannot open popup\n\n    // TODO: Do we need to open this popup?\n    if (!this.isSafari) {\n      return;\n    }\n    await SafariApp.sendMessageToApp(\"showPopover\", null, true);\n  }\n\n  async reseedStorage() {\n    if (\n      !this.platformUtilsService.isChrome() &&\n      !this.platformUtilsService.isVivaldi() &&\n      !this.platformUtilsService.isOpera()\n    ) {\n      return;\n    }\n\n    const getStorage = (): Promise<any> =>\n      new Promise((resolve) => {\n        chrome.storage.local.get(null, (o: any) => resolve(o));\n      });\n\n    const clearStorage = (): Promise<void> =>\n      new Promise((resolve) => {\n        chrome.storage.local.clear(() => resolve());\n      });\n\n    const storage = await getStorage();\n    await clearStorage();\n\n    for (const key in storage) {\n      // eslint-disable-next-line\n      if (!storage.hasOwnProperty(key)) {\n        continue;\n      }\n      await this.storageService.save(key, storage[key]);\n    }\n  }\n\n  async clearClipboard(clipboardValue: string, clearMs: number) {\n    if (this.systemService != null) {\n      await this.systemService.clearClipboard(clipboardValue, clearMs);\n    }\n  }\n\n  async biometricUnlock(): Promise<boolean> {\n    if (this.nativeMessagingBackground == null) {\n      return false;\n    }\n\n    const responsePromise = this.nativeMessagingBackground.getResponse();\n    await this.nativeMessagingBackground.send({ command: \"biometricUnlock\" });\n    const response = await responsePromise;\n    return response.response === \"unlocked\";\n  }\n\n  private async fullSync(override = false) {\n    const syncInternal = 6 * 60 * 60 * 1000; // 6 hours\n    const lastSync = await this.syncService.getLastSync();\n\n    let lastSyncAgo = syncInternal + 1;\n    if (lastSync != null) {\n      lastSyncAgo = new Date().getTime() - lastSync.getTime();\n    }\n\n    if (override || lastSyncAgo >= syncInternal) {\n      await this.syncService.fullSync(override);\n      this.scheduleNextSync();\n    } else {\n      this.scheduleNextSync();\n    }\n  }\n\n  private scheduleNextSync() {\n    if (this.syncTimeout) {\n      clearTimeout(this.syncTimeout);\n    }\n\n    this.syncTimeout = setTimeout(async () => await this.fullSync(), 5 * 60 * 1000); // check every 5 minutes\n  }\n}\n","import { ClearClipboard, clearClipboardAlarmName } from \"../../autofill/clipboard\";\n\nimport { alarmKeys, clearAlarmTime, getAlarmTime } from \"./alarm-state\";\n\nexport const onAlarmListener = async (alarm: chrome.alarms.Alarm) => {\n  alarmKeys.forEach(async (key) => {\n    const executionTime = await getAlarmTime(key);\n    if (!executionTime) {\n      return;\n    }\n\n    const currentDate = Date.now();\n    if (executionTime > currentDate) {\n      return;\n    }\n\n    await clearAlarmTime(key);\n\n    switch (key) {\n      case clearClipboardAlarmName:\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        ClearClipboard.run();\n        break;\n      default:\n    }\n  });\n};\n","import { CachedServices } from \"../background/service-factories/factory-options\";\n\ntype Listener<T extends unknown[]> = (...args: [...T, CachedServices]) => Promise<void>;\n\nexport const combine = <T extends unknown[]>(\n  listeners: Listener<T>[],\n  startingServices: CachedServices = {},\n) => {\n  return async (...args: T) => {\n    const cachedServices = { ...startingServices };\n    for (const listener of listeners) {\n      await listener(...[...args, cachedServices]);\n    }\n  };\n};\n","import { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\n\nimport { authServiceFactory } from \"../../auth/background/service-factories/auth-service.factory\";\nimport { autofillServiceFactory } from \"../../autofill/background/service_factories/autofill-service.factory\";\nimport { autofillSettingsServiceFactory } from \"../../autofill/background/service_factories/autofill-settings-service.factory\";\nimport { GeneratePasswordToClipboardCommand } from \"../../autofill/clipboard\";\nimport { AutofillTabCommand } from \"../../autofill/commands/autofill-tab-command\";\nimport { Account } from \"../../models/account\";\nimport {\n  passwordGenerationServiceFactory,\n  PasswordGenerationServiceInitOptions,\n} from \"../../tools/background/service_factories/password-generation-service.factory\";\nimport { CachedServices } from \"../background/service-factories/factory-options\";\nimport { logServiceFactory } from \"../background/service-factories/log-service.factory\";\nimport { BrowserApi } from \"../browser/browser-api\";\n\nexport const onCommandListener = async (command: string, tab: chrome.tabs.Tab) => {\n  switch (command) {\n    case \"autofill_login\":\n      await doAutoFillLogin(tab);\n      break;\n    case \"generate_password\":\n      await doGeneratePasswordToClipboard(tab);\n      break;\n  }\n};\n\nconst doAutoFillLogin = async (tab: chrome.tabs.Tab): Promise<void> => {\n  const cachedServices: CachedServices = {};\n  const opts = {\n    cryptoFunctionServiceOptions: {\n      win: self,\n    },\n    encryptServiceOptions: {\n      logMacFailures: true,\n    },\n    logServiceOptions: {\n      isDev: false,\n    },\n    platformUtilsServiceOptions: {\n      clipboardWriteCallback: () => Promise.resolve(),\n      biometricCallback: () => Promise.resolve(false),\n      win: self,\n    },\n    stateServiceOptions: {\n      stateFactory: new StateFactory(GlobalState, Account),\n    },\n    apiServiceOptions: {\n      logoutCallback: () => Promise.resolve(),\n    },\n    keyConnectorServiceOptions: {\n      logoutCallback: () => Promise.resolve(),\n    },\n    i18nServiceOptions: {\n      systemLanguage: BrowserApi.getUILanguage(),\n    },\n  };\n  const logService = await logServiceFactory(cachedServices, opts);\n  const authService = await authServiceFactory(cachedServices, opts);\n  const autofillService = await autofillServiceFactory(cachedServices, opts);\n\n  const authStatus = await authService.getAuthStatus();\n  if (authStatus < AuthenticationStatus.Unlocked) {\n    // TODO: Add back in unlock on autofill\n    logService.info(\"Currently not unlocked, MV3 does not support unlock on autofill currently.\");\n    return;\n  }\n\n  const command = new AutofillTabCommand(autofillService);\n  await command.doAutofillTabCommand(tab);\n};\n\nconst doGeneratePasswordToClipboard = async (tab: chrome.tabs.Tab): Promise<void> => {\n  const stateFactory = new StateFactory(GlobalState, Account);\n\n  const cache = {};\n  const options: PasswordGenerationServiceInitOptions = {\n    cryptoFunctionServiceOptions: {\n      win: self,\n    },\n    encryptServiceOptions: {\n      logMacFailures: false,\n    },\n    logServiceOptions: {\n      isDev: false,\n    },\n    platformUtilsServiceOptions: {\n      biometricCallback: () => Promise.resolve(true),\n      clipboardWriteCallback: () => Promise.resolve(),\n      win: self,\n    },\n    stateServiceOptions: {\n      stateFactory: stateFactory,\n    },\n    autofillSettingsServiceOptions: {\n      stateFactory: autofillSettingsServiceFactory,\n    },\n  };\n\n  const command = new GeneratePasswordToClipboardCommand(\n    await passwordGenerationServiceFactory(cache, options),\n    await autofillSettingsServiceFactory(cache, options),\n  );\n  // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  command.generatePasswordToClipboard(tab);\n};\n","import { CipherContextMenuHandler } from \"../../autofill/browser/cipher-context-menu-handler\";\nimport { ContextMenuClickedHandler } from \"../../autofill/browser/context-menu-clicked-handler\";\n\nimport { combine } from \"./combine\";\nimport { onCommandListener } from \"./on-command-listener\";\nimport { onInstallListener } from \"./on-install-listener\";\nimport { UpdateBadge } from \"./update-badge\";\n\nconst windowsOnFocusChangedListener = combine([\n  UpdateBadge.windowsOnFocusChangedListener,\n  CipherContextMenuHandler.windowsOnFocusChangedListener,\n]);\n\nconst tabsOnActivatedListener = combine([\n  UpdateBadge.tabsOnActivatedListener,\n  CipherContextMenuHandler.tabsOnActivatedListener,\n]);\n\nconst tabsOnReplacedListener = combine([\n  UpdateBadge.tabsOnReplacedListener,\n  CipherContextMenuHandler.tabsOnReplacedListener,\n]);\n\nconst tabsOnUpdatedListener = combine([\n  UpdateBadge.tabsOnUpdatedListener,\n  CipherContextMenuHandler.tabsOnUpdatedListener,\n]);\n\nconst contextMenusClickedListener = ContextMenuClickedHandler.onClickedListener;\n\n// TODO: All message listeners should be RuntimeMessage in Notifications follow up then this type annotation can be inferred\nconst runtimeMessageListener = combine<\n  [message: { command: string }, sender: chrome.runtime.MessageSender]\n>([\n  UpdateBadge.messageListener,\n  CipherContextMenuHandler.messageListener,\n  ContextMenuClickedHandler.messageListener,\n]);\n\nexport {\n  windowsOnFocusChangedListener,\n  tabsOnActivatedListener,\n  tabsOnReplacedListener,\n  tabsOnUpdatedListener,\n  contextMenusClickedListener,\n  runtimeMessageListener,\n  onCommandListener,\n  onInstallListener,\n};\n","import MainBackground from \"../background/main.background\";\n\nimport { onAlarmListener } from \"./alarms/on-alarm-listener\";\nimport { registerAlarms } from \"./alarms/register-alarms\";\nimport { BrowserApi } from \"./browser/browser-api\";\nimport {\n  contextMenusClickedListener,\n  onCommandListener,\n  onInstallListener,\n  runtimeMessageListener,\n  windowsOnFocusChangedListener,\n  tabsOnActivatedListener,\n  tabsOnReplacedListener,\n  tabsOnUpdatedListener,\n} from \"./listeners\";\n\nif (BrowserApi.isManifestVersion(3)) {\n  chrome.commands.onCommand.addListener(onCommandListener);\n  chrome.runtime.onInstalled.addListener(onInstallListener);\n  chrome.alarms.onAlarm.addListener(onAlarmListener);\n  registerAlarms();\n  chrome.windows.onFocusChanged.addListener(windowsOnFocusChangedListener);\n  chrome.tabs.onActivated.addListener(tabsOnActivatedListener);\n  chrome.tabs.onReplaced.addListener(tabsOnReplacedListener);\n  chrome.tabs.onUpdated.addListener(tabsOnUpdatedListener);\n  chrome.contextMenus.onClicked.addListener(contextMenusClickedListener);\n  BrowserApi.messageListener(\n    \"runtime.background\",\n    (message: { command: string }, sender, sendResponse) => {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      runtimeMessageListener(message, sender);\n    },\n  );\n} else {\n  const bitwardenMain = ((window as any).bitwardenMain = new MainBackground());\n  // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  bitwardenMain.bootstrap().then(() => {\n    // Finished bootstrapping\n  });\n}\n","import { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\n\nimport { Account } from \"../../models/account\";\nimport {\n  EnvironmentServiceInitOptions,\n  environmentServiceFactory,\n} from \"../background/service-factories/environment-service.factory\";\nimport { BrowserApi } from \"../browser/browser-api\";\n\nexport async function onInstallListener(details: chrome.runtime.InstalledDetails) {\n  const cache = {};\n  const opts: EnvironmentServiceInitOptions = {\n    encryptServiceOptions: {\n      logMacFailures: false,\n    },\n    cryptoFunctionServiceOptions: {\n      win: self,\n    },\n    logServiceOptions: {\n      isDev: false,\n    },\n    stateServiceOptions: {\n      stateFactory: new StateFactory(GlobalState, Account),\n    },\n  };\n  const environmentService = await environmentServiceFactory(cache, opts);\n\n  setTimeout(async () => {\n    if (details.reason != null && details.reason === chrome.runtime.OnInstalledReason.INSTALL) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n\n      if (await environmentService.hasManagedEnvironment()) {\n        await environmentService.setUrlsToManagedEnvironment();\n      }\n    }\n  }, 100);\n}\n","const NUMBER_OF_ALARMS = 6;\n\nexport function registerAlarms() {\n  alarmsToBeCreated(NUMBER_OF_ALARMS);\n}\n\n/**\n * Creates staggered alarms that periodically (1min) raise OnAlarm events. The staggering is calculated based on the number of alarms passed in.\n * @param numberOfAlarms Number of named alarms, that shall be registered\n * @example\n * // alarmsToBeCreated(2) results in 2 alarms separated by 30 seconds\n * @example\n * // alarmsToBeCreated(4) results in 4 alarms separated by 15 seconds\n * @example\n * // alarmsToBeCreated(6) results in 6 alarms separated by 10 seconds\n * @example\n * // alarmsToBeCreated(60) results in 60 alarms separated by 1 second\n */\nfunction alarmsToBeCreated(numberOfAlarms: number): void {\n  const oneMinuteInMs = 60 * 1000;\n  const offset = oneMinuteInMs / numberOfAlarms;\n\n  let calculatedWhen: number = Date.now() + offset;\n\n  for (let index = 0; index < numberOfAlarms; index++) {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    chrome.alarms.create(`bw_alarm${index}`, { periodInMinutes: 1, when: calculatedWhen });\n    calculatedWhen += offset;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + \"encrypt-worker\" + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t352: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_bitwarden_browser\"] = self[\"webpackChunk_bitwarden_browser\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(61263)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","AuthenticationType","TokenTwoFactorRequest","constructor","provider","token","remember","nodeURL","window","static","inited","isNode","process","release","name","isBrowser","isMobileBrowser","this","isMobile","isAppleMobileBrowser","isAppleMobile","global","g","self","str","Uint8Array","Buffer","from","binaryString","atob","bytes","length","i","charCodeAt","fromB64ToArray","fromUrlB64ToB64","parseInt","substr","strUtf8","unescape","encodeURIComponent","arr","buffer","toString","binary","byteLength","String","fromCharCode","btoa","fromB64toUrlB64","fromBufferToB64","b64Str","replace","apply","Array","prototype","map","call","x","slice","join","hexString","arrayBuffer","ArrayBuffer","uint8Array","hexByte","byteValue","urlB64Str","output","Error","fromB64ToUtf8","utfStr","decodeURIComponent","escape","fromBufferToUrlB64","fromUtf8ToArray","c","r","Math","random","id","RegExp","guidRegex","test","uriString","isNullOrWhitespace","trim","startsWith","indexOf","hostname","validHosts","url","getUrl","host","parseResult","allowPrivateDomains","isIp","domain","search","Map","split","forEach","pair","parts","set","toLowerCase","i18nService","prop","a","b","collator","compare","localeCompare","obj","undefined","target","source","Object","assign","keys","filter","k","Number","isNaN","getUrlObject","s","charAt","toUpperCase","bgColor","threshold","svgTextFill","bgColorHexNums","substring","hash","color","bitwardenContainerService","fromEntries","record","entries","e","destination","denormalizedPath","win","mobile","navigator","userAgent","vendor","opera","match","ms","Promise","resolve","setTimeout","generator","of","pipe","switchMap","targetDate","diffTime","getTime","Date","now","max","floor","hasProtocol","URL","regexpEmojiPresentation","originalMinimumPasswordLength","minimumPasswordLength","DomainMatchBlacklist","Set","init","WebAuthnLoginResponseRequest","credential","rawId","type","extensions","WebAuthnLoginAssertionResponseRequest","super","response","AuthenticatorAssertionResponse","authenticatorData","signature","clientDataJSON","userHandle","json","create","EncryptionType","EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE","AesCbc256_B64","AesCbc128_HmacSha256_B64","AesCbc256_HmacSha256_B64","Rsa2048_OaepSha256_B64","Rsa2048_OaepSha1_B64","Rsa2048_OaepSha256_HmacSha256_B64","Rsa2048_OaepSha1_HmacSha256_B64","FileUploadType","HashPurpose","HtmlStorageLocation","KdfType","KdfConfig","iterations","memory","parallelism","RangeWithDefault","min","defaultValue","inRange","value","ARGON2_MEMORY","ARGON2_PARALLELISM","ARGON2_ITERATIONS","PBKDF2_ITERATIONS","PBKDF2_SHA256","KeySuffixOptions","LogLevelType","StorageLocation","ThemeType","SymmetricCryptoKey","key","encType","encKey","macKey","keyB64","encKeyB64","macKeyB64","toJSON","fromString","AuthRequestLoginCredentials","email","accessCode","authRequestId","decryptedUserKey","decryptedMasterKey","decryptedMasterKeyHash","twoFactor","AuthRequest","fromJSON","WebAuthnLoginCredentials","deviceResponse","prfKey","WebAuthn","options","keyConnectorUrl","hasAdminApproval","hasLoginApprovingDevice","hasManageResetPasswordPermission","decryptionOptions","userDecryptionOptions","responseOptions","hasMasterPassword","trustedDeviceOption","fromResponse","keyConnectorOption","usingKeyConnector","EncString","encryptedStringOrType","data","iv","mac","initFromData","initFromEncryptedString","ivBytes","macBytes","dataBytes","encryptedString","encryptionType","encPieces","parseEncryptedString","headerPieces","decrypt","orgId","decryptedValue","getKeyForDecryption","encryptService","getContainerService","getEncryptService","decryptToUtf8","cryptoService","getCryptoService","getOrgKey","getUserKeyWithLegacySupport","PinCryptoService","stateService","vaultTimeoutSettingsService","logService","decryptUserKeyWithPin","pin","pinLockType","isPinLockSet","pinKeyEncryptedUserKey","oldPinKeyEncryptedMasterKey","getPinKeyEncryptedKeys","kdf","getKdfType","kdfConfig","getKdfConfig","userKey","getEmail","decryptAndMigrateOldPinKey","validatePin","warning","error","getPinKeyEncryptedUserKey","getEncryptedPinProtected","getPinKeyEncryptedUserKeyEphemeral","getDecryptedPinProtected","protectedPin","getProtectedPin","PasswordlessAuthRequest","masterPasswordHash","deviceIdentifier","requestApproved","PreloginRequest","getResponseProperty","propertyName","exactName","otherCasePropertyName","ErrorResponse","status","identityResponse","errorModel","responseErrorModel","message","validationErrors","captchaSiteKey","HCaptcha_SiteKey","captchaRequired","statusCode","getSingleMessage","hasOwnProperty","getAllMessages","messages","item","prefix","lastSep","lastIndexOf","push","TwoFactorProviderType","ForceSetPasswordReason","ClientType","DeviceType","DeviceRequest","appId","platformUtilsService","getDevice","getDeviceString","identifier","pushToken","TokenRequest","device","alterIdentityTokenHeaders","headers","setTwoFactor","setAuthRequestAccessCode","authRequest","toIdentityToken","clientId","scope","client_id","deviceType","deviceName","twoFactorToken","twoFactorProvider","twoFactorRemember","PasswordTokenRequest","captchaResponse","grant_type","username","password","fromUtf8ToUrlB64","AuthResult","resetMasterPassword","forcePasswordReset","None","twoFactorProviders","requiresCaptcha","requiresTwoFactor","IdentityCaptchaResponse","siteKey","MasterPasswordPolicyResponse","minComplexity","minLength","requireUpper","requireLower","requireNumbers","requireSpecial","enforceOnLogin","KeyConnectorUserDecryptionOptionResponse","TrustedDeviceUserDecryptionOptionResponse","EncryptedPrivateKey","encryptedPrivateKey","EncryptedUserKey","encryptedUserKey","WebAuthnPrfDecryptionOptionResponse","UserDecryptionOptionsResponse","TrustedDeviceOption","KeyConnectorOption","WebAuthnPrfOption","webAuthnPrfOption","IdentityTokenResponse","accessToken","access_token","expiresIn","expires_in","refreshToken","refresh_token","tokenType","token_type","privateKey","kdfIterations","kdfMemory","kdfParallelism","apiUseKeyConnector","masterPasswordPolicy","UserDecryptionOptions","IdentityTwoFactorResponse","twoFactorProviders2","captchaToken","ssoEmail2faSessionToken","Android","iOS","AndroidAmazon","WindowsDesktop","MacOsDesktop","LinuxDesktop","UWP","WindowsCLI","MacOsCLI","LinuxCLI","EventSystemUser","EventType","HttpStatusCode","NativeMessagingVersion","NotificationType","ProductType","InitializerKey","CipherRepromptType","CipherType","FieldType","LoginLinkedId","CardLinkedId","IdentityLinkedId","SecureNoteType","KeysRequest","publicKey","AdminAuthRequestStorable","fromBufferToByteString","privateKeyBuffer","fromByteStringToArray","AttachmentView","size","sizeName","fileName","fileSize","LinkedMetadata","propertyKey","_i18nKey","i18nKey","linkedFieldOption","linkedFieldOptions","ItemView","CardView","cardholderName","expMonth","expYear","code","_brand","_number","_subTitle","maskedCode","repeat","maskedNumber","number","brand","subTitle","count","expiration","exp","formatYear","year","cardNum","re","CardholderName","ExpMonth","ExpYear","Code","Brand","FieldView","f","newField","showValue","showCount","linkedId","maskedValue","IdentityView","title","middleName","address1","address2","address3","city","state","postalCode","country","company","phone","ssn","passportNumber","licenseNumber","_firstName","_lastName","firstName","lastName","fullName","fullAddress","address","fullAddressPart2","addressPart2","Title","MiddleName","Address1","Address2","Address3","City","State","PostalCode","Country","Company","Email","Phone","Ssn","Username","PassportNumber","LicenseNumber","FirstName","LastName","FullName","Fido2CredentialView","creationDate","userDisplayName","UriMatchStrategy","CanLaunchWhitelist","SafeUrls","uri","LoginUriView","u","_uri","_domain","_hostname","_host","_canLaunch","getDomain","getHostname","getHost","hostnameOrUri","hostOrUri","isWebsite","canLaunch","launchUri","matchesUri","targetUri","equivalentDomains","defaultUriMatch","matchType","targetDomain","matchDomains","add","matchesDomain","urlHost","has","domainUrlHost","get","LoginView","l","passwordRevisionDate","totp","uris","autofillOnPageLoad","fido2Credentials","hasUris","maskedPassword","some","hasTotp","find","hasFido2Credentials","Password","PasswordHistoryView","ph","lastUsedDate","SecureNoteView","n","CipherView","initializerKey","organizationId","folderId","notes","favorite","organizationUseTotp","edit","viewPassword","login","identity","card","secureNote","attachments","fields","passwordHistory","collectionIds","revisionDate","deletedDate","reprompt","localData","Login","SecureNote","Card","Identity","hasPasswordHistory","hasAttachments","hasOldAttachments","hasFields","passwordRevisionDisplayDate","isDeleted","linkedFieldValue","linkedFieldI18nKey","view","ServerConfigData","serverConfigResponse","featureStates","version","gitHash","server","ThirdPartyServerConfigData","utcDate","toISOString","environment","EnvironmentServerConfigData","cloudRegion","vault","api","notifications","sso","EncryptionPair","encrypted","decrypted","decryptedFromJson","encryptedFromJson","DataEncryptionPair","AccountData","ciphers","sends","passwordGenerationHistory","addEditCipherInfo","cipher","AccountKeys","cryptoSymmetricKey","merge","masterKey","deviceKey","cryptoMasterKey","decObj","AccountProfile","vaultTimeoutAction","pinProtected","serverConfig","AccountTokens","profile","settings","tokens","adminAuthRequest","LoginStrategy","apiService","tokenService","appIdService","messagingService","twoFactorService","userDecryptionOptionsService","billingAccountProfileStateService","logInTwoFactor","cache","tokenRequest","next","authResult","startLogIn","clearSelectedProvider","postIdentityToken","processTwoFactorResponse","processCaptchaResponse","processTokenResponse","buildDeviceRequest","getAppId","buildTwoFactor","userProvidedTwoFactor","storedTwoFactorToken","getTwoFactorToken","Remember","saveAccountInformation","tokenResponse","accountInformation","decodeAccessToken","userId","sub","getDeviceKey","accountKeys","getAdminAuthRequest","getVaultTimeoutAction","vaultTimeout","getVaultTimeout","setTokens","addAccount","kdfType","setUserDecryptionOptions","setHasPremium","premium","result","encryptionKeyMigrationRequired","requiresEncryptionKeyMigration","getClientType","Web","AdminForcePasswordReset","userEmail","setTwoFactorToken","setMasterKey","setUserKey","setPrivateKey","send","createKeyPairForOldAccount","makeKeyPair","postAccountKeys","clearTwoFactorToken","setProviders","captchaBypassToken","ssoEmail2FaSessionToken","userEnteredEmail","AuthRequestLoginStrategyData","authRequestCredentials","AuthRequestLoginStrategy","deviceTrustCryptoService","BehaviorSubject","email$","accessCode$","authRequestId$","logIn","credentials","setMasterKeyHash","setMasterKeyEncryptedUserKey","trySetUserKeyWithMasterKey","trustDeviceIfRequired","getMasterKey","decryptUserKeyWithMasterKey","exportCache","Domain","buildDomainModel","dataObj","notEncList","objProp","buildDataModel","notEncStringList","decryptObj","viewModel","promises","theProp","p","then","mapProp","val","all","MasterPasswordPolicyOptions","policy","PasswordLoginStrategyData","forcePasswordResetReason","PasswordLoginStrategy","passwordStrengthService","policyService","loginStrategyService","serverMasterKeyHash$","localMasterKeyHash$","localMasterKeyHash","masterPassword","makePreloginKey","hashMasterKey","LocalAuthorization","serverMasterKeyHash","masterPasswordPolicyOptions","getMasterPasswordPolicyOptionsFromResponse","evaluateMasterPassword","WeakMasterPassword","setForceSetPasswordReason","passwordStrength","getPasswordStrength","score","SsoTokenRequest","codeVerifier","redirectUri","code_verifier","redirect_uri","SsoLoginStrategyData","SsoLoginStrategy","keyConnectorService","authRequestService","orgId$","ssoEmail2FaSessionToken$","redirectUrl","ssoAuthResult","shouldSetMasterKeyFromKeyConnector","convertNewSsoUserToKeyConnector","getKeyConnectorUrl","setMasterKeyFromUrl","userHasMasterPassword","masterKeyEncryptedUserKey","trySetUserKeyWithApprovedAdminRequestIfExists","hasUserKey","trySetUserKeyWithDeviceKey","adminAuthReqStorable","adminAuthReqResponse","getAuthRequest","NotFound","setAdminAuthRequest","setKeysAfterDecryptingSharedMasterKeyAndHash","setUserKeyAfterDecryptingSharedUserKey","showToast","t","encDevicePrivateKey","encUserKey","decryptUserKeyWithDeviceKey","UserApiTokenRequest","clientSecret","client_secret","UserApiLoginStrategyData","UserApiLoginStrategy","environmentService","firstValueFrom","environment$","setClientId","setClientSecret","userApiKey","WebAuthnLoginTokenRequest","JSON","stringify","WebAuthnLoginStrategyData","WebAuthnLoginStrategy","idTokenResponse","decryptToBytes","rsaDecrypt","webAuthn","DeriveDefinition","stateDefinition","uniqueDerivationName","definition","isKeyDefinition","derive","deserialize","serialized","deserializer","cleanupDelayMs","clearOnCleanup","buildCacheKey","storageKey","StateProvider","array","elementDeserializer","element","valueDeserializer","jsonValue","KeyDefinition","errorKeyName","v","USER_KEY_DEFINITION_MARKER","Symbol","isUserKeyDefinition","keyDefinition","UserKeyDefinition","clearOn","buildKey","isGuid","StateDefinition","defaultStorageLocation","storageLocationOverrides","ORGANIZATIONS_DISK","POLICIES_DISK","PROVIDERS_DISK","BILLING_DISK","web","ACCOUNT_MEMORY","AVATAR_DISK","SSO_DISK","TOKEN_DISK","TOKEN_DISK_LOCAL","TOKEN_MEMORY","LOGIN_STRATEGY_MEMORY","USER_DECRYPTION_OPTIONS_DISK","BADGE_SETTINGS_DISK","USER_NOTIFICATION_SETTINGS_DISK","DOMAIN_SETTINGS_DISK","AUTOFILL_SETTINGS_DISK","AUTOFILL_SETTINGS_DISK_LOCAL","APPLICATION_ID_DISK","BIOMETRIC_SETTINGS_DISK","CLEAR_EVENT_DISK","CRYPTO_DISK","CRYPTO_MEMORY","ENVIRONMENT_DISK","ENVIRONMENT_MEMORY","THEMING_DISK","TRANSLATION_DISK","GENERATOR_DISK","EVENT_COLLECTION_DISK","COLLECTION_DATA","FOLDER_DISK","VAULT_FILTER_DISK","VAULT_SETTINGS_DISK","STATE_LOCK_EVENT","STATE_LOGOUT_EVENT","StateEventRegistrarService","globalStateProvider","storageServiceProvider","stateEventStateMap","lock","logout","registerEvents","clearEvent","eventState","storageLocation","newEvent","location","update","existingTickets","shouldUpdate","currentTickets","findIndex","StateEventRunnerService","stateEventMap","handleEvent","event","tickets","state$","failures","ticket","service","ticketStorageKey","storageKeyFor","remove","err","errorMessage","CURRENT_LOGIN_STRATEGY_KEY","CACHE_EXPIRATION_KEY","AUTH_REQUEST_PUSH_NOTIFICATION_KEY","CACHE_KEY","sessionTimeoutLength","LoginStrategyService","stateProvider","currentAuthnTypeState","loginStrategyCacheState","loginStrategyCacheExpirationState","authRequestPushNotificationState","currentAuthType$","authRequestPushNotification$","loginStrategy$","distinctUntilChanged","combineLatestWith","initializeLoginStrategy","bind","shareReplay","refCount","bufferSize","strategy","getMasterPasswordHash","getSsoEmail2FaSessionToken","getAccessCode","getAuthRequestId","clearCache","_","ownedCredentials","startSessionTimeout","isSessionValid","preloginResponse","postPrelogin","makeMasterKey","sendAuthRequestPushNotification","notification","passwordlessLogin","pubKey","keyToEncrypt","encryptedMasterKeyHash","masterKeyHash","getKeyHash","rsaEncrypt","getUserKey","encryptedKey","request","putAuthRequest","clearSessionTimeout","sessionTimeout","Sso","UserApiKey","USER_DECRYPTION_OPTIONS","UserDecryptionOptionsService","userDecryptionOptionsState","getActive","userDecryptionOptions$","hasMasterPassword$","userDecryptionOptionsById$","getUser","OrganizationApiKeyType","OrganizationConnectionType","OrganizationUserStatusType","OrganizationUserType","ProviderType","ProviderUserStatusType","ProviderUserType","ScimProviderType","AuthRequestService","approveOrDenyAuthRequest","approve","authReqResponse","authReqPrivateKey","decryptPubKeyEncryptedUserKey","decryptPubKeyEncryptedMasterKeyAndHash","pubKeyEncryptedUserKey","decryptedUserKeyBytes","pubKeyEncryptedMasterKey","pubKeyEncryptedMasterKeyHash","decryptedMasterKeyArrayBuffer","decryptedMasterKeyHashArrayBuffer","fromBufferToUtf8","OrganizationData","enabled","usePolicies","useGroups","useDirectory","useEvents","useTotp","use2fa","useApi","useSso","useKeyConnector","useScim","useCustomPermissions","useResetPassword","useSecretsManager","usePasswordManager","useActivateAutofillPolicy","selfHost","usersGetPremium","seats","maxCollections","maxStorageGb","ssoBound","permissions","resetPasswordEnrolled","hasPublicAndPrivateKeys","providerId","providerName","providerType","familySponsorshipFriendlyName","familySponsorshipAvailable","planProductType","keyConnectorEnabled","familySponsorshipLastSyncDate","familySponsorshipValidUntil","familySponsorshipToDelete","accessSecretsManager","limitCollectionCreationDeletion","allowAdminAccessToAllCollectionItems","flexibleCollections","isMember","isProviderUser","PolicyType","Organization","canAccess","isOwner","Confirmed","isManager","Manager","isAdmin","Admin","Owner","canAccessEventLogs","accessEventLogs","canAccessImportExport","accessImportExport","canAccessReports","accessReports","canCreateNewCollections","createNewCollections","canEditAnyCollection","editAnyCollection","canUseAdminCollections","canEditAllCiphers","flexibleCollectionsV1Enabled","Custom","canDeleteAnyCollection","deleteAnyCollection","canViewAllCollections","canEditAssignedCollections","editAssignedCollections","canDeleteAssignedCollections","deleteAssignedCollections","canViewAssignedCollections","canManageGroups","manageGroups","canManageSso","manageSso","canManageDomainVerification","canManageScim","manageScim","canManagePolicies","managePolicies","canManageUsers","manageUsers","canManageUsersPassword","manageResetPassword","canManageDeviceApprovals","isExemptFromPolicies","canViewSubscription","canEditSubscription","hasProvider","Msp","canEditPaymentMethods","canViewBillingHistory","hasReseller","Reseller","canAccessSecretsManager","isFreeOrg","canManageSponsorships","ORGANIZATIONS","mapToBooleanHasAnyOrganizations","orgs","mapToSingleOrganization","o","OrganizationService","organizations$","getOrganizationsFromState$","memberOrganizations$","get$","getAll","hasOrganizations","upsert","organization","stateFor","existingOrganizations","organizations","getFromState","mapOrganizationRecordToArray","values","ListResponse","dr","continuationToken","PolicyData","Policy","d","PolicyResponse","PolicyApiService","getPolicy","getPolicies","getPoliciesByToken","organizationUserId","encodeRFC3986URIComponent","getMasterPasswordPolicyResponseForOrgUser","getMasterPasswordPolicyOptsForOrgUser","masterPasswordPolicyResponse","masterPasswordPolicyOptions$","putPolicy","ResetPasswordPolicyOptions","autoEnrollEnabled","policyRecordToArray","policiesMap","POLICIES","policyData","PolicyService","organizationService","activeUserPolicyState","activeUserPolicies$","policies$","policyType","filteredPolicies$","policies","combineLatest","enforcedPolicyFilter","at","getAll$","getUserState$","policyAppliesToActiveUser$","policyAppliesToUser","orgDict","Accepted","isExemptFromPolicy","obsPolicies","enforcedOptions","filteredPolicies","MasterPassword","currentPolicy","newPassword","enforcedPolicyOptions","toLocaleLowerCase","toLocaleUpperCase","getResetPasswordPolicyOptions","resetPasswordPolicyOptions","ResetPassword","clear","setUserState","MaximumVaultTimeout","Provider","isProviderAdmin","canCreateOrganizations","ProviderAdmin","PROVIDERS","ProviderService","providers$","activeUserId$","take","mapProviderRecordToArray","providers","save","AuthenticationStatus","accountInfoEqual","AccountService","ACCOUNT_ACCOUNTS","accountInfo","ACCOUNT_ACTIVE_ACCOUNT_ID","AccountServiceImplementation","Subject","accountLock$","asObservable","accountLogout$","accountsState","activeAccountIdState","accounts$","accounts","activeAccount$","accountData","setAccountName","setAccountInfo","setAccountEmail","setAccountStatus","LoggedOut","Locked","setMaxAccountStatus","maxStatus","switchAccount","delete","newAccountInfo","oldAccountInfo","AuthService","getAuthStatus","getIsAuthenticated","hasUserKeyInMemory","hasUserKeyStored","Auto","getEverBeenUnlocked","getUserKeyFromStorage","Unlocked","logOut","callback","UpdateAvatarRequest","avatarColor","AVATAR_COLOR","AvatarService","avatarColor$","setAvatarColor","putAvatar","setSyncAvatarColor","getUserAvatarColor$","SecretVerificationRequest","UpdateDevicesTrustRequest","DeviceKeysUpdateRequest","DeviceTrustCryptoService","keyGenerationService","cryptoFunctionService","devicesApiService","supportsDeviceTrust$","getShouldTrustDevice","setShouldTrustDevice","trustDevice","makeDeviceKey","devicePublicKey","devicePrivateKey","rsaGenerateKeyPair","devicePublicKeyEncryptedUserKey","userKeyEncryptedDevicePublicKey","deviceKeyEncryptedDevicePrivateKey","encrypt","updateTrustedDeviceKeys","setDeviceKey","rotateDevicesTrust","newUserKey","oldUserKey","activeUserKey$","secretVerificationRequest","currentDeviceKeys","getDeviceKeys","decryptedDevicePublicKey","encryptedPublicKey","encryptedNewUserKey","encryptedDevicePublicKey","currentDeviceUpdateRequest","trustRequest","currentDevice","otherDevices","updateTrust","createKey","encryptedDevicePrivateKey","DeviceView","DevicesServiceImplementation","getDevices$","defer","getDevices","deviceResponses","getDeviceByIdentifier$","getDeviceByIdentifier","isDeviceKnownForUser$","getKnownDevice","updateTrustedDeviceKeys$","DeviceResponse","ProtectedDeviceResponse","TrustedDeviceKeysRequest","DevicesApiServiceImplementation","updateDevicesTrustRequestModel","KeyConnectorUserKeyRequest","SetKeyConnectorKeyRequest","orgIdentifier","KeyConnectorService","logoutCallback","setUsesKeyConnector","usesKeyConnector","getUsesKeyConnector","userNeedsMigration","loggedInUsingSso","getIsExternal","requiredByOrganization","getManagingOrganization","userIsNotUsingKeyConnector","migrateUser","keyConnectorRequest","postUserKeyToKeyConnector","handleKeyConnectorError","postConvertToKeyConnector","masterKeyResponse","getMasterKeyFromKeyConnector","keyArr","legacyKeyConnectorUrl","makeUserKey","privKey","setPasswordRequest","postSetKeyConnectorKey","setConvertAccountRequired","setConvertAccountToKeyConnector","getConvertAccountRequired","getConvertAccountToKeyConnector","removeConvertAccountRequired","CODE_VERIFIER","SSO_STATE","ORGANIZATION_SSO_IDENTIFIER","organizationIdentifier","SSO_EMAIL","SsoLoginService","codeVerifierState","getGlobal","ssoState","orgSsoIdentifierState","ssoEmailState","activeUserOrgSsoIdentifierState","getCodeVerifier","setCodeVerifier","getSsoState","setSsoState","getOrganizationSsoIdentifier","setOrganizationSsoIdentifier","getSsoEmail","setSsoEmail","getActiveUserOrganizationSsoIdentifier","setActiveUserOrganizationSsoIdentifier","VaultTimeoutAction","ACCESS_TOKEN_DISK","ACCESS_TOKEN_MEMORY","REFRESH_TOKEN_DISK","REFRESH_TOKEN_MEMORY","REFRESH_TOKEN_MIGRATED_TO_SECURE_STORAGE","refreshTokenMigratedToSecureStorage","EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL","emailTwoFactorTokenRecord","API_KEY_CLIENT_ID_DISK","apiKeyClientId","API_KEY_CLIENT_ID_MEMORY","API_KEY_CLIENT_SECRET_DISK","apiKeyClientSecret","API_KEY_CLIENT_SECRET_MEMORY","TokenStorageLocation","TokenService","singleUserStateProvider","platformSupportsSecureStorage","secureStorageService","accessTokenKeySecureStorageKey","refreshTokenSecureStorageKey","initializeState","emailTwoFactorTokenRecordGlobalState","activeUserIdGlobalState","clientIdClientSecret","getUserIdFromAccessToken","_setAccessToken","setRefreshToken","getAccessTokenKey","accessTokenKeyB64","getSecureStorageOptions","createAndSaveAccessTokenKey","newAccessTokenKey","clearAccessTokenKey","getOrCreateAccessTokenKey","accessTokenKey","encryptAccessToken","decryptAccessToken","encryptedAccessToken","determineStorageLocation","SecureStorage","Disk","Memory","setAccessToken","clearAccessToken","getAccessToken","accessTokenMemory","getStateValueByUserIdAndKeyDef","accessTokenDisk","encryptedAccessTokenEncString","saveStringToSecureStorage","setRefreshTokenMigratedToSecureStorage","getRefreshToken","getRefreshTokenMigratedToSecureStorage","getStringFromSecureStorage","refreshTokenMemory","refreshTokenDisk","clearRefreshToken","getClientId","apiKeyClientIdMemory","clearClientId","getClientSecret","apiKeyClientSecretMemory","clearClientSecret","clearTokens","jwtToken","encodedPayload","decodedPayloadJSON","fromUrlB64ToUtf8","decodingError","parse","jsonError","decodeJwtTokenToJson","getTokenExpirationDate","decoded","expirationDate","setUTCSeconds","tokenSecondsRemaining","offsetSeconds","date","msRemaining","valueOf","round","tokenNeedsRefresh","minutes","getUserId","getEmailVerified","email_verified","getName","getIssuer","iss","isArray","amr","includes","useSecureStorage","LogOut","TwoFactorProviders","Authenticator","description","priority","sort","Yubikey","Duo","OrganizationDuo","TwoFactorService","selectedTwoFactorProviderType","getSupportedProviders","twoFactorProvidersData","supportsDuo","supportsWebAuthn","getDefaultProvider","webAuthnSupported","providerPriority","_value","setSelectedProvider","clearProviders","getProviders","VerificationType","UserVerificationApiService","postAccountVerifyOTP","postAccountRequestOTP","VerifyOTPRequest","OTP","UserVerificationService","userVerificationApiService","pinCryptoService","getAvailableVerificationOptions","verificationType","biometricsLockSet","biometricsUserKeyStored","hasMasterPasswordAndMasterKeyHash","isBiometricLockSet","Biometric","client","biometrics","supportsSecureStorage","otp","buildRequest","verification","requestClass","alreadyHashed","validateSecretInput","secret","verifyUser","verificationHasSecret","verifyUserByOTP","verifyUserByMasterPassword","PIN","verifyUserByPIN","Biometrics","verifyUserByBiometrics","compareAndUpdateKeyHash","requestOTP","getMasterKeyHash","ClearClipboardDelay","AUTOFILL_CARD_ID","AUTOFILL_ID","AUTOFILL_IDENTITY_ID","COPY_IDENTIFIER_ID","COPY_PASSWORD_ID","COPY_USERNAME_ID","COPY_VERIFICATION_CODE_ID","CREATE_CARD_ID","CREATE_IDENTITY_ID","CREATE_LOGIN_ID","GENERATE_PASSWORD_ID","NOOP_COMMAND_SUFFIX","ROOT_ID","SEPARATOR_ID","NOTIFICATION_BAR_LIFESPAN_MS","AutofillOverlayVisibility","AUTOFILL_ON_PAGE_LOAD","AUTOFILL_ON_PAGE_LOAD_DEFAULT","AUTOFILL_ON_PAGE_LOAD_CALLOUT_DISMISSED","AUTOFILL_ON_PAGE_LOAD_POLICY_TOAST_HAS_DISPLAYED","AUTO_COPY_TOTP","INLINE_MENU_VISIBILITY","ENABLE_CONTEXT_MENU","CLEAR_CLIPBOARD_DELAY","AutofillSettingsService","autofillOnPageLoadState","autofillOnPageLoad$","autofillOnPageLoadDefaultState","autofillOnPageLoadDefault$","autofillOnPageLoadCalloutIsDismissedState","autofillOnPageLoadCalloutIsDismissed$","activateAutofillOnPageLoadFromPolicy$","ActivateAutofill","autofillOnPageLoadPolicyToastHasDisplayedState","autofillOnPageLoadPolicyToastHasDisplayed$","autoCopyTotpState","autoCopyTotp$","inlineMenuVisibilityState","inlineMenuVisibility$","enableContextMenuState","enableContextMenu$","clearClipboardDelayState","clearClipboardDelay$","setAutofillOnPageLoad","newValue","setAutofillOnPageLoadDefault","setAutofillOnPageLoadCalloutIsDismissed","setAutofillOnPageLoadPolicyToastHasDisplayed","setAutoCopyTotp","setInlineMenuVisibility","setEnableContextMenu","setClearClipboardDelay","ENABLE_BADGE_COUNTER","BadgeSettingsService","enableBadgeCounterState","enableBadgeCounter$","setEnableBadgeCounter","SHOW_FAVICONS","NEVER_DOMAINS","EQUIVALENT_DOMAINS","DEFAULT_URI_MATCH_STRATEGY","DefaultDomainSettingsService","showFaviconsState","showFavicons$","neverDomainsState","neverDomains$","equivalentDomainsState","equivalentDomains$","defaultUriMatchStrategyState","defaultUriMatchStrategy$","setShowFavicons","setNeverDomains","setEquivalentDomains","setDefaultUriMatchStrategy","getUrlEquivalentDomains","equivalents","ed","flat","ENABLE_ADDED_LOGIN_PROMPT","ENABLE_CHANGED_PASSWORD_PROMPT","UserNotificationSettingsService","enableAddedLoginPromptState","enableAddedLoginPrompt$","enableChangedPasswordPromptState","enableChangedPasswordPrompt$","setEnableAddedLoginPrompt","setEnableChangedPasswordPrompt","BILLING_ACCOUNT_PROFILE_KEY_DEFINITION","billingAccountProfile","DefaultBillingAccountProfileStateService","billingAccountProfileState","billingAccountProfileOrNull","hasPremiumFromAnyOrganization$","hasPremiumFromAnyOrganization","hasPremiumPersonally$","hasPremiumPersonally","hasPremiumFromAnySource$","MessagingService","BIOMETRIC_UNLOCK_ENABLED","REQUIRE_PASSWORD_ON_START","ENCRYPTED_CLIENT_KEY_HALF","DISMISSED_REQUIRE_PASSWORD_ON_START_CALLOUT","PROMPT_CANCELLED","PROMPT_AUTOMATICALLY","FINGERPRINT_VALIDATED","DefaultBiometricStateService","biometricUnlockEnabledState","biometricUnlockEnabled$","Boolean","requirePasswordOnStartState","requirePasswordOnStart$","encryptedClientKeyHalfState","encryptedClientKeyHalf$","encryptedClientKeyHalfToEncString","dismissedRequirePasswordOnStartCalloutState","dismissedRequirePasswordOnStartCallout$","promptCancelledState","promptCancelled$","promptAutomaticallyState","promptAutomatically$","fingerprintValidatedState","fingerprintValidated$","setBiometricUnlockEnabled","getBiometricUnlockEnabled","setRequirePasswordOnStart","currentActiveId","combinedState$","removeEncryptedClientKeyHalf","setEncryptedClientKeyHalf","encryptedKeyHalf","getRequirePasswordOnStart","getEncryptedClientKeyHalf","resetUserPromptCancelled","setDismissedRequirePasswordOnStartCallout","activeUserId","setUserPromptCancelled","resetAllPromptCancelled","setPromptAutomatically","prompt","setFingerprintValidated","validated","AccountFactory","accountConstructor","args","GlobalStateFactory","globalStateConstructor","StateFactory","globalStateFactory","accountFactory","createGlobal","createAccount","GlobalState","theme","System","APP_ID_KEY","ANONYMOUS_APP_ID_KEY","AppIdService","appIdState","anonymousAppIdState","appId$","tap","newGuid","anonymousAppId$","getAnonymousAppId","ServerConfigResponse","ThirdPartyServerConfigResponse","EnvironmentServerConfigResponse","ConfigApiService","authService","authed","ConsoleLogService","isDev","timersMap","debug","write","Debug","info","Info","Warning","level","console","log","warn","ContainerService","attachToGlobal","EncArrayBuffer","encBytes","minimumLength","ENC_TYPE_LENGTH","throwDecryptionError","b64","EncryptedObject","EncryptServiceImplementation","logMacFailures","plainValue","plainBuf","encObj","aesEncrypt","encryptToBytes","encValue","macLen","encString","resolveLegacyKey","fastParams","aesDecryptFastParameters","computedMac","hmacFast","macData","compareFast","logMacFailed","aesDecryptFast","encThing","hmac","aesDecrypt","algorithm","decryptItems","items","results","hashArray","randomBytes","msg","AttachmentData","CardData","FieldData","IdentityData","Fido2CredentialData","credentialId","keyType","keyAlgorithm","keyCurve","keyValue","rpId","userName","counter","rpName","discoverable","LoginUriData","uriChecksum","LoginData","PasswordHistoryData","SecureNoteData","CipherData","Attachment","decryptAttachmentKey","decValue","toAttachmentData","toCardData","Field","toFieldData","toIdentityData","Fido2Credential","toFido2CredentialData","LoginUri","validateChecksum","clearTextUri","localChecksum","toLoginUriData","bypassValidation","toLoginData","toPasswordHistoryData","toSecureNoteData","Cipher","model","reduce","promise","attachment","decAttachment","field","decField","decPh","toCipherData","classInitializers","MultithreadEncryptServiceImplementation","clear$","worker","Worker","restartTimeout","postMessage","fromEvent","jsonItem","className","takeUntil","defaultIfEmpty","terminate","clearTimeout","timeout","AzureFileUploadService","upload","renewalCallback","azureUploadBlob","azureUploadBlocks","urlObject","Headers","toUTCString","searchParams","Request","body","method","blobResponse","fetch","baseUrl","blockSize","getMaxBlockSize","blockIndex","numBlocks","ceil","blocksStaged","renewUrlIfNecessary","blockUrl","blockId","encodedBlockId","append","start","blockData","blockHeaders","blockRequest","blockResponse","blockListUrl","blockListXml","expiry","setTime","utfBlockId","fromUtf8ToB64","blockIdList","xml","Version","month","day","compareTo","BitwardenFileUploadService","encryptedFileName","encryptedFileData","apiCall","fd","FormData","blob","Blob","filepath","contentType","FileUploadService","azureFileUploadService","bitwardenFileUploadService","uploadData","fileUploadMethods","fileUploadType","Direct","postDirect","Azure","renewFileUploadUrl","rollback","KeyGenerationService","bitLength","aesGenerateKey","createKeyWithPurpose","purpose","salt","material","hkdf","derivedKey","deriveKeyFromMaterial","deriveKeyFromPassword","pbkdf2","Argon2id","saltHash","argon2","AbstractStorageService","AbstractMemoryStorageService","TYPE","MemoryStorageService","store","updatesSubject","valuesRequireDeserialization","updates$","toStore","structuredClone","updateType","getBypassCache","MigrationBuilder","migrations","with","migrate","addMigrator","helper","migrator","runMigrator","direction","newMigration","shouldMigrate","toVersion","updateVersion","IRREVERSIBLE","Migrator","fromVersion","startVersion","currentVersion","endVersion","USER_EVER_HAD_USER_KEY","EverHadUserKeyMigrator","getAccounts","account","everHadUserKey","setToUser","migrateAccount","getFromUser","rollbackAccount","USER_ENCRYPTED_ORGANIZATION_KEYS","OrganizationKeyMigrator","organizationKeys","ENVIRONMENT_STATE","REGION_KEY","URLS_KEY","MoveEnvironmentStateToProviders","legacyGlobal","region","setToGlobal","environmentUrls","legacyAccounts","updatedLegacyGlobal","globalRegion","getFromGlobal","globalUrls","updatedAccount","userRegion","userUrls","rollbackUser","USER_ENCRYPTED_PROVIDER_KEYS","ProviderKeyMigrator","providerKeys","CLIENT_KEY_HALF","MoveBiometricClientKeyHalfToStateProviders","biometricEncryptionClientKeyHalf","userKeyHalf","USER_ENCRYPTED_FOLDERS","FolderMigrator","folders","LAST_SYNC_KEY","LastSyncMigrator","lastSync","USER_ENABLE_PASSKEYS","EnablePasskeysMigrator","enablePasskeys","globalEnablePasskeys","autofillSettingsStateDefinition","AutofillSettingsKeyMigrator","globalState","autoFillOverlayVisibility","updateAccount","accountSettings","autoFillOnPageLoadDefault","enableAutoFillOnPageLoad","dismissedAutoFillOnPageLoadCallout","disableAutoTotpCopy","activateAutoFillOnPageLoadFromPolicy","inlineMenuVisibility","autoCopyTotp","RequirePasswordOnStartMigrator","requirePasswordOnStart","requirePassword","USER_ENCRYPTED_PRIVATE_KEY","PrivateKeyMigrator","USER_ENCRYPTED_COLLECTIONS","CollectionMigrator","collections","COLLAPSED_GROUPINGS","CollapsedGroupingsMigrator","collapsedGroupings","DISMISSED_BIOMETRIC_REQUIRE_PASSWORD_ON_START_CALLOUT","MoveBiometricPromptsToStateProviders","dismissedBiometricRequirePasswordOnStartCallout","disableAutoBiometricsPrompt","userDismissed","userPromptAutomatically","SM_ONBOARDING_TASKS","SmOnboardingTasksMigrator","smOnboardingTasks","autofillSettingsLocalStateDefinition","ClearClipboardDelayMigrator","clearClipboard","clearClipboardDelay","RevertLastSyncMigrator","enableBadgeCounterKeyDefinition","BadgeSettingsMigrator","disableBadgeCounter","enableBadgeCounter","MoveBiometricUnlockToStateProviders","biometricUnlock","UserNotificationSettingsKeyMigrator","disableAddLoginNotification","disableChangedPasswordNotification","enableAddedLoginPrompt","enableChangedPasswordPrompt","POLICIES_KEY","PolicyMigrator","enableContextMenuKeyDefinition","EnableContextMenuMigrator","disableContextMenuItem","enableContextMenu","LOCALE_KEY","PreferredLanguageMigrator","locale","APP_ID_STORAGE_KEY","ANONYMOUS_APP_ID_STORAGE_KEY","AppIdMigrator","anonymousAppId","defaultUriMatchStrategyDefinition","equivalentDomainsDefinition","neverDomainsDefinition","DomainSettingsMigrator","neverDomains","defaultUriMatchStrategy","THEME_SELECTION","MoveThemeToStateProviderMigrator","legacyGlobalState","removeFromGlobal","vaultSettingsStateDefinition","VaultSettingsKeyMigrator","dontShowCardsCurrentTab","dontShowIdentitiesCurrentTab","showCardsCurrentTab","showIdentitiesCurrentTab","AVATAR_COLOR_KEY","AvatarColorMigrator","userAvatarColor","TOKEN_STATE_DEF_LIKE","TokenServiceStateProviderMigrator","globalData","globalTwoFactorToken","existingAccessToken","existingRefreshToken","existingApiKeyClientId","existingApiKeyClientSecret","migratedTwoFactorToken","updatedLegacyAccount","migratedAccessToken","migratedRefreshToken","migratedApiKeyClientId","migratedApiKeyClientSecret","MoveBillingAccountProfileMigrator","hasPremiumFromOrganization","RemoveEverBeenUnlockedMigrator","everBeenUnlocked","removeEverBeenUnlocked","stateVersion","USER_ORGANIZATIONS","OrganizationMigrator","EVENT_COLLECTION","EventCollectionMigrator","eventCollection","ShowFaviconDefinition","EnableFaviconMigrator","disableFavicon","showFavicons","AUTO_CONFIRM_FINGERPRINTS","AutoConfirmFingerPrintsMigrator","autoConfirmFingerPrints","UserDecryptionOptionsMigrator","ENVIRONMENT_REGION","ENVIRONMENT_URLS","ENVIRONMENT_ENVIRONMENT","MergeEnvironmentState","urls","removeFromUser","DeleteBiometricPromptCancelledData","DESKTOP_SETTINGS_STATE","WINDOW_KEY","CLOSE_TO_TRAY_KEY","MINIMIZE_TO_TRAY_KEY","START_TO_TRAY_KEY","TRAY_ENABLED_KEY","OPEN_AT_LOGIN_KEY","ALWAYS_SHOW_DOCK_KEY","ALWAYS_ON_TOP_KEY","MoveDesktopSettingsMigrator","updatedGlobal","enableCloseToTray","enableMinimizeToTray","enableStartToTray","enableTray","openAtLogin","alwaysShowDock","enableAlwaysOnTop","DDG_KEY","MoveDdgToStateProviderMigrator","enableDuckDuckGoBrowserIntegration","enableDdg","AddKeyTypeToOrgKeysMigrator","encryptedOrgKeys","newOrgKeys","updateOrgKey","RemoveLegacyEtmKeyMigrator","legacyEtmKey","MoveBiometricAutoPromptToAccount","noAutoPromptBiometrics","MoveStateVersionMigrator","MoveBrowserSettingsToGlobal","tryAddSetting","accountSelector","globalSetter","globalNeverDomainsValue","accumulator","normalizedNeverDomains","targetGlobalState","MinVersionMigrator","MIN_VERSION","storageService","MigrationBuilderService","build","migrationBuilderCache","MigrationHelper","getGlobalKey","userIds","userKeyBuilderPre9","userKeyBuilder","globalKeyBuilderPre9","MigrationRunner","diskStorage","migrationBuilderService","run","migrationHelper","migrationBuilder","waitForCompletion","isReady","wait","time","nextTime","waitForMigrations","StorageServiceProvider","diskStorageService","memoryStorageService","defaultLocation","overrides","SystemService","reloadCallback","autofillSettingsService","biometricStateService","reloadInterval","clearClipboardTimeout","clearClipboardTimeoutFunction","startProcessReload","cancelProcessReload","executeProcessReload","clearInterval","vaultTimeoutAction$","nextUser","nextUpActiveUser","setActiveUser","setInterval","clipboardValue","timeoutMs","clipboardValueNow","readFromClipboard","copyToClipboard","clearing","clearPendingClipboard","DecryptParameters","WebCryptoFunctionService","globalContext","crypto","subtle","wasmSupported","checkIfWasmSupported","wcLen","passwordBuf","toBuf","pbkdf2Params","toWebCryptoAlgorithm","impKey","importKey","deriveBits","passwordArr","saltArr","pass","mem","hashLen","ArgonType","unloadRuntime","ikm","outputByteSize","hkdfParams","hkdfExpand","prk","infoBuf","infoArr","runningOkmLength","previousT","okm","md","md5","valueBytes","toByteString","digest","valueBuf","signingAlgorithm","sign","mac1","mac2","arr1","arr2","getBytes","rand","Uint32Array","createBuffer","putInt32","meta","encKeyByteString","macKeyByteString","decode64","parameters","mode","decipher","createDecipher","toWebCryptoAesMode","dataBuffer","finish","params","rsaParams","rsaExtractPublicKey","impPrivateKey","jwkPrivateKey","exportKey","jwkPublicKeyParams","kty","alg","ext","impPublicKey","key1","key2","aesParams","generateKey","rawKey","modulusLength","publicExponent","keyPair","getRandomValues","buf","encodeUtf8","WebAssembly","instantiate","module","Module","Instance","DefaultActiveUserState","_userId","configureState","first","throwError","DefaultActiveUserStateProvider","accountService","fromBaseKeyDefinition","DEFAULT_OPTIONS","msTimeout","getStoredValue","storage","StateBase","storageUpdate$","storageUpdate","share","connector","ReplaySubject","resetOnRefCountZero","timer","populateOptionsWithDefault","updatePromise","internalUpdate","currentState","getStateForUpdate","combinedDependencies","newState","doStorageSave","oldState","DefaultGlobalState","chosenLocation","globalKeyBuilder","DefaultGlobalStateProvider","globalStateCache","cacheKey","existingGlobalState","newGlobalState","DefaultSingleUserState","stateEventRegistrarService","DefaultSingleUserStateProvider","existingUserState","newUserState","DefaultStateProvider","activeUserStateProvider","derivedStateProvider","getDerived","getUserStateOrDefault$","config","DefaultThemeStateService","defaultTheme","selectedThemeState","selectedTheme$","setSelectedTheme","currentTheme","OrganizationConnectionResponse","configType","rawConfig","CardApi","FieldApi","IdentityApi","Fido2CredentialApi","LoginUriApi","LoginApi","SecureNoteApi","AttachmentResponse","PasswordHistoryResponse","CipherResponse","h","SelectionReadOnlyResponse","readOnly","hidePasswords","manage","CollectionResponse","externalId","CollectionDetailsResponse","assigned","CollectionAccessDetailsResponse","groups","users","OrganizationExportResponse","OrganizationSponsorshipSyncStatusResponse","lastSyncDate","ProviderOrganizationResponse","userCount","plan","ProviderOrganizationOrganizationDetailsResponse","organizationName","OrganizationUserBulkPublicKeyResponse","ProviderUserBulkPublicKeyResponse","ProviderUserBulkResponse","PermissionsApi","manageCiphers","ProviderUserResponse","ProviderUserUserDetailsResponse","ProviderResponse","businessName","billingEmail","ApiKeyResponse","apiKey","AuthRequestResponse","requestDeviceType","requestIpAddress","responseDate","requestDate","requestDateUTC","UTC","getUTCFullYear","getUTCMonth","getDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","dateNow","dateNowUTC","isExpired","isAnswered","DeviceVerificationResponse","isDeviceVerificationSectionEnabled","unknownDeviceVerificationEnabled","KeyConnectorUserKeyResponse","PreloginResponse","RegisterResponse","SsoPreValidateResponse","TwoFactorAuthenticatorResponse","TwoFactorDuoResponse","secretKey","integrationKey","TwoFactorEmailResponse","TwoFactorProviderResponse","TwoFactorRecoverResponse","TwoFactorWebAuthnResponse","KeyResponse","migrated","ChallengeResponse","attestation","authenticatorSelection","challenge","fromUrlB64ToArray","excludeCredentials","pubKeyCredParams","rp","user","TwoFactorYubiKeyResponse","key3","key4","key5","nfc","BillingSourceResponse","cardBrand","needsVerification","BillingInvoiceResponse","pdfUrl","paid","amount","BillingTransactionResponse","createdDate","refunded","partiallyRefunded","refundedAmount","paymentMethodType","details","BillingHistoryResponse","invoices","transactions","hasNoHistory","BillingPaymentResponse","balance","paymentSource","ProfileOrganizationResponse","familySponsorshipLastSyncDateString","familySponsorshipValidUntilString","ProfileProviderOrganizationResponse","ProfileProviderResponse","ProfileResponse","providerOrganizations","emailVerified","masterPasswordHint","premiumPersonally","premiumFromOrganization","culture","twoFactorEnabled","securityStamp","PaymentResponse","userProfile","paymentIntentClientSecret","success","PlanResponse","product","isAnnual","nameLocalizationKey","descriptionLocalizationKey","canBeUsedByBusiness","trialPeriodDays","hasSelfHost","hasPolicies","hasGroups","hasDirectory","hasEvents","has2fa","hasApi","hasSso","hasResetPassword","upgradeSortOrder","displaySortOrder","legacyYear","disabled","passwordManager","secretsManager","PasswordManager","PasswordManagerPlanFeaturesResponse","SecretsManager","SecretsManagerPlanFeaturesResponse","stripeSeatPlanId","baseSeats","basePrice","seatPrice","hasAdditionalSeatsOption","maxAdditionalSeats","maxSeats","stripeServiceAccountPlanId","additionalPricePerServiceAccount","baseServiceAccount","maxServiceAccount","hasAdditionalServiceAccountOption","maxAdditionalServiceAccounts","maxProjects","stripePlanId","stripeStoragePlanId","stripePremiumAccessPlanId","premiumAccessOptionPrice","additionalStoragePricePerGb","baseStorageGb","hasAdditionalStorageOption","maxAdditionalStorage","hasPremiumAccessOption","SubscriptionResponse","storageName","storageGb","license","subscription","upcomingInvoice","BillingSubscriptionResponse","BillingSubscriptionUpcomingInvoiceResponse","trialStartDate","trialEndDate","periodStartDate","periodEndDate","cancelledDate","cancelAtEndDate","cancelled","BillingSubscriptionItemResponse","productId","quantity","interval","sponsoredSubscriptionItem","addonSubscriptionItem","TaxInfoResponse","taxId","taxIdType","line1","line2","TaxRateResponse","rate","CollectionBulkDeleteRequest","ids","BreachAccountResponse","addedDate","breachDate","dataClasses","isActive","isVerified","logoPath","modifiedDate","pwnCount","GlobalDomainResponse","domains","excluded","DomainsResponse","globalEquivalentDomains","EventResponse","cipherId","collectionId","groupId","policyId","providerUserId","providerOrganizationId","actingUserId","ipAddress","installationId","systemUser","domainName","secretId","serviceAccountId","UserKeyResponse","AttachmentUploadDataResponse","attachmentId","cipherResponse","cipherMiniResponse","SendFileApi","SendTextApi","text","hidden","SendResponse","accessId","maxAccessCount","accessCount","deletionDate","disable","hideEmail","file","FolderResponse","SyncResponse","ApiService","customUserAgent","isWebClient","isDesktopClient","IEBrowser","ChromeBrowser","EdgeBrowser","FirefoxBrowser","OperaBrowser","SafariBrowser","UnknownBrowser","VivaldiBrowser","Accept","identityToken","env","getIdentityUrl","qsStringify","getCredentials","responseJson","isJsonResponse","TwoFactorProviders2","reject","refreshIdentityToken","doAuthRefresh","postAuthRequest","postAdminAuthRequest","getAuthResponse","path","getAuthRequests","getLastAuthRequest","activeRequests","m","getProfile","getUserSubscription","getTaxInfo","putProfile","putTaxInfo","postEmailToken","postEmail","postPassword","setPassword","postSecurityStamp","getAccountRevisionDate","postPasswordHint","postRegister","postPremium","postReinstatePremium","postAccountStorage","postAccountPayment","postAccountLicense","postAccountVerifyEmail","postAccountVerifyEmailToken","postAccountVerifyPassword","postAccountRecoverDelete","postAccountRecoverDeleteToken","postAccountKdf","deleteSsoUser","getSsoUserIdentifier","postUserApiKey","postUserRotateApiKey","putUpdateTempPassword","getUserBillingHistory","getUserBillingPayment","getCipher","getFullCipherDetails","getCipherAdmin","getCiphersOrganization","postCipher","postCipherCreate","postCipherAdmin","putCipher","putPartialCipher","putCipherAdmin","deleteCipher","deleteCipherAdmin","deleteManyCiphers","deleteManyCiphersAdmin","putMoveCiphers","putShareCipher","putShareCiphers","putCipherCollections","putCipherCollectionsAdmin","postPurgeCiphers","putDeleteCipher","putDeleteCipherAdmin","putDeleteManyCiphers","putDeleteManyCiphersAdmin","putRestoreCipher","putRestoreCipherAdmin","putRestoreManyCiphers","putRestoreManyCiphersAdmin","getAttachmentData","emergencyAccessId","postCipherAttachment","postCipherAttachmentLegacy","postCipherAttachmentAdminLegacy","deleteCipherAttachment","deleteCipherAttachmentAdmin","postShareCipherAttachment","renewAttachmentUploadUrl","postAttachmentFile","getCollectionAccessDetails","getUserCollections","getCollections","getManyCollectionsWithAccessDetails","getCollectionUsers","postCollection","putCollection","putCollectionUsers","deleteCollection","deleteManyCollections","deleteCollectionUser","getGroupUsers","putGroupUsers","deleteGroupUser","getPlans","postPublicImportDirectory","getTaxRates","getSettingsDomains","putSettingsDomains","getSync","getTwoFactorProviders","getTwoFactorOrganizationProviders","getTwoFactorAuthenticator","getTwoFactorEmail","getTwoFactorDuo","getTwoFactorOrganizationDuo","getTwoFactorYubiKey","getTwoFactorWebAuthn","getTwoFactorWebAuthnChallenge","getTwoFactorRecover","putTwoFactorAuthenticator","putTwoFactorEmail","putTwoFactorDuo","putTwoFactorOrganizationDuo","putTwoFactorYubiKey","putTwoFactorWebAuthn","getClientExtensionResults","AttestationObject","attestationObject","clientDataJson","deleteTwoFactorWebAuthn","putTwoFactorDisable","putTwoFactorOrganizationDisable","postTwoFactorRecover","postTwoFactorEmailSetup","postTwoFactorEmail","getDeviceVerificationSettings","putDeviceVerificationSettings","getCloudCommunicationsEnabled","getOrganizationConnection","createOrganizationConnection","updateOrganizationConnection","organizationConnectionId","deleteOrganizationConnection","postProviderSetup","getProvider","putProvider","getProviderUsers","getProviderUser","postProviderUserInvite","postProviderUserReinvite","postManyProviderUserReinvite","postProviderUserBulkConfirm","deleteManyProviderUsers","postProviderUserAccept","postProviderUserConfirm","postProviderUsersPublicKey","putProviderUser","deleteProviderUser","getProviderClients","postProviderAddOrganization","postProviderCreateOrganization","deleteProviderOrganization","getEvents","end","addEventParameters","getEventsCipher","getEventsOrganization","getEventsOrganizationUser","getEventsProvider","getEventsProviderUser","postEventsCollect","authHeader","getActiveBearerToken","Authorization","getEventsUrl","getUserPublicKey","getHibpBreach","postBitPayInvoice","postSetupPayment","handleError","getKeyConnectorAlive","getOrganizationExport","getApplicationVersionNumber","nativeFetch","preValidateSso","postCreateSponsorship","sponsoredOrgId","isSelfHost","getSponsorshipSyncStatus","deleteRevokeSponsorship","sponsoringOrganizationId","deleteRemoveSponsorship","sponsoringOrgId","postPreValidateSponsorshipToken","sponsorshipToken","postRedeemSponsorship","postResendSponsorshipOffer","doRefreshToken","doApiTokenRefresh","decodedToken","deviceRequest","hasResponse","apiUrl","alterHeaders","getApiUrl","pathParts","requestUrl","normalizePath","requestInit","responseType","responseIsJson","tokenError","isTextResponse","Message","hasBaseUrl","base","typeHeader","AuditService","passwordLeaked","hashBytes","fromBufferToHex","hashStart","hashEnding","breachedAccounts","limit","throttleKey","descriptor","originalMethod","allThrottles","throttles","getThrottles","argsThrottleKey","queue","exec","onFinally","splice","catch","EventData","EventCollectionService","cipherService","eventUploadService","collect","eventType","uploadImmediately","eventStore","events","uploadEvents","orgIds$","cipher$","orgIds","zip","EventRequest","EventUploadService","checkOnInterval","userAuth$","takeEvents","req","taken","current","NotificationResponse","contextId","payload","SyncCipherCreate","SyncCipherDelete","SyncCipherUpdate","SyncLoginDelete","SyncCipherNotification","SyncFolderCreate","SyncFolderDelete","SyncFolderUpdate","SyncFolderNotification","SyncVault","SyncCiphers","SyncOrganizations","SyncOrgKeys","SyncSettings","UserNotification","SyncSendCreate","SyncSendUpdate","SyncSendDelete","SyncSendNotification","AuthRequestPushNotification","NotificationsService","syncService","connected","inactive","reconnectTimer","subscribe","getNotificationsUrl","signalrConnection","off","stop","withUrl","accessTokenFactory","skipNegotiation","transport","WebSockets","withHubProtocol","on","processNotification","onclose","reconnect","isAuthedAndUnlocked","updateConnection","sync","reconnectFromActivity","disconnectFromInactivity","isAuthenticated","payloadUserId","UserId","myUserId","syncUpsertCipher","syncDeleteCipher","syncUpsertFolder","syncDeleteFolder","fullSync","syncUpsertSend","syncDeleteSend","getApproveLoginRequests","notificationId","SearchService","indexedEntityId","indexing","index","immediateSearchLocales","defaultSearchableMinLength","searchableMinLength","locale$","registeredPipeline","lunr","Pipeline","registerFunction","normalizeAccentsPipelineFunction","clearIndex","isSearchable","query","normalizeSearchQuery","indexCiphers","builder","Builder","pipeline","ref","boost","extractor","uriExtractor","fieldExtractor","attachmentExtractor","searchCiphers","every","getIndexForSearch","searchCiphersBasic","ciphersMap","searchResults","soWild","Query","wildcard","LEADING","TRAILING","q","tokenizer","term","deleted","loginUri","searchSends","sendsMatched","lowPriorityMatched","concat","joined","Text","protocolIndex","queryIndex","searchableFields","metadata","normalize","VaultTimeoutSettingsService","setVaultTimeoutOptions","action","setVaultTimeout","currentAction","setVaultTimeoutAction","refreshAdditionalKeys","availableVaultTimeoutActions$","getAvailableVaultTimeoutActions","pinIsEnabled","aUserKeyPinIsSet","anOldUserKeyPinIsSet","biometricUnlockPromise","availableActions","Lock","setEverBeenUnlocked","clearPinKeys","DefaultBoundaries","freeze","minDigits","minSpecialCharacters","initializeBoundaries","createBoundary","defaultBoundary","numberCount","specialCount","minConsistentLength","minPolicyLength","policyInEffect","useUppercase","useLowercase","useNumbers","useSpecial","applyPolicy","fitToBounds","boundaries","withUpperBound","uppercase","lowercase","minNumber","special","minSpecial","sanitize","cascade","enabledResult","minLowercase","minUppercase","ambiguous","PasswordGeneratorPolicyOptions","defaultType","minNumberWords","capitalize","includeNumber","inEffect","clone","EFFLongWordList","DefaultPassphraseGenerationOptions","numWords","wordSeparator","PassphraseGeneratorOptionsEvaluator","GeneratedPasswordHistory","DefaultOptions","DefaultPolicy","PasswordGenerationService","generatePassword","generatePassphrase","positions","shuffleArray","allCharSet","lowercaseCharSet","uppercaseCharSet","numberCharSet","specialCharSet","positionChars","randomCharIndex","randomNumber","listLength","wordList","wordIndex","appendRandomNumberToRandomWord","getOptions","getPasswordGenerationOptions","setPasswordGenerationOptions","enforcePasswordGeneratorPoliciesOnOptions","getPasswordGeneratorPolicyOptions","evaluator","withPolicy","sanitized","PasswordGenerator","useUpper","useLower","minNumbers","saveOptions","getHistory","getDecryptedPasswordGenerationHistory","getEncryptedPasswordGenerationHistory","decryptHistory","setDecryptedPasswordGenerationHistory","addHistory","currentHistory","matchesPrevious","unshift","pop","newHistory","encryptHistory","setEncryptedPasswordGenerationHistory","normalizeOptions","evaluatedOptions","santizedOptions","num","history","j","AnonAddyForwarder","generate","anonaddy","redirect","website","statusText","DuckDuckGoForwarder","FastmailForwarder","accountId","getAccountId","using","methodCalls","forDomain","emailPrefix","fastmail","methodResponses","created","notCreated","primaryAccounts","FirefoxRelayForwarder","generated_for","full_address","ForwarderOptions","FastmailForwarderOptions","AnonAddyForwarderOptions","forwardemail","ForwardEmailForwarderOptions","simplelogin","SimpleLoginForwarderOptions","SimpleLoginForwarder","Authentication","note","alias","ForwardEmailForwarder","labels","wordCapitalize","wordIncludeNumber","subaddressType","catchallType","forwardedService","forwardedAnonAddyDomain","forwardedAnonAddyBaseUrl","forwardedForwardEmailDomain","forwardedSimpleLoginBaseUrl","UsernameGenerationService","generateUsername","generateCatchall","generateSubaddress","generateForwarded","generateWord","word","zeroPad","subaddressEmail","atIndex","emailBeginning","emailEnding","subaddressString","randomString","catchallDomain","startString","forwarder","forwarderOptions","forwardedSimpleLoginApiKey","forwardedAnonAddyApiToken","forwardedFirefoxApiToken","forwardedFastmailApiToken","forwardedDuckDuckGoToken","forwardedForwardEmailApiToken","getUsernameGenerationOptions","setUsernameGenerationOptions","charSet","width","SendType","PasswordStrengthService","emailInput","userInputs","globalUserInputs","emailToUserInputs","finalUserInputs","atPosition","SendFileData","SendTextData","SendData","File","SendRequest","fileLength","SendAccessResponse","creatorIdentifier","SendFileDownloadDataResponse","SendFileUploadDataResponse","sendResponse","SendApiService","fileUploadService","sendService","getSend","postSendAccess","getSendFileDownloadData","getSends","postSend","postFileTypeSend","renewSendFileUploadUrl","sendId","fileId","postSendFile","postSendFileLegacy","putSend","putSendRemovePassword","deleteSend","sendData","removePassword","uploadDataResponse","generateMethods","legacyServerSendFileUpload","generatePostDirectCallback","generateRenewFileUploadUrlCallback","generateRollbackCallback","renewResponse","getFlags","envFlags","flagEnabled","flag","flags","sequentialize","caches","getCache","argsCacheKey","SortedCiphersCache","comparator","sortedCiphersByUrl","timeouts","isCached","addCiphers","Ciphers","resetTimer","getLastUsed","getLastLaunched","getNext","updateLastUsedIndex","lastUsedIndex","usedCiphers","lastLaunched","y","getNextIndex","CipherBulkDeleteRequest","CipherBulkMoveRequest","CipherBulkRestoreRequest","AttachmentRequest","CipherRequest","lastKnownRevisionDate","keyApi","attachments2","attachmentRequest","CipherWithIdRequest","CipherBulkShareRequest","CipherBulkUpdateCollectionsRequest","cipherIds","removeCollections","CipherCollectionsRequest","CipherCreateRequest","CipherPartialRequest","CipherShareRequest","CIPHER_KEY_ENC_MIN_SERVER_VER","SemVer","CipherService","domainSettingsService","searchService","cipherFileUploadService","configService","sortedCiphersCache","sortCiphersByLastUsed","getDecryptedCipherCache","getDecryptedCiphers","setDecryptedCipherCache","setDecryptedCiphers","clearDecryptedCiphersState","keyForEncryption","keyForCipherKeyDecryption","originalCipher","updateModelfromExistingCipher","adjustPasswordHistoryLength","getCipherKeyEncryptionEnabled","userOrOrgKey","getKeyForCipherKeyDecryption","encryptCipherWithCipherKey","encryptCipher","encryptAttachments","attachmentsModel","encAttachments","encryptObjProperty","encryptFields","fieldsModel","encFields","encField","encryptField","fieldModel","encryptPasswordHistories","phModels","encPhs","encPh","encryptPasswordHistory","phModel","getEncryptedCiphers","getLocalData","getAllDecrypted","reindexCiphers","orgKeys","getOrgKeys","grouped","agg","decCiphers","groupedCiphers","getLocaleSortingFunction","getAllDecryptedForGrouping","groupingId","folder","getAllDecryptedForUrl","includeOtherTypes","defaultMatch","cipherIsLogin","getAllFromApiForOrganization","decryptOrganizationCiphersResponse","getManyFromApiForOrganization","cr","getLastUsedForUrl","getCipherForUrl","getLastLaunchedForUrl","getNextCipherForUrl","updateLastUsedIndexForUrl","updateLastUsedDate","ciphersLocalData","setLocalData","decryptedCipherCache","cached","updateLastLaunchedDate","saveNeverDomain","createWithServer","orgAdmin","updateWithServer","isNotClone","shareWithServer","attachmentPromises","shareAttachmentWithServer","encCipher","encryptSharedCipher","shareManyWithServer","encCiphers","saveAttachmentWithServer","unencryptedFile","admin","reader","FileReader","readAsArrayBuffer","onload","evt","cData","saveAttachmentRawWithServer","onerror","filename","cipherKeyEncryptionEnabled","cipherEncKey","encFileName","dataEncKey","makeDataEncKey","encData","saveCollectionsWithServer","bulkUpdateCollectionsWithServer","cid","setEncryptedCiphers","clearEncryptedCiphersState","moveManyWithServer","deleteWithServer","asAdmin","deleteManyWithServer","deleteAttachment","deleteAttachmentWithServer","aLastUsed","bLastUsed","bothNotNull","sortCiphersByLastUsedThenName","aName","bName","softDelete","setDeletedDate","softDeleteWithServer","softDeleteManyWithServer","restore","clearDeletedDate","restoreWithServer","restoreManyWithServer","restores","existingCipher","existingHiddenFields","Hidden","hiddenFields","ef","matchedField","attachmentView","attachmentResponse","encBuf","decBuf","decryptFromBytes","theObj","modelProp","encryptCipherData","uriHash","viewKey","domainKey","origin","getAutofillOnPageLoadDefault","lastUsed","autofillOnPageLoadDefault","clearSortedCiphers","keyForCipherKeyEncryption","decryptedCipherKey","makeCipherKey","checkServerMeetsVersionRequirement$","CollectionData","CollectionView","Collection","canEditItems","org","v1FlexibleCollections","canEdit","canDelete","TreeNode","node","parent","children","ServiceUtils","nodeTree","partIndex","delimiter","partName","nestedTraverse","newPartName","getTreeNodeObject","getTreeNodeObjectFromList","ENCRYPTED_COLLECTION_DATA_KEY","jsonData","DECRYPTED_COLLECTION_DATA_KEY","collection","collectionService","decryptMany","CollectionService","decryptedCollectionViews$","decryptedCollections$","encryptedCollectionDataState","encryptedCollections$","decryptedCollectionDataState","clearActiveUserCache","forceValue","decCollections","getSortFunction","cs","getAllNested","nodes","collectionCopy","getNested","toUpdate","Fido2AlgorithmIdentifier","Fido2AuthenticatorErrorCode","Fido2AuthenticatorError","errorCode","POW_2_32","POW_2_53","TaggedValue","tag","CBOR","decode","tagger","simpleValue","dataView","DataView","ta","offset","tagValueFunction","simpleValFunction","commitRead","readArrayBuffer","readUint8","readUint16","getUint16","readUint32","getUint32","readBreak","readLength","additionalInformation","readIndefiniteStringLength","majorType","initialByte","appendUtf16Data","utf16data","ret","decodeItem","tempArrayBuffer","tempDataView","exponent","fraction","setUint32","getFloat32","readFloat16","getFloat64","elements","fullArrayLength","fullArray","fullArrayOffset","string","retArray","retObject","encode","lastLength","byteView","prepareWrite","newByteLength","requiredLength","oldDataView","uint32count","commitWrite","writeUint8","setUint8","writeUint8Array","writeUint16","setUint16","writeUint32","writeUint64","low","high","writeTypeAndLength","encodeItem","is","setFloat64","writeFloat64","utf8data","charCode","converted","isView","SharedArrayBuffer","mod","writeVarUint","retView","getUint8","getParamSize","keySize","paramBytesForAlg","ES256","ES384","ES512","MAX_OCTET","ENCODED_TAG_SEQ","TAG_SEQ","ENCODED_TAG_INT","TAG_INT","countPadding","padding","needs0x00","p1363ToDer","paramBytes","getParamBytesForAlg","signatureBytes","TypeError","rPadding","rNeeds0x00","sPadding","sNeeds0x00","rActualLength","sActualLength","rLength","sLength","rsBytes","shortLength","dst","subarray","Fido2Utils","bufferSource","bufferSourceToUint8Array","isArrayBuffer","byteToHex","guidToRawFormat","guid","isValidGuid","guidToStandardFormat","AAGUID","KeyUsages","userInterface","makeCredential","tab","abortController","userInterfaceSession","newSession","fallbackSupported","credTypesAndPubKeyAlgs","requestedAlgorithms","NotSupported","requireResidentKey","Unknown","requireUserVerification","ensureUnlockedVault","existingCipherIds","findExcludedCredentials","excludeCredentialDescriptorList","informExcludedCredential","NotAllowed","fido2Credential","pubKeyDer","userVerified","confirmNewCredential","credentialName","rpEntity","userEntity","displayName","userVerification","namedCurve","createKeyPair","pkcs8Key","bufferToString","createKeyView","reencrypted","authData","generateAuthData","userPresence","fmt","attStmt","publicKeyAlgorithm","close","getAssertion","cipherOptions","allowCredentialDescriptorList","findCredentialsById","findCredentialsByRp","informCredentialNotFound","pickCredential","selectedCipherId","selectedCipher","selectedFido2Credential","selectedCredentialId","sigBase","clientDataHash","generateSignature","getPrivateKeyFromFido2Credential","selectedCredential","stringToBuffer","keyBuffer","rpIdHash","extensionData","attestationData","backupEligibility","backupState","authDataFlags","attestedCredentialData","credentialIdLength","publicKeyJwk","keyX","keyY","coseBytes","UserRequestedFallbackAbortReason","FallbackRequestedError","fallbackRequested","isValidRpId","parsedOrigin","parsedRpId","subdomain","endsWith","authenticator","vaultSettingsService","isFido2FeatureEnabled","userEnabledPasskeys","enablePasskeys$","isUserLoggedIn","isExcludedDomain","serverConfig$","isOriginEqualBitwardenVault","createCredential","AbortController","sameOriginWithAncestors","DOMException","kp","collectedClientData","crossOrigin","clientDataJSONBytes","makeCredentialParams","transports","residentKey","enterpriseAttestationPossible","mapToMakeCredentialParams","signal","aborted","setAbortTimeout","makeCredentialResult","credProps","reason","InvalidState","rk","assertCredential","getAssertionParams","allowedCredentialIds","mapToGetAssertionParams","getAssertionResult","TIMEOUTS","NO_VERIFICATION","DEFAULT","MIN","MAX","WITH_VERIFICATION","clampedTimeout","abort","CipherFileUploadService","adminRequest","legacyServerAttachmentFileUpload","FolderData","FolderRequest","FolderApiService","folderService","postFolder","putFolder","deleteFolder","FolderView","Folder","FOLDER_ENCRYPTED_FOLDERS","FOLDER_DECRYPTED_FOLDERS","decryptFolders","FolderService","encryptedFoldersState","decryptedFoldersState","folders$","folderData","folderViews$","getAllFromState","getAllDecryptedFromState","updates","cId","decryptFolderPromises","decryptedFolders","noneFolder","SyncNotifierService","_sync","sync$","ProviderData","SyncService","providerService","folderApiService","sendApiService","avatarService","syncInProgress","getLastSync","setLastSync","forceSync","allowThrowOnError","syncStarted","syncCompleted","needsSync","needsSyncing","syncProfile","syncFolders","syncCollections","syncCiphers","syncSends","syncSettings","syncPolicies","isEdit","localFolder","remoteFolder","localCipher","checkCollections","remoteCipher","localSend","remoteSend","successfully","stamp","getSecurityStamp","setProviderKeys","setOrgKeys","setSecurityStamp","setEmailVerified","setForceSetPasswordReasonIfNeeded","syncProfileOrganizations","profileResponse","TdeUserWithoutPasswordHasPasswordResetPermission","eqDomains","B32Chars","SteamChars","TotpService","getCode","period","digits","keyB32","isOtpAuth","isSteamAuth","getQueryParams","digitParams","periodParam","algParam","epoch","timeHex","leftPad","decToHex","timeBytes","fromHexToArray","keyBytes","b32ToBytes","fullCode","trunc","pow","getTimeInterval","b32ToHex","cleanedInput","bits","hex","byteIndex","chunk","SHOW_CARDS_CURRENT_TAB","SHOW_IDENTITIES_CURRENT_TAB","VaultSettingsService","enablePasskeysState","showCardsCurrentTabState","showCardsCurrentTab$","showIdentitiesCurrentTabState","showIdentitiesCurrentTab$","setShowCardsCurrentTab","setShowIdentitiesCurrentTab","setEnablePasskeys","ImportApiService","postImportCiphers","postImportOrganizationCiphers","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","CollectionRequest","CollectionWithIdRequest","FolderWithIdRequest","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","parseXml","validateNoExternalEntities","doc","DOMParser","parseFromString","querySelector","parseCsv","header","parseOptions","splitNewLine","errors","row","parseSingleRowCsv","rowData","parsedRow","makeUriArray","fixUri","returnArr","nameFromUrl","getValueOrDefault","setCardExpiration","expiryRegex","expiryMatch","moveFoldersToCollections","querySelectorDirectChild","parentEl","els","querySelectorAllDirectChild","querySelectorAll","el","parentNode","initLoginCipher","cleanupCipher","processKvp","processFolder","folderName","addRelationship","folderIndex","addFolder","convertToNoteIfNeeded","Generic","processFullName","nameParts","AscendoCsvImporter","fieldLower","AvastCsvImporter","AvastJsonImporter","logins","custName","pwd","loginName","label","cards","holderName","cardNumber","cvv","getCardBrandByPatterns","AviraCsvImporter","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","BitwardenCsvImporter","col","addCollection","collectionIndex","delimPosition","login_totp","login_username","login_password","login_uri","CardExport","FieldExport","IdentityExport","Fido2CredentialExport","LoginUriExport","LoginExport","template","toView","toDomain","PasswordHistoryExport","SecureNoteExport","CipherExport","CipherWithIdExport","CollectionExport","CollectionWithIdExport","FolderExport","FolderWithIdExport","BitwardenJsonImporter","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","encKeyValidation","groupingsMap","parseCollections","parseFolders","folderView","collectionView","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","passwordProtected","cannotParseFile","checkPassword","clearTextData","jdoc","makePinKey","BlurCsvImporter","OfficialProps","ButtercupCsvImporter","processingCustomFields","ClipperzHtmlImporter","textarea","textContent","entry","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","TOTP","Website","Account","_mappedCredentialsColumns","_mappedPersonalInfoAsIdentityColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","parsePersonalInformationRecordAsIdentity","rowKeys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","first_name","middle_name","last_name","item_name","dataRow","phone_number","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","secondaryLogin","pseudo","addressName","addressFull","zipcode","bank","owner","nameProperty","EncryptrCsvImporter","Label","Notes","CVV","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","cleanedValue","sensitive","uuid","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","w","nameKey","itemComment","itemCommentKey","colonIndex","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","group","KeePassXCsvImporter","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","monthString","getMonth","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","content","NordPassCsvImporter","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","OnePassword1PifImporter","line","trashed","processStandardItem","processWinOpVaultItem","overview","URLs","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","secureContents","maxSize","designationKey","valueKey","fieldDesignation","street","fieldType","CategoryEnum","LoginFieldTypeEnum","OnePassword1PuxImporter","vaults","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SoftwareLicense","EmailAccount","MedicalRecord","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","sectionTitle","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","guarded","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","func","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","tagName","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","ProtonPassItemState","ProtonPassJsonImporter","TRASHED","loginContent","totpUri","extraField","creditCardContent","verificationNumber","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","handleItemParsing","parentName","folderHasItems","folderHasSubfolders","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","expiryMonth","expMonthNumber","expiryYear","expYearNumber","RoboFormCsvImporter","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","urlField","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","usernameText","passwordText","titleText","linkText","notesText","accountLogin","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","featuredImportOptions","regularImportOptions","ImportService","importApiService","getImportOptions","import","importer","fileContents","selectedImportTarget","importResult","SyntaxError","halfway","last","badData","setImportTarget","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporter","format","getImporterInstance","itemType","importTarget","noCollectionRelationShips","cipherPos","relationships","noFolderRelationShips","isNullOrEmpty","newFolderName","ExportHelper","extension","padNumber","getHours","getMinutes","getSeconds","padCharacter","numString","VaultExportService","individualVaultExportService","organizationVaultExportService","getExport","getPasswordProtectedExport","onlyManagedCollections","getFileName","BaseVaultExportService","buildPasswordExport","clearText","encText","jsonDoc","buildCommonCipher","OrganizationVaultExportService","getEncryptedManagedExport","getOrganizationEncryptedExport","getDecryptedManagedExport","getOrganizationDecryptedExport","exportData","exportPromises","decCol","decCipher","buildCsvExport","buildJsonExport","BuildEncryptedExport","allDecCiphers","dC","allCiphers","encCollections","eC","collectionsMap","exportCiphers","IndividualVaultExportService","getEncryptedExport","getDecryptedExport","decFolders","SafariApp","command","resolveNow","isSafariApi","messageId","MAX_SAFE_INTEGER","browser","runtime","sendNativeMessage","responseData","BrowserClipboardService","isClipboardApiSupported","clipboard","writeText","consoleLogService","useLegacyCopyMethod","useLegacyReadMethod","readText","isLegacyClipboardMethodSupported","textareaElement","document","createElement","style","position","appendChild","select","execCommand","removeChild","focus","queryCommandSupported","BrowserPlatformUtilsService","clipboardWriteCallback","biometricCallback","deviceCache","isFirefox","FirefoxExtension","isOpera","OperaExtension","isEdge","EdgeExtension","isVivaldi","VivaldiExtension","isChrome","ChromeExtension","isSafari","SafariExtension","Browser","chrome","opr","addons","safariVersion","isIE","isMacAppStore","isViewOpen","sendMessageWithResponse","lockTimeout","createNewTab","extensionPage","getApplicationVersion","PublicKeyCredential","windowContext","clearMs","handleClipboardWriteCallback","sendMessageToApp","isManifestVersion","triggerOffscreenCopyToClipboard","copy","triggerOffscreenReadFromClipboard","read","supportsBiometric","platformInfo","getPlatformInfo","os","authenticateBiometric","getAutofillKeyboardShortcut","autofillCommand","commands","shortcut","createOffscreenDocument","offscreen","Reason","CLIPBOARD","closeOffscreenDocument","manifestVersion","getManifest","manifest_version","expectedVersion","windowId","getWindowById","getCurrentWindow","windows","getCurrent","populate","updateWindowProperties","focused","tabsQueryFirst","active","WINDOW_ID_CURRENT","tabId","tabs","currentWindow","tabsQuery","tabSendMessage","sendMessage","lastError","responseCallback","incognito","onCreated","addListener","getBackgroundPage","fetchProperties","getViews","getExtensionViews","onMessage","Observable","subscriber","handler","removeListener","onChanged","isBackgroundPage","trackedChromeEventListeners","setupUnloadListeners","_event","eventListener","onpagehide","arg","highlighted","isWebExtensionsApi","isFirefoxOnAndroid","finally","i18n","getUILanguage","reload","exemptCurrentHref","views","currentHref","href","application","connectNative","isChromeApi","permission","contains","browserAction","sidebarAction","captureVisibleTab","scriptingApiDetails","scripting","executeScript","allFrames","frameIds","frameId","files","injectImmediately","runAt","world","checkOverrideStatus","levelOfControl","autofillAddressOverridden","privacy","services","autofillAddressEnabled","autofillCreditCardOverridden","autofillCreditCardEnabled","passwordSavingOverridden","passwordSavingEnabled","reasons","justification","createDocument","closeDocument","ContextMenusBackground","contextMenuClickedHandler","contextMenus","onClicked","messageListener","sender","cipherAction","commandToRetry","contextMenuOnClickData","tabSendMessageData","urlContainsSearchParams","popoutKey","scrollingContainer","getElementsByTagName","scrollTop","scrollYAmount","delay","containerSelector","container","backgroundInitializationRequired","extensionUrlPath","senderWindowId","singleActionKey","forceCloseExistingWindows","windowOptions","defaultPopoutWindowOptions","height","popupWidth","senderWindow","getWindow","popoutWindowOptions","left","top","buildPopoutUrl","isSingleActionPopoutOpen","createWindow","delayClose","extensionUrl","getURL","removeWindow","popoutUrl","parsedUrl","hashRoute","openPopout","pathname","inPopup","closePopup","windowInfo","popoutTabs","shift","searchParam","searchValue","AuthPopoutType","extensionUnlockUrls","openUnlockPopout","senderTab","skipNotification","windowType","VaultPopoutType","viewVaultItem","addEditVaultItem","fido2Popout","openViewVaultItemPopout","promptWindowPath","queryParamToken","formatQueryString","queryString","openVaultItemPasswordRepromptPopout","openAddEditVaultItemPopout","cipherType","addEditCipherUrl","NotificationQueueMessageType","NotificationBackground","autofillService","userNotificationSettingsService","themeStateService","notificationQueue","extensionMessageHandlers","unlockCompleted","handleUnlockCompleted","bgGetFolderData","getFolderData","bgCloseNotificationBar","handleCloseNotificationBarMessage","bgAdjustNotificationBar","handleAdjustNotificationBarMessage","bgAddLogin","addLogin","bgChangedPassword","changedPassword","bgRemoveTabFromNotificationQueue","removeTabFromNotificationQueue","bgSaveCipher","handleSaveCipherMessage","bgNeverSave","saveNever","collectPageDetailsResponse","handleCollectPageDetailsResponseMessage","bgUnlockPopoutOpened","unlockVault","checkNotificationQueue","bgReopenUnlockPopout","bgGetEnableChangedPasswordPrompt","getEnableChangedPasswordPrompt","bgGetEnableAddedLoginPrompt","getEnableAddedLoginPrompt","bgGetExcludedDomains","getExcludedDomains","getWebVaultUrlForNotification","getWebVaultUrl","handleExtensionMessage","messageResponse","setupExtensionMessageListener","cleanupNotificationQueue","doNotificationQueueCheck","currentTab","getTabFromCurrentWindow","expires","tabDomain","queueMessage","sendNotificationQueueMessage","notificationQueueMessage","notificationType","typeData","isVaultLocked","wasVaultLocked","removeIndividualVault","importType","authStatus","loginInfo","normalizedUsername","loginDomain","addLoginIsEnabled","pushAddLoginToQueue","usernameMatches","pushChangePasswordToQueue","changeData","currentPassword","passwordMatches","forms","getFormsWithPasswordFields","pushUnlockVaultToQueue","requestFilelessImport","pushRequestFilelessImportToQueue","saveOrUpdateCredentials","cipherView","getDecryptedCipherById","updatePassword","folderExists","newCipher","convertAddLoginQueueMessageToCipherView","editItem","setAddEditCipherInfo","PersonalOwnership","messageData","retryCommand","retryHandler","uriView","loginView","buildCipherIcon","iconsServerUrl","showFavicon","icon","image","fallbackImage","cardIcons","Visa","Mastercard","Amex","Discover","JCB","Maestro","UnionPay","RuPay","hostnameUri","imageEnabled","AutofillOverlayElement","AutofillOverlayPort","overlayLoginCiphers","pageDetailsForTab","userAuthStatus","openAutofillOverlay","openOverlay","autofillOverlayElementClosed","overlayElementClosed","autofillOverlayAddNewVaultItem","addNewVaultItem","getAutofillOverlayVisibility","getOverlayVisibility","checkAutofillOverlayFocused","checkOverlayFocused","focusAutofillOverlayList","focusOverlayList","updateAutofillOverlayPosition","updateOverlayPosition","updateAutofillOverlayHidden","updateOverlayHidden","updateFocusedFieldData","setFocusedFieldData","storePageDetails","addEditCipherSubmitted","updateOverlayCiphers","deletedCipher","overlayButtonPortMessageHandlers","overlayButtonClicked","port","handleOverlayButtonClicked","closeAutofillOverlay","closeOverlay","forceCloseAutofillOverlay","overlayPageBlurred","checkOverlayListFocused","redirectOverlayFocusOut","overlayListPortMessageHandlers","checkAutofillOverlayButtonFocused","checkOverlayButtonFocused","fillSelectedListItem","fillSelectedOverlayListItem","getNewVaultItemDetails","viewSelectedCipher","handlePortOnConnect","isOverlayListPort","isOverlayButtonPort","overlayListPort","overlayButtonPort","handleOverlayElementPortMessage","styleSheetUrl","translations","getTranslations","getOverlayCipherData","overlayElement","removePageDetails","setupExtensionMessageListeners","getIconsUrl","getTabFromCurrentWindowId","ciphersViews","isOverlayCiphersPopulated","overlayCiphersArray","overlayCipherData","loginCipherIcon","overlayCipherId","pageDetails","pageDetailsMap","isPasswordRepromptRequired","totpCode","doAutoFill","fillNewPassword","allowTotpAutofill","forceCloseOverlay","disconnect","styles","getOverlayListPosition","getOverlayButtonPosition","focusedFieldData","focusedFieldRects","paddingRight","paddingLeft","focusedFieldStyles","elementOffset","elementHeight","elementTopPosition","elementLeftPosition","fieldPaddingRight","display","portMessage","isFocusingFieldElement","isOpeningFullOverlay","formerAuthStatus","updateOverlayButtonAuthStatus","retryMessage","overlayPageTranslations","opensInANewWindow","translate","buttonPageTitle","toggleBitwardenVaultOverlay","listPageTitle","unlockYourAccount","unlockAccount","fillCredentialsFor","partialUsername","noItemsToShow","newItem","onConnect","TabsBackground","main","notificationBackground","overlayBackground","handleWindowOnFocusChanged","focusedWindowId","updateCurrentTabData","handleTabOnActivated","handleTabOnReplaced","onReplacedRan","handleTabOnUpdated","changeInfo","onUpdatedRan","refreshBadge","refreshMenu","handleTabOnRemoved","setupTabEventListeners","onFocusChanged","onActivated","onReplaced","onUpdated","onRemoved","WebRequestBackground","pendingAuthRequests","webRequest","onAuthRequired","requestId","resolveAuthCredentials","onCompleted","completeAuthRequest","onErrorOccurred","authCredentials","factory","cachedServices","opts","instance","alwaysInitializeNewService","instanceOrPromise","doNotStoreInitializedService","logServiceFactory","logServiceOptions","cryptoFunctionServiceFactory","cryptoFunctionServiceOptions","encryptServiceFactory","encryptServiceOptions","AbstractChromeStorageService","chromeStorageApi","mergeMap","changes","change","keyedObj","BrowserLocalStorageService","local","BrowserMemoryStorageService","session","LocalBackedSessionStorageService","localStorage","sessionStorage","getLocalSession","getSessionEncKey","sessionEncKey","localSession","setLocalSession","sessionJson","setSessionEncKey","setEncryptedLocalSession","setDecryptedLocalSession","jsonSession","encSession","storedKey","input","BackgroundMemoryStorageService","_ports","portName","listenerCallback","onMessageFromForeground","onDisconnect","sendMessageTo","broadcastMessage","originator","keyGenerationServiceFactory","diskStorageServiceFactory","secureStorageServiceFactory","observableMemoryStorageServiceFactory","storageServiceProviderFactory","observableDiskStorageServiceFactory","globalStateProviderFactory","BackgroundPlatformUtilsService","BrowserMessagingService","messagingServiceFactory","platformUtilsServiceFactory","platformUtilsServiceOptions","singleUserStateProviderFactory","stateEventRegistrarServiceFactory","tokenServiceFactory","Region","accountServiceFactory","EnvironmentService","EnvironmentState","ENVIRONMENT_KEY","CLOUD_REGION_KEY","PRODUCTION_REGIONS","US","icons","webVault","scim","EU","DEFAULT_REGION","DEFAULT_REGION_CONFIG","DefaultEnvironmentService","activeAccountId$","globalCloudRegionState","account$","oldUserId","newUserId","buildEnvironment","cloudWebVaultUrl$","getRegionConfig","availableRegions","additionalRegions","ADDITIONAL_REGIONS","setEnvironment","SelfHosted","isEmpty","formatUrl","keyConnector","regionConfig","CloudEnvironment","SelfHostedEnvironment","setCloudRegion","getEnvironment","getEnvironmentState","seedUserEnvironment","UrlEnvironment","getRegion","getUrls","getScimUrl","getSendUrl","isCloud","baseSuffix","BrowserEnvironmentService","hasManagedEnvironment","getManagedEnvironment","settingsHaveChanged","managedEnv","managed","setUrlsToManagedEnvironment","DefaultDerivedState","parentState$","deriveDefinition","memoryStorage","dependencies","forcedValueSubject","derivedState$","concatMap","derivedStateOrPromise","derivedState","storeValue","derived","DefaultDerivedStateProvider","existingDerivedState","newDerivedState","buildDerivedState","BackgroundDerivedState","portSubscriptions","unsubscribe","stateSubscription","originalMessage","BackgroundDerivedStateProvider","stateProviderFactory","activeUserStateProviderFactory","derivedStateProviderFactory","environmentServiceFactory","LogService","SendFileView","SendTextView","maskedText","SendView","urlB64Key","maxAccessCountReached","expired","pendingDelete","cryptoKey","globals","authenticatedAccounts","accountActivity","accountDeserializer","buildAccountMapFromJSON","jsonAccounts","partialKeys","DDG_SHARED_KEY","StateService","stateFactory","migrationRunner","useAccountCache","accountsSubject","activeAccountSubject","hasBeenInited","isRecoveredSession","accountDiskCache","activeAccountUnlocked$","initOptions","runMigrations","setState","createGlobals","initAccountState","updateState","syncAccountFromDisk","storedActiveUser","pushAccounts","activeDiskAccount","getAccountFromDisk","diskAccount","autoKey","getUserKeyAutoUnlock","accountStatus","scaffoldNewAccountStorage","setLastActive","clearDecryptedDataForActiveUser","clean","reconcileOptions","defaultInMemoryOptions","deAuthenticateAccount","currentUser","dynamicallySetActiveUser","removeAccountFromDisk","removeAccountFromMemory","getAddEditCipherInfo","getAccount","raw","saveAccount","getBiometricFingerprintValidated","getGlobals","defaultOnDiskOptions","biometricFingerprintValidated","setBiometricFingerprintValidated","saveGlobals","convertAccountToKeyConnector","getCryptoMasterKey","getMasterKeyEncryptedUserKey","keySuffix","defaultSecureStorageOptions","setUserKeyAutoUnlock","saveSecureStorageKey","getUserKeyBiometric","hasUserKeyBiometric","setUserKeyBiometric","setPinKeyEncryptedUserKey","pinKeyEncryptedUserKeyEphemeral","setPinKeyEncryptedUserKeyEphemeral","getCryptoMasterKeyAuto","setCryptoMasterKeyAuto","getCryptoMasterKeyB64","setCryptoMasterKeyB64","getCryptoMasterKeyBiometric","hasCryptoMasterKeyBiometric","setCryptoMasterKeyBiometric","setDecryptedPinProtected","getDecryptedSends","setDecryptedSends","getDisableGa","disableGa","setDisableGa","getDuckDuckGoSharedKey","setDuckDuckGoSharedKey","defaultOnDiskLocalOptions","existingDeviceKey","trustDeviceChoiceForDecryption","setEmail","getEnableBrowserIntegration","enableBrowserIntegration","setEnableBrowserIntegration","getEnableBrowserIntegrationFingerprint","enableBrowserIntegrationFingerprint","setEnableBrowserIntegrationFingerprint","defaultOnDiskMemoryOptions","getEncryptedCryptoSymmetricKey","setEncryptedPinProtected","getEncryptedSends","setEncryptedSends","getForceSetPasswordReason","forceSetPasswordReason","getInstalledVersion","installedVersion","setInstalledVersion","setKdfConfig","setKdfType","keyHash","setKeyHash","getLastActive","getMinimizeOnCopyToClipboard","minimizeOnCopyToClipboard","setMinimizeOnCopyToClipboard","getOrganizationInvitation","organizationInvitation","setOrganizationInvitation","passwordGenerationOptions","usernameGenerationOptions","getGeneratorOptions","generatorOptions","setGeneratorOptions","setProtectedPin","getRememberedEmail","rememberedEmail","setRememberedEmail","accountVaultTimeoutAction","approveLoginRequests","setApproveLoginRequests","setServerConfig","getServerConfig","getDeepLinkRedirectUrl","deepLinkRedirectUrl","setDeepLinkRedirectUrl","useMemory","getGlobalsFromMemory","useDisk","getGlobalsFromDisk","saveGlobalsToMemory","saveGlobalsToDisk","getAccountFromMemory","getUserIdFromMemory","cachedAccount","htmlStorageLocation","Local","setDiskCache","Both","saveAccountToMemory","saveAccountToDisk","deleteDiskCache","deepClone","scaffoldNewAccountLocalStorage","scaffoldNewAccountSessionStorage","scaffoldNewAccountMemoryStorage","storedAccount","requestedOptions","defaultOptions","Session","getActiveUserIdFromStorage","removeAccountFromLocalStorage","resetAccount","removeAccountFromSessionStorage","removeAccountFromSecureStorage","persistentAccountInformation","newActiveUser","stateUpdater","updatedState","withPrototypeForArrayMembers","memberConstructor","memberConverter","originalResult","isPromise","getOwnPropertyDescriptors","withPrototypeForObjectValues","valuesConstructor","valuesConverter","BrowserComponentState","BrowserGroupingsComponentState","collectionCounts","mapToRecord","folderCounts","typeCounts","favoriteCiphers","noFolderCiphers","recordToMap","BrowserSendComponentState","AccountSettings","groupings","sendType","SyncedItemMetadata","itemBuilder","initializer","initializeAs","keyValuePair","SessionSyncer","subject","metaData","ignoreNUpdates","_buffer","observe","sessionKey","updateFromMemory","listenForUpdates","stream","skip","updateSession","updateMessageCommand","updateFromMessage","serializedValue","unBuiltValue","browserSession","findStorageService","__syncedItemMetadata","__sessionSyncers","buildSyncer","storageSerice","syncer","isMemoryStorageService","sessionSync","buildOptions","BrowserStateService","storageChangeListener","namespace","respond","getBrowserGroupingComponentState","setBrowserGroupingComponentState","getBrowserVaultItemsComponentState","setBrowserVaultItemsComponentState","getBrowserSendComponentState","setBrowserSendComponentState","getBrowserSendTypeComponentState","setBrowserSendTypeComponentState","stateServiceFactory","memoryStorageServiceFactory","stateServiceOptions","migrationRunnerFactory","apiServiceFactory","appIdServiceFactory","apiServiceOptions","BaseEncryptedOrganizationKey","EncryptedOrganizationKey","ProviderEncryptedOrganizationKey","toData","providerKey","getProviderKey","USER_ORGANIZATION_KEYS","fromData","USER_PROVIDER_KEYS","getPrivateKey","USER_PRIVATE_KEY","fromWithUserId","encPrivateKeyString","encPrivateKey","USER_PUBLIC_KEY","USER_KEY","CryptoService","platformUtilService","activeUserKeyState","activeUserEverHadUserKey","everHadUserKey$","activeUserEncryptedPrivateKeyState","activeUserPrivateKeyState","activeUserPrivateKey$","activeUserPublicKeyState","activeUserPublicKey$","activeUserEncryptedOrgKeysState","activeUserOrgKeysState","activeUserOrgKeys$","activeUserEncryptedProviderKeysState","activeUserProviderKeysState","activeUserProviderKeys$","storeAdditionalKeys","getKeyFromStorage","isLegacyUser","validateUserKey","clearAllStoredUserKeys","buildProtectedSymmetricKey","clearUserKey","clearStoredKeys","clearStoredUserKey","clearDeprecatedKeys","Pin","userKeyMasterKey","getOrDeriveMasterKey","clearMasterKey","encryptUserKeyWithMasterKey","decUserKey","newKey","stretchKey","hashPurpose","clearMasterKeyHash","storedPasswordHash","localKeyHash","serverKeyHash","ServerAuthorization","providerOrgs","encOrgKeyData","newSymKey","clearOrgKeys","memoryOnly","encProviderKeys","getProviderKeys","clearProviderKeys","getPublicKey","makeOrgKey","shareKey","getFingerprint","fingerprintMaterial","keyFingerprint","userFingerprint","hashPhrase","clearKeyPair","pinKey","pinProtectedUserKey","decryptMasterKeyWithPin","pinProtectedMasterKey","pinProtectedMasterKeyString","makeSendKey","keyMaterial","clearKeys","privateKeyValue","rval","range","bitsNeeded","log2","bytesNeeded","mask","byteArray","initAccount","shouldStoreKey","storePinKey","encPin","validateKdfConfig","minimumEntropy","entropyPerWord","hashArr","phrase","hashNumber","remainder","divide","encryptionKey","protectedSymKey","stretchedEncryptionKey","migrateAutoKeyIfNeeded","oldAutoKey","masterPasswordOnRestart","oldPinKey","pinProtectedKey","encBuffer","BrowserCryptoService","biometricStateServiceFactory","cryptoServiceFactory","authServiceFactory","organizationServiceFactory","policyServiceFactory","autofillSettingsServiceFactory","domainSettingsServiceFactory","cipherFileUploadServiceFactory","fileUploadServiceFactory","TranslationService","systemLanguage","localesDirectory","getLocalesJson","supportedTranslationLocales","defaultLocale","localeNames","defaultMessages","localeMessages","translationLocale","Intl","Collator","numeric","sensitivity","loadMessages","p1","p2","p3","messagesObj","formattedLocale","locales","placeholders","placeProp","replaceToken","replaceContent","translationLocaleState","userSetLocale$","setLocale","storedLocale","I18nService","getMessage","i18nServiceFactory","i18nServiceOptions","ServerConfig","serverConfigData","getAgeInMilliseconds","isValid","expiresSoon","ONE_HOUR_IN_MILLISECONDS","ConfigService","configApiService","_serverConfig","_forceFetchConfig","refreshTimer$","cloudRegion$","latestServerConfig$","delayWhen","saveConfig","catchError","getFeatureFlag$","getFeatureFlag","triggerServerConfigFetch","minimumRequiredServerVersion","configServiceFactory","configApiServiceFactory","configServiceOptions","cipherServiceFactory","searchServiceFactory","billingAccountProfileStateServiceFactory","MainContextMenuHandler","initRunning","initContextMenuItems","parentId","checkPremiumAccess","noCardsContextMenuItems","noIdentitiesContextMenuItems","noLoginsContextMenuItems","serviceOptions","removeAll","contexts","menuItemId","loadOptions","optionId","sanitizedTitle","sanitizeContextMenuTitle","createChildItem","noAccess","noCards","option","noIdentities","noLogins","NOT_IMPLEMENTED","_args","LISTENED_TO_COMMANDS","CipherContextMenuHandler","mainContextMenuHandler","keyConnectorServiceOptions","mv3Create","serviceCache","cipherContextMenuHandler","activeInfo","getTab","addedTabId","removedTabId","shouldListen","activeTabs","getActiveTabs","ciphersByType","existingCiphersOfType","updateForCipher","userDecryptionOptionsServiceFactory","vaultTimeoutSettingsServiceFactory","userVerificationServiceFactory","userVerificationApiServiceFactory","pinCryptoServiceFactory","eventCollectionServiceFactory","eventUploadServiceFactory","passwordGenerationServiceFactory","totpServiceFactory","AutofillPort","AutofillScript","script","properties","autosubmit","AutoFillConstants","UsernameFieldNames","TotpFieldNames","SearchFieldNames","FieldIgnoreList","PasswordFieldExcludeList","ExcludedAutofillLoginTypes","ExcludedAutofillTypes","ExcludedOverlayTypes","CreditCardAutoFillConstants","CardAttributes","CardAttributesExtended","CardHolderFieldNames","CardHolderFieldNameValues","CardNumberFieldNames","CardNumberFieldNameValues","CardExpiryFieldNames","CardExpiryFieldNameValues","ExpiryMonthFieldNames","ExpiryYearFieldNames","CVVFieldNames","CardBrandFieldNames","MonthAbbr","YearAbbrShort","YearAbbrLong","IdentityAutoFillConstants","IdentityAttributes","FullNameFieldNames","FullNameFieldNameValues","TitleFieldNames","FirstnameFieldNames","MiddlenameFieldNames","LastnameFieldNames","EmailFieldNames","AddressFieldNames","AddressFieldNameValues","Address1FieldNames","Address2FieldNames","Address3FieldNames","PostalCodeFieldNames","CityFieldNames","StateFieldNames","CountryFieldNames","PhoneFieldNames","UserNameFieldNames","CompanyFieldNames","IsoCountries","afghanistan","albania","algeria","andorra","angola","anguilla","antarctica","argentina","armenia","aruba","australia","austria","azerbaijan","bahamas","bahrain","bangladesh","barbados","belarus","belgium","belize","benin","bermuda","bhutan","bolivia","botswana","brazil","bulgaria","burundi","cambodia","cameroon","canada","chad","chile","china","colombia","comoros","congo","croatia","cuba","cyprus","denmark","djibouti","dominica","ecuador","egypt","eritrea","estonia","ethiopia","fiji","finland","france","gabon","gambia","georgia","germany","ghana","gibraltar","greece","greenland","grenada","guadeloupe","guam","guatemala","guernsey","guinea","guyana","haiti","honduras","hungary","iceland","india","indonesia","iraq","ireland","israel","italy","jamaica","japan","jersey","jordan","kazakhstan","kenya","kiribati","kuwait","kyrgyzstan","latvia","lebanon","lesotho","liberia","liechtenstein","lithuania","luxembourg","macao","macedonia","madagascar","malawi","malaysia","maldives","mali","malta","martinique","mauritania","mauritius","mayotte","mexico","moldova","monaco","mongolia","montenegro","montserrat","morocco","mozambique","myanmar","namibia","nauru","nepal","netherlands","nicaragua","niger","nigeria","niue","norway","oman","pakistan","palau","panama","paraguay","peru","philippines","pitcairn","poland","portugal","qatar","reunion","romania","rwanda","samoa","senegal","serbia","seychelles","singapore","slovakia","slovenia","somalia","spain","sudan","suriname","swaziland","sweden","switzerland","taiwan","tajikistan","tanzania","thailand","togo","tokelau","tonga","tunisia","turkey","turkmenistan","tuvalu","uganda","ukraine","uruguay","uzbekistan","vanuatu","venezuela","vietnam","yemen","zambia","zimbabwe","IsoStates","alabama","alaska","arizona","arkansas","california","colorado","connecticut","delaware","florida","hawaii","idaho","illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland","massachusetts","michigan","minnesota","mississippi","missouri","montana","nebraska","nevada","ohio","oklahoma","oregon","pennsylvania","tennessee","texas","utah","vermont","virginia","washington","wisconsin","wyoming","IsoProvinces","alberta","manitoba","ontario","quebec","saskatchewan","AutofillService","totpService","eventCollectionService","userVerificationService","currentlyOpeningPasswordRepromptPopout","autofillScriptPortsSet","handleInjectedScriptPortConnection","handleInjectScriptPortOnDisconnect","loadAutofillScriptsOnInstall","injectAutofillScriptsInAllTabs","reloadAutofillScripts","injectAutofillScripts","triggeringOnPageLoad","injectedScripts","autoFillOnPageLoadIsEnabled","getAutofillOnPageLoad","executeScriptInTab","injectedScript","formData","passwordFields","loadPasswordFields","passwordFieldsWithoutForm","pf","form","formKeys","formCount","soloFormKey","formKey","formPasswordFields","uf","findUsernameField","getShouldAutoCopyTotp","getDefaultUriMatchStrategy","canAccessPremium","didAutofill","pd","fillScript","generateFillScript","skipUsernameOnlyFill","onlyEmptyFields","onlyVisibleFields","tabUrl","untrustedIframe","allowUntrustedIframe","delay_between_operations","skipLastUsed","pageDetailsUrl","shouldAutoCopyTotp","Cipher_ClientAutofilled","doAutoFillOnTab","fromCommand","lastLaunchedCipher","userHasMasterPasswordAndKeyHash","isDebouncingPasswordRepromptPopout","doAutoFillActiveTab","getActiveTab","filledFields","fieldNames","hasValue","opid","viewable","isSearchField","matchingIndex","findMatchingFieldIndex","matchingField","Linked","fillByOpid","generateLoginFillScript","generateCardFillScript","generateIdentityFillScript","usernames","totps","savedUrls","inUntrustedIframe","passField","findTotpField","elementNumber","fieldIsFuzzyMatch","autoCompleteType","totpValue","setFillScriptForFocus","fillFields","isExcludedFieldType","isFieldMatch","makeScriptAction","selectInfo","siOptions","fieldAttrsContain","maxLength","fullMonth","fullYear","partYear","makeScriptActionWithValue","pageUrl","containsVal","doesContain","filledState","stateLower","isoState","filledCountry","countryLower","isoCountry","excludedTypes","matchFieldAttributeValues","htmlName","htmlID","placeholder","attrIndex","attributeKeywords","keywordIndex","searchFieldNamesSet","forCustomFieldsOnly","isExcludedType","containsOptions","checkValueContains","cipherData","dataProp","fieldProp","dataValue","doFill","checkedAttributeValues","valueIsOnExclusionList","checkedAttributeValue","canBeHidden","canBeReadOnly","mustBeEmpty","isPassword","fieldHasDisqualifyingAttributeValue","readonly","testedValues","valueIsLikePassword","isLikePassword","passwordField","withoutForm","usernameField","totpField","names","fieldPropertyIsPrefixMatch","fieldPropertyIsMatch","separator","sepIndex","fieldVal","regexParts","csvParts","csvVals","fuzzyMatch","lastField","lastPasswordField","openPasswordRepromptPopoutDebounce","autofillServiceFactory","clearClipboardAlarmName","ClearClipboard","sendTabsMessage","alarmKeys","alarmState","setAlarmTimeInternal","commandName","GeneratePasswordToClipboardCommand","passwordGenerationService","getClearClipboard","generatePasswordToClipboard","delay_ms","clearAlarmTime","setAlarmTime","AutofillTabCommand","doAutofillTabCommand","collectPageDetails","doAutofillTabWithCipherCommand","ContextMenuClickedHandler","autofillAction","autofillSettingsServiceOptions","generatePasswordToClipboardCommand","getIdentifier","isCreateCipherAction","additionalCiphersToGet","parentMenuItemId","getCipherCreationType","Cipher_ClientCopiedPassword","UpdateBadge","existingServices","listenedToCommands","badgeAction","getBrowserAction","getSidebarAction","initServices","setBadgeBackgroundColor","setLoggedOut","setLocked","setUnlocked","setBadgeIcon","clearBadgeText","setBadgeText","badgeSettingsService","countText","isOperaSidebar","setActionText","setSideBarText","iconSuffix","setActionIcon","setSidebarActionIcon","setTitle","setIcon","useSyncApiCalls","lastFocusedWindow","existingServiceCache","badgeSettingsServiceFactory","BrowserConfigService","BrowserMessagingPrivateModeBackgroundService","bitwardenPopupMainMessageListener","SendFile","SendText","Send","SendWithIdRequest","SendService","sendKeySalt","sendKeyPurpose","_sends","_sendViews","sends$","sendViews$","unlocked","updateObservables","fileData","passwordKey","encryptFileData","parseFile","oldSends","newSends","oldSend","newSend","decSends","getRotatedKeys","sendKey","sendsMap","decryptSends","decryptSendPromises","decryptedSends","BrowserSendService","stateEventRunnerService","lockedCallback","loggedOutCallback","migrateKeyForNeverLockIfNeeded","startCheck","checkVaultTimeout","shouldLock","executeTimeoutAction","currentUserId","lastActive","vaultTimeoutSeconds","FeatureFlag","VaultTimeoutService","checkSafari","FilelessImporterInjectedScriptsConfig","LpSuppressImportDownload","mv2","mv3","FilelessImportType","FilelessImportPort","FilelessImporterBackground","importService","importNotificationsPortMessageHandlers","startFilelessImport","cancelFilelessImport","lpImporterPortMessageHandlers","displayLpImportNotification","displayFilelessImportNotification","startLpImport","triggerLpImport","filelessImporterPortNames","filelessImportFeatureFlagEnabled","BrowserFilelessImport","filelessImportEnabled","handleImporterPortMessage","handleImporterPortDisconnect","lpImporterPort","injectScriptConfig","importNotificationsPort","setupPortMessageListeners","triggerLpImporterCsvDownload","injectionConfig","importErrorMessage","SessionClosedError","BrowserFido2UserInterfaceService","BrowserFido2UserInterfaceSession","sessionId","closed","messages$","messageListener$","connected$","destroy$","windowClosed$","fromEventPattern","receive","connect","closeSingleActionPopout","closeFido2Popout","complete","fallback","EmptyError","connectPromise","popoutId","openFido2Popout","Fido2Service","injectFido2ContentScripts","VaultFilter","selectedCollection","selectedFolder","myVaultOnly","refreshCollectionsAndFolders","resetFilter","selectedCollectionId","selectedFolderId","resetOrganization","selectedOrganizationId","buildFilter","cipherPassesFilter","DynamicTreeNode","hasId","fullList","collapsedGroupingsState","collapsedGroupings$","storeCollapsedFilterNodes","collapsedFilterNodes","buildCollapsedFilterNodes","buildOrganizations","buildNestedFolders","transformation","storedFolders","orgCiphers","oc","nestedFolders","getAllFoldersNested","nestedList","buildCollections","storedCollections","nestedCollections","checkForSingleOrganizationPolicy","SingleOrg","checkForPersonalOwnershipPolicy","folderCopy","getFolderNested","VaultFilterService","vaultFilter","allVaults","myVault","setVaultFilter","getVaultFilter","filterCipherForSelectedVault","CommandsBackground","vaultTimeoutService","processCommand","onCommand","autoFillLogin","openPopup","collectPageDetailsForContentScript","IdleBackground","notificationsService","idleTimer","idleState","idle","idleHandler","onStateChanged","setDetectionInterval","pollIdle","allUsers","queryState","NativeMessagingBackground","runtimeBackground","resolver","secureSetupResolve","onAdded","reloadExtension","connecting","connectedCallback","sharedSecret","validatingFingerprint","acceptButtonText","cancelButtonText","showFingerprintDialog","showWrongUserDialog","timestamp","encryptMessage","secureCommunication","getResponse","rawMessage","abs","userKeyB64","processMessage","sendUnencrypted","fingerprint","AbortManager","abortControllers","runWithAbortController","runner","RuntimeBackground","systemService","fido2Service","pageDetailsToAutoFill","onInstalledReason","lockedVaultPendingNotifications","abortManager","onInstalled","checkOnInstalled","backgroundMessageListener","popupOnlyContext","bitwardenBackgroundMessageListener","sendBwInstalledMessageToVault","closeUnlockPopout","focusWindow","focusTab","reseedStorage","autofillTimeout","autofillPage","vaultUrl","referrer","lastpass","resultData","authResultUrl","openSsoAuthResultPopout","twoFactorAuthData","twoFactorUrl","openTwoFactorAuthPopout","abortedRequestId","fido2ClientService","tabToAutoFill","loginToAutoFill","urlObj","MainBackground","isPrivateMode","memoryStorageForStateProviders","syncNotifierService","policyApiService","that","backgroundMessagingService","devicesService","ssoLoginService","vaultFilterService","containerService","auditService","exportService","fido2UserInterfaceService","fido2AuthenticatorService","forceWindowReload","nativeMessagingBackground","commandsBackground","filelessImporterBackground","tabsBackground","_tab","contextMenusBackground","idleBackground","webRequestBackground","usernameGenerationService","bootstrap","getPrivateModeWindows","onWindowCreated","forLocked","needStorageReseed","needsStorageReseed","responsePromise","override","syncInternal","lastSyncAgo","scheduleNextSync","syncTimeout","onAlarmListener","alarm","executionTime","alarmTime","getAlarmTime","combine","listeners","startingServices","listener","onCommandListener","doAutoFillLogin","doGeneratePasswordToClipboard","windowsOnFocusChangedListener","tabsOnActivatedListener","tabsOnReplacedListener","tabsOnUpdatedListener","contextMenusClickedListener","onClickedListener","runtimeMessageListener","OnInstalledReason","INSTALL","alarms","onAlarm","numberOfAlarms","calculatedWhen","periodInMinutes","when","alarmsToBeCreated","bitwardenMain","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","loaded","__webpack_modules__","O","chunkIds","fn","notFulfilled","Infinity","fulfilled","getPrototypeOf","__esModule","ns","def","getOwnPropertyNames","defineProperty","enumerable","chunkId","globalThis","Function","toStringTag","nmd","paths","scriptUrl","importScripts","currentScript","src","scripts","baseURI","installedChunks","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}